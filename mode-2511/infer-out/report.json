[{"bug_type":"NULL_DEREFERENCE","qualifier":"object returned by `access.getProperty(org.modeshape.jcr.query.plan.PlanNode$Property.ACCESS_NO_RESULTS,java.lang.Boolean)` could be null and is dereferenced at line 40.","severity":"ERROR","line":40,"column":-1,"procedure":"org.modeshape.jcr.query.optimize.RemoveEmptyAccessNodes.execute(org.modeshape.jcr.query.QueryContext,org.modeshape.jcr.query.plan.PlanNode,java.util.LinkedList):org.modeshape.jcr.query.plan.PlanNode","procedure_start_line":35,"file":"src/main/java/org/modeshape/jcr/query/optimize/RemoveEmptyAccessNodes.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RemoveEmptyAccessNodes.java","line_number":35,"column_number":-1,"description":"start of procedure execute(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RemoveEmptyAccessNodes.java","line_number":39,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1350,"column_number":-1,"description":"start of procedure findAllAtOrBelow(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1374,"column_number":-1,"description":"start of procedure findAllAtOrBelow(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1413,"column_number":-1,"description":"Definition of findAllAtOrBelow(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1374,"column_number":-1,"description":"return from a call to List PlanNode.findAllAtOrBelow(Set)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1350,"column_number":-1,"description":"return from a call to List PlanNode.findAllAtOrBelow(PlanNode$Type)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RemoveEmptyAccessNodes.java","line_number":39,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RemoveEmptyAccessNodes.java","line_number":40,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":730,"column_number":-1,"description":"start of procedure getProperty(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":732,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":732,"column_number":-1,"description":"return from a call to Object PlanNode.getProperty(PlanNode$Property,Class)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RemoveEmptyAccessNodes.java","line_number":40,"column_number":-1,"description":""}],"key":"RemoveEmptyAccessNodes.java|execute|NULL_DEREFERENCE","node_key":"4f9ab52f872337391c8c4b4b93e5d86f","hash":"cdaf60d113ef16a36eb102035151fbb4","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `left` last assigned on line 41 could be null and is dereferenced by call to `raiseVariableName(...)` at line 42.","severity":"ERROR","line":42,"column":-1,"procedure":"org.modeshape.jcr.query.optimize.RaiseVariableName.execute(org.modeshape.jcr.query.QueryContext,org.modeshape.jcr.query.plan.PlanNode,java.util.LinkedList):org.modeshape.jcr.query.plan.PlanNode","procedure_start_line":36,"file":"src/main/java/org/modeshape/jcr/query/optimize/RaiseVariableName.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RaiseVariableName.java","line_number":36,"column_number":-1,"description":"start of procedure execute(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RaiseVariableName.java","line_number":39,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1387,"column_number":-1,"description":"start of procedure findAllAtOrBelow(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1413,"column_number":-1,"description":"Definition of findAllAtOrBelow(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1387,"column_number":-1,"description":"return from a call to List PlanNode.findAllAtOrBelow(PlanNode$Traversal,PlanNode$Type)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RaiseVariableName.java","line_number":39,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RaiseVariableName.java","line_number":41,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":578,"column_number":-1,"description":"start of procedure getFirstChild()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":579,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":579,"column_number":-1,"description":"return from a call to PlanNode PlanNode.getFirstChild()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RaiseVariableName.java","line_number":42,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RaiseVariableName.java","line_number":51,"column_number":-1,"description":"start of procedure raiseVariableName(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RaiseVariableName.java","line_number":52,"column_number":-1,"description":""}],"key":"RaiseVariableName.java|execute|NULL_DEREFERENCE","node_key":"54cc168433989e7cd614e0e0dd6b931a","hash":"26c227745e30f444e520beea1003388b","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `right` last assigned on line 45 could be null and is dereferenced by call to `raiseVariableName(...)` at line 46.","severity":"ERROR","line":46,"column":-1,"procedure":"org.modeshape.jcr.query.optimize.RaiseVariableName.execute(org.modeshape.jcr.query.QueryContext,org.modeshape.jcr.query.plan.PlanNode,java.util.LinkedList):org.modeshape.jcr.query.plan.PlanNode","procedure_start_line":36,"file":"src/main/java/org/modeshape/jcr/query/optimize/RaiseVariableName.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RaiseVariableName.java","line_number":36,"column_number":-1,"description":"start of procedure execute(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RaiseVariableName.java","line_number":39,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1387,"column_number":-1,"description":"start of procedure findAllAtOrBelow(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1413,"column_number":-1,"description":"Definition of findAllAtOrBelow(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1387,"column_number":-1,"description":"return from a call to List PlanNode.findAllAtOrBelow(PlanNode$Traversal,PlanNode$Type)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RaiseVariableName.java","line_number":39,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RaiseVariableName.java","line_number":41,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":578,"column_number":-1,"description":"start of procedure getFirstChild()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":579,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":579,"column_number":-1,"description":"return from a call to PlanNode PlanNode.getFirstChild()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RaiseVariableName.java","line_number":42,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RaiseVariableName.java","line_number":51,"column_number":-1,"description":"start of procedure raiseVariableName(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RaiseVariableName.java","line_number":52,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":312,"column_number":-1,"description":"start of procedure getType()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":313,"column_number":-1,"description":"return from a call to PlanNode$Type PlanNode.getType()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RaiseVariableName.java","line_number":52,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RaiseVariableName.java","line_number":58,"column_number":-1,"description":"return from a call to void RaiseVariableName.raiseVariableName(PlanNode)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RaiseVariableName.java","line_number":45,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":587,"column_number":-1,"description":"start of procedure getLastChild()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":588,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":588,"column_number":-1,"description":"return from a call to PlanNode PlanNode.getLastChild()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RaiseVariableName.java","line_number":46,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RaiseVariableName.java","line_number":51,"column_number":-1,"description":"start of procedure raiseVariableName(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RaiseVariableName.java","line_number":52,"column_number":-1,"description":""}],"key":"RaiseVariableName.java|execute|NULL_DEREFERENCE","node_key":"54cc168433989e7cd614e0e0dd6b931a","hash":"ef4f4fdd19e2b1564807fbd45872dbb4","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `left` last assigned on line 43 could be null and is dereferenced at line 44.","severity":"ERROR","line":44,"column":-1,"procedure":"org.modeshape.jcr.query.optimize.RightOuterToLeftOuterJoins.execute(org.modeshape.jcr.query.QueryContext,org.modeshape.jcr.query.plan.PlanNode,java.util.LinkedList):org.modeshape.jcr.query.plan.PlanNode","procedure_start_line":36,"file":"src/main/java/org/modeshape/jcr/query/optimize/RightOuterToLeftOuterJoins.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RightOuterToLeftOuterJoins.java","line_number":36,"column_number":-1,"description":"start of procedure execute(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RightOuterToLeftOuterJoins.java","line_number":40,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1350,"column_number":-1,"description":"start of procedure findAllAtOrBelow(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1374,"column_number":-1,"description":"start of procedure findAllAtOrBelow(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1413,"column_number":-1,"description":"Definition of findAllAtOrBelow(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1374,"column_number":-1,"description":"return from a call to List PlanNode.findAllAtOrBelow(Set)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1350,"column_number":-1,"description":"return from a call to List PlanNode.findAllAtOrBelow(PlanNode$Type)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RightOuterToLeftOuterJoins.java","line_number":40,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RightOuterToLeftOuterJoins.java","line_number":41,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":730,"column_number":-1,"description":"start of procedure getProperty(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":732,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":732,"column_number":-1,"description":"return from a call to Object PlanNode.getProperty(PlanNode$Property,Class)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RightOuterToLeftOuterJoins.java","line_number":41,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RightOuterToLeftOuterJoins.java","line_number":43,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":578,"column_number":-1,"description":"start of procedure getFirstChild()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":579,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":579,"column_number":-1,"description":"return from a call to PlanNode PlanNode.getFirstChild()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RightOuterToLeftOuterJoins.java","line_number":44,"column_number":-1,"description":""}],"key":"RightOuterToLeftOuterJoins.java|execute|NULL_DEREFERENCE","node_key":"2ad2c69f89cd458ad84f96f60007b771","hash":"f1400c1a8e18082a5bea84d38dc48452","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `left` last assigned on line 56 could be null and is dereferenced at line 58.","severity":"ERROR","line":58,"column":-1,"procedure":"org.modeshape.jcr.query.optimize.AddJoinConditionColumnsToSources.execute(org.modeshape.jcr.query.QueryContext,org.modeshape.jcr.query.plan.PlanNode,java.util.LinkedList):org.modeshape.jcr.query.plan.PlanNode","procedure_start_line":37,"file":"src/main/java/org/modeshape/jcr/query/optimize/AddJoinConditionColumnsToSources.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/AddJoinConditionColumnsToSources.java","line_number":37,"column_number":-1,"description":"start of procedure execute(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/AddJoinConditionColumnsToSources.java","line_number":40,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/QueryContext.java","line_number":323,"column_number":-1,"description":"start of procedure getHints()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/QueryContext.java","line_number":324,"column_number":-1,"description":"return from a call to PlanHints QueryContext.getHints()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/AddJoinConditionColumnsToSources.java","line_number":40,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/AddJoinConditionColumnsToSources.java","line_number":43,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1350,"column_number":-1,"description":"start of procedure findAllAtOrBelow(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1374,"column_number":-1,"description":"start of procedure findAllAtOrBelow(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1413,"column_number":-1,"description":"Definition of findAllAtOrBelow(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1374,"column_number":-1,"description":"return from a call to List PlanNode.findAllAtOrBelow(Set)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1350,"column_number":-1,"description":"return from a call to List PlanNode.findAllAtOrBelow(PlanNode$Type)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/AddJoinConditionColumnsToSources.java","line_number":43,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/AddJoinConditionColumnsToSources.java","line_number":44,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":730,"column_number":-1,"description":"start of procedure getProperty(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":732,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":732,"column_number":-1,"description":"return from a call to Object PlanNode.getProperty(PlanNode$Property,Class)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/AddJoinConditionColumnsToSources.java","line_number":44,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/AddJoinConditionColumnsToSources.java","line_number":45,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/AddJoinConditionColumnsToSources.java","line_number":46,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/AddJoinConditionColumnsToSources.java","line_number":47,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/model/EquiJoinCondition.java","line_number":81,"column_number":-1,"description":"start of procedure selector1Name()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/model/EquiJoinCondition.java","line_number":81,"column_number":-1,"description":"return from a call to SelectorName EquiJoinCondition.selector1Name()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/AddJoinConditionColumnsToSources.java","line_number":48,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/model/EquiJoinCondition.java","line_number":81,"column_number":-1,"description":"start of procedure selector1Name()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/model/EquiJoinCondition.java","line_number":81,"column_number":-1,"description":"return from a call to SelectorName EquiJoinCondition.selector1Name()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/AddJoinConditionColumnsToSources.java","line_number":49,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/model/EquiJoinCondition.java","line_number":104,"column_number":-1,"description":"start of procedure getProperty1Name()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/model/EquiJoinCondition.java","line_number":105,"column_number":-1,"description":"return from a call to String EquiJoinCondition.getProperty1Name()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/AddJoinConditionColumnsToSources.java","line_number":48,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/optimize/AddJoinConditionColumnsToSources.java","line_number":124,"column_number":-1,"description":"start of procedure columnFor(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/optimize/AddJoinConditionColumnsToSources.java","line_number":127,"column_number":-1,"description":"Taking true branch"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/model/SelectorName.java","line_number":62,"column_number":-1,"description":"start of procedure getString()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/model/SelectorName.java","line_number":63,"column_number":-1,"description":"return from a call to String SelectorName.getString()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/optimize/AddJoinConditionColumnsToSources.java","line_number":127,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/optimize/AddJoinConditionColumnsToSources.java","line_number":128,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/model/Column.java","line_number":52,"column_number":-1,"description":"start of procedure Column(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/model/Column.java","line_number":54,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/model/Column.java","line_number":55,"column_number":-1,"description":"Skipping isNotNull(...): unknown method"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/model/Column.java","line_number":56,"column_number":-1,"description":"Skipping isNotNull(...): unknown method"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/model/Column.java","line_number":57,"column_number":-1,"description":"Skipping isNotNull(...): unknown method"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/model/Column.java","line_number":58,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/model/Column.java","line_number":59,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/model/Column.java","line_number":60,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/model/Column.java","line_number":61,"column_number":-1,"description":"return from a call to Column.<init>(SelectorName,String,String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/optimize/AddJoinConditionColumnsToSources.java","line_number":128,"column_number":-1,"description":"return from a call to Column AddJoinConditionColumnsToSources.columnFor(SelectorName,String,boolean)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/AddJoinConditionColumnsToSources.java","line_number":51,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/model/EquiJoinCondition.java","line_number":90,"column_number":-1,"description":"start of procedure selector2Name()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/model/EquiJoinCondition.java","line_number":90,"column_number":-1,"description":"return from a call to SelectorName EquiJoinCondition.selector2Name()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/AddJoinConditionColumnsToSources.java","line_number":52,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/model/EquiJoinCondition.java","line_number":109,"column_number":-1,"description":"start of procedure getProperty2Name()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/model/EquiJoinCondition.java","line_number":110,"column_number":-1,"description":"return from a call to String EquiJoinCondition.getProperty2Name()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/AddJoinConditionColumnsToSources.java","line_number":51,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/optimize/AddJoinConditionColumnsToSources.java","line_number":124,"column_number":-1,"description":"start of procedure columnFor(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/optimize/AddJoinConditionColumnsToSources.java","line_number":127,"column_number":-1,"description":"Taking true branch"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/model/SelectorName.java","line_number":62,"column_number":-1,"description":"start of procedure getString()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/model/SelectorName.java","line_number":63,"column_number":-1,"description":"return from a call to String SelectorName.getString()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/optimize/AddJoinConditionColumnsToSources.java","line_number":127,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/optimize/AddJoinConditionColumnsToSources.java","line_number":128,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/model/Column.java","line_number":52,"column_number":-1,"description":"start of procedure Column(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/model/Column.java","line_number":54,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/model/Column.java","line_number":55,"column_number":-1,"description":"Skipping isNotNull(...): unknown method"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/model/Column.java","line_number":56,"column_number":-1,"description":"Skipping isNotNull(...): unknown method"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/model/Column.java","line_number":57,"column_number":-1,"description":"Skipping isNotNull(...): unknown method"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/model/Column.java","line_number":58,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/model/Column.java","line_number":59,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/model/Column.java","line_number":60,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/model/Column.java","line_number":61,"column_number":-1,"description":"return from a call to Column.<init>(SelectorName,String,String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/optimize/AddJoinConditionColumnsToSources.java","line_number":128,"column_number":-1,"description":"return from a call to Column AddJoinConditionColumnsToSources.columnFor(SelectorName,String,boolean)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/AddJoinConditionColumnsToSources.java","line_number":56,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":578,"column_number":-1,"description":"start of procedure getFirstChild()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":579,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":579,"column_number":-1,"description":"return from a call to PlanNode PlanNode.getFirstChild()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/AddJoinConditionColumnsToSources.java","line_number":57,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":587,"column_number":-1,"description":"start of procedure getLastChild()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":588,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":588,"column_number":-1,"description":"return from a call to PlanNode PlanNode.getLastChild()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/AddJoinConditionColumnsToSources.java","line_number":58,"column_number":-1,"description":""}],"key":"AddJoinConditionColumnsToSources.java|execute|NULL_DEREFERENCE","node_key":"3677875e6aead27ee1320f16c80d8b0f","hash":"44211f439ad4374ba80bc0666d98f728","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object returned by `distinct.getFirstChild()` could be null and is dereferenced at line 42.","severity":"ERROR","line":42,"column":-1,"procedure":"org.modeshape.jcr.query.optimize.ReorderSortAndRemoveDuplicates.execute(org.modeshape.jcr.query.QueryContext,org.modeshape.jcr.query.plan.PlanNode,java.util.LinkedList):org.modeshape.jcr.query.plan.PlanNode","procedure_start_line":37,"file":"src/main/java/org/modeshape/jcr/query/optimize/ReorderSortAndRemoveDuplicates.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/ReorderSortAndRemoveDuplicates.java","line_number":37,"column_number":-1,"description":"start of procedure execute(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/ReorderSortAndRemoveDuplicates.java","line_number":40,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1387,"column_number":-1,"description":"start of procedure findAllAtOrBelow(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1413,"column_number":-1,"description":"Definition of findAllAtOrBelow(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1387,"column_number":-1,"description":"return from a call to List PlanNode.findAllAtOrBelow(PlanNode$Traversal,PlanNode$Type)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/ReorderSortAndRemoveDuplicates.java","line_number":40,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/ReorderSortAndRemoveDuplicates.java","line_number":42,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":578,"column_number":-1,"description":"start of procedure getFirstChild()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":579,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":579,"column_number":-1,"description":"return from a call to PlanNode PlanNode.getFirstChild()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/ReorderSortAndRemoveDuplicates.java","line_number":42,"column_number":-1,"description":""}],"key":"ReorderSortAndRemoveDuplicates.java|execute|NULL_DEREFERENCE","node_key":"00c1f65e387d55c612515ace03b6e05b","hash":"18a401e95acf6b316fd3736207bf8b6d","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `child` last assigned on line 54 could be null and is dereferenced at line 55.","severity":"ERROR","line":55,"column":-1,"procedure":"org.modeshape.jcr.query.optimize.PushProjects.execute(org.modeshape.jcr.query.QueryContext,org.modeshape.jcr.query.plan.PlanNode,java.util.LinkedList):org.modeshape.jcr.query.plan.PlanNode","procedure_start_line":40,"file":"src/main/java/org/modeshape/jcr/query/optimize/PushProjects.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/PushProjects.java","line_number":40,"column_number":-1,"description":"start of procedure execute(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/PushProjects.java","line_number":45,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1350,"column_number":-1,"description":"start of procedure findAllAtOrBelow(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1374,"column_number":-1,"description":"start of procedure findAllAtOrBelow(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1413,"column_number":-1,"description":"Definition of findAllAtOrBelow(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1374,"column_number":-1,"description":"return from a call to List PlanNode.findAllAtOrBelow(Set)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1350,"column_number":-1,"description":"return from a call to List PlanNode.findAllAtOrBelow(PlanNode$Type)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/PushProjects.java","line_number":45,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/PushProjects.java","line_number":47,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/PushProjects.java","line_number":48,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":377,"column_number":-1,"description":"start of procedure isOneOf(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":386,"column_number":-1,"description":"start of procedure isOneOf(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":387,"column_number":-1,"description":"return from a call to boolean PlanNode.isOneOf(EnumSet)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":377,"column_number":-1,"description":"return from a call to boolean PlanNode.isOneOf(PlanNode$Type,org.modeshape.jcr.query.plan.PlanNode$Type[])"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/PushProjects.java","line_number":48,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/PushProjects.java","line_number":53,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":569,"column_number":-1,"description":"start of procedure getChildCount()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":570,"column_number":-1,"description":"return from a call to int PlanNode.getChildCount()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/PushProjects.java","line_number":53,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/PushProjects.java","line_number":54,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":578,"column_number":-1,"description":"start of procedure getFirstChild()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":579,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":579,"column_number":-1,"description":"return from a call to PlanNode PlanNode.getFirstChild()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/PushProjects.java","line_number":55,"column_number":-1,"description":""}],"key":"PushProjects.java|execute|NULL_DEREFERENCE","node_key":"7e9fc31bc469440d6384630f8b346526","hash":"728c11bb275c765545db23087abb30ca","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `first` last assigned on line 61 could be null and is dereferenced at line 62.","severity":"ERROR","line":62,"column":-1,"procedure":"org.modeshape.jcr.query.optimize.JoinOrder.execute(org.modeshape.jcr.query.QueryContext,org.modeshape.jcr.query.plan.PlanNode,java.util.LinkedList):org.modeshape.jcr.query.plan.PlanNode","procedure_start_line":41,"file":"src/main/java/org/modeshape/jcr/query/optimize/JoinOrder.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/JoinOrder.java","line_number":41,"column_number":-1,"description":"start of procedure execute(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/JoinOrder.java","line_number":44,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1350,"column_number":-1,"description":"start of procedure findAllAtOrBelow(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1374,"column_number":-1,"description":"start of procedure findAllAtOrBelow(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1413,"column_number":-1,"description":"Definition of findAllAtOrBelow(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1374,"column_number":-1,"description":"return from a call to List PlanNode.findAllAtOrBelow(Set)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1350,"column_number":-1,"description":"return from a call to List PlanNode.findAllAtOrBelow(PlanNode$Type)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/JoinOrder.java","line_number":44,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/JoinOrder.java","line_number":45,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/JoinOrder.java","line_number":46,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":730,"column_number":-1,"description":"start of procedure getProperty(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":732,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":732,"column_number":-1,"description":"return from a call to Object PlanNode.getProperty(PlanNode$Property,Class)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/JoinOrder.java","line_number":46,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/JoinOrder.java","line_number":47,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/JoinOrder.java","line_number":52,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/JoinOrder.java","line_number":53,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/JoinOrder.java","line_number":54,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/model/ChildNodeJoinCondition.java","line_number":64,"column_number":-1,"description":"start of procedure parentSelectorName()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/model/ChildNodeJoinCondition.java","line_number":64,"column_number":-1,"description":"return from a call to SelectorName ChildNodeJoinCondition.parentSelectorName()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/JoinOrder.java","line_number":56,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":578,"column_number":-1,"description":"start of procedure getFirstChild()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":579,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":579,"column_number":-1,"description":"return from a call to PlanNode PlanNode.getFirstChild()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/JoinOrder.java","line_number":56,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":888,"column_number":-1,"description":"start of procedure getSelectors()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":889,"column_number":-1,"description":"return from a call to Set PlanNode.getSelectors()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/JoinOrder.java","line_number":56,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/JoinOrder.java","line_number":59,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":730,"column_number":-1,"description":"start of procedure getProperty(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":732,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":732,"column_number":-1,"description":"return from a call to Object PlanNode.getProperty(PlanNode$Property,Class)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/JoinOrder.java","line_number":59,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/JoinOrder.java","line_number":60,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/JoinOrder.java","line_number":61,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":578,"column_number":-1,"description":"start of procedure getFirstChild()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":579,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":579,"column_number":-1,"description":"return from a call to PlanNode PlanNode.getFirstChild()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/JoinOrder.java","line_number":62,"column_number":-1,"description":""}],"key":"JoinOrder.java|execute|NULL_DEREFERENCE","node_key":"2ad2c69f89cd458ad84f96f60007b771","hash":"5a0101dcf839807f0bcf6669bc53fcef","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object returned by `join.getFirstChild()` could be null and is dereferenced at line 51.","severity":"ERROR","line":51,"column":-1,"procedure":"org.modeshape.jcr.query.optimize.JoinOrder.execute(org.modeshape.jcr.query.QueryContext,org.modeshape.jcr.query.plan.PlanNode,java.util.LinkedList):org.modeshape.jcr.query.plan.PlanNode","procedure_start_line":41,"file":"src/main/java/org/modeshape/jcr/query/optimize/JoinOrder.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/JoinOrder.java","line_number":41,"column_number":-1,"description":"start of procedure execute(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/JoinOrder.java","line_number":44,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1350,"column_number":-1,"description":"start of procedure findAllAtOrBelow(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1374,"column_number":-1,"description":"start of procedure findAllAtOrBelow(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1413,"column_number":-1,"description":"Definition of findAllAtOrBelow(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1374,"column_number":-1,"description":"return from a call to List PlanNode.findAllAtOrBelow(Set)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1350,"column_number":-1,"description":"return from a call to List PlanNode.findAllAtOrBelow(PlanNode$Type)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/JoinOrder.java","line_number":44,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/JoinOrder.java","line_number":45,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/JoinOrder.java","line_number":46,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":730,"column_number":-1,"description":"start of procedure getProperty(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":732,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":732,"column_number":-1,"description":"return from a call to Object PlanNode.getProperty(PlanNode$Property,Class)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/JoinOrder.java","line_number":46,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/JoinOrder.java","line_number":47,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/JoinOrder.java","line_number":48,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/JoinOrder.java","line_number":49,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/model/DescendantNodeJoinCondition.java","line_number":64,"column_number":-1,"description":"start of procedure ancestorSelectorName()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/model/DescendantNodeJoinCondition.java","line_number":64,"column_number":-1,"description":"return from a call to SelectorName DescendantNodeJoinCondition.ancestorSelectorName()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/JoinOrder.java","line_number":51,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":578,"column_number":-1,"description":"start of procedure getFirstChild()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":579,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":579,"column_number":-1,"description":"return from a call to PlanNode PlanNode.getFirstChild()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/JoinOrder.java","line_number":51,"column_number":-1,"description":""}],"key":"JoinOrder.java|execute|NULL_DEREFERENCE","node_key":"3677875e6aead27ee1320f16c80d8b0f","hash":"b6457c50f0844bb0c40317a1066e1d7c","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object returned by `join.getFirstChild()` could be null and is dereferenced at line 56.","severity":"ERROR","line":56,"column":-1,"procedure":"org.modeshape.jcr.query.optimize.JoinOrder.execute(org.modeshape.jcr.query.QueryContext,org.modeshape.jcr.query.plan.PlanNode,java.util.LinkedList):org.modeshape.jcr.query.plan.PlanNode","procedure_start_line":41,"file":"src/main/java/org/modeshape/jcr/query/optimize/JoinOrder.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/JoinOrder.java","line_number":41,"column_number":-1,"description":"start of procedure execute(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/JoinOrder.java","line_number":44,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1350,"column_number":-1,"description":"start of procedure findAllAtOrBelow(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1374,"column_number":-1,"description":"start of procedure findAllAtOrBelow(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1413,"column_number":-1,"description":"Definition of findAllAtOrBelow(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1374,"column_number":-1,"description":"return from a call to List PlanNode.findAllAtOrBelow(Set)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1350,"column_number":-1,"description":"return from a call to List PlanNode.findAllAtOrBelow(PlanNode$Type)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/JoinOrder.java","line_number":44,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/JoinOrder.java","line_number":45,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/JoinOrder.java","line_number":46,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":730,"column_number":-1,"description":"start of procedure getProperty(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":732,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":732,"column_number":-1,"description":"return from a call to Object PlanNode.getProperty(PlanNode$Property,Class)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/JoinOrder.java","line_number":46,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/JoinOrder.java","line_number":47,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/JoinOrder.java","line_number":52,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/JoinOrder.java","line_number":53,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/JoinOrder.java","line_number":54,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/model/ChildNodeJoinCondition.java","line_number":64,"column_number":-1,"description":"start of procedure parentSelectorName()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/model/ChildNodeJoinCondition.java","line_number":64,"column_number":-1,"description":"return from a call to SelectorName ChildNodeJoinCondition.parentSelectorName()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/JoinOrder.java","line_number":56,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":578,"column_number":-1,"description":"start of procedure getFirstChild()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":579,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":579,"column_number":-1,"description":"return from a call to PlanNode PlanNode.getFirstChild()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/JoinOrder.java","line_number":56,"column_number":-1,"description":""}],"key":"JoinOrder.java|execute|NULL_DEREFERENCE","node_key":"3677875e6aead27ee1320f16c80d8b0f","hash":"b6457c50f0844bb0c40317a1066e1d7c","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `left` last assigned on line 90 could be null and is dereferenced by call to `copySelectNodes(...)` at line 92.","severity":"ERROR","line":92,"column":-1,"procedure":"org.modeshape.jcr.query.optimize.CopyCriteria.execute(org.modeshape.jcr.query.QueryContext,org.modeshape.jcr.query.plan.PlanNode,java.util.LinkedList):org.modeshape.jcr.query.plan.PlanNode","procedure_start_line":51,"file":"src/main/java/org/modeshape/jcr/query/optimize/CopyCriteria.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/CopyCriteria.java","line_number":51,"column_number":-1,"description":"start of procedure execute(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/CopyCriteria.java","line_number":54,"column_number":-1,"description":"Skipping HashSet(): unknown method"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/CopyCriteria.java","line_number":56,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1350,"column_number":-1,"description":"start of procedure findAllAtOrBelow(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1374,"column_number":-1,"description":"start of procedure findAllAtOrBelow(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1413,"column_number":-1,"description":"Definition of findAllAtOrBelow(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1374,"column_number":-1,"description":"return from a call to List PlanNode.findAllAtOrBelow(Set)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1350,"column_number":-1,"description":"return from a call to List PlanNode.findAllAtOrBelow(PlanNode$Type)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/CopyCriteria.java","line_number":56,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/CopyCriteria.java","line_number":58,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":730,"column_number":-1,"description":"start of procedure getProperty(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":732,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":732,"column_number":-1,"description":"return from a call to Object PlanNode.getProperty(PlanNode$Property,Class)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/CopyCriteria.java","line_number":58,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/CopyCriteria.java","line_number":59,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/CopyCriteria.java","line_number":88,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/CopyCriteria.java","line_number":88,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/CopyCriteria.java","line_number":90,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":578,"column_number":-1,"description":"start of procedure getFirstChild()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":579,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":579,"column_number":-1,"description":"return from a call to PlanNode PlanNode.getFirstChild()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/CopyCriteria.java","line_number":91,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":587,"column_number":-1,"description":"start of procedure getLastChild()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":588,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":588,"column_number":-1,"description":"return from a call to PlanNode PlanNode.getLastChild()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/CopyCriteria.java","line_number":92,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/optimize/CopyCriteria.java","line_number":99,"column_number":-1,"description":"start of procedure copySelectNodes(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/optimize/CopyCriteria.java","line_number":103,"column_number":-1,"description":"Skipping HashSet(): unknown method"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/optimize/CopyCriteria.java","line_number":104,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1308,"column_number":-1,"description":"start of procedure findAllAtOrBelow()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1317,"column_number":-1,"description":"Definition of findAllAtOrBelow(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1308,"column_number":-1,"description":"return from a call to List PlanNode.findAllAtOrBelow()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/optimize/CopyCriteria.java","line_number":104,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/optimize/CopyCriteria.java","line_number":108,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/optimize/CopyCriteria.java","line_number":111,"column_number":-1,"description":""}],"key":"CopyCriteria.java|execute|NULL_DEREFERENCE","node_key":"38ec2cc4f08d73de6688bb9e67d0b778","hash":"7f815bea52979e9423f7675acef74fbe","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `right` last assigned on line 91 could be null and is dereferenced by call to `copySelectNodes(...)` at line 92.","severity":"ERROR","line":92,"column":-1,"procedure":"org.modeshape.jcr.query.optimize.CopyCriteria.execute(org.modeshape.jcr.query.QueryContext,org.modeshape.jcr.query.plan.PlanNode,java.util.LinkedList):org.modeshape.jcr.query.plan.PlanNode","procedure_start_line":51,"file":"src/main/java/org/modeshape/jcr/query/optimize/CopyCriteria.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/CopyCriteria.java","line_number":51,"column_number":-1,"description":"start of procedure execute(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/CopyCriteria.java","line_number":54,"column_number":-1,"description":"Skipping HashSet(): unknown method"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/CopyCriteria.java","line_number":56,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1350,"column_number":-1,"description":"start of procedure findAllAtOrBelow(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1374,"column_number":-1,"description":"start of procedure findAllAtOrBelow(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1413,"column_number":-1,"description":"Definition of findAllAtOrBelow(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1374,"column_number":-1,"description":"return from a call to List PlanNode.findAllAtOrBelow(Set)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1350,"column_number":-1,"description":"return from a call to List PlanNode.findAllAtOrBelow(PlanNode$Type)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/CopyCriteria.java","line_number":56,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/CopyCriteria.java","line_number":58,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":730,"column_number":-1,"description":"start of procedure getProperty(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":732,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":732,"column_number":-1,"description":"return from a call to Object PlanNode.getProperty(PlanNode$Property,Class)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/CopyCriteria.java","line_number":58,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/CopyCriteria.java","line_number":59,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/CopyCriteria.java","line_number":88,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/CopyCriteria.java","line_number":88,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/CopyCriteria.java","line_number":90,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":578,"column_number":-1,"description":"start of procedure getFirstChild()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":579,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":579,"column_number":-1,"description":"return from a call to PlanNode PlanNode.getFirstChild()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/CopyCriteria.java","line_number":91,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":587,"column_number":-1,"description":"start of procedure getLastChild()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":588,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":588,"column_number":-1,"description":"return from a call to PlanNode PlanNode.getLastChild()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/CopyCriteria.java","line_number":92,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/optimize/CopyCriteria.java","line_number":99,"column_number":-1,"description":"start of procedure copySelectNodes(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/optimize/CopyCriteria.java","line_number":103,"column_number":-1,"description":"Skipping HashSet(): unknown method"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/optimize/CopyCriteria.java","line_number":104,"column_number":-1,"description":""}],"key":"CopyCriteria.java|execute|NULL_DEREFERENCE","node_key":"38ec2cc4f08d73de6688bb9e67d0b778","hash":"dab2e32db7f63fecef990b59013ddd91","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `constraint` last assigned on line 57 could be null and is dereferenced by call to `rewriteCriteria(...)` at line 58.","severity":"ERROR","line":58,"column":-1,"procedure":"org.modeshape.jcr.query.optimize.RewritePathAndNameCriteria.execute(org.modeshape.jcr.query.QueryContext,org.modeshape.jcr.query.plan.PlanNode,java.util.LinkedList):org.modeshape.jcr.query.plan.PlanNode","procedure_start_line":52,"file":"src/main/java/org/modeshape/jcr/query/optimize/RewritePathAndNameCriteria.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewritePathAndNameCriteria.java","line_number":52,"column_number":-1,"description":"start of procedure execute(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewritePathAndNameCriteria.java","line_number":56,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1350,"column_number":-1,"description":"start of procedure findAllAtOrBelow(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1374,"column_number":-1,"description":"start of procedure findAllAtOrBelow(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1413,"column_number":-1,"description":"Definition of findAllAtOrBelow(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1374,"column_number":-1,"description":"return from a call to List PlanNode.findAllAtOrBelow(Set)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1350,"column_number":-1,"description":"return from a call to List PlanNode.findAllAtOrBelow(PlanNode$Type)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewritePathAndNameCriteria.java","line_number":56,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewritePathAndNameCriteria.java","line_number":57,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":730,"column_number":-1,"description":"start of procedure getProperty(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":732,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":732,"column_number":-1,"description":"return from a call to Object PlanNode.getProperty(PlanNode$Property,Class)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewritePathAndNameCriteria.java","line_number":57,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewritePathAndNameCriteria.java","line_number":58,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewritePathAndNameCriteria.java","line_number":68,"column_number":-1,"description":"start of procedure rewriteCriteria(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewritePathAndNameCriteria.java","line_number":70,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewritePathAndNameCriteria.java","line_number":88,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewritePathAndNameCriteria.java","line_number":106,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewritePathAndNameCriteria.java","line_number":116,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewritePathAndNameCriteria.java","line_number":120,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewritePathAndNameCriteria.java","line_number":124,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewritePathAndNameCriteria.java","line_number":127,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewritePathAndNameCriteria.java","line_number":130,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewritePathAndNameCriteria.java","line_number":139,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewritePathAndNameCriteria.java","line_number":147,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewritePathAndNameCriteria.java","line_number":148,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewritePathAndNameCriteria.java","line_number":149,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/model/SetCriteria.java","line_number":71,"column_number":-1,"description":"start of procedure getOperand()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/model/SetCriteria.java","line_number":72,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/model/SetCriteria.java","line_number":57,"column_number":-1,"description":"start of procedure leftOperand()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/model/SetCriteria.java","line_number":58,"column_number":-1,"description":""}],"key":"RewritePathAndNameCriteria.java|execute|NULL_DEREFERENCE","node_key":"547a7c135335a53adb4d17e6486039da","hash":"c8437afff5a8e4a4ff065d27141f5cde","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object returned by `getProperty(org.modeshape.jcr.JcrLexicon.CREATED)` could be null and is dereferenced at line 59.","severity":"ERROR","line":59,"column":-1,"procedure":"org.modeshape.jcr.JcrVersionNode.getCreated():java.util.Calendar","procedure_start_line":58,"file":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","line_number":58,"column_number":-1,"description":"start of procedure getCreated()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","line_number":59,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":349,"column_number":-1,"description":"start of procedure getProperty(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":350,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":351,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":370,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":201,"column_number":-1,"description":"start of procedure node()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":185,"column_number":-1,"description":"start of procedure sessionCache()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"start of procedure cache()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"return from a call to SessionCache JcrSession.cache()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":"return from a call to SessionCache AbstractJcrNode.sessionCache()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":201,"column_number":-1,"description":"Skipping getNode(...): unknown method"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/CachedNodeSupplier.java","line_number":-1,"column_number":-1,"description":"Definition of getNode(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":202,"column_number":-1,"description":"Taking false branch"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":208,"column_number":-1,"description":"return from a call to CachedNode AbstractJcrNode.node()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":371,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":185,"column_number":-1,"description":"start of procedure sessionCache()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"start of procedure cache()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"return from a call to SessionCache JcrSession.cache()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":"return from a call to SessionCache AbstractJcrNode.sessionCache()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":372,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":373,"column_number":-1,"description":"Skipping remove(...): unknown method"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":374,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":377,"column_number":-1,"description":"return from a call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","line_number":59,"column_number":-1,"description":""}],"key":"JcrVersionNode.java|getCreated|NULL_DEREFERENCE","node_key":"cd917e0854ab05a03701b589d85cd12c","hash":"f2ced833cf342af91b12fd7830770dcf","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `condition` last assigned on line 64 could be null and is dereferenced by call to `rewrite(...)` at line 65.","severity":"ERROR","line":65,"column":-1,"procedure":"org.modeshape.jcr.query.optimize.RewritePseudoColumns.execute(org.modeshape.jcr.query.QueryContext,org.modeshape.jcr.query.plan.PlanNode,java.util.LinkedList):org.modeshape.jcr.query.plan.PlanNode","procedure_start_line":58,"file":"src/main/java/org/modeshape/jcr/query/optimize/RewritePseudoColumns.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewritePseudoColumns.java","line_number":58,"column_number":-1,"description":"start of procedure execute(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewritePseudoColumns.java","line_number":63,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1387,"column_number":-1,"description":"start of procedure findAllAtOrBelow(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1413,"column_number":-1,"description":"Definition of findAllAtOrBelow(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1387,"column_number":-1,"description":"return from a call to List PlanNode.findAllAtOrBelow(PlanNode$Traversal,PlanNode$Type)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewritePseudoColumns.java","line_number":63,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewritePseudoColumns.java","line_number":64,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":730,"column_number":-1,"description":"start of procedure getProperty(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":732,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":732,"column_number":-1,"description":"return from a call to Object PlanNode.getProperty(PlanNode$Property,Class)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewritePseudoColumns.java","line_number":64,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewritePseudoColumns.java","line_number":65,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewritePseudoColumns.java","line_number":87,"column_number":-1,"description":"start of procedure rewrite(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewritePseudoColumns.java","line_number":89,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewritePseudoColumns.java","line_number":90,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewritePseudoColumns.java","line_number":91,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/model/EquiJoinCondition.java","line_number":104,"column_number":-1,"description":"start of procedure getProperty1Name()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/model/EquiJoinCondition.java","line_number":105,"column_number":-1,"description":""}],"key":"RewritePseudoColumns.java|execute|NULL_DEREFERENCE","node_key":"547a7c135335a53adb4d17e6486039da","hash":"583735314ddffdca4524923c089dfc30","bug_type_hum":"Null Dereference"},{"bug_type":"RESOURCE_LEAK","qualifier":"resource of type `java.io.FileInputStream` acquired by call to `FileInputStream(...)` at line 64 is not released after line 64.","severity":"ERROR","line":64,"column":-1,"procedure":"org.modeshape.connector.filesystem.JsonSidecarExtraPropertyStore.getProperties(java.lang.String):java.util.Map","procedure_start_line":60,"file":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":60,"column_number":-1,"description":"start of procedure getProperties(...)"},{"level":0,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":61,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":146,"column_number":-1,"description":"start of procedure sidecarFile(...)"},{"level":1,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":147,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/connector/filesystem/FileSystemConnector.java","line_number":326,"column_number":-1,"description":"start of procedure fileFor(...)"},{"level":2,"filename":"src/main/java/org/modeshape/connector/filesystem/FileSystemConnector.java","line_number":327,"column_number":-1,"description":"Taking true branch"},{"level":2,"filename":"src/main/java/org/modeshape/connector/filesystem/FileSystemConnector.java","line_number":327,"column_number":-1,"description":"Taking false branch"},{"level":2,"filename":"src/main/java/org/modeshape/connector/filesystem/FileSystemConnector.java","line_number":328,"column_number":-1,"description":"Taking false branch"},{"level":2,"filename":"src/main/java/org/modeshape/connector/filesystem/FileSystemConnector.java","line_number":331,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/connector/filesystem/FileSystemConnector.java","line_number":311,"column_number":-1,"description":"start of procedure isContentNode(...)"},{"level":3,"filename":"src/main/java/org/modeshape/connector/filesystem/FileSystemConnector.java","line_number":312,"column_number":-1,"description":"return from a call to boolean FileSystemConnector.isContentNode(String)"},{"level":2,"filename":"src/main/java/org/modeshape/connector/filesystem/FileSystemConnector.java","line_number":331,"column_number":-1,"description":"Taking true branch"},{"level":2,"filename":"src/main/java/org/modeshape/connector/filesystem/FileSystemConnector.java","line_number":332,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/connector/filesystem/FileSystemConnector.java","line_number":334,"column_number":-1,"description":"return from a call to File FileSystemConnector.fileFor(String)"},{"level":1,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":148,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":130,"column_number":-1,"description":"start of procedure extension()"},{"level":2,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":131,"column_number":-1,"description":"return from a call to String JsonSidecarExtraPropertyStore.extension()"},{"level":1,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":149,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/connector/filesystem/FileSystemConnector.java","line_number":311,"column_number":-1,"description":"start of procedure isContentNode(...)"},{"level":2,"filename":"src/main/java/org/modeshape/connector/filesystem/FileSystemConnector.java","line_number":312,"column_number":-1,"description":"return from a call to boolean FileSystemConnector.isContentNode(String)"},{"level":1,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":149,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":152,"column_number":-1,"description":"return from a call to File JsonSidecarExtraPropertyStore.sidecarFile(String)"},{"level":0,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":62,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":64,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":122,"column_number":-1,"description":"start of procedure read(...)"},{"level":1,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":122,"column_number":-1,"description":"return from a call to Document JsonSidecarExtraPropertyStore.read(FileInputStream)"}],"key":"JsonSidecarExtraPropertyStore.java|getProperties|RESOURCE_LEAK","node_key":"1965337fd984f6a9fb8b623d4790701b","hash":"d2c48982f1d0cd4a5f1cacf6a5417f5d","bug_type_hum":"Resource Leak"},{"bug_type":"RESOURCE_LEAK","qualifier":"resource of type `java.io.FileInputStream` acquired by call to `FileInputStream(...)` at line 76 is not released after line 81.\n**Note**: potential exception at line 78","severity":"ERROR","line":81,"column":-1,"procedure":"org.modeshape.jcr.value.binary.SharedLockingInputStream$1.call():java.lang.Object","procedure_start_line":65,"file":"src/main/java/org/modeshape/jcr/value/binary/SharedLockingInputStream.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/SharedLockingInputStream.java","line_number":65,"column_number":-1,"description":"start of procedure call()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/SharedLockingInputStream.java","line_number":66,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/SharedLockingInputStream.java","line_number":69,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/SharedLockingInputStream.java","line_number":73,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileLocks.java","line_number":48,"column_number":-1,"description":"start of procedure get()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileLocks.java","line_number":49,"column_number":-1,"description":"return from a call to FileLocks FileLocks.get()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/SharedLockingInputStream.java","line_number":73,"column_number":-1,"description":"Skipping readLock(...): empty list of specs"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileLocks.java","line_number":81,"column_number":-1,"description":"Definition of readLock(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/SharedLockingInputStream.java","line_number":73,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/SharedLockingInputStream.java","line_number":76,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/SharedLockingInputStream.java","line_number":78,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/AbstractBinaryStore.java","line_number":71,"column_number":-1,"description":"start of procedure bestBufferSize(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/AbstractBinaryStore.java","line_number":72,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/AbstractBinaryStore.java","line_number":72,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/AbstractBinaryStore.java","line_number":85,"column_number":-1,"description":"exception java.lang.AssertionError"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/AbstractBinaryStore.java","line_number":85,"column_number":-1,"description":"return from a call to int AbstractBinaryStore.bestBufferSize(long)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/SharedLockingInputStream.java","line_number":81,"column_number":-1,"description":""}],"key":"SharedLockingInputStream.java|call|RESOURCE_LEAK","node_key":"48815eab4c26cee962db00712b67bbd0","hash":"7bd477dc10e1f9a001ce49b3d0e485cb","bug_type_hum":"Resource Leak"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `result` last assigned on line 76 could be null and is dereferenced by call to `combine(...)` at line 99.","severity":"ERROR","line":99,"column":-1,"procedure":"org.modeshape.jcr.InfinispanUtil.execute(org.infinispan.Cache,org.modeshape.jcr.InfinispanUtil$Location,org.modeshape.jcr.cache.document.LocalDocumentStore$DistributedOperation,org.modeshape.jcr.cache.document.LocalDocumentStore$DistributedOperation):java.lang.Object","procedure_start_line":67,"file":"src/main/java/org/modeshape/jcr/InfinispanUtil.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/InfinispanUtil.java","line_number":67,"column_number":-1,"description":"start of procedure execute(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/InfinispanUtil.java","line_number":71,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/InfinispanUtil.java","line_number":73,"column_number":-1,"description":"Skipping DefaultExecutorService(...): unknown method"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/InfinispanUtil.java","line_number":74,"column_number":-1,"description":"Skipping stores(): unknown method"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/InfinispanUtil.java","line_number":75,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/InfinispanUtil.java","line_number":76,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/InfinispanUtil.java","line_number":77,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/InfinispanUtil.java","line_number":79,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/InfinispanUtil.java","line_number":80,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/InfinispanUtil.java","line_number":82,"column_number":-1,"description":"Skipping submitEverywhere(...): unknown method"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/InfinispanUtil.java","line_number":89,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/InfinispanUtil.java","line_number":89,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/InfinispanUtil.java","line_number":91,"column_number":-1,"description":"Skipping iterator(): unknown method"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/InfinispanUtil.java","line_number":92,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/InfinispanUtil.java","line_number":93,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/InfinispanUtil.java","line_number":96,"column_number":-1,"description":"Skipping get(...): unknown method"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/InfinispanUtil.java","line_number":98,"column_number":-1,"description":"Skipping remove(): unknown method"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/InfinispanUtil.java","line_number":99,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/LocalDocumentStore.java","line_number":337,"column_number":-1,"description":"start of procedure combine(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/LocalDocumentStore.java","line_number":354,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/LocalDocumentStore.java","line_number":436,"column_number":-1,"description":"start of procedure combine(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/LocalDocumentStore.java","line_number":337,"column_number":-1,"description":"start of procedure combine(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/LocalDocumentStore.java","line_number":338,"column_number":-1,"description":"Taking true branch"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/LocalDocumentStore.java","line_number":339,"column_number":-1,"description":""}],"key":"InfinispanUtil.java|execute|NULL_DEREFERENCE","node_key":"f1597dd0423e86fa69707a623d0fef39","hash":"e669f035936c3df265c377e1dfadd188","bug_type_hum":"Null Dereference"},{"bug_type":"RESOURCE_LEAK","qualifier":"resource of type `java.io.FileOutputStream` acquired by call to `FileOutputStream(...)` at line 88 is not released after line 89.","severity":"ERROR","line":89,"column":-1,"procedure":"org.modeshape.jcr.BackupDocumentWriter.write(org.infinispan.schematic.document.Document):void","procedure_start_line":71,"file":"src/main/java/org/modeshape/jcr/BackupDocumentWriter.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/BackupDocumentWriter.java","line_number":71,"column_number":-1,"description":"start of procedure write(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/BackupDocumentWriter.java","line_number":72,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/BackupDocumentWriter.java","line_number":72,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/BackupDocumentWriter.java","line_number":73,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/BackupDocumentWriter.java","line_number":74,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/BackupDocumentWriter.java","line_number":75,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/BackupDocumentWriter.java","line_number":81,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/BackupDocumentWriter.java","line_number":83,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/BackupDocumentWriter.java","line_number":84,"column_number":-1,"description":"Skipping justifyRight(...): unknown method"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/BackupDocumentWriter.java","line_number":85,"column_number":-1,"description":"Skipping toString(): unknown method"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/BackupDocumentWriter.java","line_number":86,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/BackupDocumentWriter.java","line_number":87,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/BackupDocumentWriter.java","line_number":88,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/BackupDocumentWriter.java","line_number":89,"column_number":-1,"description":"Taking true branch"}],"key":"BackupDocumentWriter.java|write|RESOURCE_LEAK","node_key":"71f5174a56954b2ed04b56868d27a928","hash":"2ce1fff22e6421e8c3046965b6ed01f8","bug_type_hum":"Resource Leak"},{"bug_type":"RESOURCE_LEAK","qualifier":"resource of type `java.io.FileInputStream` acquired by call to `FileInputStream(...)` at line 84 is not released after line 84.","severity":"ERROR","line":84,"column":-1,"procedure":"org.modeshape.connector.filesystem.JsonSidecarExtraPropertyStore.updateProperties(java.lang.String,java.util.Map):void","procedure_start_line":74,"file":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":74,"column_number":-1,"description":"start of procedure updateProperties(...)"},{"level":0,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":76,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":146,"column_number":-1,"description":"start of procedure sidecarFile(...)"},{"level":1,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":147,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/connector/filesystem/FileSystemConnector.java","line_number":326,"column_number":-1,"description":"start of procedure fileFor(...)"},{"level":2,"filename":"src/main/java/org/modeshape/connector/filesystem/FileSystemConnector.java","line_number":327,"column_number":-1,"description":"Taking true branch"},{"level":2,"filename":"src/main/java/org/modeshape/connector/filesystem/FileSystemConnector.java","line_number":327,"column_number":-1,"description":"Taking false branch"},{"level":2,"filename":"src/main/java/org/modeshape/connector/filesystem/FileSystemConnector.java","line_number":328,"column_number":-1,"description":"Taking false branch"},{"level":2,"filename":"src/main/java/org/modeshape/connector/filesystem/FileSystemConnector.java","line_number":331,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/connector/filesystem/FileSystemConnector.java","line_number":311,"column_number":-1,"description":"start of procedure isContentNode(...)"},{"level":3,"filename":"src/main/java/org/modeshape/connector/filesystem/FileSystemConnector.java","line_number":312,"column_number":-1,"description":"return from a call to boolean FileSystemConnector.isContentNode(String)"},{"level":2,"filename":"src/main/java/org/modeshape/connector/filesystem/FileSystemConnector.java","line_number":331,"column_number":-1,"description":"Taking true branch"},{"level":2,"filename":"src/main/java/org/modeshape/connector/filesystem/FileSystemConnector.java","line_number":332,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/connector/filesystem/FileSystemConnector.java","line_number":334,"column_number":-1,"description":"return from a call to File FileSystemConnector.fileFor(String)"},{"level":1,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":148,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":130,"column_number":-1,"description":"start of procedure extension()"},{"level":2,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":131,"column_number":-1,"description":"return from a call to String JsonSidecarExtraPropertyStore.extension()"},{"level":1,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":149,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/connector/filesystem/FileSystemConnector.java","line_number":311,"column_number":-1,"description":"start of procedure isContentNode(...)"},{"level":2,"filename":"src/main/java/org/modeshape/connector/filesystem/FileSystemConnector.java","line_number":312,"column_number":-1,"description":"return from a call to boolean FileSystemConnector.isContentNode(String)"},{"level":1,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":149,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":152,"column_number":-1,"description":"return from a call to File JsonSidecarExtraPropertyStore.sidecarFile(String)"},{"level":0,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":78,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":79,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":84,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":122,"column_number":-1,"description":"start of procedure read(...)"},{"level":1,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":122,"column_number":-1,"description":"return from a call to Document JsonSidecarExtraPropertyStore.read(FileInputStream)"}],"key":"JsonSidecarExtraPropertyStore.java|updateProperties|RESOURCE_LEAK","node_key":"f29a0b5fbb21603d796e3f4e7ba77dde","hash":"26c1e0a89ca61cffcb3e89e68d8a31e5","bug_type_hum":"Resource Leak"},{"bug_type":"RESOURCE_LEAK","qualifier":"resource of type `java.io.FileOutputStream` acquired by call to `FileOutputStream(...)` at line 95 is not released after line 95.","severity":"ERROR","line":95,"column":-1,"procedure":"org.modeshape.connector.filesystem.JsonSidecarExtraPropertyStore.updateProperties(java.lang.String,java.util.Map):void","procedure_start_line":74,"file":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":74,"column_number":-1,"description":"start of procedure updateProperties(...)"},{"level":0,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":76,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":146,"column_number":-1,"description":"start of procedure sidecarFile(...)"},{"level":1,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":147,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/connector/filesystem/FileSystemConnector.java","line_number":326,"column_number":-1,"description":"start of procedure fileFor(...)"},{"level":2,"filename":"src/main/java/org/modeshape/connector/filesystem/FileSystemConnector.java","line_number":327,"column_number":-1,"description":"Taking true branch"},{"level":2,"filename":"src/main/java/org/modeshape/connector/filesystem/FileSystemConnector.java","line_number":327,"column_number":-1,"description":"Taking false branch"},{"level":2,"filename":"src/main/java/org/modeshape/connector/filesystem/FileSystemConnector.java","line_number":328,"column_number":-1,"description":"Taking false branch"},{"level":2,"filename":"src/main/java/org/modeshape/connector/filesystem/FileSystemConnector.java","line_number":331,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/connector/filesystem/FileSystemConnector.java","line_number":311,"column_number":-1,"description":"start of procedure isContentNode(...)"},{"level":3,"filename":"src/main/java/org/modeshape/connector/filesystem/FileSystemConnector.java","line_number":312,"column_number":-1,"description":"return from a call to boolean FileSystemConnector.isContentNode(String)"},{"level":2,"filename":"src/main/java/org/modeshape/connector/filesystem/FileSystemConnector.java","line_number":331,"column_number":-1,"description":"Taking true branch"},{"level":2,"filename":"src/main/java/org/modeshape/connector/filesystem/FileSystemConnector.java","line_number":332,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/connector/filesystem/FileSystemConnector.java","line_number":334,"column_number":-1,"description":"return from a call to File FileSystemConnector.fileFor(String)"},{"level":1,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":148,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":130,"column_number":-1,"description":"start of procedure extension()"},{"level":2,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":131,"column_number":-1,"description":"return from a call to String JsonSidecarExtraPropertyStore.extension()"},{"level":1,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":149,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/connector/filesystem/FileSystemConnector.java","line_number":311,"column_number":-1,"description":"start of procedure isContentNode(...)"},{"level":2,"filename":"src/main/java/org/modeshape/connector/filesystem/FileSystemConnector.java","line_number":312,"column_number":-1,"description":"return from a call to boolean FileSystemConnector.isContentNode(String)"},{"level":1,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":149,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":152,"column_number":-1,"description":"return from a call to File JsonSidecarExtraPropertyStore.sidecarFile(String)"},{"level":0,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":78,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":79,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":84,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":122,"column_number":-1,"description":"start of procedure read(...)"},{"level":1,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":122,"column_number":-1,"description":"return from a call to Document JsonSidecarExtraPropertyStore.read(FileInputStream)"},{"level":0,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":85,"column_number":-1,"description":"Skipping newDocument(...): unknown method"},{"level":0,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":87,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":95,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":127,"column_number":-1,"description":"start of procedure write(...)"},{"level":1,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":128,"column_number":-1,"description":"return from a call to void JsonSidecarExtraPropertyStore.write(Document,FileOutputStream)"}],"key":"JsonSidecarExtraPropertyStore.java|updateProperties|RESOURCE_LEAK","node_key":"af6dfadaee40c8bc0e7ed253a851d071","hash":"f17d4d3fc1686c404887fee86e901683","bug_type_hum":"Resource Leak"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object returned by `joinNode.getFirstChild()` could be null and is dereferenced at line 87.","severity":"ERROR","line":87,"column":-1,"procedure":"org.modeshape.jcr.query.optimize.RewriteIdentityJoins.execute(org.modeshape.jcr.query.QueryContext,org.modeshape.jcr.query.plan.PlanNode,java.util.LinkedList):org.modeshape.jcr.query.plan.PlanNode","procedure_start_line":74,"file":"src/main/java/org/modeshape/jcr/query/optimize/RewriteIdentityJoins.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewriteIdentityJoins.java","line_number":74,"column_number":-1,"description":"start of procedure execute(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewriteIdentityJoins.java","line_number":77,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/QueryContext.java","line_number":323,"column_number":-1,"description":"start of procedure getHints()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/QueryContext.java","line_number":324,"column_number":-1,"description":"return from a call to PlanHints QueryContext.getHints()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewriteIdentityJoins.java","line_number":77,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewriteIdentityJoins.java","line_number":80,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewriteIdentityJoins.java","line_number":81,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewriteIdentityJoins.java","line_number":82,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewriteIdentityJoins.java","line_number":83,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1350,"column_number":-1,"description":"start of procedure findAllAtOrBelow(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1374,"column_number":-1,"description":"start of procedure findAllAtOrBelow(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1413,"column_number":-1,"description":"Definition of findAllAtOrBelow(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1374,"column_number":-1,"description":"return from a call to List PlanNode.findAllAtOrBelow(Set)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1350,"column_number":-1,"description":"return from a call to List PlanNode.findAllAtOrBelow(PlanNode$Type)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewriteIdentityJoins.java","line_number":83,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewriteIdentityJoins.java","line_number":84,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewriteIdentityJoins.java","line_number":85,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":730,"column_number":-1,"description":"start of procedure getProperty(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":732,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":732,"column_number":-1,"description":"return from a call to Object PlanNode.getProperty(PlanNode$Property,Class)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewriteIdentityJoins.java","line_number":85,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewriteIdentityJoins.java","line_number":86,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewriteIdentityJoins.java","line_number":87,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":578,"column_number":-1,"description":"start of procedure getFirstChild()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":579,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":579,"column_number":-1,"description":"return from a call to PlanNode PlanNode.getFirstChild()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewriteIdentityJoins.java","line_number":87,"column_number":-1,"description":""}],"key":"RewriteIdentityJoins.java|execute|NULL_DEREFERENCE","node_key":"241d42dae50053d7648ace8f5b7dfc3f","hash":"4e20d3271a9c73b741953b220dbb2b5f","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object returned by `joinNode.getLastChild()` could be null and is dereferenced at line 88.","severity":"ERROR","line":88,"column":-1,"procedure":"org.modeshape.jcr.query.optimize.RewriteIdentityJoins.execute(org.modeshape.jcr.query.QueryContext,org.modeshape.jcr.query.plan.PlanNode,java.util.LinkedList):org.modeshape.jcr.query.plan.PlanNode","procedure_start_line":74,"file":"src/main/java/org/modeshape/jcr/query/optimize/RewriteIdentityJoins.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewriteIdentityJoins.java","line_number":74,"column_number":-1,"description":"start of procedure execute(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewriteIdentityJoins.java","line_number":77,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/QueryContext.java","line_number":323,"column_number":-1,"description":"start of procedure getHints()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/QueryContext.java","line_number":324,"column_number":-1,"description":"return from a call to PlanHints QueryContext.getHints()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewriteIdentityJoins.java","line_number":77,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewriteIdentityJoins.java","line_number":80,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewriteIdentityJoins.java","line_number":81,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewriteIdentityJoins.java","line_number":82,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewriteIdentityJoins.java","line_number":83,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1350,"column_number":-1,"description":"start of procedure findAllAtOrBelow(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1374,"column_number":-1,"description":"start of procedure findAllAtOrBelow(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1413,"column_number":-1,"description":"Definition of findAllAtOrBelow(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1374,"column_number":-1,"description":"return from a call to List PlanNode.findAllAtOrBelow(Set)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1350,"column_number":-1,"description":"return from a call to List PlanNode.findAllAtOrBelow(PlanNode$Type)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewriteIdentityJoins.java","line_number":83,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewriteIdentityJoins.java","line_number":84,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewriteIdentityJoins.java","line_number":85,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":730,"column_number":-1,"description":"start of procedure getProperty(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":732,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":732,"column_number":-1,"description":"return from a call to Object PlanNode.getProperty(PlanNode$Property,Class)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewriteIdentityJoins.java","line_number":85,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewriteIdentityJoins.java","line_number":86,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewriteIdentityJoins.java","line_number":87,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":578,"column_number":-1,"description":"start of procedure getFirstChild()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":579,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":579,"column_number":-1,"description":"return from a call to PlanNode PlanNode.getFirstChild()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewriteIdentityJoins.java","line_number":87,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1452,"column_number":-1,"description":"start of procedure findAtOrBelow(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1474,"column_number":-1,"description":"start of procedure findAtOrBelow(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1510,"column_number":-1,"description":"Definition of findAtOrBelow(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1474,"column_number":-1,"description":"return from a call to PlanNode PlanNode.findAtOrBelow(Set)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1452,"column_number":-1,"description":"return from a call to PlanNode PlanNode.findAtOrBelow(PlanNode$Type)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewriteIdentityJoins.java","line_number":88,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":587,"column_number":-1,"description":"start of procedure getLastChild()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":588,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":588,"column_number":-1,"description":"return from a call to PlanNode PlanNode.getLastChild()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewriteIdentityJoins.java","line_number":88,"column_number":-1,"description":""}],"key":"RewriteIdentityJoins.java|execute|NULL_DEREFERENCE","node_key":"7e9fc31bc469440d6384630f8b346526","hash":"51e7f6179448b9ac1df0eddfd911713d","bug_type_hum":"Null Dereference"},{"bug_type":"RESOURCE_LEAK","qualifier":"resource of type `java.io.FileOutputStream` acquired by call to `FileOutputStream(...)` at line 97 is not released after line 97.","severity":"ERROR","line":97,"column":-1,"procedure":"org.modeshape.jcr.value.binary.FileSystemBinaryStore.storeValue(java.io.InputStream,boolean):org.modeshape.jcr.value.BinaryValue","procedure_start_line":90,"file":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":90,"column_number":-1,"description":"start of procedure storeValue(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":91,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":92,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":95,"column_number":-1,"description":"Skipping createHashingStream(...): unknown method"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":96,"column_number":-1,"description":"Skipping createTempFile(...): unknown method"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":97,"column_number":-1,"description":"Skipping write(...): unknown method"}],"key":"FileSystemBinaryStore.java|storeValue|RESOURCE_LEAK","node_key":"1b1772fed2f48dd044c94ecdb69174ef","hash":"035862b30b632175d524f70b300cdf1c","bug_type_hum":"Resource Leak"},{"bug_type":"RESOURCE_LEAK","qualifier":"resource of type `java.io.FileInputStream` acquired by call to `FileInputStream(...)` at line 107 is not released after line 108.","severity":"ERROR","line":108,"column":-1,"procedure":"org.modeshape.jcr.BackupDocumentReader.openNextFile():java.io.InputStream","procedure_start_line":92,"file":"src/main/java/org/modeshape/jcr/BackupDocumentReader.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/BackupDocumentReader.java","line_number":92,"column_number":-1,"description":"start of procedure openNextFile()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/BackupDocumentReader.java","line_number":94,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/BackupDocumentReader.java","line_number":95,"column_number":-1,"description":"Skipping justifyRight(...): unknown method"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/BackupDocumentReader.java","line_number":96,"column_number":-1,"description":"Skipping toString(): unknown method"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/BackupDocumentReader.java","line_number":97,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/BackupDocumentReader.java","line_number":98,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/BackupDocumentReader.java","line_number":99,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/BackupDocumentReader.java","line_number":106,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/BackupDocumentReader.java","line_number":106,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/BackupDocumentReader.java","line_number":107,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/BackupDocumentReader.java","line_number":108,"column_number":-1,"description":"Taking true branch"}],"key":"BackupDocumentReader.java|openNextFile|RESOURCE_LEAK","node_key":"5063998cfe9b05506ca33bbb14b6ac18","hash":"2bb8be74f866db753e1c2e549dac395f","bug_type_hum":"Resource Leak"},{"bug_type":"RESOURCE_LEAK","qualifier":"resource of type `java.io.FileOutputStream` acquired by call to `FileOutputStream(...)` at line 115 is not released after line 115.","severity":"ERROR","line":115,"column":-1,"procedure":"org.modeshape.connector.filesystem.JsonSidecarExtraPropertyStore.storeProperties(java.lang.String,java.util.Map):void","procedure_start_line":102,"file":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":102,"column_number":-1,"description":"start of procedure storeProperties(...)"},{"level":0,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":104,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":146,"column_number":-1,"description":"start of procedure sidecarFile(...)"},{"level":1,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":147,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/connector/filesystem/FileSystemConnector.java","line_number":326,"column_number":-1,"description":"start of procedure fileFor(...)"},{"level":2,"filename":"src/main/java/org/modeshape/connector/filesystem/FileSystemConnector.java","line_number":327,"column_number":-1,"description":"Taking true branch"},{"level":2,"filename":"src/main/java/org/modeshape/connector/filesystem/FileSystemConnector.java","line_number":327,"column_number":-1,"description":"Taking false branch"},{"level":2,"filename":"src/main/java/org/modeshape/connector/filesystem/FileSystemConnector.java","line_number":328,"column_number":-1,"description":"Taking false branch"},{"level":2,"filename":"src/main/java/org/modeshape/connector/filesystem/FileSystemConnector.java","line_number":331,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/connector/filesystem/FileSystemConnector.java","line_number":311,"column_number":-1,"description":"start of procedure isContentNode(...)"},{"level":3,"filename":"src/main/java/org/modeshape/connector/filesystem/FileSystemConnector.java","line_number":312,"column_number":-1,"description":"return from a call to boolean FileSystemConnector.isContentNode(String)"},{"level":2,"filename":"src/main/java/org/modeshape/connector/filesystem/FileSystemConnector.java","line_number":331,"column_number":-1,"description":"Taking true branch"},{"level":2,"filename":"src/main/java/org/modeshape/connector/filesystem/FileSystemConnector.java","line_number":332,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/connector/filesystem/FileSystemConnector.java","line_number":334,"column_number":-1,"description":"return from a call to File FileSystemConnector.fileFor(String)"},{"level":1,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":148,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":130,"column_number":-1,"description":"start of procedure extension()"},{"level":2,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":131,"column_number":-1,"description":"return from a call to String JsonSidecarExtraPropertyStore.extension()"},{"level":1,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":149,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/connector/filesystem/FileSystemConnector.java","line_number":311,"column_number":-1,"description":"start of procedure isContentNode(...)"},{"level":2,"filename":"src/main/java/org/modeshape/connector/filesystem/FileSystemConnector.java","line_number":312,"column_number":-1,"description":"return from a call to boolean FileSystemConnector.isContentNode(String)"},{"level":1,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":149,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":152,"column_number":-1,"description":"return from a call to File JsonSidecarExtraPropertyStore.sidecarFile(String)"},{"level":0,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":106,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":110,"column_number":-1,"description":"Skipping newDocument(): unknown method"},{"level":0,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":111,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":115,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":127,"column_number":-1,"description":"start of procedure write(...)"},{"level":1,"filename":"src/main/java/org/modeshape/connector/filesystem/JsonSidecarExtraPropertyStore.java","line_number":128,"column_number":-1,"description":"return from a call to void JsonSidecarExtraPropertyStore.write(Document,FileOutputStream)"}],"key":"JsonSidecarExtraPropertyStore.java|storeProperties|RESOURCE_LEAK","node_key":"af6dfadaee40c8bc0e7ed253a851d071","hash":"21c2c09b4985f223c195171f8e2b02d8","bug_type_hum":"Resource Leak"},{"bug_type":"RESOURCE_LEAK","qualifier":"resource of type `org.modeshape.jcr.query.engine.process.RestartableSequence$QueueBufferSupplier` acquired by call to `JcrQueryResult(...)` at line 130 is not released after line 130.\n**Note**: potential exception at line 130","severity":"ERROR","line":130,"column":-1,"procedure":"org.modeshape.jcr.query.JcrQuery.execute():org.modeshape.jcr.api.query.QueryResult","procedure_start_line":107,"file":"src/main/java/org/modeshape/jcr/query/JcrQuery.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/JcrQuery.java","line_number":107,"column_number":-1,"description":"start of procedure execute()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/JcrQuery.java","line_number":108,"column_number":-1,"description":"Skipping checkValid(): unknown method"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/JcrQueryContext.java","line_number":-1,"column_number":-1,"description":"Definition of checkValid()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/JcrQuery.java","line_number":109,"column_number":-1,"description":"Skipping nanoTime(): unknown method"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/JcrQuery.java","line_number":111,"column_number":-1,"description":"Skipping createExecutableQuery(...): unknown method"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/JcrQueryContext.java","line_number":-1,"column_number":-1,"description":"Definition of createExecutableQuery(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/JcrQuery.java","line_number":112,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/JcrQuery.java","line_number":113,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/JcrQuery.java","line_number":118,"column_number":-1,"description":"Skipping execute(): unknown method"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/CancellableQuery.java","line_number":-1,"column_number":-1,"description":"Definition of execute()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/JcrQuery.java","line_number":121,"column_number":-1,"description":"Skipping compareAndSet(...): unknown method"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/JcrQuery.java","line_number":123,"column_number":-1,"description":"Skipping getProblems(): unknown method"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/QueryResults.java","line_number":-1,"column_number":-1,"description":"Definition of getProblems()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/JcrQuery.java","line_number":123,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/JcrAbstractQuery.java","line_number":101,"column_number":-1,"description":"start of procedure checkForProblems(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/JcrAbstractQuery.java","line_number":102,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/JcrAbstractQuery.java","line_number":111,"column_number":-1,"description":"return from a call to void JcrAbstractQuery.checkForProblems(Problems)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/JcrQuery.java","line_number":124,"column_number":-1,"description":"Skipping recordDuration(...): unknown method"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/JcrQueryContext.java","line_number":-1,"column_number":-1,"description":"Definition of recordDuration(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/JcrQuery.java","line_number":125,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/JcrQuery.java","line_number":127,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/JcrQuery.java","line_number":130,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/JcrQueryResult.java","line_number":64,"column_number":-1,"description":"start of procedure JcrQueryResult(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/JcrQueryResult.java","line_number":68,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/JcrQueryResult.java","line_number":62,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/JcrQueryResult.java","line_number":69,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/JcrQueryResult.java","line_number":70,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/JcrQueryResult.java","line_number":71,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/JcrQueryResult.java","line_number":72,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/JcrQueryResult.java","line_number":73,"column_number":-1,"description":"Skipping getRows(): unknown method"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/QueryResults.java","line_number":-1,"column_number":-1,"description":"Definition of getRows()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/JcrQueryResult.java","line_number":74,"column_number":-1,"description":"Skipping isEmpty(): unknown method"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/NodeSequence.java","line_number":-1,"column_number":-1,"description":"Definition of isEmpty()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/JcrQueryResult.java","line_number":74,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/JcrQueryResult.java","line_number":76,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/JcrQueryResult.java","line_number":79,"column_number":-1,"description":"Skipping getWorkspaceName(): unknown method"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/JcrQueryContext.java","line_number":-1,"column_number":-1,"description":"Definition of getWorkspaceName()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/JcrQueryResult.java","line_number":80,"column_number":-1,"description":"Skipping getBufferManager(): unknown method"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/JcrQueryContext.java","line_number":-1,"column_number":-1,"description":"Definition of getBufferManager()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/JcrQueryResult.java","line_number":81,"column_number":-1,"description":"Skipping getCachedNodes(): unknown method"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/QueryResults.java","line_number":-1,"column_number":-1,"description":"Definition of getCachedNodes()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/JcrQueryResult.java","line_number":82,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/SecureSequence.java","line_number":38,"column_number":-1,"description":"start of procedure SecureSequence(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/SecureSequence.java","line_number":40,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/DelegatingSequence.java","line_number":27,"column_number":-1,"description":"start of procedure DelegatingSequence(...)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/query/NodeSequence.java","line_number":38,"column_number":-1,"description":"start of procedure NodeSequence()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/query/NodeSequence.java","line_number":38,"column_number":-1,"description":"return from a call to NodeSequence.<init>()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/DelegatingSequence.java","line_number":28,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/DelegatingSequence.java","line_number":29,"column_number":-1,"description":"return from a call to DelegatingSequence.<init>(NodeSequence)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/SecureSequence.java","line_number":41,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/SecureSequence.java","line_number":42,"column_number":-1,"description":"return from a call to SecureSequence.<init>(NodeSequence,JcrQueryContext)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/JcrQueryResult.java","line_number":83,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/RestartableSequence.java","line_number":59,"column_number":-1,"description":"start of procedure RestartableSequence(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/RestartableSequence.java","line_number":63,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/NodeSequence.java","line_number":38,"column_number":-1,"description":"start of procedure NodeSequence()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/NodeSequence.java","line_number":38,"column_number":-1,"description":"return from a call to NodeSequence.<init>()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/RestartableSequence.java","line_number":48,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/RestartableSequence.java","line_number":52,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/RestartableSequence.java","line_number":53,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/RestartableSequence.java","line_number":54,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/RestartableSequence.java","line_number":55,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/RestartableSequence.java","line_number":56,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/RestartableSequence.java","line_number":64,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/RestartableSequence.java","line_number":65,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/RestartableSequence.java","line_number":66,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/DelegatingSequence.java","line_number":33,"column_number":-1,"description":"start of procedure width()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/query/NodeSequence.java","line_number":-1,"column_number":-1,"description":"Definition of width()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/DelegatingSequence.java","line_number":33,"column_number":-1,"description":"return from a call to int DelegatingSequence.width()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/RestartableSequence.java","line_number":66,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/RestartableSequence.java","line_number":67,"column_number":-1,"description":"Taking true branch"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/DelegatingSequence.java","line_number":43,"column_number":-1,"description":"start of procedure isEmpty()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/query/NodeSequence.java","line_number":-1,"column_number":-1,"description":"Definition of isEmpty()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/DelegatingSequence.java","line_number":43,"column_number":-1,"description":"return from a call to boolean DelegatingSequence.isEmpty()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/RestartableSequence.java","line_number":67,"column_number":-1,"description":"Taking false branch"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/RestartableSequence.java","line_number":68,"column_number":-1,"description":"Taking true branch"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/DelegatingSequence.java","line_number":33,"column_number":-1,"description":"start of procedure width()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/query/NodeSequence.java","line_number":-1,"column_number":-1,"description":"Definition of width()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/DelegatingSequence.java","line_number":33,"column_number":-1,"description":"return from a call to int DelegatingSequence.width()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/RestartableSequence.java","line_number":68,"column_number":-1,"description":"Taking false branch"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/RestartableSequence.java","line_number":70,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/BufferedRows.java","line_number":314,"column_number":-1,"description":"start of procedure serializer(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/BufferedRows.java","line_number":316,"column_number":-1,"description":"Taking false branch"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/BufferedRows.java","line_number":317,"column_number":-1,"description":"Taking false branch"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/BufferedRows.java","line_number":318,"column_number":-1,"description":"Taking false branch"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/BufferedRows.java","line_number":319,"column_number":-1,"description":"Taking false branch"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/BufferedRows.java","line_number":320,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/BufferedRows.java","line_number":511,"column_number":-1,"description":"start of procedure BufferedRows$MultiNodeRowSerializer(...)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/BufferedRows.java","line_number":512,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/BufferedRows.java","line_number":513,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/BufferedRows.java","line_number":514,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/BufferedRows.java","line_number":515,"column_number":-1,"description":"return from a call to BufferedRows$MultiNodeRowSerializer.<init>(CachedNodeSupplier,int)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/BufferedRows.java","line_number":320,"column_number":-1,"description":"return from a call to BufferedRows$BufferedRowFactory BufferedRows.serializer(CachedNodeSupplier,int)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/RestartableSequence.java","line_number":70,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/RestartableSequence.java","line_number":72,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/BufferedRows.java","line_number":314,"column_number":-1,"description":"start of procedure serializer(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/BufferedRows.java","line_number":316,"column_number":-1,"description":"Taking false branch"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/BufferedRows.java","line_number":317,"column_number":-1,"description":"Taking false branch"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/BufferedRows.java","line_number":318,"column_number":-1,"description":"Taking false branch"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/BufferedRows.java","line_number":319,"column_number":-1,"description":"Taking false branch"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/BufferedRows.java","line_number":320,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/BufferedRows.java","line_number":511,"column_number":-1,"description":"start of procedure BufferedRows$MultiNodeRowSerializer(...)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/BufferedRows.java","line_number":512,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/BufferedRows.java","line_number":513,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/BufferedRows.java","line_number":514,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/BufferedRows.java","line_number":515,"column_number":-1,"description":"return from a call to BufferedRows$MultiNodeRowSerializer.<init>(CachedNodeSupplier,int)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/BufferedRows.java","line_number":320,"column_number":-1,"description":"return from a call to BufferedRows$BufferedRowFactory BufferedRows.serializer(CachedNodeSupplier,int)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/RestartableSequence.java","line_number":72,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/RestartableSequence.java","line_number":74,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/RestartableSequence.java","line_number":75,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/RestartableSequence.java","line_number":77,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/RestartableSequence.java","line_number":320,"column_number":-1,"description":"start of procedure RestartableSequence$QueueBufferSupplier(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/RestartableSequence.java","line_number":321,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/RestartableSequence.java","line_number":322,"column_number":-1,"description":"return from a call to RestartableSequence$QueueBufferSupplier.<init>(RestartableSequence,BufferManager)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/RestartableSequence.java","line_number":77,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/RestartableSequence.java","line_number":79,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/RestartableSequence.java","line_number":79,"column_number":-1,"description":"start of procedure RestartableSequence$1(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/RestartableSequence.java","line_number":80,"column_number":-1,"description":"return from a call to RestartableSequence$1.<init>(RestartableSequence,int)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/RestartableSequence.java","line_number":79,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/engine/process/RestartableSequence.java","line_number":97,"column_number":-1,"description":"return from a call to RestartableSequence.<init>(String,SecureSequence,BufferManager,CachedNodeSupplier,int)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/JcrQueryResult.java","line_number":83,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/JcrQueryResult.java","line_number":86,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/JcrQueryResult.java","line_number":86,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/JcrQueryResult.java","line_number":87,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/JcrQueryResult.java","line_number":87,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/JcrQueryResult.java","line_number":88,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/JcrQueryResult.java","line_number":88,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/JcrQueryResult.java","line_number":89,"column_number":-1,"description":"exception java.lang.AssertionError"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/JcrQueryResult.java","line_number":89,"column_number":-1,"description":"return from a call to JcrQueryResult.<init>(JcrQueryContext,String,QueryResults,boolean,int)"}],"key":"JcrQuery.java|execute|RESOURCE_LEAK","node_key":"bf3aac5ebd0e2b8d8299741fc6f2eab1","hash":"a7d8d79715b3c5fd869812116f2901e6","bug_type_hum":"Resource Leak"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object returned by `CndImporter.context.getValueFactories()` could be null and is dereferenced at line 121.","severity":"ERROR","line":121,"column":-1,"procedure":"org.modeshape.jcr.CndImporter.<init>(org.modeshape.jcr.ExecutionContext)","procedure_start_line":116,"file":"src/main/java/org/modeshape/jcr/CndImporter.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/CndImporter.java","line_number":116,"column_number":-1,"description":"start of procedure CndImporter(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/CndImporter.java","line_number":62,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/CndImporter.java","line_number":71,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/CndImporter.java","line_number":76,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/CndImporter.java","line_number":77,"column_number":-1,"description":"Skipping HashSet(...): unknown method"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/CndImporter.java","line_number":76,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/CndImporter.java","line_number":84,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/CndImporter.java","line_number":100,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/CndImporter.java","line_number":101,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/CndImporter.java","line_number":117,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/CndImporter.java","line_number":117,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/CndImporter.java","line_number":118,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/ExecutionContext.java","line_number":358,"column_number":-1,"description":"start of procedure getNamespaceRegistry()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/ExecutionContext.java","line_number":359,"column_number":-1,"description":"return from a call to NamespaceRegistry ExecutionContext.getNamespaceRegistry()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/CndImporter.java","line_number":118,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/LocalNamespaceRegistry.java","line_number":39,"column_number":-1,"description":"start of procedure LocalNamespaceRegistry(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/LocalNamespaceRegistry.java","line_number":40,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":48,"column_number":-1,"description":"start of procedure SimpleNamespaceRegistry()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":49,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":55,"column_number":-1,"description":"start of procedure SimpleNamespaceRegistry(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":40,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":41,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":42,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":43,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":56,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":119,"column_number":-1,"description":"start of procedure register(...)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":121,"column_number":-1,"description":"Skipping isNotNull(...): unknown method"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":122,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":123,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":124,"column_number":-1,"description":"Taking false branch"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":125,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":126,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":127,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":128,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":129,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":130,"column_number":-1,"description":"Taking true branch"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":130,"column_number":-1,"description":"Taking false branch"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":133,"column_number":-1,"description":"Taking true branch"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":133,"column_number":-1,"description":"Taking false branch"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":136,"column_number":-1,"description":"return from a call to String SimpleNamespaceRegistry.register(String,String)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":57,"column_number":-1,"description":"return from a call to SimpleNamespaceRegistry.<init>(String)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":50,"column_number":-1,"description":"return from a call to SimpleNamespaceRegistry.<init>()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/LocalNamespaceRegistry.java","line_number":41,"column_number":-1,"description":"Skipping isNotNull(...): unknown method"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/LocalNamespaceRegistry.java","line_number":42,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/LocalNamespaceRegistry.java","line_number":43,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/basic/LocalNamespaceRegistry.java","line_number":152,"column_number":-1,"description":"start of procedure unregister(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":140,"column_number":-1,"description":"start of procedure unregister(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":141,"column_number":-1,"description":"Skipping isNotNull(...): unknown method"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":142,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":143,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":144,"column_number":-1,"description":"Taking false branch"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":145,"column_number":-1,"description":"Skipping remove(...): unknown method"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":146,"column_number":-1,"description":"return from a call to boolean SimpleNamespaceRegistry.unregister(String)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/basic/LocalNamespaceRegistry.java","line_number":152,"column_number":-1,"description":"return from a call to boolean LocalNamespaceRegistry.unregister(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/LocalNamespaceRegistry.java","line_number":44,"column_number":-1,"description":"return from a call to LocalNamespaceRegistry.<init>(NamespaceRegistry)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/CndImporter.java","line_number":118,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/CndImporter.java","line_number":119,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/ExecutionContext.java","line_number":476,"column_number":-1,"description":"start of procedure with(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/ExecutionContext.java","line_number":477,"column_number":-1,"description":"Skipping ExecutionContext(...): empty list of specs"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/ExecutionContext.java","line_number":171,"column_number":-1,"description":"Definition of ExecutionContext(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/ExecutionContext.java","line_number":477,"column_number":-1,"description":"return from a call to ExecutionContext ExecutionContext.with(LocalNamespaceRegistry)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/CndImporter.java","line_number":119,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/CndImporter.java","line_number":120,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrValueFactory.java","line_number":49,"column_number":-1,"description":"start of procedure JcrValueFactory(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrValueFactory.java","line_number":50,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/ExecutionContext.java","line_number":376,"column_number":-1,"description":"start of procedure getValueFactories()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/ExecutionContext.java","line_number":377,"column_number":-1,"description":"return from a call to ValueFactories ExecutionContext.getValueFactories()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrValueFactory.java","line_number":50,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrValueFactory.java","line_number":51,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/ExecutionContext.java","line_number":358,"column_number":-1,"description":"start of procedure getNamespaceRegistry()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/ExecutionContext.java","line_number":359,"column_number":-1,"description":"return from a call to NamespaceRegistry ExecutionContext.getNamespaceRegistry()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrValueFactory.java","line_number":51,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrValueFactory.java","line_number":52,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/ExecutionContext.java","line_number":431,"column_number":-1,"description":"start of procedure getProcessId()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/ExecutionContext.java","line_number":432,"column_number":-1,"description":"return from a call to String ExecutionContext.getProcessId()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrValueFactory.java","line_number":52,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrValueFactory.java","line_number":53,"column_number":-1,"description":"return from a call to JcrValueFactory.<init>(ExecutionContext)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/CndImporter.java","line_number":120,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/CndImporter.java","line_number":121,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/ExecutionContext.java","line_number":376,"column_number":-1,"description":"start of procedure getValueFactories()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/ExecutionContext.java","line_number":377,"column_number":-1,"description":"return from a call to ValueFactories ExecutionContext.getValueFactories()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/CndImporter.java","line_number":121,"column_number":-1,"description":""}],"key":"CndImporter.java|<init>|NULL_DEREFERENCE","node_key":"2a20cac300e37d62dcc25fd73609c68e","hash":"aba2402cec096ffac27ae90cef03ba2a","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `condition` last assigned on line 121 could be null and is dereferenced by call to `createOrderBysForJoinCondition(...)` at line 140.","severity":"ERROR","line":140,"column":-1,"procedure":"org.modeshape.jcr.query.optimize.ChooseJoinAlgorithm.execute(org.modeshape.jcr.query.QueryContext,org.modeshape.jcr.query.plan.PlanNode,java.util.LinkedList):org.modeshape.jcr.query.plan.PlanNode","procedure_start_line":116,"file":"src/main/java/org/modeshape/jcr/query/optimize/ChooseJoinAlgorithm.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/ChooseJoinAlgorithm.java","line_number":116,"column_number":-1,"description":"start of procedure execute(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/ChooseJoinAlgorithm.java","line_number":120,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1350,"column_number":-1,"description":"start of procedure findAllAtOrBelow(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1374,"column_number":-1,"description":"start of procedure findAllAtOrBelow(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1413,"column_number":-1,"description":"Definition of findAllAtOrBelow(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1374,"column_number":-1,"description":"return from a call to List PlanNode.findAllAtOrBelow(Set)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1350,"column_number":-1,"description":"return from a call to List PlanNode.findAllAtOrBelow(PlanNode$Type)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/ChooseJoinAlgorithm.java","line_number":120,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/ChooseJoinAlgorithm.java","line_number":121,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":730,"column_number":-1,"description":"start of procedure getProperty(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":732,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":732,"column_number":-1,"description":"return from a call to Object PlanNode.getProperty(PlanNode$Property,Class)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/ChooseJoinAlgorithm.java","line_number":121,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/ChooseJoinAlgorithm.java","line_number":122,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/ChooseJoinAlgorithm.java","line_number":127,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/ChooseJoinAlgorithm.java","line_number":131,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":779,"column_number":-1,"description":"start of procedure setProperty(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":781,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":786,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":787,"column_number":-1,"description":"return from a call to Object PlanNode.setProperty(PlanNode$Property,Object)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/ChooseJoinAlgorithm.java","line_number":132,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":569,"column_number":-1,"description":"start of procedure getChildCount()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":570,"column_number":-1,"description":"return from a call to int PlanNode.getChildCount()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/ChooseJoinAlgorithm.java","line_number":132,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/ChooseJoinAlgorithm.java","line_number":136,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":578,"column_number":-1,"description":"start of procedure getFirstChild()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":579,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":579,"column_number":-1,"description":"return from a call to PlanNode PlanNode.getFirstChild()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/ChooseJoinAlgorithm.java","line_number":136,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":888,"column_number":-1,"description":"start of procedure getSelectors()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":889,"column_number":-1,"description":"return from a call to Set PlanNode.getSelectors()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/ChooseJoinAlgorithm.java","line_number":137,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":587,"column_number":-1,"description":"start of procedure getLastChild()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":588,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":588,"column_number":-1,"description":"return from a call to PlanNode PlanNode.getLastChild()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/ChooseJoinAlgorithm.java","line_number":137,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":888,"column_number":-1,"description":"start of procedure getSelectors()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":889,"column_number":-1,"description":"return from a call to Set PlanNode.getSelectors()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/ChooseJoinAlgorithm.java","line_number":138,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/ChooseJoinAlgorithm.java","line_number":139,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/ChooseJoinAlgorithm.java","line_number":140,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/optimize/ChooseJoinAlgorithm.java","line_number":165,"column_number":-1,"description":"start of procedure createOrderBysForJoinCondition(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/optimize/ChooseJoinAlgorithm.java","line_number":170,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/optimize/ChooseJoinAlgorithm.java","line_number":181,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/optimize/ChooseJoinAlgorithm.java","line_number":192,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/optimize/ChooseJoinAlgorithm.java","line_number":193,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/optimize/ChooseJoinAlgorithm.java","line_number":194,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/model/EquiJoinCondition.java","line_number":81,"column_number":-1,"description":"start of procedure selector1Name()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/model/EquiJoinCondition.java","line_number":81,"column_number":-1,"description":"return from a call to SelectorName EquiJoinCondition.selector1Name()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/optimize/ChooseJoinAlgorithm.java","line_number":195,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/model/EquiJoinCondition.java","line_number":90,"column_number":-1,"description":"start of procedure selector2Name()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/model/EquiJoinCondition.java","line_number":90,"column_number":-1,"description":"return from a call to SelectorName EquiJoinCondition.selector2Name()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/optimize/ChooseJoinAlgorithm.java","line_number":196,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/model/EquiJoinCondition.java","line_number":104,"column_number":-1,"description":"start of procedure getProperty1Name()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/model/EquiJoinCondition.java","line_number":105,"column_number":-1,"description":""}],"key":"ChooseJoinAlgorithm.java|execute|NULL_DEREFERENCE","node_key":"5546b5b787516984a4bf7f1377811803","hash":"fc8be64f48a227a5ee4bacc1e004ce3a","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object returned by `joinNode.getFirstChild()` could be null and is dereferenced at line 136.","severity":"ERROR","line":136,"column":-1,"procedure":"org.modeshape.jcr.query.optimize.ChooseJoinAlgorithm.execute(org.modeshape.jcr.query.QueryContext,org.modeshape.jcr.query.plan.PlanNode,java.util.LinkedList):org.modeshape.jcr.query.plan.PlanNode","procedure_start_line":116,"file":"src/main/java/org/modeshape/jcr/query/optimize/ChooseJoinAlgorithm.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/ChooseJoinAlgorithm.java","line_number":116,"column_number":-1,"description":"start of procedure execute(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/ChooseJoinAlgorithm.java","line_number":120,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1350,"column_number":-1,"description":"start of procedure findAllAtOrBelow(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1374,"column_number":-1,"description":"start of procedure findAllAtOrBelow(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1413,"column_number":-1,"description":"Definition of findAllAtOrBelow(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1374,"column_number":-1,"description":"return from a call to List PlanNode.findAllAtOrBelow(Set)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1350,"column_number":-1,"description":"return from a call to List PlanNode.findAllAtOrBelow(PlanNode$Type)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/ChooseJoinAlgorithm.java","line_number":120,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/ChooseJoinAlgorithm.java","line_number":121,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":730,"column_number":-1,"description":"start of procedure getProperty(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":732,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":732,"column_number":-1,"description":"return from a call to Object PlanNode.getProperty(PlanNode$Property,Class)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/ChooseJoinAlgorithm.java","line_number":121,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/ChooseJoinAlgorithm.java","line_number":122,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/ChooseJoinAlgorithm.java","line_number":127,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/ChooseJoinAlgorithm.java","line_number":131,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":779,"column_number":-1,"description":"start of procedure setProperty(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":781,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":786,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":787,"column_number":-1,"description":"return from a call to Object PlanNode.setProperty(PlanNode$Property,Object)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/ChooseJoinAlgorithm.java","line_number":132,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":569,"column_number":-1,"description":"start of procedure getChildCount()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":570,"column_number":-1,"description":"return from a call to int PlanNode.getChildCount()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/ChooseJoinAlgorithm.java","line_number":132,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/ChooseJoinAlgorithm.java","line_number":136,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":578,"column_number":-1,"description":"start of procedure getFirstChild()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":579,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":579,"column_number":-1,"description":"return from a call to PlanNode PlanNode.getFirstChild()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/ChooseJoinAlgorithm.java","line_number":136,"column_number":-1,"description":""}],"key":"ChooseJoinAlgorithm.java|execute|NULL_DEREFERENCE","node_key":"42f56fda1ad408e362508b93a175bb0c","hash":"159a04409f1746d35e97d315cc8691e6","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object returned by `joinNode.getLastChild()` could be null and is dereferenced at line 137.","severity":"ERROR","line":137,"column":-1,"procedure":"org.modeshape.jcr.query.optimize.ChooseJoinAlgorithm.execute(org.modeshape.jcr.query.QueryContext,org.modeshape.jcr.query.plan.PlanNode,java.util.LinkedList):org.modeshape.jcr.query.plan.PlanNode","procedure_start_line":116,"file":"src/main/java/org/modeshape/jcr/query/optimize/ChooseJoinAlgorithm.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/ChooseJoinAlgorithm.java","line_number":116,"column_number":-1,"description":"start of procedure execute(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/ChooseJoinAlgorithm.java","line_number":120,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1350,"column_number":-1,"description":"start of procedure findAllAtOrBelow(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1374,"column_number":-1,"description":"start of procedure findAllAtOrBelow(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1413,"column_number":-1,"description":"Definition of findAllAtOrBelow(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1374,"column_number":-1,"description":"return from a call to List PlanNode.findAllAtOrBelow(Set)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1350,"column_number":-1,"description":"return from a call to List PlanNode.findAllAtOrBelow(PlanNode$Type)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/ChooseJoinAlgorithm.java","line_number":120,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/ChooseJoinAlgorithm.java","line_number":121,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":730,"column_number":-1,"description":"start of procedure getProperty(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":732,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":732,"column_number":-1,"description":"return from a call to Object PlanNode.getProperty(PlanNode$Property,Class)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/ChooseJoinAlgorithm.java","line_number":121,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/ChooseJoinAlgorithm.java","line_number":122,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/ChooseJoinAlgorithm.java","line_number":127,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/ChooseJoinAlgorithm.java","line_number":131,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":779,"column_number":-1,"description":"start of procedure setProperty(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":781,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":786,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":787,"column_number":-1,"description":"return from a call to Object PlanNode.setProperty(PlanNode$Property,Object)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/ChooseJoinAlgorithm.java","line_number":132,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":569,"column_number":-1,"description":"start of procedure getChildCount()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":570,"column_number":-1,"description":"return from a call to int PlanNode.getChildCount()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/ChooseJoinAlgorithm.java","line_number":132,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/ChooseJoinAlgorithm.java","line_number":136,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":578,"column_number":-1,"description":"start of procedure getFirstChild()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":579,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":579,"column_number":-1,"description":"return from a call to PlanNode PlanNode.getFirstChild()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/ChooseJoinAlgorithm.java","line_number":136,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":888,"column_number":-1,"description":"start of procedure getSelectors()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":889,"column_number":-1,"description":"return from a call to Set PlanNode.getSelectors()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/ChooseJoinAlgorithm.java","line_number":137,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":587,"column_number":-1,"description":"start of procedure getLastChild()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":588,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":588,"column_number":-1,"description":"return from a call to PlanNode PlanNode.getLastChild()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/ChooseJoinAlgorithm.java","line_number":137,"column_number":-1,"description":""}],"key":"ChooseJoinAlgorithm.java|execute|NULL_DEREFERENCE","node_key":"21bbf00bf52cbb29c85ade37dbbc751f","hash":"067ec4e9b4a2ace14e6a5f1db8cd8ea0","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `childrenMap` last assigned on line 125 could be null and is dereferenced at line 126.","severity":"ERROR","line":126,"column":-1,"procedure":"org.modeshape.jcr.federation.FederatedDocumentChanges.setChildrenChanges(java.util.LinkedHashMap,java.util.Map,java.util.HashSet,java.util.HashMap):void","procedure_start_line":119,"file":"src/main/java/org/modeshape/jcr/federation/FederatedDocumentChanges.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/federation/FederatedDocumentChanges.java","line_number":119,"column_number":-1,"description":"start of procedure setChildrenChanges(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/federation/FederatedDocumentChanges.java","line_number":124,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/federation/FederatedDocumentChanges.java","line_number":125,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/federation/FederatedDocumentChanges.java","line_number":126,"column_number":-1,"description":""}],"key":"FederatedDocumentChanges.java|setChildrenChanges|NULL_DEREFERENCE","node_key":"75a3105ef036e14d28c2a0df35d92164","hash":"a75213591412c53232832e8d7b7353a1","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object returned by `other.getProperty(org.modeshape.jcr.JcrLexicon.SUCCESSORS)` could be null and is dereferenced at line 128.","severity":"ERROR","line":128,"column":-1,"procedure":"org.modeshape.jcr.JcrVersionNode.isLinearSuccessorOf(org.modeshape.jcr.JcrVersionNode):boolean","procedure_start_line":125,"file":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","line_number":125,"column_number":-1,"description":"start of procedure isLinearSuccessorOf(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","line_number":126,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":528,"column_number":-1,"description":"start of procedure hasProperty(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":529,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":530,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":201,"column_number":-1,"description":"start of procedure node()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":185,"column_number":-1,"description":"start of procedure sessionCache()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"start of procedure cache()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"return from a call to SessionCache JcrSession.cache()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":"return from a call to SessionCache AbstractJcrNode.sessionCache()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":201,"column_number":-1,"description":"Skipping getNode(...): unknown method"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/CachedNodeSupplier.java","line_number":-1,"column_number":-1,"description":"Definition of getNode(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":202,"column_number":-1,"description":"Taking false branch"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":208,"column_number":-1,"description":"return from a call to CachedNode AbstractJcrNode.node()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":530,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":185,"column_number":-1,"description":"start of procedure sessionCache()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"start of procedure cache()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"return from a call to SessionCache JcrSession.cache()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":"return from a call to SessionCache AbstractJcrNode.sessionCache()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":530,"column_number":-1,"description":"return from a call to boolean AbstractJcrNode.hasProperty(Name)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","line_number":126,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","line_number":128,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":349,"column_number":-1,"description":"start of procedure getProperty(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":350,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":351,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":370,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":201,"column_number":-1,"description":"start of procedure node()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":185,"column_number":-1,"description":"start of procedure sessionCache()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"start of procedure cache()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"return from a call to SessionCache JcrSession.cache()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":"return from a call to SessionCache AbstractJcrNode.sessionCache()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":201,"column_number":-1,"description":"Skipping getNode(...): unknown method"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/CachedNodeSupplier.java","line_number":-1,"column_number":-1,"description":"Definition of getNode(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":202,"column_number":-1,"description":"Taking false branch"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":208,"column_number":-1,"description":"return from a call to CachedNode AbstractJcrNode.node()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":371,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":185,"column_number":-1,"description":"start of procedure sessionCache()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"start of procedure cache()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"return from a call to SessionCache JcrSession.cache()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":"return from a call to SessionCache AbstractJcrNode.sessionCache()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":372,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":373,"column_number":-1,"description":"Skipping remove(...): unknown method"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":374,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":377,"column_number":-1,"description":"return from a call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","line_number":128,"column_number":-1,"description":""}],"key":"JcrVersionNode.java|isLinearSuccessorOf|NULL_DEREFERENCE","node_key":"07c4ca0274b2c82c8349f056d2a4ea49","hash":"812c975c62afdc7dbb996443fd2279c0","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object returned by `session.getWorkspace()` could be null and is dereferenced at line 138.","severity":"ERROR","line":138,"column":-1,"procedure":"org.modeshape.jcr.Connectors.createPreconfiguredProjections():void","procedure_start_line":132,"file":"src/main/java/org/modeshape/jcr/Connectors.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/Connectors.java","line_number":132,"column_number":-1,"description":"start of procedure createPreconfiguredProjections()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/Connectors.java","line_number":133,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/Connectors.java","line_number":133,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/Connectors.java","line_number":134,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/Connectors.java","line_number":135,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/Connectors.java","line_number":796,"column_number":-1,"description":"start of procedure getWorkspacesWithProjections()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/Connectors.java","line_number":797,"column_number":-1,"description":"return from a call to Collection Connectors$Snapshot.getWorkspacesWithProjections()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/Connectors.java","line_number":135,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/Connectors.java","line_number":136,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1880,"column_number":-1,"description":"start of procedure loginInternalSession(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1882,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1883,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":484,"column_number":-1,"description":"start of procedure runningState()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":485,"column_number":-1,"description":"Taking false branch"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":488,"column_number":-1,"description":"return from a call to JcrRepository$RunningState JcrRepository.runningState()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1884,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1437,"column_number":-1,"description":"start of procedure internalWorkerContext()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1437,"column_number":-1,"description":"return from a call to ExecutionContext JcrRepository$RunningState.internalWorkerContext()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1885,"column_number":-1,"description":"Skipping emptyMap(): unknown method"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1886,"column_number":-1,"description":"Skipping JcrSession(...): empty list of specs"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":173,"column_number":-1,"description":"Definition of JcrSession(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1887,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1771,"column_number":-1,"description":"start of procedure addSession(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1773,"column_number":-1,"description":"Taking true branch"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1774,"column_number":-1,"description":"Skipping writeLock(): unknown method"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1776,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1777,"column_number":-1,"description":"Skipping put(...): unknown method"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1779,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1781,"column_number":-1,"description":"return from a call to void JcrRepository$RunningState.addSession(JcrSession,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1888,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1890,"column_number":-1,"description":"return from a call to JcrSession JcrRepository$RunningState.loginInternalSession(String)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/Connectors.java","line_number":138,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":749,"column_number":-1,"description":"start of procedure getWorkspace()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":750,"column_number":-1,"description":"return from a call to JcrWorkspace JcrSession.getWorkspace()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/Connectors.java","line_number":138,"column_number":-1,"description":""}],"key":"Connectors.java|createPreconfiguredProjections|NULL_DEREFERENCE","node_key":"3677875e6aead27ee1320f16c80d8b0f","hash":"969e48a25de8647af4ee52f6dc2d32e9","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object returned by `getProperty(org.modeshape.jcr.JcrLexicon.VERSIONABLE_UUID)` could be null and is dereferenced at line 163.","severity":"ERROR","line":163,"column":-1,"procedure":"org.modeshape.jcr.JcrVersionHistoryNode.getVersionableUUID():java.lang.String","procedure_start_line":162,"file":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":162,"column_number":-1,"description":"start of procedure getVersionableUUID()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":163,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":349,"column_number":-1,"description":"start of procedure getProperty(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":350,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":351,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":370,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":201,"column_number":-1,"description":"start of procedure node()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":185,"column_number":-1,"description":"start of procedure sessionCache()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"start of procedure cache()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"return from a call to SessionCache JcrSession.cache()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":"return from a call to SessionCache AbstractJcrNode.sessionCache()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":201,"column_number":-1,"description":"Skipping getNode(...): unknown method"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/CachedNodeSupplier.java","line_number":-1,"column_number":-1,"description":"Definition of getNode(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":202,"column_number":-1,"description":"Taking false branch"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":208,"column_number":-1,"description":"return from a call to CachedNode AbstractJcrNode.node()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":371,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":185,"column_number":-1,"description":"start of procedure sessionCache()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"start of procedure cache()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"return from a call to SessionCache JcrSession.cache()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":"return from a call to SessionCache AbstractJcrNode.sessionCache()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":372,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":373,"column_number":-1,"description":"Skipping remove(...): unknown method"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":374,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":377,"column_number":-1,"description":"return from a call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":163,"column_number":-1,"description":""}],"key":"JcrVersionHistoryNode.java|getVersionableUUID|NULL_DEREFERENCE","node_key":"cd917e0854ab05a03701b589d85cd12c","hash":"b225c2d59ccac08431804266a56e78e8","bug_type_hum":"Null Dereference"},{"bug_type":"RESOURCE_LEAK","qualifier":"resource of type `java.io.FileOutputStream` acquired by call to `FileOutputStream(...)` at line 187 is not released after line 187.","severity":"ERROR","line":187,"column":-1,"procedure":"org.modeshape.jcr.value.binary.FileSystemBinaryStore.getTrashFile(org.modeshape.jcr.value.BinaryKey,boolean):java.io.File","procedure_start_line":166,"file":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":166,"column_number":-1,"description":"start of procedure getTrashFile(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":167,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":285,"column_number":-1,"description":"start of procedure findFile(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":288,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":292,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/BinaryKey.java","line_number":109,"column_number":-1,"description":"start of procedure toString()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/BinaryKey.java","line_number":110,"column_number":-1,"description":"return from a call to String BinaryKey.toString()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":293,"column_number":-1,"description":"Skipping File(...): unknown method"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":294,"column_number":-1,"description":"Skipping File(...): unknown method"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":295,"column_number":-1,"description":"Skipping File(...): unknown method"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":296,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":297,"column_number":-1,"description":"Skipping mkdirs(): unknown method"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":299,"column_number":-1,"description":"Skipping File(...): unknown method"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":300,"column_number":-1,"description":"return from a call to File FileSystemBinaryStore.findFile(File,BinaryKey,boolean)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":168,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":168,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":173,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":179,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":285,"column_number":-1,"description":"start of procedure findFile(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":288,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":292,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/BinaryKey.java","line_number":109,"column_number":-1,"description":"start of procedure toString()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/BinaryKey.java","line_number":110,"column_number":-1,"description":"return from a call to String BinaryKey.toString()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":293,"column_number":-1,"description":"Skipping File(...): unknown method"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":294,"column_number":-1,"description":"Skipping File(...): unknown method"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":295,"column_number":-1,"description":"Skipping File(...): unknown method"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":296,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":299,"column_number":-1,"description":"Skipping File(...): unknown method"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":300,"column_number":-1,"description":"return from a call to File FileSystemBinaryStore.findFile(File,BinaryKey,boolean)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":180,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":184,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/BinaryKey.java","line_number":109,"column_number":-1,"description":"start of procedure toString()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/BinaryKey.java","line_number":110,"column_number":-1,"description":"return from a call to String BinaryKey.toString()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":184,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/NamedLocks.java","line_number":45,"column_number":-1,"description":"start of procedure writeLock(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/NamedLocks.java","line_number":46,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/binary/NamedLocks.java","line_number":63,"column_number":-1,"description":"start of procedure lock(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/binary/NamedLocks.java","line_number":65,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/binary/NamedLocks.java","line_number":67,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/binary/NamedLocks.java","line_number":68,"column_number":-1,"description":"Taking false branch"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/binary/NamedLocks.java","line_number":77,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/binary/NamedLocks.java","line_number":178,"column_number":-1,"description":"start of procedure incrementReferenceCount()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/binary/NamedLocks.java","line_number":179,"column_number":-1,"description":"Skipping incrementAndGet(): unknown method"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/binary/NamedLocks.java","line_number":180,"column_number":-1,"description":"return from a call to void NamedLocks$NamedLock.incrementReferenceCount()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/binary/NamedLocks.java","line_number":79,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/binary/NamedLocks.java","line_number":83,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/binary/NamedLocks.java","line_number":186,"column_number":-1,"description":"start of procedure lock(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/binary/NamedLocks.java","line_number":187,"column_number":-1,"description":"Taking true branch"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/binary/NamedLocks.java","line_number":188,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/binary/NamedLocks.java","line_number":189,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/binary/NamedLocks.java","line_number":192,"column_number":-1,"description":"return from a call to Lock NamedLocks$NamedLock.lock(boolean)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/binary/NamedLocks.java","line_number":83,"column_number":-1,"description":"return from a call to Lock NamedLocks.lock(String,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/NamedLocks.java","line_number":46,"column_number":-1,"description":"return from a call to Lock NamedLocks.writeLock(String)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":186,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":186,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":187,"column_number":-1,"description":"Skipping write(...): unknown method"}],"key":"FileSystemBinaryStore.java|getTrashFile|RESOURCE_LEAK","node_key":"d4e564e43cfe2f188b4e5919b304f1e5","hash":"57473e012382a5b8f85114f601fbe732","bug_type_hum":"Resource Leak"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `node` last assigned on line 175 could be null and is dereferenced at line 178.","severity":"ERROR","line":178,"column":-1,"procedure":"org.modeshape.jcr.query.plan.PlanUtil.findRequiredColumnTypes(org.modeshape.jcr.query.QueryContext,java.util.List,org.modeshape.jcr.query.plan.PlanNode):java.util.List","procedure_start_line":170,"file":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":170,"column_number":-1,"description":"start of procedure findRequiredColumnTypes(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":173,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":312,"column_number":-1,"description":"start of procedure getType()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":313,"column_number":-1,"description":"return from a call to PlanNode$Type PlanNode.getType()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":173,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":174,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":569,"column_number":-1,"description":"start of procedure getChildCount()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":570,"column_number":-1,"description":"return from a call to int PlanNode.getChildCount()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":174,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":175,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":578,"column_number":-1,"description":"start of procedure getFirstChild()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":579,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":579,"column_number":-1,"description":"return from a call to PlanNode PlanNode.getFirstChild()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":175,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":178,"column_number":-1,"description":""}],"key":"PlanUtil.java|findRequiredColumnTypes|NULL_DEREFERENCE","node_key":"37d4c09745022e7653d36313bab60383","hash":"bef7dc44aa9a9330fc52a15c0c00fe42","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `leftChild` last assigned on line 181 could be null and is dereferenced at line 183.","severity":"ERROR","line":183,"column":-1,"procedure":"org.modeshape.jcr.query.optimize.RewriteIdentityJoins.rewriteJoinNode(org.modeshape.jcr.query.QueryContext,org.modeshape.jcr.query.plan.PlanNode,java.util.Map):void","procedure_start_line":172,"file":"src/main/java/org/modeshape/jcr/query/optimize/RewriteIdentityJoins.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewriteIdentityJoins.java","line_number":172,"column_number":-1,"description":"start of procedure rewriteJoinNode(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewriteIdentityJoins.java","line_number":176,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":587,"column_number":-1,"description":"start of procedure getLastChild()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":588,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":588,"column_number":-1,"description":"return from a call to PlanNode PlanNode.getLastChild()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewriteIdentityJoins.java","line_number":177,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":490,"column_number":-1,"description":"start of procedure removeFromParent()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":491,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":492,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":494,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":495,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":497,"column_number":-1,"description":"return from a call to PlanNode PlanNode.removeFromParent()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewriteIdentityJoins.java","line_number":178,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1452,"column_number":-1,"description":"start of procedure findAtOrBelow(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1474,"column_number":-1,"description":"start of procedure findAtOrBelow(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1510,"column_number":-1,"description":"Definition of findAtOrBelow(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1474,"column_number":-1,"description":"return from a call to PlanNode PlanNode.findAtOrBelow(Set)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1452,"column_number":-1,"description":"return from a call to PlanNode PlanNode.findAtOrBelow(PlanNode$Type)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewriteIdentityJoins.java","line_number":181,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":578,"column_number":-1,"description":"start of procedure getFirstChild()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":579,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":579,"column_number":-1,"description":"return from a call to PlanNode PlanNode.getFirstChild()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewriteIdentityJoins.java","line_number":182,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":699,"column_number":-1,"description":"start of procedure extractFromParent()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":700,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":685,"column_number":-1,"description":"start of procedure extractChild(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":686,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":569,"column_number":-1,"description":"start of procedure getChildCount()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":570,"column_number":-1,"description":"return from a call to int PlanNode.getChildCount()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":686,"column_number":-1,"description":"Taking true branch"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":687,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":671,"column_number":-1,"description":"start of procedure removeChild(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":672,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":673,"column_number":-1,"description":"Taking false branch"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":676,"column_number":-1,"description":"return from a call to boolean PlanNode.removeChild(PlanNode)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":692,"column_number":-1,"description":"return from a call to void PlanNode.extractChild(PlanNode)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":701,"column_number":-1,"description":"return from a call to void PlanNode.extractFromParent()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewriteIdentityJoins.java","line_number":183,"column_number":-1,"description":""}],"key":"RewriteIdentityJoins.java|rewriteJoinNode|NULL_DEREFERENCE","node_key":"9a4ccfa2a2a938652f47be7483bb3770","hash":"e49099c9a0c0789d52b65b83f84bfb89","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `rightChild` last assigned on line 176 could be null and is dereferenced at line 177.","severity":"ERROR","line":177,"column":-1,"procedure":"org.modeshape.jcr.query.optimize.RewriteIdentityJoins.rewriteJoinNode(org.modeshape.jcr.query.QueryContext,org.modeshape.jcr.query.plan.PlanNode,java.util.Map):void","procedure_start_line":172,"file":"src/main/java/org/modeshape/jcr/query/optimize/RewriteIdentityJoins.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewriteIdentityJoins.java","line_number":172,"column_number":-1,"description":"start of procedure rewriteJoinNode(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewriteIdentityJoins.java","line_number":176,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":587,"column_number":-1,"description":"start of procedure getLastChild()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":588,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":588,"column_number":-1,"description":"return from a call to PlanNode PlanNode.getLastChild()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RewriteIdentityJoins.java","line_number":177,"column_number":-1,"description":""}],"key":"RewriteIdentityJoins.java|rewriteJoinNode|NULL_DEREFERENCE","node_key":"3677875e6aead27ee1320f16c80d8b0f","hash":"70d2177cd4476be4c809237ed92f574b","bug_type_hum":"Null Dereference"},{"bug_type":"RESOURCE_LEAK","qualifier":"resource of type `org.modeshape.jcr.query.BufferManager` acquired by call to `BufferManager(...)` at line 177 is not released after line 177.","severity":"ERROR","line":177,"column":-1,"procedure":"org.modeshape.jcr.RepositoryQueryManager.query(org.modeshape.jcr.ExecutionContext,org.modeshape.jcr.cache.RepositoryCache,java.util.Set,java.util.Map,org.modeshape.jcr.api.query.qom.QueryCommand,org.modeshape.jcr.query.validate.Schemata,org.modeshape.jcr.RepositoryIndexes,org.modeshape.jcr.NodeTypes,org.modeshape.jcr.query.plan.PlanHints,java.util.Map):org.modeshape.jcr.query.CancellableQuery","procedure_start_line":176,"file":"src/main/java/org/modeshape/jcr/RepositoryQueryManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryQueryManager.java","line_number":176,"column_number":-1,"description":"start of procedure query(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryQueryManager.java","line_number":239,"column_number":-1,"description":"start of procedure queryEngine()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryQueryManager.java","line_number":239,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryQueryManager.java","line_number":241,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryQueryManager.java","line_number":242,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryQueryManager.java","line_number":243,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryQueryManager.java","line_number":244,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/RepositoryConfiguration.java","line_number":1673,"column_number":-1,"description":"start of procedure getIndexProviders()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/RepositoryConfiguration.java","line_number":1674,"column_number":-1,"description":"Skipping SimpleProblems(): unknown method"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/RepositoryConfiguration.java","line_number":1675,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/RepositoryConfiguration.java","line_number":2481,"column_number":-1,"description":"start of procedure readComponents(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/RepositoryConfiguration.java","line_number":2486,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/RepositoryConfiguration.java","line_number":2487,"column_number":-1,"description":"Skipping getDocument(...): unknown method"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/RepositoryConfiguration.java","line_number":2488,"column_number":-1,"description":"Taking true branch"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/RepositoryConfiguration.java","line_number":2489,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/RepositoryConfiguration.java","line_number":2490,"column_number":-1,"description":"Taking false branch"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/RepositoryConfiguration.java","line_number":2511,"column_number":-1,"description":"return from a call to List RepositoryConfiguration.readComponents(Document,String,String,Map,SimpleProblems)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/RepositoryConfiguration.java","line_number":1677,"column_number":-1,"description":"Taking true branch"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/RepositoryConfiguration.java","line_number":1677,"column_number":-1,"description":"Taking false branch"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/RepositoryConfiguration.java","line_number":1678,"column_number":-1,"description":"return from a call to List RepositoryConfiguration.getIndexProviders()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryQueryManager.java","line_number":244,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryQueryManager.java","line_number":246,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/engine/IndexQueryEngine.java","line_number":150,"column_number":-1,"description":"start of procedure builder()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/engine/IndexQueryEngine.java","line_number":151,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/engine/IndexQueryEngine.java","line_number":68,"column_number":-1,"description":"start of procedure IndexQueryEngine$Builder()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/query/engine/ScanningQueryEngine.java","line_number":162,"column_number":-1,"description":"start of procedure ScanningQueryEngine$Builder()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/query/QueryEngineBuilder.java","line_number":38,"column_number":-1,"description":"start of procedure QueryEngineBuilder()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/query/QueryEngineBuilder.java","line_number":39,"column_number":-1,"description":"return from a call to QueryEngineBuilder.<init>()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/query/engine/ScanningQueryEngine.java","line_number":162,"column_number":-1,"description":"return from a call to ScanningQueryEngine$Builder.<init>()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/engine/IndexQueryEngine.java","line_number":68,"column_number":-1,"description":"return from a call to IndexQueryEngine$Builder.<init>()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/engine/IndexQueryEngine.java","line_number":151,"column_number":-1,"description":"return from a call to IndexQueryEngine$Builder IndexQueryEngine.builder()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryQueryManager.java","line_number":247,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryQueryManager.java","line_number":248,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/RepositoryConfiguration.java","line_number":882,"column_number":-1,"description":"start of procedure getName()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/RepositoryConfiguration.java","line_number":883,"column_number":-1,"description":"return from a call to String RepositoryConfiguration.getName()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryQueryManager.java","line_number":248,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryQueryManager.java","line_number":247,"column_number":-1,"description":"Skipping debug(...): unknown method"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryQueryManager.java","line_number":255,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1433,"column_number":-1,"description":"start of procedure context()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1433,"column_number":-1,"description":"return from a call to ExecutionContext JcrRepository$RunningState.context()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryQueryManager.java","line_number":255,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/QueryEngineBuilder.java","line_number":41,"column_number":-1,"description":"start of procedure using(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/QueryEngineBuilder.java","line_number":44,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/QueryEngineBuilder.java","line_number":45,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/QueryEngineBuilder.java","line_number":46,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/QueryEngineBuilder.java","line_number":47,"column_number":-1,"description":"return from a call to QueryEngineBuilder QueryEngineBuilder.using(RepositoryConfiguration,IndexManager,ExecutionContext)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryQueryManager.java","line_number":255,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/engine/IndexQueryEngine.java","line_number":71,"column_number":-1,"description":"start of procedure build()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/engine/IndexQueryEngine.java","line_number":73,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/QueryEngineBuilder.java","line_number":71,"column_number":-1,"description":"start of procedure indexManager()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/QueryEngineBuilder.java","line_number":71,"column_number":-1,"description":"return from a call to IndexManager QueryEngineBuilder.indexManager()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/engine/IndexQueryEngine.java","line_number":73,"column_number":-1,"description":"Skipping getProviderNames(): unknown method"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/engine/IndexQueryEngine.java","line_number":74,"column_number":-1,"description":"Taking false branch"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/engine/IndexQueryEngine.java","line_number":80,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/engine/IndexQueryEngine.java","line_number":81,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/QueryEngineBuilder.java","line_number":71,"column_number":-1,"description":"start of procedure indexManager()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/QueryEngineBuilder.java","line_number":71,"column_number":-1,"description":"return from a call to IndexManager QueryEngineBuilder.indexManager()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/engine/IndexQueryEngine.java","line_number":81,"column_number":-1,"description":"Taking false branch"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/engine/IndexQueryEngine.java","line_number":93,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/engine/IndexPlanners.java","line_number":79,"column_number":-1,"description":"start of procedure withProviders(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/engine/IndexPlanners.java","line_number":80,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/query/engine/IndexPlanners.java","line_number":8,"column_number":-1,"description":"start of procedure IndexPlanners$2(...)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/query/engine/IndexPlanners.java","line_number":80,"column_number":-1,"description":""},{"level":5,"filename":"src/main/java/org/modeshape/jcr/query/engine/IndexPlanners.java","line_number":41,"column_number":-1,"description":"start of procedure IndexPlanners()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/query/engine/IndexPlanners.java","line_number":41,"column_number":-1,"description":"return from a call to IndexPlanners.<init>()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/query/engine/IndexPlanners.java","line_number":80,"column_number":-1,"description":"return from a call to IndexPlanners$2.<init>(Map)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/engine/IndexPlanners.java","line_number":80,"column_number":-1,"description":"return from a call to IndexPlanners IndexPlanners.withProviders(HashMap)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/engine/IndexQueryEngine.java","line_number":94,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/QueryEngineBuilder.java","line_number":83,"column_number":-1,"description":"start of procedure optimizer()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/QueryEngineBuilder.java","line_number":83,"column_number":-1,"description":"Taking false branch"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/query/QueryEngineBuilder.java","line_number":90,"column_number":-1,"description":"start of procedure defaultOptimizer()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/query/QueryEngineBuilder.java","line_number":91,"column_number":-1,"description":""},{"level":5,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RuleBasedOptimizer.java","line_number":32,"column_number":-1,"description":"start of procedure RuleBasedOptimizer()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/query/optimize/RuleBasedOptimizer.java","line_number":32,"column_number":-1,"description":"return from a call to RuleBasedOptimizer.<init>()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/query/QueryEngineBuilder.java","line_number":91,"column_number":-1,"description":"return from a call to Optimizer QueryEngineBuilder.defaultOptimizer()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/QueryEngineBuilder.java","line_number":83,"column_number":-1,"description":"return from a call to Optimizer QueryEngineBuilder.optimizer()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/engine/IndexQueryEngine.java","line_number":95,"column_number":-1,"description":"Taking false branch"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/engine/IndexQueryEngine.java","line_number":108,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/QueryEngineBuilder.java","line_number":67,"column_number":-1,"description":"start of procedure context()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/QueryEngineBuilder.java","line_number":67,"column_number":-1,"description":"return from a call to ExecutionContext QueryEngineBuilder.context()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/engine/IndexQueryEngine.java","line_number":108,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/QueryEngineBuilder.java","line_number":74,"column_number":-1,"description":"start of procedure repositoryName()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/QueryEngineBuilder.java","line_number":75,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/query/QueryEngineBuilder.java","line_number":63,"column_number":-1,"description":"start of procedure config()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/query/QueryEngineBuilder.java","line_number":63,"column_number":-1,"description":"return from a call to RepositoryConfiguration QueryEngineBuilder.config()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/QueryEngineBuilder.java","line_number":75,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/RepositoryConfiguration.java","line_number":882,"column_number":-1,"description":"start of procedure getName()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/RepositoryConfiguration.java","line_number":883,"column_number":-1,"description":"return from a call to String RepositoryConfiguration.getName()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/QueryEngineBuilder.java","line_number":75,"column_number":-1,"description":"return from a call to String QueryEngineBuilder.repositoryName()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/engine/IndexQueryEngine.java","line_number":108,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/QueryEngineBuilder.java","line_number":79,"column_number":-1,"description":"start of procedure planner()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/QueryEngineBuilder.java","line_number":79,"column_number":-1,"description":"Taking false branch"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/query/QueryEngineBuilder.java","line_number":86,"column_number":-1,"description":"start of procedure defaultPlanner()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/query/QueryEngineBuilder.java","line_number":87,"column_number":-1,"description":""},{"level":5,"filename":"src/main/java/org/modeshape/jcr/query/plan/CanonicalPlanner.java","line_number":92,"column_number":-1,"description":"start of procedure CanonicalPlanner()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/query/plan/CanonicalPlanner.java","line_number":92,"column_number":-1,"description":"return from a call to CanonicalPlanner.<init>()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/query/QueryEngineBuilder.java","line_number":87,"column_number":-1,"description":"return from a call to Planner QueryEngineBuilder.defaultPlanner()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/QueryEngineBuilder.java","line_number":79,"column_number":-1,"description":"return from a call to Planner QueryEngineBuilder.planner()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/engine/IndexQueryEngine.java","line_number":108,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/QueryEngineBuilder.java","line_number":71,"column_number":-1,"description":"start of procedure indexManager()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/QueryEngineBuilder.java","line_number":71,"column_number":-1,"description":"return from a call to IndexManager QueryEngineBuilder.indexManager()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/engine/IndexQueryEngine.java","line_number":108,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/engine/IndexQueryEngine.java","line_number":156,"column_number":-1,"description":"start of procedure IndexQueryEngine(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/engine/IndexQueryEngine.java","line_number":161,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/query/engine/ScanningQueryEngine.java","line_number":183,"column_number":-1,"description":"start of procedure ScanningQueryEngine(...)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/query/engine/ScanningQueryEngine.java","line_number":186,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/query/engine/ScanningQueryEngine.java","line_number":187,"column_number":-1,"description":"Taking true branch"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/query/engine/ScanningQueryEngine.java","line_number":187,"column_number":-1,"description":"Taking false branch"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/query/engine/ScanningQueryEngine.java","line_number":188,"column_number":-1,"description":"Taking true branch"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/query/engine/ScanningQueryEngine.java","line_number":188,"column_number":-1,"description":"Taking false branch"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/query/engine/ScanningQueryEngine.java","line_number":189,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/query/engine/ScanningQueryEngine.java","line_number":190,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/query/engine/ScanningQueryEngine.java","line_number":191,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/query/engine/ScanningQueryEngine.java","line_number":192,"column_number":-1,"description":"return from a call to ScanningQueryEngine.<init>(ExecutionContext,String,Planner,Optimizer)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/engine/IndexQueryEngine.java","line_number":162,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/engine/IndexQueryEngine.java","line_number":163,"column_number":-1,"description":"return from a call to IndexQueryEngine.<init>(ExecutionContext,String,CanonicalPlanner,RuleBasedOptimizer,IndexManager)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/engine/IndexQueryEngine.java","line_number":108,"column_number":-1,"description":"return from a call to QueryEngine IndexQueryEngine$Builder.build()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryQueryManager.java","line_number":255,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryQueryManager.java","line_number":258,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryQueryManager.java","line_number":261,"column_number":-1,"description":"return from a call to QueryEngine RepositoryQueryManager.queryEngine()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryQueryManager.java","line_number":177,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/BufferManager.java","line_number":340,"column_number":-1,"description":"start of procedure BufferManager(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/BufferManager.java","line_number":341,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/BufferManager.java","line_number":344,"column_number":-1,"description":"start of procedure BufferManager(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/BufferManager.java","line_number":346,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/BufferManager.java","line_number":338,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/BufferManager.java","line_number":347,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/BufferManager.java","line_number":293,"column_number":-1,"description":"start of procedure BufferManager$DbHolder(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/BufferManager.java","line_number":289,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/BufferManager.java","line_number":290,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/BufferManager.java","line_number":294,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/BufferManager.java","line_number":295,"column_number":-1,"description":"return from a call to BufferManager$DbHolder.<init>(Supplier)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/BufferManager.java","line_number":347,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/BufferManager.java","line_number":348,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/BufferManager.java","line_number":293,"column_number":-1,"description":"start of procedure BufferManager$DbHolder(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/BufferManager.java","line_number":289,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/BufferManager.java","line_number":290,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/BufferManager.java","line_number":294,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/BufferManager.java","line_number":295,"column_number":-1,"description":"return from a call to BufferManager$DbHolder.<init>(Supplier)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/BufferManager.java","line_number":348,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/BufferManager.java","line_number":351,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/ExecutionContext.java","line_number":376,"column_number":-1,"description":"start of procedure getValueFactories()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/ExecutionContext.java","line_number":377,"column_number":-1,"description":"return from a call to ValueFactories ExecutionContext.getValueFactories()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/BufferManager.java","line_number":352,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/index/local/MapDB.java","line_number":77,"column_number":-1,"description":"start of procedure serializers(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/index/local/MapDB.java","line_number":78,"column_number":-1,"description":"Skipping MapDB$SerializerSupplier(...): empty list of specs"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/index/local/MapDB.java","line_number":92,"column_number":-1,"description":"Definition of MapDB$SerializerSupplier(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/index/local/MapDB.java","line_number":78,"column_number":-1,"description":"return from a call to MapDB$Serializers MapDB.serializers(ValueFactories)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/BufferManager.java","line_number":352,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/BufferManager.java","line_number":353,"column_number":-1,"description":"return from a call to BufferManager.<init>(ExecutionContext,Supplier,Supplier)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/BufferManager.java","line_number":342,"column_number":-1,"description":"return from a call to BufferManager.<init>(ExecutionContext)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryQueryManager.java","line_number":177,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/engine/ScanningQueryEngine.java","line_number":457,"column_number":-1,"description":"start of procedure createQueryContext(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/engine/ScanningQueryEngine.java","line_number":467,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/engine/ScanningQueryEngine.java","line_number":3035,"column_number":-1,"description":"start of procedure ScanningQueryEngine$ScanQueryContext(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/engine/ScanningQueryEngine.java","line_number":3047,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/QueryContext.java","line_number":143,"column_number":-1,"description":"start of procedure QueryContext(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/QueryContext.java","line_number":155,"column_number":-1,"description":"Skipping incrementAndGet(): unknown method"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/QueryContext.java","line_number":154,"column_number":-1,"description":"Skipping QueryContext(...): empty list of specs"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/query/QueryContext.java","line_number":86,"column_number":-1,"description":"Definition of QueryContext(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/QueryContext.java","line_number":156,"column_number":-1,"description":"return from a call to QueryContext.<init>(ExecutionContext,RepositoryCache,Set,Map,Schemata,RepositoryIndexes,NodeTypes,BufferManager,PlanHints,Problems,Map)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/engine/ScanningQueryEngine.java","line_number":3049,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/engine/ScanningQueryEngine.java","line_number":3050,"column_number":-1,"description":"return from a call to ScanningQueryEngine$ScanQueryContext.<init>(ExecutionContext,RepositoryCache,Set,Map,Schemata,RepositoryIndexes,NodeTypes,BufferManager,PlanHints,Problems,Map,HashMap)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/engine/ScanningQueryEngine.java","line_number":467,"column_number":-1,"description":"return from a call to QueryContext ScanningQueryEngine.createQueryContext(ExecutionContext,RepositoryCache,Set,Map,Schemata,RepositoryIndexes,NodeTypes,BufferManager,PlanHints,Map)"}],"key":"RepositoryQueryManager.java|query|RESOURCE_LEAK","node_key":"4acc4815f01aea616a1ba0ae21a6afe4","hash":"390d085394e80fd37e733b76391bf8d6","bug_type_hum":"Resource Leak"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `predecessors` last assigned on line 203 could be null and is dereferenced at line 210.","severity":"ERROR","line":210,"column":-1,"procedure":"org.modeshape.jcr.JcrVersionHistoryNode.removeVersion(javax.jcr.version.Version):void","procedure_start_line":185,"file":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":185,"column_number":-1,"description":"start of procedure removeVersion(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":189,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":189,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":191,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":196,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":198,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":271,"column_number":-1,"description":"start of procedure validateIncomingReferences(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":272,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2147,"column_number":-1,"description":"start of procedure getReferences()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2151,"column_number":-1,"description":"start of procedure getReferences(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2152,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrItem.java","line_number":54,"column_number":-1,"description":"start of procedure checkSession()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrItem.java","line_number":55,"column_number":-1,"description":""},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":325,"column_number":-1,"description":"start of procedure checkLive()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":326,"column_number":-1,"description":""},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1803,"column_number":-1,"description":"start of procedure isLive()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1803,"column_number":-1,"description":"return from a call to boolean JcrSession.isLive()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":326,"column_number":-1,"description":"Taking false branch"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":329,"column_number":-1,"description":"return from a call to void JcrSession.checkLive()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrItem.java","line_number":56,"column_number":-1,"description":"return from a call to void AbstractJcrItem.checkSession()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2153,"column_number":-1,"description":"Skipping propertiesOnOtherNodesReferencingThis(...): empty list of specs"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2178,"column_number":-1,"description":"Definition of propertiesOnOtherNodesReferencingThis(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2153,"column_number":-1,"description":"return from a call to PropertyIterator AbstractJcrNode.getReferences(String)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2147,"column_number":-1,"description":"return from a call to PropertyIterator AbstractJcrNode.getReferences()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":272,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":289,"column_number":-1,"description":"return from a call to void JcrVersionHistoryNode.validateIncomingReferences(JcrVersionNode)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":200,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":274,"column_number":-1,"description":"start of procedure getIdentifier()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":275,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrItem.java","line_number":42,"column_number":-1,"description":"start of procedure session()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrItem.java","line_number":42,"column_number":-1,"description":"return from a call to JcrSession AbstractJcrItem.session()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":275,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":190,"column_number":-1,"description":"start of procedure key()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":190,"column_number":-1,"description":"return from a call to NodeKey AbstractJcrNode.key()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":275,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1969,"column_number":-1,"description":"start of procedure nodeIdentifier(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/NodeCache.java","line_number":-1,"column_number":-1,"description":"Definition of getRootKey()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1969,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1945,"column_number":-1,"description":"start of procedure nodeIdentifier(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1947,"column_number":-1,"description":"Skipping isForeignKey(...): empty list of specs"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1925,"column_number":-1,"description":"Definition of isForeignKey(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1947,"column_number":-1,"description":"Taking false branch"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":177,"column_number":-1,"description":"start of procedure getIdentifier()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":178,"column_number":-1,"description":"Taking true branch"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":180,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":182,"column_number":-1,"description":"return from a call to String NodeKey.getIdentifier()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1947,"column_number":-1,"description":"return from a call to String JcrSession.nodeIdentifier(NodeKey,NodeKey)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1969,"column_number":-1,"description":"return from a call to String JcrSession.nodeIdentifier(NodeKey)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":275,"column_number":-1,"description":"return from a call to String AbstractJcrNode.getIdentifier()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":203,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":349,"column_number":-1,"description":"start of procedure getProperty(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":350,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":351,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":370,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":201,"column_number":-1,"description":"start of procedure node()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":185,"column_number":-1,"description":"start of procedure sessionCache()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"start of procedure cache()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"return from a call to SessionCache JcrSession.cache()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":"return from a call to SessionCache AbstractJcrNode.sessionCache()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":201,"column_number":-1,"description":"Skipping getNode(...): unknown method"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/CachedNodeSupplier.java","line_number":-1,"column_number":-1,"description":"Definition of getNode(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":202,"column_number":-1,"description":"Taking false branch"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":208,"column_number":-1,"description":"return from a call to CachedNode AbstractJcrNode.node()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":371,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":185,"column_number":-1,"description":"start of procedure sessionCache()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"start of procedure cache()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"return from a call to SessionCache JcrSession.cache()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":"return from a call to SessionCache AbstractJcrNode.sessionCache()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":372,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":373,"column_number":-1,"description":"Skipping remove(...): unknown method"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":374,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":377,"column_number":-1,"description":"return from a call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":204,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":349,"column_number":-1,"description":"start of procedure getProperty(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":350,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":351,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":370,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":201,"column_number":-1,"description":"start of procedure node()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":185,"column_number":-1,"description":"start of procedure sessionCache()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"start of procedure cache()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"return from a call to SessionCache JcrSession.cache()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":"return from a call to SessionCache AbstractJcrNode.sessionCache()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":201,"column_number":-1,"description":"Skipping getNode(...): unknown method"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/CachedNodeSupplier.java","line_number":-1,"column_number":-1,"description":"Definition of getNode(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":202,"column_number":-1,"description":"Taking false branch"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":208,"column_number":-1,"description":"return from a call to CachedNode AbstractJcrNode.node()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":371,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":185,"column_number":-1,"description":"start of procedure sessionCache()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"start of procedure cache()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"return from a call to SessionCache JcrSession.cache()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":"return from a call to SessionCache AbstractJcrNode.sessionCache()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":372,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":377,"column_number":-1,"description":"return from a call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":206,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":375,"column_number":-1,"description":"start of procedure createSystemCache(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":378,"column_number":-1,"description":"Skipping createSystemSession(...): empty list of specs"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":499,"column_number":-1,"description":"Definition of createSystemSession(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":379,"column_number":-1,"description":"Taking false branch"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":2452,"column_number":-1,"description":"start of procedure JcrSession$SystemSessionCache(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":2453,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/SessionCacheWrapper.java","line_number":31,"column_number":-1,"description":"start of procedure SessionCacheWrapper(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/SessionCacheWrapper.java","line_number":32,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/SessionCacheWrapper.java","line_number":33,"column_number":-1,"description":"return from a call to SessionCacheWrapper.<init>(SessionCache)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":2454,"column_number":-1,"description":"return from a call to JcrSession$SystemSessionCache.<init>(JcrSession,SessionCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":379,"column_number":-1,"description":"return from a call to SessionCache JcrSession.createSystemCache(boolean)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":209,"column_number":-1,"description":"Skipping HashSet(): unknown method"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":210,"column_number":-1,"description":""}],"key":"JcrVersionHistoryNode.java|removeVersion|NULL_DEREFERENCE","node_key":"50eb9480b1a39477599a8d0ef0064573","hash":"21bd5d278079ec411f6902e43ff06b76","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object returned by `session.getWorkspace()` could be null and is dereferenced at line 205.","severity":"ERROR","line":205,"column":-1,"procedure":"org.modeshape.jcr.Sequencers.initialize():void","procedure_start_line":194,"file":"src/main/java/org/modeshape/jcr/Sequencers.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/Sequencers.java","line_number":194,"column_number":-1,"description":"start of procedure initialize()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/Sequencers.java","line_number":194,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/Sequencers.java","line_number":200,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/Sequencers.java","line_number":201,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/Sequencers.java","line_number":204,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1877,"column_number":-1,"description":"start of procedure loginInternalSession()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1507,"column_number":-1,"description":"start of procedure defaultWorkspaceName()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1507,"column_number":-1,"description":"return from a call to String JcrRepository$RunningState.defaultWorkspaceName()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1877,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1880,"column_number":-1,"description":"start of procedure loginInternalSession(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1882,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1883,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":484,"column_number":-1,"description":"start of procedure runningState()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":485,"column_number":-1,"description":"Taking false branch"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":488,"column_number":-1,"description":"return from a call to JcrRepository$RunningState JcrRepository.runningState()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1884,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1437,"column_number":-1,"description":"start of procedure internalWorkerContext()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1437,"column_number":-1,"description":"return from a call to ExecutionContext JcrRepository$RunningState.internalWorkerContext()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1885,"column_number":-1,"description":"Skipping emptyMap(): unknown method"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1886,"column_number":-1,"description":"Skipping JcrSession(...): empty list of specs"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":173,"column_number":-1,"description":"Definition of JcrSession(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1887,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1771,"column_number":-1,"description":"start of procedure addSession(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1773,"column_number":-1,"description":"Taking true branch"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1774,"column_number":-1,"description":"Skipping writeLock(): unknown method"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1776,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1777,"column_number":-1,"description":"Skipping put(...): unknown method"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1779,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1781,"column_number":-1,"description":"return from a call to void JcrRepository$RunningState.addSession(JcrSession,boolean)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1888,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1890,"column_number":-1,"description":"return from a call to JcrSession JcrRepository$RunningState.loginInternalSession(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1877,"column_number":-1,"description":"return from a call to Session JcrRepository$RunningState.loginInternalSession()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/Sequencers.java","line_number":205,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":125,"column_number":-1,"description":"start of procedure getWorkspace()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":749,"column_number":-1,"description":"start of procedure getWorkspace()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":750,"column_number":-1,"description":"return from a call to JcrWorkspace JcrSession.getWorkspace()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":125,"column_number":-1,"description":"return from a call to Workspace JcrSession.getWorkspace()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/Sequencers.java","line_number":205,"column_number":-1,"description":""}],"key":"Sequencers.java|initialize|NULL_DEREFERENCE","node_key":"42f56fda1ad408e362508b93a175bb0c","hash":"9e59a6f96cbab456c17963061c4f9ed4","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object returned by `localContext.getValueFactories()` could be null and is dereferenced at line 214.","severity":"ERROR","line":214,"column":-1,"procedure":"org.modeshape.jcr.xml.NodeImportXmlHandler.<init>(org.modeshape.jcr.xml.NodeImportDestination,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.modeshape.jcr.xml.NodeImportXmlHandler$AttributeScoping)","procedure_start_line":195,"file":"src/main/java/org/modeshape/jcr/xml/NodeImportXmlHandler.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/xml/NodeImportXmlHandler.java","line_number":195,"column_number":-1,"description":"start of procedure NodeImportXmlHandler(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/xml/NodeImportXmlHandler.java","line_number":200,"column_number":-1,"description":"Skipping DefaultHandler2(): unknown method"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/xml/NodeImportXmlHandler.java","line_number":146,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/xml/NodeImportXmlHandler.java","line_number":156,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/xml/NodeImportXmlHandler.java","line_number":163,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/xml/NodeImportXmlHandler.java","line_number":164,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/xml/NodeImportXmlHandler.java","line_number":201,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/xml/NodeImportXmlHandler.java","line_number":202,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/xml/NodeImportXmlHandler.java","line_number":203,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/xml/NodeImportXmlHandler.java","line_number":204,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/xml/NodeImportXmlHandler.java","line_number":205,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/xml/NodeImportXmlHandler.java","line_number":206,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/xml/NodeImportXmlHandler.java","line_number":209,"column_number":-1,"description":"Skipping getExecutionContext(): unknown method"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/xml/NodeImportDestination.java","line_number":-1,"column_number":-1,"description":"Definition of getExecutionContext()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/xml/NodeImportXmlHandler.java","line_number":210,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/ExecutionContext.java","line_number":358,"column_number":-1,"description":"start of procedure getNamespaceRegistry()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/ExecutionContext.java","line_number":359,"column_number":-1,"description":"return from a call to NamespaceRegistry ExecutionContext.getNamespaceRegistry()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/xml/NodeImportXmlHandler.java","line_number":210,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/LocalNamespaceRegistry.java","line_number":39,"column_number":-1,"description":"start of procedure LocalNamespaceRegistry(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/LocalNamespaceRegistry.java","line_number":40,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":48,"column_number":-1,"description":"start of procedure SimpleNamespaceRegistry()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":49,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":55,"column_number":-1,"description":"start of procedure SimpleNamespaceRegistry(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":40,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":41,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":42,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":43,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":56,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":119,"column_number":-1,"description":"start of procedure register(...)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":121,"column_number":-1,"description":"Skipping isNotNull(...): unknown method"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":122,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":123,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":124,"column_number":-1,"description":"Taking false branch"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":125,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":126,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":127,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":128,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":129,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":130,"column_number":-1,"description":"Taking true branch"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":130,"column_number":-1,"description":"Taking false branch"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":133,"column_number":-1,"description":"Taking true branch"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":133,"column_number":-1,"description":"Taking false branch"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":136,"column_number":-1,"description":"return from a call to String SimpleNamespaceRegistry.register(String,String)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":57,"column_number":-1,"description":"return from a call to SimpleNamespaceRegistry.<init>(String)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":50,"column_number":-1,"description":"return from a call to SimpleNamespaceRegistry.<init>()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/LocalNamespaceRegistry.java","line_number":41,"column_number":-1,"description":"Skipping isNotNull(...): unknown method"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/LocalNamespaceRegistry.java","line_number":42,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/LocalNamespaceRegistry.java","line_number":43,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/basic/LocalNamespaceRegistry.java","line_number":152,"column_number":-1,"description":"start of procedure unregister(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":140,"column_number":-1,"description":"start of procedure unregister(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":141,"column_number":-1,"description":"Skipping isNotNull(...): unknown method"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":142,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":143,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":144,"column_number":-1,"description":"Taking false branch"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":145,"column_number":-1,"description":"Skipping remove(...): unknown method"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":146,"column_number":-1,"description":"return from a call to boolean SimpleNamespaceRegistry.unregister(String)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/basic/LocalNamespaceRegistry.java","line_number":152,"column_number":-1,"description":"return from a call to boolean LocalNamespaceRegistry.unregister(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/LocalNamespaceRegistry.java","line_number":44,"column_number":-1,"description":"return from a call to LocalNamespaceRegistry.<init>(NamespaceRegistry)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/xml/NodeImportXmlHandler.java","line_number":211,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/ExecutionContext.java","line_number":476,"column_number":-1,"description":"start of procedure with(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/ExecutionContext.java","line_number":477,"column_number":-1,"description":"Skipping ExecutionContext(...): empty list of specs"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/ExecutionContext.java","line_number":171,"column_number":-1,"description":"Definition of ExecutionContext(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/ExecutionContext.java","line_number":477,"column_number":-1,"description":"return from a call to ExecutionContext ExecutionContext.with(LocalNamespaceRegistry)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/xml/NodeImportXmlHandler.java","line_number":214,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/ExecutionContext.java","line_number":376,"column_number":-1,"description":"start of procedure getValueFactories()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/ExecutionContext.java","line_number":377,"column_number":-1,"description":"return from a call to ValueFactories ExecutionContext.getValueFactories()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/xml/NodeImportXmlHandler.java","line_number":214,"column_number":-1,"description":""}],"key":"NodeImportXmlHandler.java|<init>|NULL_DEREFERENCE","node_key":"4e40cf4b057cfc6102ca2104f1fe79e1","hash":"1d51d67039e365da0c28b8db6d32cd5d","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object returned by `nodeType.getInternalName()` could be null and is dereferenced at line 203.","severity":"ERROR","line":203,"column":-1,"procedure":"org.modeshape.jcr.JcrQueryManager.getQuery(javax.jcr.Node):org.modeshape.jcr.api.query.Query","procedure_start_line":198,"file":"src/main/java/org/modeshape/jcr/JcrQueryManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrQueryManager.java","line_number":198,"column_number":-1,"description":"start of procedure getQuery(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrQueryManager.java","line_number":199,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrQueryManager.java","line_number":202,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2276,"column_number":-1,"description":"start of procedure getPrimaryNodeType()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2277,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrItem.java","line_number":54,"column_number":-1,"description":"start of procedure checkSession()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrItem.java","line_number":55,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":325,"column_number":-1,"description":"start of procedure checkLive()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":326,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1803,"column_number":-1,"description":"start of procedure isLive()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1803,"column_number":-1,"description":"return from a call to boolean JcrSession.isLive()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":326,"column_number":-1,"description":"Taking false branch"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":329,"column_number":-1,"description":"return from a call to void JcrSession.checkLive()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrItem.java","line_number":56,"column_number":-1,"description":"return from a call to void AbstractJcrItem.checkSession()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2278,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrItem.java","line_number":42,"column_number":-1,"description":"start of procedure session()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrItem.java","line_number":42,"column_number":-1,"description":"return from a call to JcrSession AbstractJcrItem.session()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2278,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":384,"column_number":-1,"description":"start of procedure nodeTypeManager()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":628,"column_number":-1,"description":"start of procedure nodeTypeManager()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":628,"column_number":-1,"description":"Taking false branch"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":638,"column_number":-1,"description":"return from a call to JcrNodeTypeManager JcrWorkspace.nodeTypeManager()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":384,"column_number":-1,"description":"return from a call to JcrNodeTypeManager JcrSession.nodeTypeManager()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2278,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":201,"column_number":-1,"description":"start of procedure node()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":185,"column_number":-1,"description":"start of procedure sessionCache()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"start of procedure cache()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"return from a call to SessionCache JcrSession.cache()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":"return from a call to SessionCache AbstractJcrNode.sessionCache()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":201,"column_number":-1,"description":"Skipping getNode(...): unknown method"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/CachedNodeSupplier.java","line_number":-1,"column_number":-1,"description":"Definition of getNode(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":202,"column_number":-1,"description":"Taking false branch"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":208,"column_number":-1,"description":"return from a call to CachedNode AbstractJcrNode.node()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2278,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":185,"column_number":-1,"description":"start of procedure sessionCache()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"start of procedure cache()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"return from a call to SessionCache JcrSession.cache()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":"return from a call to SessionCache AbstractJcrNode.sessionCache()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2278,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrNodeTypeManager.java","line_number":145,"column_number":-1,"description":"start of procedure getNodeType(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrNodeTypeManager.java","line_number":101,"column_number":-1,"description":"start of procedure nodeTypes()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrNodeTypeManager.java","line_number":102,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/RepositoryNodeTypeManager.java","line_number":141,"column_number":-1,"description":"start of procedure getNodeTypes()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/RepositoryNodeTypeManager.java","line_number":142,"column_number":-1,"description":"return from a call to NodeTypes RepositoryNodeTypeManager.getNodeTypes()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrNodeTypeManager.java","line_number":102,"column_number":-1,"description":"return from a call to NodeTypes JcrNodeTypeManager.nodeTypes()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrNodeTypeManager.java","line_number":145,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":875,"column_number":-1,"description":"start of procedure getNodeType(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":876,"column_number":-1,"description":"return from a call to JcrNodeType NodeTypes.getNodeType(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrNodeTypeManager.java","line_number":147,"column_number":-1,"description":"Taking true branch"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrNodeTypeManager.java","line_number":148,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrNodeTypeManager.java","line_number":86,"column_number":-1,"description":"start of procedure context()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":360,"column_number":-1,"description":"start of procedure context()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":360,"column_number":-1,"description":"return from a call to ExecutionContext JcrSession.context()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrNodeTypeManager.java","line_number":86,"column_number":-1,"description":"return from a call to ExecutionContext JcrNodeTypeManager.context()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrNodeTypeManager.java","line_number":148,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":638,"column_number":-1,"description":"start of procedure with(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":640,"column_number":-1,"description":"Skipping JcrNodeType(...): empty list of specs"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":120,"column_number":-1,"description":"Definition of JcrNodeType(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":640,"column_number":-1,"description":"return from a call to JcrNodeType JcrNodeType.with(ExecutionContext,JcrSession)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrNodeTypeManager.java","line_number":148,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrNodeTypeManager.java","line_number":151,"column_number":-1,"description":"return from a call to JcrNodeType JcrNodeTypeManager.getNodeType(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2278,"column_number":-1,"description":"return from a call to JcrNodeType AbstractJcrNode.getPrimaryNodeType()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrQueryManager.java","line_number":203,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":508,"column_number":-1,"description":"start of procedure getInternalName()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":509,"column_number":-1,"description":"return from a call to Name JcrNodeType.getInternalName()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrQueryManager.java","line_number":203,"column_number":-1,"description":""}],"key":"JcrQueryManager.java|getQuery|NULL_DEREFERENCE","node_key":"733df38d22ef868156f8f00b1dff4e8a","hash":"d3c4f29639bb615f5a472e767c23aa40","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object returned by `getDate()` could be null and is dereferenced at line 280.","severity":"ERROR","line":280,"column":-1,"procedure":"org.modeshape.jcr.JcrValue.equals(java.lang.Object):boolean","procedure_start_line":211,"file":"src/main/java/org/modeshape/jcr/JcrValue.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrValue.java","line_number":211,"column_number":-1,"description":"start of procedure equals(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrValue.java","line_number":212,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrValue.java","line_number":213,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrValue.java","line_number":262,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrValue.java","line_number":263,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrValue.java","line_number":264,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrValue.java","line_number":266,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrValue.java","line_number":266,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrValue.java","line_number":266,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrValue.java","line_number":266,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrValue.java","line_number":266,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrValue.java","line_number":280,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrValue.java","line_number":116,"column_number":-1,"description":"start of procedure getDate()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrValue.java","line_number":117,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrValue.java","line_number":122,"column_number":-1,"description":"return from a call to Calendar JcrValue.getDate()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrValue.java","line_number":280,"column_number":-1,"description":""}],"key":"JcrValue.java|equals|NULL_DEREFERENCE","node_key":"71bbd039293bbda847a7c7191bb8b301","hash":"089dccd29b690f0ee4144fd0ffb07767","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object returned by `getDecimal()` could be null and is dereferenced at line 278.","severity":"ERROR","line":278,"column":-1,"procedure":"org.modeshape.jcr.JcrValue.equals(java.lang.Object):boolean","procedure_start_line":211,"file":"src/main/java/org/modeshape/jcr/JcrValue.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrValue.java","line_number":211,"column_number":-1,"description":"start of procedure equals(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrValue.java","line_number":212,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrValue.java","line_number":213,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrValue.java","line_number":262,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrValue.java","line_number":263,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrValue.java","line_number":264,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrValue.java","line_number":266,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrValue.java","line_number":266,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrValue.java","line_number":266,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrValue.java","line_number":266,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrValue.java","line_number":266,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrValue.java","line_number":266,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrValue.java","line_number":266,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrValue.java","line_number":266,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrValue.java","line_number":266,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrValue.java","line_number":266,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrValue.java","line_number":266,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrValue.java","line_number":266,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrValue.java","line_number":278,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrValue.java","line_number":127,"column_number":-1,"description":"start of procedure getDecimal()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrValue.java","line_number":128,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrValue.java","line_number":133,"column_number":-1,"description":"return from a call to BigDecimal JcrValue.getDecimal()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrValue.java","line_number":278,"column_number":-1,"description":""}],"key":"JcrValue.java|equals|NULL_DEREFERENCE","node_key":"71bbd039293bbda847a7c7191bb8b301","hash":"9e6311acc705a24e6c99188f60cd3826","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object returned by `value.getBinary()` could be null and is dereferenced at line 222.","severity":"ERROR","line":222,"column":-1,"procedure":"org.modeshape.jcr.JcrDocumentViewExporter.jcrValueToString(org.modeshape.jcr.JcrValue,int):java.lang.String","procedure_start_line":215,"file":"src/main/java/org/modeshape/jcr/JcrDocumentViewExporter.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrDocumentViewExporter.java","line_number":215,"column_number":-1,"description":"start of procedure jcrValueToString(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrDocumentViewExporter.java","line_number":216,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrDocumentViewExporter.java","line_number":220,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrDocumentViewExporter.java","line_number":222,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrValue.java","line_number":44,"column_number":-1,"description":"start of procedure getBinary()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrValue.java","line_number":180,"column_number":-1,"description":"start of procedure getBinary()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrValue.java","line_number":181,"column_number":-1,"description":"Taking true branch"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrValue.java","line_number":186,"column_number":-1,"description":"return from a call to BinaryValue JcrValue.getBinary()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrValue.java","line_number":44,"column_number":-1,"description":"return from a call to Binary JcrValue.getBinary()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrDocumentViewExporter.java","line_number":222,"column_number":-1,"description":""}],"key":"JcrDocumentViewExporter.java|jcrValueToString|NULL_DEREFERENCE","node_key":"3451cb93d845d85a147a6855623bf280","hash":"dd68ec7462a7339ebf9a438b195c6f36","bug_type_hum":"Null Dereference"},{"bug_type":"RESOURCE_LEAK","qualifier":"resource of type `java.io.FileOutputStream` acquired by call to `FileOutputStream(...)` at line 228 is not released after line 228.","severity":"ERROR","line":228,"column":-1,"procedure":"org.modeshape.jcr.value.binary.infinispan.InfinispanBinaryStore.storeValue(java.io.InputStream,boolean):org.modeshape.jcr.value.BinaryValue","procedure_start_line":222,"file":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":222,"column_number":-1,"description":"start of procedure storeValue(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":223,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":226,"column_number":-1,"description":"Skipping createHashingStream(...): unknown method"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":227,"column_number":-1,"description":"Skipping createTempFile(...): unknown method"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":228,"column_number":-1,"description":"Skipping write(...): unknown method"}],"key":"InfinispanBinaryStore.java|storeValue|RESOURCE_LEAK","node_key":"336a4f1a0d9af93d3a061b54b79d15a1","hash":"343cdca09ac8d283d817bfe3075a5717","bug_type_hum":"Resource Leak"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `joinType` last assigned on line 225 could be null and is dereferenced at line 227.","severity":"ERROR","line":227,"column":-1,"procedure":"org.modeshape.jcr.query.optimize.PushSelectCriteria.pushDownJoinCriteria(org.modeshape.jcr.query.plan.PlanNode,org.modeshape.jcr.query.plan.PlanNode):boolean","procedure_start_line":223,"file":"src/main/java/org/modeshape/jcr/query/optimize/PushSelectCriteria.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/PushSelectCriteria.java","line_number":223,"column_number":-1,"description":"start of procedure pushDownJoinCriteria(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/PushSelectCriteria.java","line_number":225,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":718,"column_number":-1,"description":"start of procedure getProperty(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":719,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":719,"column_number":-1,"description":"return from a call to Object PlanNode.getProperty(PlanNode$Property)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/PushSelectCriteria.java","line_number":225,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/PushSelectCriteria.java","line_number":227,"column_number":-1,"description":""}],"key":"PushSelectCriteria.java|pushDownJoinCriteria|NULL_DEREFERENCE","node_key":"fa5f8bce86ddf7d3115742d50d599997","hash":"ab161b73f454abab5e91d9b745b8f623","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `systemRoot` last assigned on line 251 could be null and is dereferenced at line 252.","severity":"ERROR","line":252,"column":-1,"procedure":"org.modeshape.jcr.Connectors.getSystemNode(org.modeshape.jcr.cache.document.WritableSessionCache):org.modeshape.jcr.cache.CachedNode","procedure_start_line":250,"file":"src/main/java/org/modeshape/jcr/Connectors.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/Connectors.java","line_number":250,"column_number":-1,"description":"start of procedure getSystemNode(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/Connectors.java","line_number":251,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/AbstractSessionCache.java","line_number":239,"column_number":-1,"description":"start of procedure getRootKey()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/AbstractSessionCache.java","line_number":176,"column_number":-1,"description":"start of procedure workspaceCache()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/AbstractSessionCache.java","line_number":176,"column_number":-1,"description":"return from a call to WorkspaceCache AbstractSessionCache.workspaceCache()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/AbstractSessionCache.java","line_number":239,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":229,"column_number":-1,"description":"start of procedure getRootKey()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":230,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":341,"column_number":-1,"description":"start of procedure checkNotClosed()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":342,"column_number":-1,"description":"Taking false branch"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":345,"column_number":-1,"description":"return from a call to void WorkspaceCache.checkNotClosed()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":231,"column_number":-1,"description":"return from a call to NodeKey WorkspaceCache.getRootKey()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/AbstractSessionCache.java","line_number":239,"column_number":-1,"description":"return from a call to NodeKey AbstractSessionCache.getRootKey()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/Connectors.java","line_number":251,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":169,"column_number":-1,"description":"start of procedure getNode(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":170,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":171,"column_number":-1,"description":"Skipping readLock(): unknown method"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":173,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":174,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":176,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":178,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":180,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":182,"column_number":-1,"description":"return from a call to CachedNode WritableSessionCache.getNode(NodeKey)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/Connectors.java","line_number":252,"column_number":-1,"description":""}],"key":"Connectors.java|getSystemNode|NULL_DEREFERENCE","node_key":"a026c124555b1d0d3484d3c6f60db721","hash":"d75c4b9108b81b8f178c19be68ff5a6b","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object returned by `session.getWorkspace()` could be null and is dereferenced at line 262.","severity":"ERROR","line":262,"column":-1,"procedure":"org.modeshape.jcr.Upgrades$ModeShape_4_0_0_Alpha1.apply(org.modeshape.jcr.Upgrades$Context):void","procedure_start_line":252,"file":"src/main/java/org/modeshape/jcr/Upgrades.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/Upgrades.java","line_number":252,"column_number":-1,"description":"start of procedure apply(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/Upgrades.java","line_number":253,"column_number":-1,"description":"Skipping info(...): unknown method"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/Upgrades.java","line_number":254,"column_number":-1,"description":"Skipping getRepository(): unknown method"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/Upgrades.java","line_number":-1,"column_number":-1,"description":"Definition of getRepository()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/Upgrades.java","line_number":255,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1440,"column_number":-1,"description":"start of procedure repositoryCache()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1441,"column_number":-1,"description":"return from a call to RepositoryCache JcrRepository$RunningState.repositoryCache()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/Upgrades.java","line_number":258,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/Upgrades.java","line_number":259,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/RepositoryCache.java","line_number":819,"column_number":-1,"description":"start of procedure getWorkspaceNames()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/RepositoryCache.java","line_number":820,"column_number":-1,"description":"return from a call to Set RepositoryCache.getWorkspaceNames()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/Upgrades.java","line_number":259,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/Upgrades.java","line_number":260,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1880,"column_number":-1,"description":"start of procedure loginInternalSession(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1882,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1883,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":484,"column_number":-1,"description":"start of procedure runningState()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":485,"column_number":-1,"description":"Taking false branch"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":488,"column_number":-1,"description":"return from a call to JcrRepository$RunningState JcrRepository.runningState()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1884,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1437,"column_number":-1,"description":"start of procedure internalWorkerContext()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1437,"column_number":-1,"description":"return from a call to ExecutionContext JcrRepository$RunningState.internalWorkerContext()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1885,"column_number":-1,"description":"Skipping emptyMap(): unknown method"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1886,"column_number":-1,"description":"Skipping JcrSession(...): empty list of specs"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":173,"column_number":-1,"description":"Definition of JcrSession(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1887,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1771,"column_number":-1,"description":"start of procedure addSession(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1773,"column_number":-1,"description":"Taking true branch"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1774,"column_number":-1,"description":"Skipping writeLock(): unknown method"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1776,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1777,"column_number":-1,"description":"Skipping put(...): unknown method"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1779,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1781,"column_number":-1,"description":"return from a call to void JcrRepository$RunningState.addSession(JcrSession,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1888,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1890,"column_number":-1,"description":"return from a call to JcrSession JcrRepository$RunningState.loginInternalSession(String)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/Upgrades.java","line_number":262,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":749,"column_number":-1,"description":"start of procedure getWorkspace()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":750,"column_number":-1,"description":"return from a call to JcrWorkspace JcrSession.getWorkspace()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/Upgrades.java","line_number":262,"column_number":-1,"description":""}],"key":"Upgrades.java|apply|NULL_DEREFERENCE","node_key":"21bbf00bf52cbb29c85ade37dbbc751f","hash":"69fcd591260f25e69d5c3862dbdf0658","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object returned by `getParentKey(cache)` could be null and is dereferenced by call to `getChildReference(...)` at line 256.","severity":"ERROR","line":256,"column":-1,"procedure":"org.modeshape.jcr.cache.document.LazyCachedNode.searchReferenceForSelf(org.modeshape.jcr.cache.document.WorkspaceCache,org.modeshape.jcr.cache.CachedNode):org.modeshape.jcr.cache.ChildReference","procedure_start_line":252,"file":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":252,"column_number":-1,"description":"start of procedure searchReferenceForSelf(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":253,"column_number":-1,"description":"Skipping getChildReferences(...): unknown method"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/CachedNode.java","line_number":-1,"column_number":-1,"description":"Definition of getChildReferences(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":254,"column_number":-1,"description":"Skipping supportsGetChildReferenceByKey(): unknown method"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/ChildReferences.java","line_number":-1,"column_number":-1,"description":"Definition of supportsGetChildReferenceByKey()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":254,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":256,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":120,"column_number":-1,"description":"start of procedure getParentKey(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":121,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":123,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":105,"column_number":-1,"description":"start of procedure workspaceCache(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/NodeCache.java","line_number":-1,"column_number":-1,"description":"Definition of unwrap()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":105,"column_number":-1,"description":"Skipping workspaceCache(): unknown method"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/DocumentCache.java","line_number":-1,"column_number":-1,"description":"Definition of workspaceCache()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":105,"column_number":-1,"description":"return from a call to WorkspaceCache LazyCachedNode.workspaceCache(NodeCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":124,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":159,"column_number":-1,"description":"start of procedure translator()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":159,"column_number":-1,"description":"return from a call to DocumentTranslator WorkspaceCache.translator()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":124,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":116,"column_number":-1,"description":"start of procedure document(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":116,"column_number":-1,"description":"return from a call to Document LazyCachedNode.document(WorkspaceCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":124,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":150,"column_number":-1,"description":"start of procedure getWorkspaceKey()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":151,"column_number":-1,"description":"return from a call to String WorkspaceCache.getWorkspaceKey()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":124,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":164,"column_number":-1,"description":"start of procedure getWorkspaceKey()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":165,"column_number":-1,"description":"Taking true branch"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":169,"column_number":-1,"description":"return from a call to String NodeKey.getWorkspaceKey()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":124,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/DocumentTranslator.java","line_number":165,"column_number":-1,"description":"start of procedure getParentKey(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/DocumentTranslator.java","line_number":168,"column_number":-1,"description":"Skipping get(...): unknown method"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/DocumentTranslator.java","line_number":169,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/DocumentTranslator.java","line_number":201,"column_number":-1,"description":"start of procedure keyFrom(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/DocumentTranslator.java","line_number":204,"column_number":-1,"description":"Taking false branch"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/DocumentTranslator.java","line_number":207,"column_number":-1,"description":"Taking false branch"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/DocumentTranslator.java","line_number":228,"column_number":-1,"description":"return from a call to NodeKey DocumentTranslator.keyFrom(Object,String,String)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/DocumentTranslator.java","line_number":169,"column_number":-1,"description":"return from a call to NodeKey DocumentTranslator.getParentKey(Document,String,String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":124,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":126,"column_number":-1,"description":"return from a call to NodeKey LazyCachedNode.getParentKey(NodeCache)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":256,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":280,"column_number":-1,"description":"start of procedure getChildReference(...)"}],"key":"LazyCachedNode.java|searchReferenceForSelf|NULL_DEREFERENCE","node_key":"0fb9301e0f5ec0a285c9fe4e5b02d9d6","hash":"9661bec15888a5fc04328ab6f95d2f1d","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object returned by `session.getWorkspace()` could be null and is dereferenced at line 264.","severity":"ERROR","line":264,"column":-1,"procedure":"org.modeshape.jcr.Connectors.initializeConnectors():void","procedure_start_line":257,"file":"src/main/java/org/modeshape/jcr/Connectors.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/Connectors.java","line_number":257,"column_number":-1,"description":"start of procedure initializeConnectors()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/Connectors.java","line_number":258,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/Connectors.java","line_number":258,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/Connectors.java","line_number":260,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/Connectors.java","line_number":263,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1877,"column_number":-1,"description":"start of procedure loginInternalSession()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1507,"column_number":-1,"description":"start of procedure defaultWorkspaceName()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1507,"column_number":-1,"description":"return from a call to String JcrRepository$RunningState.defaultWorkspaceName()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1877,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1880,"column_number":-1,"description":"start of procedure loginInternalSession(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1882,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1883,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":484,"column_number":-1,"description":"start of procedure runningState()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":485,"column_number":-1,"description":"Taking false branch"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":488,"column_number":-1,"description":"return from a call to JcrRepository$RunningState JcrRepository.runningState()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1884,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1437,"column_number":-1,"description":"start of procedure internalWorkerContext()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1437,"column_number":-1,"description":"return from a call to ExecutionContext JcrRepository$RunningState.internalWorkerContext()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1885,"column_number":-1,"description":"Skipping emptyMap(): unknown method"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1886,"column_number":-1,"description":"Skipping JcrSession(...): empty list of specs"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":173,"column_number":-1,"description":"Definition of JcrSession(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1887,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1771,"column_number":-1,"description":"start of procedure addSession(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1773,"column_number":-1,"description":"Taking true branch"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1774,"column_number":-1,"description":"Skipping writeLock(): unknown method"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1776,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1777,"column_number":-1,"description":"Skipping put(...): unknown method"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1779,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1781,"column_number":-1,"description":"return from a call to void JcrRepository$RunningState.addSession(JcrSession,boolean)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1888,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1890,"column_number":-1,"description":"return from a call to JcrSession JcrRepository$RunningState.loginInternalSession(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1877,"column_number":-1,"description":"return from a call to Session JcrRepository$RunningState.loginInternalSession()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/Connectors.java","line_number":264,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":125,"column_number":-1,"description":"start of procedure getWorkspace()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":749,"column_number":-1,"description":"start of procedure getWorkspace()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":750,"column_number":-1,"description":"return from a call to JcrWorkspace JcrSession.getWorkspace()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":125,"column_number":-1,"description":"return from a call to Workspace JcrSession.getWorkspace()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/Connectors.java","line_number":264,"column_number":-1,"description":""}],"key":"Connectors.java|initializeConnectors|NULL_DEREFERENCE","node_key":"42f56fda1ad408e362508b93a175bb0c","hash":"0c714e4b90a6a028d35f922dd719a6ea","bug_type_hum":"Null Dereference"},{"bug_type":"RESOURCE_LEAK","qualifier":"resource of type `java.io.RandomAccessFile` acquired by call to `RandomAccessFile(...)` at line 275 is not released after line 279.","severity":"ERROR","line":279,"column":-1,"procedure":"org.modeshape.jcr.value.binary.FileLocks$LockHolder.lock(boolean,boolean):org.modeshape.jcr.value.binary.FileLocks$WrappedLock","procedure_start_line":269,"file":"src/main/java/org/modeshape/jcr/value/binary/FileLocks.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileLocks.java","line_number":269,"column_number":-1,"description":"start of procedure lock(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileLocks.java","line_number":270,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileLocks.java","line_number":271,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileLocks.java","line_number":272,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileLocks.java","line_number":272,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileLocks.java","line_number":273,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileLocks.java","line_number":273,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileLocks.java","line_number":275,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileLocks.java","line_number":276,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileLocks.java","line_number":278,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileLocks.java","line_number":279,"column_number":-1,"description":"Skipping lock(...): unknown method"}],"key":"FileLocks.java|lock|RESOURCE_LEAK","node_key":"d093e46438a41c6ac69cd97675261345","hash":"ad03491d8e6860f9d67efb0b54f3b749","bug_type_hum":"Resource Leak"},{"bug_type":"RESOURCE_LEAK","qualifier":"resource of type `java.io.RandomAccessFile` acquired by call to `RandomAccessFile(...)` at line 303 is not released after line 307.","severity":"ERROR","line":307,"column":-1,"procedure":"org.modeshape.jcr.value.binary.FileLocks$LockHolder.lock(boolean,boolean):org.modeshape.jcr.value.binary.FileLocks$WrappedLock","procedure_start_line":269,"file":"src/main/java/org/modeshape/jcr/value/binary/FileLocks.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileLocks.java","line_number":269,"column_number":-1,"description":"start of procedure lock(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileLocks.java","line_number":270,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileLocks.java","line_number":294,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileLocks.java","line_number":297,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileLocks.java","line_number":299,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileLocks.java","line_number":300,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileLocks.java","line_number":300,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileLocks.java","line_number":303,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileLocks.java","line_number":304,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileLocks.java","line_number":306,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileLocks.java","line_number":307,"column_number":-1,"description":"Skipping lock(...): unknown method"}],"key":"FileLocks.java|lock|RESOURCE_LEAK","node_key":"d093e46438a41c6ac69cd97675261345","hash":"ad03491d8e6860f9d67efb0b54f3b749","bug_type_hum":"Resource Leak"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `columns` last assigned on line 307 could be null and is dereferenced at line 308.","severity":"ERROR","line":308,"column":-1,"procedure":"org.modeshape.jcr.query.plan.PlanUtil.replaceReferencesToRemovedSource(org.modeshape.jcr.query.QueryContext,org.modeshape.jcr.query.plan.PlanNode,java.util.Map):void","procedure_start_line":302,"file":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":302,"column_number":-1,"description":"start of procedure replaceReferencesToRemovedSource(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":305,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":312,"column_number":-1,"description":"start of procedure getType()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":313,"column_number":-1,"description":"return from a call to PlanNode$Type PlanNode.getType()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":305,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":307,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":759,"column_number":-1,"description":"start of procedure getPropertyAsList(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":761,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":769,"column_number":-1,"description":"return from a call to List PlanNode.getPropertyAsList(PlanNode$Property,Class)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":308,"column_number":-1,"description":""}],"key":"PlanUtil.java|replaceReferencesToRemovedSource|NULL_DEREFERENCE","node_key":"19825d0378afc178d9a3b0dbf0e73dbf","hash":"4357b445bebc2cb8b6128d7d86acb7b5","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object returned by `node.getFirstChild()` could be null and is dereferenced at line 342.","severity":"ERROR","line":342,"column":-1,"procedure":"org.modeshape.jcr.query.optimize.PushSelectCriteria.findBestChildForCriteria(org.modeshape.jcr.query.plan.PlanNode,org.modeshape.jcr.query.plan.PlanNode):org.modeshape.jcr.query.plan.PlanNode","procedure_start_line":332,"file":"src/main/java/org/modeshape/jcr/query/optimize/PushSelectCriteria.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/PushSelectCriteria.java","line_number":332,"column_number":-1,"description":"start of procedure findBestChildForCriteria(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/PushSelectCriteria.java","line_number":335,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":898,"column_number":-1,"description":"start of procedure getPathTo(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":899,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":899,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":900,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":901,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":902,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":903,"column_number":-1,"description":"Skipping addFirst(...): unknown method"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":904,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":420,"column_number":-1,"description":"start of procedure getParent()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":421,"column_number":-1,"description":"return from a call to PlanNode PlanNode.getParent()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":904,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":905,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":905,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":902,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":907,"column_number":-1,"description":"Skipping addFirst(...): unknown method"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":908,"column_number":-1,"description":"return from a call to LinkedList PlanNode.getPathTo(PlanNode)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/PushSelectCriteria.java","line_number":335,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/PushSelectCriteria.java","line_number":337,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":312,"column_number":-1,"description":"start of procedure getType()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":313,"column_number":-1,"description":"return from a call to PlanNode$Type PlanNode.getType()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/PushSelectCriteria.java","line_number":337,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/PushSelectCriteria.java","line_number":340,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":312,"column_number":-1,"description":"start of procedure getType()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":313,"column_number":-1,"description":"return from a call to PlanNode$Type PlanNode.getType()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/PushSelectCriteria.java","line_number":340,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/PushSelectCriteria.java","line_number":342,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":569,"column_number":-1,"description":"start of procedure getChildCount()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":570,"column_number":-1,"description":"return from a call to int PlanNode.getChildCount()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/PushSelectCriteria.java","line_number":342,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":578,"column_number":-1,"description":"start of procedure getFirstChild()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":579,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":579,"column_number":-1,"description":"return from a call to PlanNode PlanNode.getFirstChild()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/optimize/PushSelectCriteria.java","line_number":342,"column_number":-1,"description":""}],"key":"PushSelectCriteria.java|findBestChildForCriteria|NULL_DEREFERENCE","node_key":"00c1f65e387d55c612515ace03b6e05b","hash":"137bab92059f3fa160a8bf0f31844273","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `null` is dereferenced by call to `canRemoveItem(...)` at line 344.","severity":"ERROR","line":344,"column":-1,"procedure":"org.modeshape.jcr.JcrNodeType.canRemoveItem(java.lang.String):boolean","procedure_start_line":341,"file":"src/main/java/org/modeshape/jcr/JcrNodeType.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":341,"column_number":-1,"description":"start of procedure canRemoveItem(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":342,"column_number":-1,"description":"Skipping isNotNull(...): unknown method"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":343,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/ExecutionContext.java","line_number":376,"column_number":-1,"description":"start of procedure getValueFactories()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/ExecutionContext.java","line_number":377,"column_number":-1,"description":"return from a call to ValueFactories ExecutionContext.getValueFactories()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":343,"column_number":-1,"description":"Skipping getNameFactory(): unknown method"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/ValueFactories.java","line_number":-1,"column_number":-1,"description":"Definition of getNameFactory()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":343,"column_number":-1,"description":"Skipping create(...): unknown method"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/ValueFactory.java","line_number":-1,"column_number":-1,"description":"Definition of create(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":343,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":344,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":645,"column_number":-1,"description":"start of procedure nodeTypes()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":646,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/RepositoryNodeTypeManager.java","line_number":141,"column_number":-1,"description":"start of procedure getNodeTypes()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/RepositoryNodeTypeManager.java","line_number":142,"column_number":-1,"description":"return from a call to NodeTypes RepositoryNodeTypeManager.getNodeTypes()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":646,"column_number":-1,"description":"return from a call to NodeTypes JcrNodeType.nodeTypes()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":344,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1692,"column_number":-1,"description":"start of procedure canRemoveItem(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1697,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":875,"column_number":-1,"description":"start of procedure getNodeType(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":876,"column_number":-1,"description":"return from a call to JcrNodeType NodeTypes.getNodeType(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1698,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1699,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":247,"column_number":-1,"description":"start of procedure allPropertyDefinitions(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/DefinitionCache.java","line_number":177,"column_number":-1,"description":"start of procedure allPropertyDefinitions(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/DefinitionCache.java","line_number":177,"column_number":-1,"description":"return from a call to Collection DefinitionCache.allPropertyDefinitions(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":247,"column_number":-1,"description":"return from a call to Collection JcrNodeType.allPropertyDefinitions(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1699,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1708,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1709,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":265,"column_number":-1,"description":"start of procedure allChildNodeDefinitions(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/DefinitionCache.java","line_number":197,"column_number":-1,"description":"start of procedure allChildNodeDefinitions(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/DefinitionCache.java","line_number":197,"column_number":-1,"description":"return from a call to Collection DefinitionCache.allChildNodeDefinitions(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":265,"column_number":-1,"description":"return from a call to Collection JcrNodeType.allChildNodeDefinitions(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1709,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1718,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1718,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1732,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1732,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1746,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1748,"column_number":-1,"description":"return from a call to boolean NodeTypes.canRemoveItem(Name,List,Name,boolean)"}],"key":"JcrNodeType.java|canRemoveItem|NULL_DEREFERENCE","node_key":"c3d45bee99108f43987fad86ebd14f63","hash":"cd8badc3f5877e34577def4e502aeb19","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object returned by `getProperty(document,org.modeshape.jcr.JcrLexicon.PRIMARY_TYPE)` could be null and is dereferenced at line 346.","severity":"ERROR","line":346,"column":-1,"procedure":"org.modeshape.jcr.cache.document.DocumentTranslator.getPrimaryTypeName(org.infinispan.schematic.document.Document):java.lang.String","procedure_start_line":345,"file":"src/main/java/org/modeshape/jcr/cache/document/DocumentTranslator.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/DocumentTranslator.java","line_number":345,"column_number":-1,"description":"start of procedure getPrimaryTypeName(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/DocumentTranslator.java","line_number":346,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/DocumentTranslator.java","line_number":321,"column_number":-1,"description":"start of procedure getProperty(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/DocumentTranslator.java","line_number":324,"column_number":-1,"description":"Skipping getDocument(...): unknown method"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/DocumentTranslator.java","line_number":325,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/DocumentTranslator.java","line_number":330,"column_number":-1,"description":"Skipping getNamespaceUri(): unknown method"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/Name.java","line_number":-1,"column_number":-1,"description":"Definition of getNamespaceUri()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/DocumentTranslator.java","line_number":330,"column_number":-1,"description":"Skipping getDocument(...): unknown method"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/DocumentTranslator.java","line_number":331,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/DocumentTranslator.java","line_number":336,"column_number":-1,"description":"Skipping getLocalName(): unknown method"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/Name.java","line_number":-1,"column_number":-1,"description":"Definition of getLocalName()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/DocumentTranslator.java","line_number":336,"column_number":-1,"description":"Skipping get(...): unknown method"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/DocumentTranslator.java","line_number":337,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/DocumentTranslator.java","line_number":337,"column_number":-1,"description":"return from a call to Property DocumentTranslator.getProperty(Document,Name)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/DocumentTranslator.java","line_number":346,"column_number":-1,"description":""}],"key":"DocumentTranslator.java|getPrimaryTypeName|NULL_DEREFERENCE","node_key":"4cb2bccbb06e57dbc4f8206970655383","hash":"b3f67b0f574d76b450a08cb92af06db8","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object returned by `properties()` could be null and is dereferenced at line 373.","severity":"ERROR","line":373,"column":-1,"procedure":"org.modeshape.jcr.cache.document.LazyCachedNode.getPropertyCount(org.modeshape.jcr.cache.NodeCache):int","procedure_start_line":372,"file":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":372,"column_number":-1,"description":"start of procedure getPropertyCount(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":373,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":260,"column_number":-1,"description":"start of procedure properties()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":260,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":262,"column_number":-1,"description":"Skipping compareAndSet(...): unknown method"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":264,"column_number":-1,"description":"return from a call to Map LazyCachedNode.properties()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":373,"column_number":-1,"description":""}],"key":"LazyCachedNode.java|getPropertyCount|NULL_DEREFERENCE","node_key":"d46e1684de2ca326ba231ad8a5b48143","hash":"696832304a3a19826d00cd907d7e6324","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `props` last assigned on line 380 could be null and is dereferenced at line 381.","severity":"ERROR","line":381,"column":-1,"procedure":"org.modeshape.jcr.cache.document.LazyCachedNode.hasProperties(org.modeshape.jcr.cache.NodeCache):boolean","procedure_start_line":379,"file":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":379,"column_number":-1,"description":"start of procedure hasProperties(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":380,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":260,"column_number":-1,"description":"start of procedure properties()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":260,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":262,"column_number":-1,"description":"Skipping compareAndSet(...): unknown method"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":264,"column_number":-1,"description":"return from a call to Map LazyCachedNode.properties()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":381,"column_number":-1,"description":""}],"key":"LazyCachedNode.java|hasProperties|NULL_DEREFERENCE","node_key":"18086a76ec6f499138a84f176568ec09","hash":"0a4597ff064363cc91df98166f1fc2cd","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `parent` last assigned on line 386 could be null and is dereferenced at line 387.","severity":"ERROR","line":387,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.isAtOrBelow(org.modeshape.jcr.cache.document.WritableSessionCache,org.modeshape.jcr.value.Path):boolean","procedure_start_line":379,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":379,"column_number":-1,"description":"start of procedure isAtOrBelow(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":381,"column_number":-1,"description":"Skipping getPath(...): empty list of specs"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":458,"column_number":-1,"description":"Definition of getPath(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":382,"column_number":-1,"description":"Skipping isAtOrAbove(...): unknown method"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/Path.java","line_number":-1,"column_number":-1,"description":"Definition of isAtOrAbove(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":382,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":383,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":341,"column_number":-1,"description":"start of procedure additionalParents()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":341,"column_number":-1,"description":"return from a call to SessionNode$ChangedAdditionalParents SessionNode.additionalParents()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":384,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1915,"column_number":-1,"description":"start of procedure isEmpty()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1916,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1919,"column_number":-1,"description":"start of procedure additionCount()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1920,"column_number":-1,"description":"return from a call to int SessionNode$ChangedAdditionalParents.additionCount()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1916,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1916,"column_number":-1,"description":"return from a call to boolean SessionNode$ChangedAdditionalParents.isEmpty()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":384,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":385,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1938,"column_number":-1,"description":"start of procedure getAdditions()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1939,"column_number":-1,"description":"return from a call to Set SessionNode$ChangedAdditionalParents.getAdditions()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":385,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":386,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":169,"column_number":-1,"description":"start of procedure getNode(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":170,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":171,"column_number":-1,"description":"Skipping readLock(): unknown method"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":173,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":174,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":176,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":178,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":180,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":182,"column_number":-1,"description":"return from a call to CachedNode WritableSessionCache.getNode(NodeKey)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":387,"column_number":-1,"description":""}],"key":"SessionNode.java|isAtOrBelow|NULL_DEREFERENCE","node_key":"a026c124555b1d0d3484d3c6f60db721","hash":"6a98d650a562f1a2953b4f8d059030b4","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `props` last assigned on line 390 could be null and is dereferenced at line 391.","severity":"ERROR","line":391,"column":-1,"procedure":"org.modeshape.jcr.cache.document.LazyCachedNode.hasProperty(org.modeshape.jcr.value.Name,org.modeshape.jcr.cache.NodeCache):boolean","procedure_start_line":388,"file":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":388,"column_number":-1,"description":"start of procedure hasProperty(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":390,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":260,"column_number":-1,"description":"start of procedure properties()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":260,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":262,"column_number":-1,"description":"Skipping compareAndSet(...): unknown method"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":264,"column_number":-1,"description":"return from a call to Map LazyCachedNode.properties()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":391,"column_number":-1,"description":""}],"key":"LazyCachedNode.java|hasProperty|NULL_DEREFERENCE","node_key":"733df38d22ef868156f8f00b1dff4e8a","hash":"5223c842ac22334e519a71d150f8001a","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `props` last assigned on line 400 could be null and is dereferenced at line 401.","severity":"ERROR","line":401,"column":-1,"procedure":"org.modeshape.jcr.cache.document.LazyCachedNode.getProperty(org.modeshape.jcr.value.Name,org.modeshape.jcr.cache.NodeCache):org.modeshape.jcr.value.Property","procedure_start_line":398,"file":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":398,"column_number":-1,"description":"start of procedure getProperty(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":400,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":260,"column_number":-1,"description":"start of procedure properties()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":260,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":262,"column_number":-1,"description":"Skipping compareAndSet(...): unknown method"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":264,"column_number":-1,"description":"return from a call to Map LazyCachedNode.properties()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":401,"column_number":-1,"description":""}],"key":"LazyCachedNode.java|getProperty|NULL_DEREFERENCE","node_key":"03f78c8e698e098c7d7421c6d3e394e4","hash":"b6f9dc80e16c9186465a40f089df6638","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `oldName` last assigned on line 408 could be null and is dereferenced by call to `equals(...)` at line 412.","severity":"ERROR","line":412,"column":-1,"procedure":"org.modeshape.jcr.query.QueryBuilder.fromAllNodesAs(java.lang.String):org.modeshape.jcr.query.QueryBuilder","procedure_start_line":406,"file":"src/main/java/org/modeshape/jcr/query/QueryBuilder.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/QueryBuilder.java","line_number":406,"column_number":-1,"description":"start of procedure fromAllNodesAs(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/QueryBuilder.java","line_number":407,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/QueryBuilder.java","line_number":286,"column_number":-1,"description":"start of procedure selector(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/QueryBuilder.java","line_number":287,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/model/SelectorName.java","line_number":36,"column_number":-1,"description":"start of procedure SelectorName(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/model/SelectorName.java","line_number":37,"column_number":-1,"description":"Skipping isNotEmpty(...): unknown method"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/model/SelectorName.java","line_number":38,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/model/SelectorName.java","line_number":39,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/model/SelectorName.java","line_number":40,"column_number":-1,"description":"return from a call to SelectorName.<init>(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/QueryBuilder.java","line_number":287,"column_number":-1,"description":"return from a call to SelectorName QueryBuilder.selector(String)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/QueryBuilder.java","line_number":407,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/model/AllNodes.java","line_number":40,"column_number":-1,"description":"start of procedure AllNodes(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/model/AllNodes.java","line_number":41,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/model/Selector.java","line_number":51,"column_number":-1,"description":"start of procedure Selector(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/model/Selector.java","line_number":52,"column_number":-1,"description":"Skipping isNotNull(...): unknown method"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/model/Selector.java","line_number":53,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/model/Selector.java","line_number":54,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/model/Selector.java","line_number":55,"column_number":-1,"description":"return from a call to Selector.<init>(SelectorName,SelectorName)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/model/AllNodes.java","line_number":42,"column_number":-1,"description":"return from a call to AllNodes.<init>(SelectorName)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/QueryBuilder.java","line_number":408,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/QueryBuilder.java","line_number":410,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/QueryBuilder.java","line_number":411,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/QueryBuilder.java","line_number":412,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/model/Column.java","line_number":69,"column_number":-1,"description":"start of procedure selectorName()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/model/Column.java","line_number":69,"column_number":-1,"description":"return from a call to SelectorName Column.selectorName()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/QueryBuilder.java","line_number":412,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/model/SelectorName.java","line_number":77,"column_number":-1,"description":"start of procedure equals(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/model/SelectorName.java","line_number":78,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/model/SelectorName.java","line_number":79,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/model/SelectorName.java","line_number":80,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/model/SelectorName.java","line_number":81,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/model/SelectorName.java","line_number":48,"column_number":-1,"description":"start of procedure name()"}],"key":"QueryBuilder.java|fromAllNodesAs|NULL_DEREFERENCE","node_key":"7e9fc31bc469440d6384630f8b346526","hash":"0d3a9d0e9469275480f033e61cb1c1ef","bug_type_hum":"Null Dereference"},{"bug_type":"RESOURCE_LEAK","qualifier":"resource of type `java.io.RandomAccessFile` acquired to `raf` by call to `RandomAccessFile(...)` at line 409 is not released after line 421.\n**Note**: potential exception at line 410","severity":"ERROR","line":421,"column":-1,"procedure":"org.modeshape.jcr.value.binary.FileSystemBinaryStore.touch(java.io.File):void","procedure_start_line":406,"file":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":406,"column_number":-1,"description":"start of procedure touch(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":409,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":410,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileLocks.java","line_number":48,"column_number":-1,"description":"start of procedure get()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileLocks.java","line_number":49,"column_number":-1,"description":"return from a call to FileLocks FileLocks.get()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":410,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileLocks.java","line_number":68,"column_number":-1,"description":"start of procedure writeLock(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileLocks.java","line_number":69,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileLocks.java","line_number":121,"column_number":-1,"description":"start of procedure lock(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileLocks.java","line_number":122,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileLocks.java","line_number":124,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileLocks.java","line_number":126,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileLocks.java","line_number":127,"column_number":-1,"description":"Taking false branch"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileLocks.java","line_number":136,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileLocks.java","line_number":260,"column_number":-1,"description":"start of procedure incrementReferenceCount()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileLocks.java","line_number":261,"column_number":-1,"description":"Skipping incrementAndGet(): unknown method"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileLocks.java","line_number":262,"column_number":-1,"description":"return from a call to void FileLocks$LockHolder.incrementReferenceCount()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileLocks.java","line_number":138,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileLocks.java","line_number":142,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileLocks.java","line_number":269,"column_number":-1,"description":"start of procedure lock(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileLocks.java","line_number":270,"column_number":-1,"description":"Taking true branch"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileLocks.java","line_number":271,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileLocks.java","line_number":272,"column_number":-1,"description":"Taking true branch"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileLocks.java","line_number":272,"column_number":-1,"description":"Taking true branch"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileLocks.java","line_number":323,"column_number":-1,"description":"exception java.lang.AssertionError"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileLocks.java","line_number":323,"column_number":-1,"description":"return from a call to FileLocks$WrappedLock FileLocks$LockHolder.lock(boolean,boolean)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileLocks.java","line_number":142,"column_number":-1,"description":"exception java.lang.AssertionError"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileLocks.java","line_number":142,"column_number":-1,"description":"return from a call to FileLocks$WrappedLock FileLocks.lock(File,boolean,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileLocks.java","line_number":69,"column_number":-1,"description":"exception java.lang.AssertionError"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileLocks.java","line_number":69,"column_number":-1,"description":"return from a call to FileLocks$WrappedLock FileLocks.writeLock(File)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":421,"column_number":-1,"description":""}],"key":"FileSystemBinaryStore.java|touch|RESOURCE_LEAK","node_key":"d54375129813b1c5d9f10eb00e12d6a9","hash":"1b0e3a203478161776b74adce3f71ba6","bug_type_hum":"Resource Leak"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `namedBinaryStore` last assigned on line 427 could be null and is dereferenced at line 430.","severity":"ERROR","line":430,"column":-1,"procedure":"org.modeshape.jcr.value.binary.CompositeBinaryStore.selectBinaryStore(java.lang.String):org.modeshape.jcr.value.binary.BinaryStore","procedure_start_line":417,"file":"src/main/java/org/modeshape/jcr/value/binary/CompositeBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/CompositeBinaryStore.java","line_number":417,"column_number":-1,"description":"start of procedure selectBinaryStore(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/CompositeBinaryStore.java","line_number":419,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/CompositeBinaryStore.java","line_number":421,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/CompositeBinaryStore.java","line_number":426,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/CompositeBinaryStore.java","line_number":427,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/CompositeBinaryStore.java","line_number":435,"column_number":-1,"description":"start of procedure getDefaultBinaryStore()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/CompositeBinaryStore.java","line_number":436,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/CompositeBinaryStore.java","line_number":437,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/CompositeBinaryStore.java","line_number":440,"column_number":-1,"description":"Skipping trace(...): unknown method"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/CompositeBinaryStore.java","line_number":441,"column_number":-1,"description":"Skipping iterator(): unknown method"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/CompositeBinaryStore.java","line_number":443,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/CompositeBinaryStore.java","line_number":449,"column_number":-1,"description":"return from a call to BinaryStore CompositeBinaryStore.getDefaultBinaryStore()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/CompositeBinaryStore.java","line_number":430,"column_number":-1,"description":""}],"key":"CompositeBinaryStore.java|selectBinaryStore|NULL_DEREFERENCE","node_key":"3677875e6aead27ee1320f16c80d8b0f","hash":"ee4e3ff18ab67daf93c032c08b78442a","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object returned by `LazyCachedNode$1.this$0.properties()` could be null and is dereferenced at line 422.","severity":"ERROR","line":422,"column":-1,"procedure":"org.modeshape.jcr.cache.document.LazyCachedNode$1.getProperty(org.modeshape.jcr.value.Name):org.modeshape.jcr.value.Property","procedure_start_line":421,"file":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":421,"column_number":-1,"description":"start of procedure getProperty(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":422,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":260,"column_number":-1,"description":"start of procedure properties()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":260,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":262,"column_number":-1,"description":"Skipping compareAndSet(...): unknown method"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":264,"column_number":-1,"description":"return from a call to Map LazyCachedNode.properties()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":422,"column_number":-1,"description":""}],"key":"LazyCachedNode.java|getProperty|NULL_DEREFERENCE","node_key":"dab93a9247da82760a2002fbed97215a","hash":"2130098380f561ea73c9c98fd63b9485","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object returned by `LazyCachedNode$1.this$0.properties()` could be null and is dereferenced at line 427.","severity":"ERROR","line":427,"column":-1,"procedure":"org.modeshape.jcr.cache.document.LazyCachedNode$1.iterator():java.util.Iterator","procedure_start_line":427,"file":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":427,"column_number":-1,"description":"start of procedure iterator()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":260,"column_number":-1,"description":"start of procedure properties()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":260,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":262,"column_number":-1,"description":"Skipping compareAndSet(...): unknown method"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":264,"column_number":-1,"description":"return from a call to Map LazyCachedNode.properties()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":427,"column_number":-1,"description":""}],"key":"LazyCachedNode.java|iterator|NULL_DEREFERENCE","node_key":"07c4ca0274b2c82c8349f056d2a4ea49","hash":"1e7fc8efe9a17f012afdd0f1f00e7ca5","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `oldName` last assigned on line 429 could be null and is dereferenced by call to `equals(...)` at line 433.","severity":"ERROR","line":433,"column":-1,"procedure":"org.modeshape.jcr.query.QueryBuilder.from(java.lang.String):org.modeshape.jcr.query.QueryBuilder","procedure_start_line":427,"file":"src/main/java/org/modeshape/jcr/query/QueryBuilder.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/QueryBuilder.java","line_number":427,"column_number":-1,"description":"start of procedure from(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/QueryBuilder.java","line_number":428,"column_number":-1,"description":"Skipping namedSelector(...): empty list of specs"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/QueryBuilder.java","line_number":298,"column_number":-1,"description":"Definition of namedSelector(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/QueryBuilder.java","line_number":429,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/QueryBuilder.java","line_number":431,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/QueryBuilder.java","line_number":432,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/QueryBuilder.java","line_number":433,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/model/Column.java","line_number":69,"column_number":-1,"description":"start of procedure selectorName()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/model/Column.java","line_number":69,"column_number":-1,"description":"return from a call to SelectorName Column.selectorName()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/QueryBuilder.java","line_number":433,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/model/SelectorName.java","line_number":77,"column_number":-1,"description":"start of procedure equals(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/model/SelectorName.java","line_number":78,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/model/SelectorName.java","line_number":79,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/model/SelectorName.java","line_number":80,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/model/SelectorName.java","line_number":81,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/model/SelectorName.java","line_number":48,"column_number":-1,"description":"start of procedure name()"}],"key":"QueryBuilder.java|from|NULL_DEREFERENCE","node_key":"7e9fc31bc469440d6384630f8b346526","hash":"14a4c0225997dc8d22a59ba6b25a6e30","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object returned by `properties()` could be null and is dereferenced at line 439.","severity":"ERROR","line":439,"column":-1,"procedure":"org.modeshape.jcr.cache.document.LazyCachedNode.getProperties(org.modeshape.jcr.cache.NodeCache):java.util.Iterator","procedure_start_line":433,"file":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":433,"column_number":-1,"description":"start of procedure getProperties(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":434,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":439,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":260,"column_number":-1,"description":"start of procedure properties()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":260,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":262,"column_number":-1,"description":"Skipping compareAndSet(...): unknown method"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":264,"column_number":-1,"description":"return from a call to Map LazyCachedNode.properties()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":439,"column_number":-1,"description":""}],"key":"LazyCachedNode.java|getProperties|NULL_DEREFERENCE","node_key":"42f56fda1ad408e362508b93a175bb0c","hash":"ba50423866e8e09ef64791ee25d8bb7b","bug_type_hum":"Null Dereference"},{"bug_type":"RESOURCE_LEAK","qualifier":"resource of type `org.modeshape.jcr.query.BufferManager` acquired to `bufferManager` by call to `BufferManager(...)` at line 448 is not released after line 546.","severity":"ERROR","line":546,"column":-1,"procedure":"org.modeshape.jcr.query.validate.ImmutableSchemata$Builder.build():org.modeshape.jcr.query.validate.Schemata","procedure_start_line":433,"file":"src/main/java/org/modeshape/jcr/query/validate/ImmutableSchemata.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/validate/ImmutableSchemata.java","line_number":433,"column_number":-1,"description":"start of procedure build()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/validate/ImmutableSchemata.java","line_number":434,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/validate/ImmutableSchemata.java","line_number":436,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/validate/ImmutableSchemata.java","line_number":443,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/validate/ImmutableSchemata.java","line_number":560,"column_number":-1,"description":"start of procedure ImmutableSchemata(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/validate/ImmutableSchemata.java","line_number":561,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/validate/ImmutableSchemata.java","line_number":562,"column_number":-1,"description":"return from a call to ImmutableSchemata.<init>(HashMap)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/validate/ImmutableSchemata.java","line_number":446,"column_number":-1,"description":"Skipping HashMap(...): unknown method"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/validate/ImmutableSchemata.java","line_number":447,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/validate/ImmutableSchemata.java","line_number":448,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/BufferManager.java","line_number":340,"column_number":-1,"description":"start of procedure BufferManager(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/BufferManager.java","line_number":341,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/BufferManager.java","line_number":344,"column_number":-1,"description":"start of procedure BufferManager(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/BufferManager.java","line_number":346,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/BufferManager.java","line_number":338,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/BufferManager.java","line_number":347,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/BufferManager.java","line_number":293,"column_number":-1,"description":"start of procedure BufferManager$DbHolder(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/BufferManager.java","line_number":289,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/BufferManager.java","line_number":290,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/BufferManager.java","line_number":294,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/BufferManager.java","line_number":295,"column_number":-1,"description":"return from a call to BufferManager$DbHolder.<init>(Supplier)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/BufferManager.java","line_number":347,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/BufferManager.java","line_number":348,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/BufferManager.java","line_number":293,"column_number":-1,"description":"start of procedure BufferManager$DbHolder(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/BufferManager.java","line_number":289,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/BufferManager.java","line_number":290,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/BufferManager.java","line_number":294,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/BufferManager.java","line_number":295,"column_number":-1,"description":"return from a call to BufferManager$DbHolder.<init>(Supplier)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/BufferManager.java","line_number":348,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/BufferManager.java","line_number":351,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/ExecutionContext.java","line_number":376,"column_number":-1,"description":"start of procedure getValueFactories()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/ExecutionContext.java","line_number":377,"column_number":-1,"description":"return from a call to ValueFactories ExecutionContext.getValueFactories()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/BufferManager.java","line_number":352,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/index/local/MapDB.java","line_number":77,"column_number":-1,"description":"start of procedure serializers(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/index/local/MapDB.java","line_number":78,"column_number":-1,"description":"Skipping MapDB$SerializerSupplier(...): empty list of specs"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/index/local/MapDB.java","line_number":92,"column_number":-1,"description":"Definition of MapDB$SerializerSupplier(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/index/local/MapDB.java","line_number":78,"column_number":-1,"description":"return from a call to MapDB$Serializers MapDB.serializers(ValueFactories)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/BufferManager.java","line_number":352,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/BufferManager.java","line_number":353,"column_number":-1,"description":"return from a call to BufferManager.<init>(ExecutionContext,Supplier,Supplier)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/BufferManager.java","line_number":342,"column_number":-1,"description":"return from a call to BufferManager.<init>(ExecutionContext)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/validate/ImmutableSchemata.java","line_number":450,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/validate/ImmutableSchemata.java","line_number":451,"column_number":-1,"description":"Skipping HashSet(...): unknown method"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/validate/ImmutableSchemata.java","line_number":452,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/validate/ImmutableSchemata.java","line_number":546,"column_number":-1,"description":"Taking false branch"}],"key":"ImmutableSchemata.java|build|RESOURCE_LEAK","node_key":"a18c747aa06fe73513762e994376f92e","hash":"1549b3e3344275287c90f1a63b2d4828","bug_type_hum":"Resource Leak"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object returned by `node()` could be null and is dereferenced at line 532.","severity":"ERROR","line":532,"column":-1,"procedure":"org.modeshape.jcr.JcrContentHandler$NodeHandler.name():java.lang.String","procedure_start_line":530,"file":"src/main/java/org/modeshape/jcr/JcrContentHandler.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrContentHandler.java","line_number":530,"column_number":-1,"description":"start of procedure name()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrContentHandler.java","line_number":532,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrContentHandler.java","line_number":511,"column_number":-1,"description":"start of procedure node()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrContentHandler.java","line_number":512,"column_number":-1,"description":"return from a call to AbstractJcrNode JcrContentHandler$NodeHandler.node()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrContentHandler.java","line_number":532,"column_number":-1,"description":""}],"key":"JcrContentHandler.java|name|NULL_DEREFERENCE","node_key":"42f56fda1ad408e362508b93a175bb0c","hash":"d2fafad01a5ece7767f23e6b5766bf40","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object returned by `node()` could be null and is dereferenced at line 546.","severity":"ERROR","line":546,"column":-1,"procedure":"org.modeshape.jcr.JcrContentHandler$NodeHandler.toString():java.lang.String","procedure_start_line":540,"file":"src/main/java/org/modeshape/jcr/JcrContentHandler.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrContentHandler.java","line_number":540,"column_number":-1,"description":"start of procedure toString()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrContentHandler.java","line_number":541,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrContentHandler.java","line_number":515,"column_number":-1,"description":"start of procedure parentHandler()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrContentHandler.java","line_number":516,"column_number":-1,"description":"return from a call to JcrContentHandler$NodeHandler JcrContentHandler$NodeHandler.parentHandler()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrContentHandler.java","line_number":542,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrContentHandler.java","line_number":546,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrContentHandler.java","line_number":511,"column_number":-1,"description":"start of procedure node()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrContentHandler.java","line_number":512,"column_number":-1,"description":"return from a call to AbstractJcrNode JcrContentHandler$NodeHandler.node()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrContentHandler.java","line_number":546,"column_number":-1,"description":""}],"key":"JcrContentHandler.java|toString|NULL_DEREFERENCE","node_key":"d46e1684de2ca326ba231ad8a5b48143","hash":"1482f308ce24a9814384e37689334cc6","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object returned by `localStore()` could be null and is dereferenced at line 548.","severity":"ERROR","line":548,"column":-1,"procedure":"org.modeshape.jcr.federation.ExternalDocumentStore.edit(java.lang.String,boolean,boolean):org.infinispan.schematic.document.EditableDocument","procedure_start_line":546,"file":"src/main/java/org/modeshape/jcr/federation/ExternalDocumentStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/federation/ExternalDocumentStore.java","line_number":546,"column_number":-1,"description":"start of procedure edit(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/federation/ExternalDocumentStore.java","line_number":547,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/federation/ExternalDocumentStore.java","line_number":380,"column_number":-1,"description":"start of procedure isLocalSource(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/federation/ExternalDocumentStore.java","line_number":381,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":86,"column_number":-1,"description":"start of procedure isValidFormat(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":87,"column_number":-1,"description":"Taking false branch"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":88,"column_number":-1,"description":"return from a call to boolean NodeKey.isValidFormat(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/federation/ExternalDocumentStore.java","line_number":381,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/federation/ExternalDocumentStore.java","line_number":383,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/federation/ExternalDocumentStore.java","line_number":381,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/federation/ExternalDocumentStore.java","line_number":383,"column_number":-1,"description":"return from a call to boolean ExternalDocumentStore.isLocalSource(String)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/federation/ExternalDocumentStore.java","line_number":547,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/federation/ExternalDocumentStore.java","line_number":548,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/federation/ExternalDocumentStore.java","line_number":95,"column_number":-1,"description":"start of procedure localStore()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/federation/ExternalDocumentStore.java","line_number":96,"column_number":-1,"description":"return from a call to LocalDocumentStore ExternalDocumentStore.localStore()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/federation/ExternalDocumentStore.java","line_number":548,"column_number":-1,"description":""}],"key":"ExternalDocumentStore.java|edit|NULL_DEREFERENCE","node_key":"c3d45bee99108f43987fad86ebd14f63","hash":"0b6f306cb9cfa393ce37767eee584994","bug_type_hum":"Null Dereference"},{"bug_type":"RESOURCE_LEAK","qualifier":"resource of type `java.io.FileOutputStream` acquired by call to `FileOutputStream(...)` at line 578 is not released after line 578.","severity":"ERROR","line":578,"column":-1,"procedure":"org.modeshape.jcr.value.binary.FileSystemBinaryStore.storeStringAtKey(java.lang.String,org.modeshape.jcr.value.BinaryKey):void","procedure_start_line":573,"file":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":573,"column_number":-1,"description":"start of procedure storeStringAtKey(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":575,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":577,"column_number":-1,"description":"Skipping createTempFile(...): unknown method"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":578,"column_number":-1,"description":"Skipping write(...): unknown method"}],"key":"FileSystemBinaryStore.java|storeStringAtKey|RESOURCE_LEAK","node_key":"336a4f1a0d9af93d3a061b54b79d15a1","hash":"5dc2bc45aa4de3367b7f547aaa5a42ea","bug_type_hum":"Resource Leak"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object returned by `BackupService$Activity.binaryDirectory.listFiles()` could be null and is dereferenced at line 588.","severity":"ERROR","line":588,"column":-1,"procedure":"org.modeshape.jcr.BackupService$RestoreActivity.restoreBinaryFiles():void","procedure_start_line":587,"file":"src/main/java/org/modeshape/jcr/BackupService.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/BackupService.java","line_number":587,"column_number":-1,"description":"start of procedure restoreBinaryFiles()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/BackupService.java","line_number":588,"column_number":-1,"description":""}],"key":"BackupService.java|restoreBinaryFiles|NULL_DEREFERENCE","node_key":"9048a86b97478a5a5da3051597184354","hash":"d52c20a3350074102fee7887b3f0b9b6","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object returned by `FileSystemBinaryStore.directory.listFiles()` could be null and is dereferenced at line 627.","severity":"ERROR","line":627,"column":-1,"procedure":"org.modeshape.jcr.value.binary.FileSystemBinaryStore.getAllBinaryKeys():java.lang.Iterable","procedure_start_line":620,"file":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":620,"column_number":-1,"description":"start of procedure getAllBinaryKeys()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":623,"column_number":-1,"description":"Skipping HashSet(): unknown method"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":624,"column_number":-1,"description":"Skipping HashSet(): unknown method"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":626,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":663,"column_number":-1,"description":"start of procedure isReadableDir(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":664,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":664,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":664,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":664,"column_number":-1,"description":"return from a call to boolean FileSystemBinaryStore.isReadableDir(File)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":626,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":627,"column_number":-1,"description":""}],"key":"FileSystemBinaryStore.java|getAllBinaryKeys|NULL_DEREFERENCE","node_key":"9048a86b97478a5a5da3051597184354","hash":"3926b753395811ae160f70f274c84567","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `systemRoot` last assigned on line 685 could be null and is dereferenced at line 686.","severity":"ERROR","line":686,"column":-1,"procedure":"org.modeshape.jcr.cache.RepositoryCache.getSystemNode(org.modeshape.jcr.cache.document.WritableSessionCache):org.modeshape.jcr.cache.MutableCachedNode","procedure_start_line":683,"file":"src/main/java/org/modeshape/jcr/cache/RepositoryCache.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/RepositoryCache.java","line_number":683,"column_number":-1,"description":"start of procedure getSystemNode(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/RepositoryCache.java","line_number":684,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/AbstractSessionCache.java","line_number":239,"column_number":-1,"description":"start of procedure getRootKey()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/AbstractSessionCache.java","line_number":176,"column_number":-1,"description":"start of procedure workspaceCache()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/AbstractSessionCache.java","line_number":176,"column_number":-1,"description":"return from a call to WorkspaceCache AbstractSessionCache.workspaceCache()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/AbstractSessionCache.java","line_number":239,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":229,"column_number":-1,"description":"start of procedure getRootKey()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":230,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":341,"column_number":-1,"description":"start of procedure checkNotClosed()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":342,"column_number":-1,"description":"Taking false branch"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":345,"column_number":-1,"description":"return from a call to void WorkspaceCache.checkNotClosed()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":231,"column_number":-1,"description":"return from a call to NodeKey WorkspaceCache.getRootKey()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/AbstractSessionCache.java","line_number":239,"column_number":-1,"description":"return from a call to NodeKey AbstractSessionCache.getRootKey()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/RepositoryCache.java","line_number":685,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":169,"column_number":-1,"description":"start of procedure getNode(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":170,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":171,"column_number":-1,"description":"Skipping readLock(): unknown method"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":173,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":174,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":176,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":178,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":180,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":182,"column_number":-1,"description":"return from a call to CachedNode WritableSessionCache.getNode(NodeKey)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/RepositoryCache.java","line_number":686,"column_number":-1,"description":""}],"key":"RepositoryCache.java|getSystemNode|NULL_DEREFERENCE","node_key":"a026c124555b1d0d3484d3c6f60db721","hash":"45c515703fed8b0409fa36fad327147e","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `parent` last assigned on line 719 could be null and is dereferenced at line 720.","severity":"ERROR","line":720,"column":-1,"procedure":"org.modeshape.jcr.JcrContentHandler$BasicNodeHandler.create():void","procedure_start_line":717,"file":"src/main/java/org/modeshape/jcr/JcrContentHandler.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrContentHandler.java","line_number":717,"column_number":-1,"description":"start of procedure create()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrContentHandler.java","line_number":719,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrContentHandler.java","line_number":511,"column_number":-1,"description":"start of procedure node()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrContentHandler.java","line_number":512,"column_number":-1,"description":"return from a call to AbstractJcrNode JcrContentHandler$NodeHandler.node()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrContentHandler.java","line_number":720,"column_number":-1,"description":""}],"key":"JcrContentHandler.java|create|NULL_DEREFERENCE","node_key":"af67abeca90f0549805cf5d33f8bf5ec","hash":"55a64bb29bcbec16546af78a253193f3","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object returned by `value.getBinary()` could be null and is dereferenced at line 813.","severity":"ERROR","line":813,"column":-1,"procedure":"org.modeshape.jcr.JcrPropertyDefinition$BinaryConstraintChecker.matches(javax.jcr.Value,org.modeshape.jcr.JcrSession):boolean","procedure_start_line":809,"file":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":809,"column_number":-1,"description":"start of procedure matches(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":812,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":813,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrValue.java","line_number":44,"column_number":-1,"description":"start of procedure getBinary()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrValue.java","line_number":180,"column_number":-1,"description":"start of procedure getBinary()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrValue.java","line_number":181,"column_number":-1,"description":"Taking true branch"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrValue.java","line_number":186,"column_number":-1,"description":"return from a call to BinaryValue JcrValue.getBinary()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrValue.java","line_number":44,"column_number":-1,"description":"return from a call to Binary JcrValue.getBinary()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":813,"column_number":-1,"description":""}],"key":"JcrPropertyDefinition.java|matches|NULL_DEREFERENCE","node_key":"42f56fda1ad408e362508b93a175bb0c","hash":"4a6327cf55159f42332dcc424ff24b08","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `prop` last assigned on line 945 could be null and is dereferenced at line 947.","severity":"ERROR","line":947,"column":-1,"procedure":"org.modeshape.jcr.JcrVersionManager.doneMerge(org.modeshape.jcr.AbstractJcrNode,javax.jcr.version.Version):void","procedure_start_line":932,"file":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":932,"column_number":-1,"description":"start of procedure doneMerge(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":934,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrItem.java","line_number":42,"column_number":-1,"description":"start of procedure session()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrItem.java","line_number":42,"column_number":-1,"description":"return from a call to JcrSession AbstractJcrItem.session()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":934,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":325,"column_number":-1,"description":"start of procedure checkLive()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":326,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1803,"column_number":-1,"description":"start of procedure isLive()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1803,"column_number":-1,"description":"return from a call to boolean JcrSession.isLive()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":326,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":329,"column_number":-1,"description":"return from a call to void JcrSession.checkLive()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":935,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":274,"column_number":-1,"description":"start of procedure checkVersionable(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":275,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2329,"column_number":-1,"description":"start of procedure isNodeType(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2330,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrItem.java","line_number":54,"column_number":-1,"description":"start of procedure checkSession()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrItem.java","line_number":55,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":325,"column_number":-1,"description":"start of procedure checkLive()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":326,"column_number":-1,"description":""},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1803,"column_number":-1,"description":"start of procedure isLive()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1803,"column_number":-1,"description":"return from a call to boolean JcrSession.isLive()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":326,"column_number":-1,"description":"Taking false branch"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":329,"column_number":-1,"description":"return from a call to void JcrSession.checkLive()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrItem.java","line_number":56,"column_number":-1,"description":"return from a call to void AbstractJcrItem.checkSession()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2331,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":185,"column_number":-1,"description":"start of procedure sessionCache()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"start of procedure cache()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"return from a call to SessionCache JcrSession.cache()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":"return from a call to SessionCache AbstractJcrNode.sessionCache()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2332,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrItem.java","line_number":42,"column_number":-1,"description":"start of procedure session()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrItem.java","line_number":42,"column_number":-1,"description":"return from a call to JcrSession AbstractJcrItem.session()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2332,"column_number":-1,"description":"Skipping nodeTypes(): empty list of specs"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":387,"column_number":-1,"description":"Definition of nodeTypes()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2334,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":201,"column_number":-1,"description":"start of procedure node()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":185,"column_number":-1,"description":"start of procedure sessionCache()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":""},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"start of procedure cache()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"return from a call to SessionCache JcrSession.cache()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":"return from a call to SessionCache AbstractJcrNode.sessionCache()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":201,"column_number":-1,"description":"Skipping getNode(...): unknown method"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/CachedNodeSupplier.java","line_number":-1,"column_number":-1,"description":"Definition of getNode(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":202,"column_number":-1,"description":"Taking false branch"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":208,"column_number":-1,"description":"return from a call to CachedNode AbstractJcrNode.node()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2336,"column_number":-1,"description":"Skipping getPrimaryType(...): unknown method"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2337,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":447,"column_number":-1,"description":"start of procedure isTypeOrSubtype(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":449,"column_number":-1,"description":"Taking false branch"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":453,"column_number":-1,"description":"Taking false branch"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":454,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":875,"column_number":-1,"description":"start of procedure getNodeType(...)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":876,"column_number":-1,"description":"return from a call to JcrNodeType NodeTypes.getNodeType(Name)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":455,"column_number":-1,"description":"Taking true branch"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":569,"column_number":-1,"description":"start of procedure isNodeType(...)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":570,"column_number":-1,"description":"Taking false branch"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":571,"column_number":-1,"description":"return from a call to boolean JcrNodeType.isNodeType(Name)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":455,"column_number":-1,"description":"Taking true branch"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":455,"column_number":-1,"description":"return from a call to boolean NodeTypes.isTypeOrSubtype(Name,Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2337,"column_number":-1,"description":"Taking true branch"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2344,"column_number":-1,"description":"return from a call to boolean AbstractJcrNode.isNodeType(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":275,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":278,"column_number":-1,"description":"return from a call to void JcrVersionManager.checkVersionable(AbstractJcrNode)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":937,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3361,"column_number":-1,"description":"start of procedure isNew()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3363,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":201,"column_number":-1,"description":"start of procedure node()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":185,"column_number":-1,"description":"start of procedure sessionCache()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"start of procedure cache()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"return from a call to SessionCache JcrSession.cache()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":"return from a call to SessionCache AbstractJcrNode.sessionCache()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":201,"column_number":-1,"description":"Skipping getNode(...): unknown method"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/CachedNodeSupplier.java","line_number":-1,"column_number":-1,"description":"Definition of getNode(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":202,"column_number":-1,"description":"Taking false branch"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":208,"column_number":-1,"description":"return from a call to CachedNode AbstractJcrNode.node()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3364,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3367,"column_number":-1,"description":"return from a call to boolean AbstractJcrNode.isNew()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":937,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3372,"column_number":-1,"description":"start of procedure isModified()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3374,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":201,"column_number":-1,"description":"start of procedure node()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":185,"column_number":-1,"description":"start of procedure sessionCache()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"start of procedure cache()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"return from a call to SessionCache JcrSession.cache()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":"return from a call to SessionCache AbstractJcrNode.sessionCache()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":201,"column_number":-1,"description":"Skipping getNode(...): unknown method"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/CachedNodeSupplier.java","line_number":-1,"column_number":-1,"description":"Definition of getNode(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":202,"column_number":-1,"description":"Taking false branch"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":208,"column_number":-1,"description":"return from a call to CachedNode AbstractJcrNode.node()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3375,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3382,"column_number":-1,"description":"return from a call to boolean AbstractJcrNode.isModified()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":937,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":941,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2329,"column_number":-1,"description":"start of procedure isNodeType(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2330,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrItem.java","line_number":54,"column_number":-1,"description":"start of procedure checkSession()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrItem.java","line_number":55,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":325,"column_number":-1,"description":"start of procedure checkLive()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":326,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1803,"column_number":-1,"description":"start of procedure isLive()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1803,"column_number":-1,"description":"return from a call to boolean JcrSession.isLive()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":326,"column_number":-1,"description":"Taking false branch"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":329,"column_number":-1,"description":"return from a call to void JcrSession.checkLive()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrItem.java","line_number":56,"column_number":-1,"description":"return from a call to void AbstractJcrItem.checkSession()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2331,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":185,"column_number":-1,"description":"start of procedure sessionCache()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"start of procedure cache()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"return from a call to SessionCache JcrSession.cache()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":"return from a call to SessionCache AbstractJcrNode.sessionCache()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2332,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrItem.java","line_number":42,"column_number":-1,"description":"start of procedure session()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrItem.java","line_number":42,"column_number":-1,"description":"return from a call to JcrSession AbstractJcrItem.session()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2332,"column_number":-1,"description":"Skipping nodeTypes(): empty list of specs"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":387,"column_number":-1,"description":"Definition of nodeTypes()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2334,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":201,"column_number":-1,"description":"start of procedure node()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":185,"column_number":-1,"description":"start of procedure sessionCache()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"start of procedure cache()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"return from a call to SessionCache JcrSession.cache()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":"return from a call to SessionCache AbstractJcrNode.sessionCache()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":201,"column_number":-1,"description":"Skipping getNode(...): unknown method"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/CachedNodeSupplier.java","line_number":-1,"column_number":-1,"description":"Definition of getNode(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":202,"column_number":-1,"description":"Taking false branch"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":208,"column_number":-1,"description":"return from a call to CachedNode AbstractJcrNode.node()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2336,"column_number":-1,"description":"Skipping getPrimaryType(...): unknown method"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2337,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":447,"column_number":-1,"description":"start of procedure isTypeOrSubtype(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":449,"column_number":-1,"description":"Taking true branch"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":451,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":455,"column_number":-1,"description":"return from a call to boolean NodeTypes.isTypeOrSubtype(Name,Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2337,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2344,"column_number":-1,"description":"return from a call to boolean AbstractJcrNode.isNodeType(Name)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":941,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":945,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":349,"column_number":-1,"description":"start of procedure getProperty(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":350,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":351,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":370,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":201,"column_number":-1,"description":"start of procedure node()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":185,"column_number":-1,"description":"start of procedure sessionCache()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"start of procedure cache()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"return from a call to SessionCache JcrSession.cache()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":"return from a call to SessionCache AbstractJcrNode.sessionCache()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":201,"column_number":-1,"description":"Skipping getNode(...): unknown method"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/CachedNodeSupplier.java","line_number":-1,"column_number":-1,"description":"Definition of getNode(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":202,"column_number":-1,"description":"Taking false branch"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":208,"column_number":-1,"description":"return from a call to CachedNode AbstractJcrNode.node()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":371,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":185,"column_number":-1,"description":"start of procedure sessionCache()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"start of procedure cache()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"return from a call to SessionCache JcrSession.cache()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":"return from a call to SessionCache AbstractJcrNode.sessionCache()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":372,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":373,"column_number":-1,"description":"Skipping remove(...): unknown method"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":374,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":377,"column_number":-1,"description":"return from a call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":947,"column_number":-1,"description":""}],"key":"JcrVersionManager.java|doneMerge|NULL_DEREFERENCE","node_key":"3994ee5d874661781d0b7a6243c1af8d","hash":"73d8fe29198a171af364ff621bf764db","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `index` last assigned on line 959 could be null and is dereferenced by call to `createNodeSequenceForSource(...)` at line 960.","severity":"ERROR","line":960,"column":-1,"procedure":"org.modeshape.jcr.query.engine.ScanningQueryEngine.createNodeSequenceForSource(org.modeshape.jcr.query.model.QueryCommand,org.modeshape.jcr.query.engine.ScanningQueryEngine$ScanQueryContext,org.modeshape.jcr.query.plan.PlanNode,org.modeshape.jcr.query.QueryResults$Columns,org.modeshape.jcr.query.engine.QuerySources):org.modeshape.jcr.query.NodeSequence","procedure_start_line":951,"file":"src/main/java/org/modeshape/jcr/query/engine/ScanningQueryEngine.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/engine/ScanningQueryEngine.java","line_number":951,"column_number":-1,"description":"start of procedure createNodeSequenceForSource(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/engine/ScanningQueryEngine.java","line_number":957,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":506,"column_number":-1,"description":"start of procedure getChildren()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":507,"column_number":-1,"description":"return from a call to List PlanNode.getChildren()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/engine/ScanningQueryEngine.java","line_number":957,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/engine/ScanningQueryEngine.java","line_number":958,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":312,"column_number":-1,"description":"start of procedure getType()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":313,"column_number":-1,"description":"return from a call to PlanNode$Type PlanNode.getType()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/engine/ScanningQueryEngine.java","line_number":958,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/engine/ScanningQueryEngine.java","line_number":959,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":730,"column_number":-1,"description":"start of procedure getProperty(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":732,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":732,"column_number":-1,"description":"return from a call to Object PlanNode.getProperty(PlanNode$Property,Class)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/engine/ScanningQueryEngine.java","line_number":959,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/engine/ScanningQueryEngine.java","line_number":960,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/engine/ScanningQueryEngine.java","line_number":986,"column_number":-1,"description":"start of procedure createNodeSequenceForSource(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/engine/ScanningQueryEngine.java","line_number":992,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/engine/IndexPlan.java","line_number":154,"column_number":-1,"description":"start of procedure getProviderName()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/engine/IndexPlan.java","line_number":155,"column_number":-1,"description":"return from a call to String IndexPlan.getProviderName()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/engine/ScanningQueryEngine.java","line_number":992,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/engine/ScanningQueryEngine.java","line_number":993,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/engine/IndexPlan.java","line_number":136,"column_number":-1,"description":"start of procedure getName()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/engine/IndexPlan.java","line_number":137,"column_number":-1,"description":""}],"key":"ScanningQueryEngine.java|createNodeSequenceForSource|NULL_DEREFERENCE","node_key":"c8ca5421261236e28b459f41b7fae5b7","hash":"f98dd3400dec74c270ecec71ae96265b","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `prop` last assigned on line 983 could be null and is dereferenced at line 984.","severity":"ERROR","line":984,"column":-1,"procedure":"org.modeshape.jcr.JcrVersionManager.removeVersionFromMergeFailedProperty(org.modeshape.jcr.AbstractJcrNode,javax.jcr.version.Version):void","procedure_start_line":976,"file":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":976,"column_number":-1,"description":"start of procedure removeVersionFromMergeFailedProperty(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":979,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":528,"column_number":-1,"description":"start of procedure hasProperty(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":529,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":530,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":201,"column_number":-1,"description":"start of procedure node()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":185,"column_number":-1,"description":"start of procedure sessionCache()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"start of procedure cache()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"return from a call to SessionCache JcrSession.cache()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":"return from a call to SessionCache AbstractJcrNode.sessionCache()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":201,"column_number":-1,"description":"Skipping getNode(...): unknown method"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/CachedNodeSupplier.java","line_number":-1,"column_number":-1,"description":"Definition of getNode(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":202,"column_number":-1,"description":"Taking false branch"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":208,"column_number":-1,"description":"return from a call to CachedNode AbstractJcrNode.node()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":530,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":185,"column_number":-1,"description":"start of procedure sessionCache()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"start of procedure cache()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"return from a call to SessionCache JcrSession.cache()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":"return from a call to SessionCache AbstractJcrNode.sessionCache()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":530,"column_number":-1,"description":"return from a call to boolean AbstractJcrNode.hasProperty(Name)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":979,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":983,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":349,"column_number":-1,"description":"start of procedure getProperty(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":350,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":351,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":370,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":201,"column_number":-1,"description":"start of procedure node()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":185,"column_number":-1,"description":"start of procedure sessionCache()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"start of procedure cache()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"return from a call to SessionCache JcrSession.cache()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":"return from a call to SessionCache AbstractJcrNode.sessionCache()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":201,"column_number":-1,"description":"Skipping getNode(...): unknown method"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/CachedNodeSupplier.java","line_number":-1,"column_number":-1,"description":"Definition of getNode(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":202,"column_number":-1,"description":"Taking false branch"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":208,"column_number":-1,"description":"return from a call to CachedNode AbstractJcrNode.node()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":371,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":185,"column_number":-1,"description":"start of procedure sessionCache()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"start of procedure cache()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"return from a call to SessionCache JcrSession.cache()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":"return from a call to SessionCache AbstractJcrNode.sessionCache()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":372,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":373,"column_number":-1,"description":"Skipping remove(...): unknown method"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":374,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":377,"column_number":-1,"description":"return from a call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":984,"column_number":-1,"description":""}],"key":"JcrVersionManager.java|removeVersionFromMergeFailedProperty|NULL_DEREFERENCE","node_key":"939bacd846f19fa9053d3f2bc15017ae","hash":"5fc05405b3cb54ab54d29335311f9d58","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `projectedColumns` last assigned on line 1053 could be null and is dereferenced at line 1059.","severity":"ERROR","line":1059,"column":-1,"procedure":"org.modeshape.jcr.query.plan.PlanUtil.createMappingFor(org.modeshape.jcr.query.validate.Schemata$View,org.modeshape.jcr.query.plan.PlanNode):org.modeshape.jcr.query.plan.PlanUtil$ColumnMapping","procedure_start_line":1044,"file":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1044,"column_number":-1,"description":"start of procedure createMappingFor(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1046,"column_number":-1,"description":"Skipping getName(): unknown method"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/validate/Schemata.java","line_number":-1,"column_number":-1,"description":"Definition of getName()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1046,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1116,"column_number":-1,"description":"start of procedure PlanUtil$ColumnMapping(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1113,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1114,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1117,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1118,"column_number":-1,"description":"return from a call to PlanUtil$ColumnMapping.<init>(SelectorName)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1049,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1452,"column_number":-1,"description":"start of procedure findAtOrBelow(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1474,"column_number":-1,"description":"start of procedure findAtOrBelow(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1510,"column_number":-1,"description":"Definition of findAtOrBelow(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1474,"column_number":-1,"description":"return from a call to PlanNode PlanNode.findAtOrBelow(Set)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1452,"column_number":-1,"description":"return from a call to PlanNode PlanNode.findAtOrBelow(PlanNode$Type)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1050,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1050,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1053,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":759,"column_number":-1,"description":"start of procedure getPropertyAsList(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":761,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":769,"column_number":-1,"description":"return from a call to List PlanNode.getPropertyAsList(PlanNode$Property,Class)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1056,"column_number":-1,"description":"Skipping getColumns(): unknown method"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/validate/Schemata.java","line_number":-1,"column_number":-1,"description":"Definition of getColumns()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1058,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1059,"column_number":-1,"description":""}],"key":"PlanUtil.java|createMappingFor|NULL_DEREFERENCE","node_key":"04381f488314cb03311206acff049cad","hash":"035ffc67728b75c70a1f43d3ccf4b052","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `projectedColumns` last assigned on line 1053 could be null and is dereferenced at line 1063.","severity":"ERROR","line":1063,"column":-1,"procedure":"org.modeshape.jcr.query.plan.PlanUtil.createMappingFor(org.modeshape.jcr.query.validate.Schemata$View,org.modeshape.jcr.query.plan.PlanNode):org.modeshape.jcr.query.plan.PlanUtil$ColumnMapping","procedure_start_line":1044,"file":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1044,"column_number":-1,"description":"start of procedure createMappingFor(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1046,"column_number":-1,"description":"Skipping getName(): unknown method"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/validate/Schemata.java","line_number":-1,"column_number":-1,"description":"Definition of getName()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1046,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1116,"column_number":-1,"description":"start of procedure PlanUtil$ColumnMapping(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1113,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1114,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1117,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1118,"column_number":-1,"description":"return from a call to PlanUtil$ColumnMapping.<init>(SelectorName)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1049,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1452,"column_number":-1,"description":"start of procedure findAtOrBelow(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1474,"column_number":-1,"description":"start of procedure findAtOrBelow(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1510,"column_number":-1,"description":"Definition of findAtOrBelow(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1474,"column_number":-1,"description":"return from a call to PlanNode PlanNode.findAtOrBelow(Set)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1452,"column_number":-1,"description":"return from a call to PlanNode PlanNode.findAtOrBelow(PlanNode$Type)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1050,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1050,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1053,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":759,"column_number":-1,"description":"start of procedure getPropertyAsList(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":761,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":769,"column_number":-1,"description":"return from a call to List PlanNode.getPropertyAsList(PlanNode$Property,Class)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1056,"column_number":-1,"description":"Skipping getColumns(): unknown method"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/validate/Schemata.java","line_number":-1,"column_number":-1,"description":"Definition of getColumns()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1058,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1063,"column_number":-1,"description":""}],"key":"PlanUtil.java|createMappingFor|NULL_DEREFERENCE","node_key":"f9f3a406a670c0aa947d90550a5afa34","hash":"035ffc67728b75c70a1f43d3ccf4b052","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `projectedColumns` last assigned on line 1085 could be null and is dereferenced at line 1091.","severity":"ERROR","line":1091,"column":-1,"procedure":"org.modeshape.jcr.query.plan.PlanUtil.createMappingForAliased(org.modeshape.jcr.query.model.SelectorName,org.modeshape.jcr.query.validate.Schemata$View,org.modeshape.jcr.query.plan.PlanNode):org.modeshape.jcr.query.plan.PlanUtil$ColumnMapping","procedure_start_line":1075,"file":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1075,"column_number":-1,"description":"start of procedure createMappingForAliased(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1078,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1116,"column_number":-1,"description":"start of procedure PlanUtil$ColumnMapping(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1113,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1114,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1117,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1118,"column_number":-1,"description":"return from a call to PlanUtil$ColumnMapping.<init>(SelectorName)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1081,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1452,"column_number":-1,"description":"start of procedure findAtOrBelow(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1474,"column_number":-1,"description":"start of procedure findAtOrBelow(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1510,"column_number":-1,"description":"Definition of findAtOrBelow(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1474,"column_number":-1,"description":"return from a call to PlanNode PlanNode.findAtOrBelow(Set)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1452,"column_number":-1,"description":"return from a call to PlanNode PlanNode.findAtOrBelow(PlanNode$Type)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1082,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1082,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1085,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":759,"column_number":-1,"description":"start of procedure getPropertyAsList(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":761,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":769,"column_number":-1,"description":"return from a call to List PlanNode.getPropertyAsList(PlanNode$Property,Class)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1088,"column_number":-1,"description":"Skipping getColumns(): unknown method"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/validate/Schemata.java","line_number":-1,"column_number":-1,"description":"Definition of getColumns()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1090,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1091,"column_number":-1,"description":""}],"key":"PlanUtil.java|createMappingForAliased|NULL_DEREFERENCE","node_key":"04381f488314cb03311206acff049cad","hash":"e844562627ba48caf11eb535a8f01c62","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `projectedColumns` last assigned on line 1085 could be null and is dereferenced at line 1096.","severity":"ERROR","line":1096,"column":-1,"procedure":"org.modeshape.jcr.query.plan.PlanUtil.createMappingForAliased(org.modeshape.jcr.query.model.SelectorName,org.modeshape.jcr.query.validate.Schemata$View,org.modeshape.jcr.query.plan.PlanNode):org.modeshape.jcr.query.plan.PlanUtil$ColumnMapping","procedure_start_line":1075,"file":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1075,"column_number":-1,"description":"start of procedure createMappingForAliased(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1078,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1116,"column_number":-1,"description":"start of procedure PlanUtil$ColumnMapping(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1113,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1114,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1117,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1118,"column_number":-1,"description":"return from a call to PlanUtil$ColumnMapping.<init>(SelectorName)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1081,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1452,"column_number":-1,"description":"start of procedure findAtOrBelow(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1474,"column_number":-1,"description":"start of procedure findAtOrBelow(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1510,"column_number":-1,"description":"Definition of findAtOrBelow(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1474,"column_number":-1,"description":"return from a call to PlanNode PlanNode.findAtOrBelow(Set)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1452,"column_number":-1,"description":"return from a call to PlanNode PlanNode.findAtOrBelow(PlanNode$Type)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1082,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1082,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1085,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":759,"column_number":-1,"description":"start of procedure getPropertyAsList(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":761,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":769,"column_number":-1,"description":"return from a call to List PlanNode.getPropertyAsList(PlanNode$Property,Class)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1088,"column_number":-1,"description":"Skipping getColumns(): unknown method"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/validate/Schemata.java","line_number":-1,"column_number":-1,"description":"Definition of getColumns()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1090,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1096,"column_number":-1,"description":""}],"key":"PlanUtil.java|createMappingForAliased|NULL_DEREFERENCE","node_key":"f9f3a406a670c0aa947d90550a5afa34","hash":"e844562627ba48caf11eb535a8f01c62","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `store` last assigned on line 1192 could be null and is dereferenced at line 1193.","severity":"ERROR","line":1193,"column":-1,"procedure":"org.modeshape.jcr.RepositoryConfiguration$BinaryStorage.getBinaryStore():org.modeshape.jcr.value.binary.BinaryStore","procedure_start_line":1122,"file":"src/main/java/org/modeshape/jcr/RepositoryConfiguration.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryConfiguration.java","line_number":1122,"column_number":-1,"description":"start of procedure getBinaryStore()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryConfiguration.java","line_number":1123,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryConfiguration.java","line_number":1202,"column_number":-1,"description":"start of procedure getType()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryConfiguration.java","line_number":1203,"column_number":-1,"description":"return from a call to String RepositoryConfiguration$BinaryStorage.getType()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryConfiguration.java","line_number":1124,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryConfiguration.java","line_number":1125,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryConfiguration.java","line_number":1126,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/TransientBinaryStore.java","line_number":44,"column_number":-1,"description":"start of procedure get()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/TransientBinaryStore.java","line_number":45,"column_number":-1,"description":"return from a call to TransientBinaryStore TransientBinaryStore.get()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryConfiguration.java","line_number":1192,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/TransientBinaryStore.java","line_number":44,"column_number":-1,"description":"start of procedure get()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/TransientBinaryStore.java","line_number":45,"column_number":-1,"description":"return from a call to TransientBinaryStore TransientBinaryStore.get()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryConfiguration.java","line_number":1193,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryConfiguration.java","line_number":1114,"column_number":-1,"description":"start of procedure getMinimumBinarySizeInBytes()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryConfiguration.java","line_number":1115,"column_number":-1,"description":"return from a call to long RepositoryConfiguration$BinaryStorage.getMinimumBinarySizeInBytes()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryConfiguration.java","line_number":1193,"column_number":-1,"description":""}],"key":"RepositoryConfiguration.java|getBinaryStore|NULL_DEREFERENCE","node_key":"471a2edb901e769be3ae46e5651fb0cc","hash":"f807aef5cae1adfeb33f0d97680438eb","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object returned by `child.getParentKey(session)` could be null and is dereferenced at line 1253.","severity":"ERROR","line":1253,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.removeChildFromNode(org.modeshape.jcr.cache.document.AbstractSessionCache,org.modeshape.jcr.cache.NodeKey):org.modeshape.jcr.cache.document.SessionNode","procedure_start_line":1249,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1249,"column_number":-1,"description":"start of procedure removeChildFromNode(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1252,"column_number":-1,"description":"Skipping mutable(...): unknown method"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/AbstractSessionCache.java","line_number":-1,"column_number":-1,"description":"Definition of mutable(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1253,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":313,"column_number":-1,"description":"start of procedure getParentKey(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":314,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":317,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":294,"column_number":-1,"description":"start of procedure session(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":295,"column_number":-1,"description":"Skipping unwrap(): unknown method"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/NodeCache.java","line_number":-1,"column_number":-1,"description":"Definition of unwrap()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":295,"column_number":-1,"description":"return from a call to AbstractSessionCache SessionNode.session(NodeCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":317,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":308,"column_number":-1,"description":"start of procedure nodeInWorkspace(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":309,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":139,"column_number":-1,"description":"start of procedure isNew()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":139,"column_number":-1,"description":"return from a call to boolean SessionNode.isNew()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":309,"column_number":-1,"description":"Taking true branch"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":309,"column_number":-1,"description":"return from a call to CachedNode SessionNode.nodeInWorkspace(AbstractSessionCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":319,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":319,"column_number":-1,"description":"return from a call to NodeKey SessionNode.getParentKey(AbstractSessionCache)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1253,"column_number":-1,"description":""}],"key":"SessionNode.java|removeChildFromNode|NULL_DEREFERENCE","node_key":"60849376c0b13ded62008041ea247d25","hash":"b49674a15497b98deadcb0e1a17ba645","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `childPrimaryType` last assigned on line 1356 could be null and is dereferenced at line 1357.","severity":"ERROR","line":1357,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.autoCreateChildren(org.modeshape.jcr.value.Name,org.modeshape.jcr.NodeTypes):void","procedure_start_line":1337,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1337,"column_number":-1,"description":"start of procedure autoCreateChildren(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1341,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":811,"column_number":-1,"description":"start of procedure getAutoCreatedChildNodeDefinitions(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":812,"column_number":-1,"description":"return from a call to Collection NodeTypes.getAutoCreatedChildNodeDefinitions(Name)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1342,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1344,"column_number":-1,"description":"Skipping HashSet(): unknown method"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1345,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1348,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrItemDefinition.java","line_number":79,"column_number":-1,"description":"start of procedure isResidual()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrItemDefinition.java","line_number":80,"column_number":-1,"description":"Skipping getLocalName(): unknown method"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/Name.java","line_number":-1,"column_number":-1,"description":"Definition of getLocalName()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrItemDefinition.java","line_number":80,"column_number":-1,"description":"return from a call to boolean JcrItemDefinition.isResidual()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1348,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1349,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrItemDefinition.java","line_number":113,"column_number":-1,"description":"start of procedure isProtected()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrItemDefinition.java","line_number":114,"column_number":-1,"description":"return from a call to boolean JcrItemDefinition.isProtected()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1349,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1353,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrItemDefinition.java","line_number":59,"column_number":-1,"description":"start of procedure getInternalName()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrItemDefinition.java","line_number":60,"column_number":-1,"description":"return from a call to Name JcrItemDefinition.getInternalName()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1354,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1356,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrNodeDefinition.java","line_number":140,"column_number":-1,"description":"start of procedure getDefaultPrimaryType()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrNodeDefinition.java","line_number":142,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrNodeDefinition.java","line_number":143,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrNodeDefinition.java","line_number":146,"column_number":-1,"description":"return from a call to JcrNodeType JcrNodeDefinition.getDefaultPrimaryType()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1357,"column_number":-1,"description":""}],"key":"AbstractJcrNode.java|autoCreateChildren|NULL_DEREFERENCE","node_key":"3673c4de52f870dfd662aca72d369e76","hash":"9f3dc76a9ec9ebd475aef526b3ac159e","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `projected` last assigned on line 1408 could be null and is dereferenced at line 1411.","severity":"ERROR","line":1411,"column":-1,"procedure":"org.modeshape.jcr.query.plan.PlanUtil.addMissingProjectColumns(org.modeshape.jcr.query.QueryContext,org.modeshape.jcr.query.plan.PlanNode,java.util.List):org.modeshape.jcr.query.plan.PlanNode","procedure_start_line":1400,"file":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1400,"column_number":-1,"description":"start of procedure addMissingProjectColumns(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1403,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1452,"column_number":-1,"description":"start of procedure findAtOrBelow(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1474,"column_number":-1,"description":"start of procedure findAtOrBelow(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1510,"column_number":-1,"description":"Definition of findAtOrBelow(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1474,"column_number":-1,"description":"return from a call to PlanNode PlanNode.findAtOrBelow(Set)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1452,"column_number":-1,"description":"return from a call to PlanNode PlanNode.findAtOrBelow(PlanNode$Type)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1404,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1405,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1452,"column_number":-1,"description":"start of procedure findAtOrBelow(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1474,"column_number":-1,"description":"start of procedure findAtOrBelow(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1510,"column_number":-1,"description":"Definition of findAtOrBelow(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1474,"column_number":-1,"description":"return from a call to PlanNode PlanNode.findAtOrBelow(Set)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1452,"column_number":-1,"description":"return from a call to PlanNode PlanNode.findAtOrBelow(PlanNode$Type)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1406,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":759,"column_number":-1,"description":"start of procedure getPropertyAsList(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":761,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":762,"column_number":-1,"description":"Skipping get(...): unknown method"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":763,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":764,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":769,"column_number":-1,"description":"return from a call to List PlanNode.getPropertyAsList(PlanNode$Property,Class)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1408,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":759,"column_number":-1,"description":"start of procedure getPropertyAsList(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":761,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":769,"column_number":-1,"description":"return from a call to List PlanNode.getPropertyAsList(PlanNode$Property,Class)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1409,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":759,"column_number":-1,"description":"start of procedure getPropertyAsList(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":761,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":769,"column_number":-1,"description":"return from a call to List PlanNode.getPropertyAsList(PlanNode$Property,Class)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1410,"column_number":-1,"description":"Skipping HashSet(): unknown method"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1411,"column_number":-1,"description":""}],"key":"PlanUtil.java|addMissingProjectColumns|NULL_DEREFERENCE","node_key":"50eb9480b1a39477599a8d0ef0064573","hash":"874fc73cf87b4426ac221cee268978bb","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object returned by `SessionNode.federatedSegments.get()` could be null and is dereferenced at line 1441.","severity":"ERROR","line":1441,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.addFederatedSegment(java.lang.String,java.lang.String):void","procedure_start_line":1436,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1436,"column_number":-1,"description":"start of procedure addFederatedSegment(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1438,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1439,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2162,"column_number":-1,"description":"start of procedure SessionNode$FederatedSegmentChanges()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2163,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2164,"column_number":-1,"description":"return from a call to SessionNode$FederatedSegmentChanges.<init>()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1439,"column_number":-1,"description":"Skipping compareAndSet(...): unknown method"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1441,"column_number":-1,"description":""}],"key":"SessionNode.java|addFederatedSegment|NULL_DEREFERENCE","node_key":"c24fe0979eda9d74ca5efa89f788573c","hash":"192fd557c80b88a0f69faa8016f02136","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `select.parent` last assigned on line 1450 could be null and is dereferenced by call to `extractFromParent()` at line 1450.","severity":"ERROR","line":1450,"column":-1,"procedure":"org.modeshape.jcr.query.plan.PlanUtil.removeDuplicateSelectNodesUnderEachAccessNode(org.modeshape.jcr.query.QueryContext,org.modeshape.jcr.query.plan.PlanNode):void","procedure_start_line":1441,"file":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1441,"column_number":-1,"description":"start of procedure removeDuplicateSelectNodesUnderEachAccessNode(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1444,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1350,"column_number":-1,"description":"start of procedure findAllAtOrBelow(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1374,"column_number":-1,"description":"start of procedure findAllAtOrBelow(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1413,"column_number":-1,"description":"Definition of findAllAtOrBelow(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1374,"column_number":-1,"description":"return from a call to List PlanNode.findAllAtOrBelow(Set)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1350,"column_number":-1,"description":"return from a call to List PlanNode.findAllAtOrBelow(PlanNode$Type)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1444,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1445,"column_number":-1,"description":"Skipping HashSet(): unknown method"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1446,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1350,"column_number":-1,"description":"start of procedure findAllAtOrBelow(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1374,"column_number":-1,"description":"start of procedure findAllAtOrBelow(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1413,"column_number":-1,"description":"Definition of findAllAtOrBelow(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1374,"column_number":-1,"description":"return from a call to List PlanNode.findAllAtOrBelow(Set)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":1350,"column_number":-1,"description":"return from a call to List PlanNode.findAllAtOrBelow(PlanNode$Type)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1446,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1447,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":730,"column_number":-1,"description":"start of procedure getProperty(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":732,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":732,"column_number":-1,"description":"return from a call to Object PlanNode.getProperty(PlanNode$Property,Class)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1447,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1448,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1450,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":699,"column_number":-1,"description":"start of procedure extractFromParent()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":700,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":685,"column_number":-1,"description":"start of procedure extractChild(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":686,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":569,"column_number":-1,"description":"start of procedure getChildCount()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":570,"column_number":-1,"description":"return from a call to int PlanNode.getChildCount()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":686,"column_number":-1,"description":"Taking false branch"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":689,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":578,"column_number":-1,"description":"start of procedure getFirstChild()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":579,"column_number":-1,"description":"Taking false branch"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":579,"column_number":-1,"description":"return from a call to PlanNode PlanNode.getFirstChild()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":690,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":541,"column_number":-1,"description":"start of procedure replaceChild(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":543,"column_number":-1,"description":"Taking true branch"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":543,"column_number":-1,"description":"Taking false branch"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":544,"column_number":-1,"description":"Taking true branch"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":544,"column_number":-1,"description":"Taking false branch"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":545,"column_number":-1,"description":"Taking true branch"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":546,"column_number":-1,"description":"Skipping indexOf(...): unknown method"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":547,"column_number":-1,"description":"Taking false branch"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":555,"column_number":-1,"description":"Skipping set(...): unknown method"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":556,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":490,"column_number":-1,"description":"start of procedure removeFromParent()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":491,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":492,"column_number":-1,"description":"Taking true branch"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":494,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":495,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":497,"column_number":-1,"description":"return from a call to PlanNode PlanNode.removeFromParent()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":557,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":558,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":559,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":561,"column_number":-1,"description":"return from a call to boolean PlanNode.replaceChild(PlanNode,PlanNode)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":692,"column_number":-1,"description":"return from a call to void PlanNode.extractChild(PlanNode)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":701,"column_number":-1,"description":"return from a call to void PlanNode.extractFromParent()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1446,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1447,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":730,"column_number":-1,"description":"start of procedure getProperty(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":732,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":732,"column_number":-1,"description":"return from a call to Object PlanNode.getProperty(PlanNode$Property,Class)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1447,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1448,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanUtil.java","line_number":1450,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":699,"column_number":-1,"description":"start of procedure extractFromParent()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/plan/PlanNode.java","line_number":700,"column_number":-1,"description":""}],"key":"PlanUtil.java|removeDuplicateSelectNodesUnderEachAccessNode|NULL_DEREFERENCE","node_key":"f32d2aa1db1d0ee92b12180ab1e88081","hash":"42153e21ed7de8b163a133e402c1b1f7","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object returned by `SessionNode.federatedSegments.get()` could be null and is dereferenced at line 1453.","severity":"ERROR","line":1453,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.removeFederatedSegment(java.lang.String):void","procedure_start_line":1449,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1449,"column_number":-1,"description":"start of procedure removeFederatedSegment(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1450,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1451,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2162,"column_number":-1,"description":"start of procedure SessionNode$FederatedSegmentChanges()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2163,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2164,"column_number":-1,"description":"return from a call to SessionNode$FederatedSegmentChanges.<init>()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1451,"column_number":-1,"description":"Skipping compareAndSet(...): unknown method"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1453,"column_number":-1,"description":""}],"key":"SessionNode.java|removeFederatedSegment|NULL_DEREFERENCE","node_key":"4fe914104e6c895ef37a252a2343794f","hash":"5b88df9d1b491dbfc8c337f808c8f14b","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object returned by `getRepository().getDescriptorValue(\"option.lifecycle.supported\")` could be null and is dereferenced at line 1649.","severity":"ERROR","line":1649,"column":-1,"procedure":"org.modeshape.jcr.JcrSession.getImportContentHandler(java.lang.String,int):org.xml.sax.ContentHandler","procedure_start_line":1638,"file":"src/main/java/org/modeshape/jcr/JcrSession.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1638,"column_number":-1,"description":"start of procedure getImportContentHandler(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1641,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":325,"column_number":-1,"description":"start of procedure checkLive()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":326,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1803,"column_number":-1,"description":"start of procedure isLive()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1803,"column_number":-1,"description":"return from a call to boolean JcrSession.isLive()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":326,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":329,"column_number":-1,"description":"return from a call to void JcrSession.checkLive()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1644,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":844,"column_number":-1,"description":"start of procedure getNode(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":847,"column_number":-1,"description":"start of procedure getNode(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":849,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":325,"column_number":-1,"description":"start of procedure checkLive()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":326,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1803,"column_number":-1,"description":"start of procedure isLive()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1803,"column_number":-1,"description":"return from a call to boolean JcrSession.isLive()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":326,"column_number":-1,"description":"Taking false branch"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":329,"column_number":-1,"description":"return from a call to void JcrSession.checkLive()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":850,"column_number":-1,"description":"Skipping isNotEmpty(...): unknown method"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":851,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":709,"column_number":-1,"description":"start of procedure absolutePathFor(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":710,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":712,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":343,"column_number":-1,"description":"start of procedure pathFactory()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":344,"column_number":-1,"description":""},{"level":5,"filename":"src/main/java/org/modeshape/jcr/ExecutionContext.java","line_number":376,"column_number":-1,"description":"start of procedure getValueFactories()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/ExecutionContext.java","line_number":377,"column_number":-1,"description":"return from a call to ValueFactories ExecutionContext.getValueFactories()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":344,"column_number":-1,"description":"Skipping getPathFactory(): unknown method"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/value/ValueFactories.java","line_number":-1,"column_number":-1,"description":"Definition of getPathFactory()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":344,"column_number":-1,"description":"return from a call to PathFactory JcrSession.pathFactory()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":712,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":716,"column_number":-1,"description":"Skipping isAbsolute(): unknown method"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/value/Path.java","line_number":-1,"column_number":-1,"description":"Definition of isAbsolute()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":716,"column_number":-1,"description":"Taking false branch"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":719,"column_number":-1,"description":"return from a call to Path JcrSession.absolutePathFor(String)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":853,"column_number":-1,"description":"Taking true branch"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":854,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1514,"column_number":-1,"description":"start of procedure checkPermission(...)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":249,"column_number":-1,"description":"start of procedure workspace()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":249,"column_number":-1,"description":"return from a call to JcrWorkspace JcrSession.workspace()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1514,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":107,"column_number":-1,"description":"start of procedure getName()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":108,"column_number":-1,"description":"return from a call to String JcrWorkspace.getName()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1514,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1559,"column_number":-1,"description":"start of procedure checkPermission(...)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1305,"column_number":-1,"description":"start of procedure pathSupplierFor(...)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1306,"column_number":-1,"description":""},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":884,"column_number":-1,"description":"start of procedure JcrSession$2(...)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1306,"column_number":-1,"description":"return from a call to JcrSession$2.<init>(JcrSession,Path)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1306,"column_number":-1,"description":"return from a call to JcrSession$PathSupplier JcrSession.pathSupplierFor(Path)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1559,"column_number":-1,"description":""},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1562,"column_number":-1,"description":"start of procedure checkPermission(...)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1565,"column_number":-1,"description":"Skipping isNotEmpty(...): unknown method"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1567,"column_number":-1,"description":"Skipping hasPermission(...): empty list of specs"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1355,"column_number":-1,"description":"Definition of hasPermission(...)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1567,"column_number":-1,"description":"Taking true branch"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1577,"column_number":-1,"description":"return from a call to void JcrSession.checkPermission(String,JcrSession$2,java.lang.String[])"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1560,"column_number":-1,"description":"return from a call to void JcrSession.checkPermission(String,Path,java.lang.String[])"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1515,"column_number":-1,"description":"return from a call to void JcrSession.checkPermission(Path,java.lang.String[])"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":857,"column_number":-1,"description":"Skipping isRoot(): unknown method"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/Path.java","line_number":-1,"column_number":-1,"description":"Definition of isRoot()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":857,"column_number":-1,"description":"Taking false branch"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":861,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":668,"column_number":-1,"description":"start of procedure node(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":669,"column_number":-1,"description":"Taking true branch"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/value/Path.java","line_number":-1,"column_number":-1,"description":"Definition of isAbsolute()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":669,"column_number":-1,"description":"Taking false branch"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":670,"column_number":-1,"description":"Skipping isRoot(): unknown method"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/value/Path.java","line_number":-1,"column_number":-1,"description":"Definition of isRoot()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":670,"column_number":-1,"description":"Taking false branch"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":671,"column_number":-1,"description":"Skipping isIdentifier(): unknown method"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/value/Path.java","line_number":-1,"column_number":-1,"description":"Definition of isIdentifier()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":671,"column_number":-1,"description":"Taking false branch"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":676,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":754,"column_number":-1,"description":"start of procedure getRootNode()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":755,"column_number":-1,"description":""},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":325,"column_number":-1,"description":"start of procedure checkLive()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":326,"column_number":-1,"description":""},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1803,"column_number":-1,"description":"start of procedure isLive()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1803,"column_number":-1,"description":"return from a call to boolean JcrSession.isLive()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":326,"column_number":-1,"description":"Taking false branch"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":329,"column_number":-1,"description":"return from a call to void JcrSession.checkLive()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":756,"column_number":-1,"description":"return from a call to JcrRootNode JcrSession.getRootNode()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":676,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":201,"column_number":-1,"description":"start of procedure node()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":185,"column_number":-1,"description":"start of procedure sessionCache()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":""},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"start of procedure cache()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"return from a call to SessionCache JcrSession.cache()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":"return from a call to SessionCache AbstractJcrNode.sessionCache()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":201,"column_number":-1,"description":"Skipping getNode(...): unknown method"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/CachedNodeSupplier.java","line_number":-1,"column_number":-1,"description":"Definition of getNode(...)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":202,"column_number":-1,"description":"Taking false branch"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":208,"column_number":-1,"description":"return from a call to CachedNode AbstractJcrNode.node()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":677,"column_number":-1,"description":"Skipping node(...): empty list of specs"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":658,"column_number":-1,"description":"Definition of node(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":677,"column_number":-1,"description":"return from a call to AbstractJcrNode JcrSession.node(Path)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":861,"column_number":-1,"description":"return from a call to AbstractJcrNode JcrSession.getNode(String,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":844,"column_number":-1,"description":"return from a call to AbstractJcrNode JcrSession.getNode(String)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1645,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3212,"column_number":-1,"description":"start of procedure isCheckedOut()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3213,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrItem.java","line_number":42,"column_number":-1,"description":"start of procedure session()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrItem.java","line_number":42,"column_number":-1,"description":"return from a call to JcrSession AbstractJcrItem.session()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3213,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":253,"column_number":-1,"description":"start of procedure repository()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":253,"column_number":-1,"description":"return from a call to JcrRepository JcrSession.repository()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3213,"column_number":-1,"description":"Skipping versioningUsed(): empty list of specs"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":525,"column_number":-1,"description":"Definition of versioningUsed()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3213,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3215,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3235,"column_number":-1,"description":"return from a call to boolean AbstractJcrNode.isCheckedOut()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1645,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1649,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":723,"column_number":-1,"description":"start of procedure getRepository()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":724,"column_number":-1,"description":"return from a call to JcrRepository JcrSession.getRepository()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1649,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":576,"column_number":-1,"description":"start of procedure getDescriptorValue(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":577,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":578,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":599,"column_number":-1,"description":"start of procedure isSingleValueDescriptor(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":600,"column_number":-1,"description":"Taking false branch"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":601,"column_number":-1,"description":"return from a call to boolean JcrRepository.isSingleValueDescriptor(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":578,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":579,"column_number":-1,"description":"return from a call to JcrValue JcrRepository.getDescriptorValue(String)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1649,"column_number":-1,"description":""}],"key":"JcrSession.java|getImportContentHandler|NULL_DEREFERENCE","node_key":"42f56fda1ad408e362508b93a175bb0c","hash":"9b1d169b37a52434e723c8c84bccd8a0","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object returned by `getRepository().getDescriptorValue(\"option.retention.supported\")` could be null and is dereferenced at line 1650.","severity":"ERROR","line":1650,"column":-1,"procedure":"org.modeshape.jcr.JcrSession.getImportContentHandler(java.lang.String,int):org.xml.sax.ContentHandler","procedure_start_line":1638,"file":"src/main/java/org/modeshape/jcr/JcrSession.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1638,"column_number":-1,"description":"start of procedure getImportContentHandler(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1641,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":325,"column_number":-1,"description":"start of procedure checkLive()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":326,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1803,"column_number":-1,"description":"start of procedure isLive()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1803,"column_number":-1,"description":"return from a call to boolean JcrSession.isLive()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":326,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":329,"column_number":-1,"description":"return from a call to void JcrSession.checkLive()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1644,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":844,"column_number":-1,"description":"start of procedure getNode(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":847,"column_number":-1,"description":"start of procedure getNode(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":849,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":325,"column_number":-1,"description":"start of procedure checkLive()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":326,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1803,"column_number":-1,"description":"start of procedure isLive()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1803,"column_number":-1,"description":"return from a call to boolean JcrSession.isLive()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":326,"column_number":-1,"description":"Taking false branch"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":329,"column_number":-1,"description":"return from a call to void JcrSession.checkLive()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":850,"column_number":-1,"description":"Skipping isNotEmpty(...): unknown method"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":851,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":709,"column_number":-1,"description":"start of procedure absolutePathFor(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":710,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":712,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":343,"column_number":-1,"description":"start of procedure pathFactory()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":344,"column_number":-1,"description":""},{"level":5,"filename":"src/main/java/org/modeshape/jcr/ExecutionContext.java","line_number":376,"column_number":-1,"description":"start of procedure getValueFactories()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/ExecutionContext.java","line_number":377,"column_number":-1,"description":"return from a call to ValueFactories ExecutionContext.getValueFactories()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":344,"column_number":-1,"description":"Skipping getPathFactory(): unknown method"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/value/ValueFactories.java","line_number":-1,"column_number":-1,"description":"Definition of getPathFactory()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":344,"column_number":-1,"description":"return from a call to PathFactory JcrSession.pathFactory()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":712,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":716,"column_number":-1,"description":"Skipping isAbsolute(): unknown method"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/value/Path.java","line_number":-1,"column_number":-1,"description":"Definition of isAbsolute()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":716,"column_number":-1,"description":"Taking false branch"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":719,"column_number":-1,"description":"return from a call to Path JcrSession.absolutePathFor(String)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":853,"column_number":-1,"description":"Taking true branch"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":854,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1514,"column_number":-1,"description":"start of procedure checkPermission(...)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":249,"column_number":-1,"description":"start of procedure workspace()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":249,"column_number":-1,"description":"return from a call to JcrWorkspace JcrSession.workspace()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1514,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":107,"column_number":-1,"description":"start of procedure getName()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":108,"column_number":-1,"description":"return from a call to String JcrWorkspace.getName()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1514,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1559,"column_number":-1,"description":"start of procedure checkPermission(...)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1305,"column_number":-1,"description":"start of procedure pathSupplierFor(...)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1306,"column_number":-1,"description":""},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":884,"column_number":-1,"description":"start of procedure JcrSession$2(...)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1306,"column_number":-1,"description":"return from a call to JcrSession$2.<init>(JcrSession,Path)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1306,"column_number":-1,"description":"return from a call to JcrSession$PathSupplier JcrSession.pathSupplierFor(Path)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1559,"column_number":-1,"description":""},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1562,"column_number":-1,"description":"start of procedure checkPermission(...)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1565,"column_number":-1,"description":"Skipping isNotEmpty(...): unknown method"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1567,"column_number":-1,"description":"Skipping hasPermission(...): empty list of specs"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1355,"column_number":-1,"description":"Definition of hasPermission(...)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1567,"column_number":-1,"description":"Taking true branch"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1577,"column_number":-1,"description":"return from a call to void JcrSession.checkPermission(String,JcrSession$2,java.lang.String[])"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1560,"column_number":-1,"description":"return from a call to void JcrSession.checkPermission(String,Path,java.lang.String[])"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1515,"column_number":-1,"description":"return from a call to void JcrSession.checkPermission(Path,java.lang.String[])"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":857,"column_number":-1,"description":"Skipping isRoot(): unknown method"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/Path.java","line_number":-1,"column_number":-1,"description":"Definition of isRoot()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":857,"column_number":-1,"description":"Taking false branch"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":861,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":668,"column_number":-1,"description":"start of procedure node(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":669,"column_number":-1,"description":"Taking true branch"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/value/Path.java","line_number":-1,"column_number":-1,"description":"Definition of isAbsolute()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":669,"column_number":-1,"description":"Taking false branch"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":670,"column_number":-1,"description":"Skipping isRoot(): unknown method"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/value/Path.java","line_number":-1,"column_number":-1,"description":"Definition of isRoot()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":670,"column_number":-1,"description":"Taking false branch"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":671,"column_number":-1,"description":"Skipping isIdentifier(): unknown method"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/value/Path.java","line_number":-1,"column_number":-1,"description":"Definition of isIdentifier()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":671,"column_number":-1,"description":"Taking false branch"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":676,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":754,"column_number":-1,"description":"start of procedure getRootNode()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":755,"column_number":-1,"description":""},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":325,"column_number":-1,"description":"start of procedure checkLive()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":326,"column_number":-1,"description":""},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1803,"column_number":-1,"description":"start of procedure isLive()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1803,"column_number":-1,"description":"return from a call to boolean JcrSession.isLive()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":326,"column_number":-1,"description":"Taking false branch"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":329,"column_number":-1,"description":"return from a call to void JcrSession.checkLive()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":756,"column_number":-1,"description":"return from a call to JcrRootNode JcrSession.getRootNode()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":676,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":201,"column_number":-1,"description":"start of procedure node()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":185,"column_number":-1,"description":"start of procedure sessionCache()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":""},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"start of procedure cache()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"return from a call to SessionCache JcrSession.cache()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":"return from a call to SessionCache AbstractJcrNode.sessionCache()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":201,"column_number":-1,"description":"Skipping getNode(...): unknown method"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/CachedNodeSupplier.java","line_number":-1,"column_number":-1,"description":"Definition of getNode(...)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":202,"column_number":-1,"description":"Taking false branch"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":208,"column_number":-1,"description":"return from a call to CachedNode AbstractJcrNode.node()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":677,"column_number":-1,"description":"Skipping node(...): empty list of specs"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":658,"column_number":-1,"description":"Definition of node(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":677,"column_number":-1,"description":"return from a call to AbstractJcrNode JcrSession.node(Path)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":861,"column_number":-1,"description":"return from a call to AbstractJcrNode JcrSession.getNode(String,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":844,"column_number":-1,"description":"return from a call to AbstractJcrNode JcrSession.getNode(String)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1645,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3212,"column_number":-1,"description":"start of procedure isCheckedOut()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3213,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrItem.java","line_number":42,"column_number":-1,"description":"start of procedure session()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrItem.java","line_number":42,"column_number":-1,"description":"return from a call to JcrSession AbstractJcrItem.session()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3213,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":253,"column_number":-1,"description":"start of procedure repository()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":253,"column_number":-1,"description":"return from a call to JcrRepository JcrSession.repository()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3213,"column_number":-1,"description":"Skipping versioningUsed(): empty list of specs"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":525,"column_number":-1,"description":"Definition of versioningUsed()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3213,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3215,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3235,"column_number":-1,"description":"return from a call to boolean AbstractJcrNode.isCheckedOut()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1645,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1649,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":723,"column_number":-1,"description":"start of procedure getRepository()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":724,"column_number":-1,"description":"return from a call to JcrRepository JcrSession.getRepository()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1649,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":576,"column_number":-1,"description":"start of procedure getDescriptorValue(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":577,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":578,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":599,"column_number":-1,"description":"start of procedure isSingleValueDescriptor(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":600,"column_number":-1,"description":"Taking false branch"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":601,"column_number":-1,"description":"return from a call to boolean JcrRepository.isSingleValueDescriptor(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":578,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":579,"column_number":-1,"description":"return from a call to JcrValue JcrRepository.getDescriptorValue(String)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1649,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrValue.java","line_number":108,"column_number":-1,"description":"start of procedure getBoolean()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrValue.java","line_number":92,"column_number":-1,"description":"start of procedure factories()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrValue.java","line_number":92,"column_number":-1,"description":"return from a call to ValueFactories JcrValue.factories()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrValue.java","line_number":108,"column_number":-1,"description":"Skipping getBooleanFactory(): unknown method"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/ValueFactories.java","line_number":-1,"column_number":-1,"description":"Definition of getBooleanFactory()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrValue.java","line_number":108,"column_number":-1,"description":"Skipping create(...): unknown method"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/ValueFactory.java","line_number":-1,"column_number":-1,"description":"Definition of create(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrValue.java","line_number":108,"column_number":-1,"description":"Skipping booleanValue(): unknown method"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrValue.java","line_number":109,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrValue.java","line_number":111,"column_number":-1,"description":"return from a call to boolean JcrValue.getBoolean()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1650,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":723,"column_number":-1,"description":"start of procedure getRepository()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":724,"column_number":-1,"description":"return from a call to JcrRepository JcrSession.getRepository()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1650,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":576,"column_number":-1,"description":"start of procedure getDescriptorValue(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":577,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":578,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":599,"column_number":-1,"description":"start of procedure isSingleValueDescriptor(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":600,"column_number":-1,"description":"Taking false branch"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":601,"column_number":-1,"description":"return from a call to boolean JcrRepository.isSingleValueDescriptor(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":578,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":579,"column_number":-1,"description":"return from a call to JcrValue JcrRepository.getDescriptorValue(String)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1650,"column_number":-1,"description":""}],"key":"JcrSession.java|getImportContentHandler|NULL_DEREFERENCE","node_key":"dcc03f18b40b603d88abc50cc35537a5","hash":"28037e0d3ff1cbce09eabf4d3d1fabca","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object returned by `ScanningQueryEngine$16.val$fts.getTerm()` could be null and is dereferenced at line 1647.","severity":"ERROR","line":1647,"column":-1,"procedure":"org.modeshape.jcr.query.engine.ScanningQueryEngine$16.evaluate(java.lang.Object):boolean","procedure_start_line":1640,"file":"src/main/java/org/modeshape/jcr/query/engine/ScanningQueryEngine.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/engine/ScanningQueryEngine.java","line_number":1640,"column_number":-1,"description":"start of procedure evaluate(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/engine/ScanningQueryEngine.java","line_number":1647,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/model/FullTextSearch.java","line_number":254,"column_number":-1,"description":"start of procedure getTerm()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/model/FullTextSearch.java","line_number":256,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/model/FullTextSearch.java","line_number":257,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/parse/FullTextSearchParser.java","line_number":73,"column_number":-1,"description":"start of procedure FullTextSearchParser()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/parse/FullTextSearchParser.java","line_number":73,"column_number":-1,"description":"return from a call to FullTextSearchParser.<init>()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/model/FullTextSearch.java","line_number":257,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/parse/FullTextSearchParser.java","line_number":121,"column_number":-1,"description":"start of procedure parse(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/parse/FullTextSearchParser.java","line_number":122,"column_number":-1,"description":"Skipping isNotNull(...): unknown method"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/parse/FullTextSearchParser.java","line_number":123,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/parse/FullTextSearchParser.java","line_number":207,"column_number":-1,"description":"start of procedure FullTextSearchParser$TermTokenizer()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/parse/FullTextSearchParser.java","line_number":208,"column_number":-1,"description":"return from a call to FullTextSearchParser$TermTokenizer.<init>()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/parse/FullTextSearchParser.java","line_number":124,"column_number":-1,"description":"Skipping TokenStream(...): unknown method"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/parse/FullTextSearchParser.java","line_number":125,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/parse/FullTextSearchParser.java","line_number":137,"column_number":-1,"description":"start of procedure parse(...)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/parse/FullTextSearchParser.java","line_number":138,"column_number":-1,"description":"Skipping isNotNull(...): unknown method"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/parse/FullTextSearchParser.java","line_number":139,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/parse/FullTextSearchParser.java","line_number":141,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/query/parse/FullTextSearchParser.java","line_number":149,"column_number":-1,"description":"start of procedure parseDisjunctedTerms(...)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/query/parse/FullTextSearchParser.java","line_number":150,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/query/parse/FullTextSearchParser.java","line_number":152,"column_number":-1,"description":""},{"level":5,"filename":"src/main/java/org/modeshape/jcr/query/parse/FullTextSearchParser.java","line_number":160,"column_number":-1,"description":"start of procedure parseTerm(...)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/query/parse/FullTextSearchParser.java","line_number":161,"column_number":-1,"description":"Skipping canConsume(...): unknown method"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/query/parse/FullTextSearchParser.java","line_number":162,"column_number":-1,"description":"Taking true branch"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/query/parse/FullTextSearchParser.java","line_number":163,"column_number":-1,"description":""},{"level":6,"filename":"src/main/java/org/modeshape/jcr/query/parse/FullTextSearchParser.java","line_number":173,"column_number":-1,"description":"start of procedure removeQuotes(...)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/query/parse/FullTextSearchParser.java","line_number":174,"column_number":-1,"description":"return from a call to String FullTextSearchParser.removeQuotes(String)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/query/parse/FullTextSearchParser.java","line_number":163,"column_number":-1,"description":""},{"level":6,"filename":"src/main/java/org/modeshape/jcr/query/model/FullTextSearch.java","line_number":367,"column_number":-1,"description":"start of procedure FullTextSearch$SimpleTerm(...)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/query/model/FullTextSearch.java","line_number":368,"column_number":-1,"description":"Taking true branch"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/query/model/FullTextSearch.java","line_number":368,"column_number":-1,"description":"Taking false branch"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/query/model/FullTextSearch.java","line_number":369,"column_number":-1,"description":"Taking true branch"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/query/model/FullTextSearch.java","line_number":369,"column_number":-1,"description":"Taking false branch"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/query/model/FullTextSearch.java","line_number":370,"column_number":-1,"description":""},{"level":6,"filename":"src/main/java/org/modeshape/jcr/query/model/FullTextSearch.java","line_number":371,"column_number":-1,"description":"Taking true branch"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/query/model/FullTextSearch.java","line_number":372,"column_number":-1,"description":""},{"level":7,"filename":"src/main/java/org/modeshape/jcr/query/model/FullTextSearch.java","line_number":375,"column_number":-1,"description":"start of procedure regexFromValue()"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/query/model/FullTextSearch.java","line_number":376,"column_number":-1,"description":""},{"level":7,"filename":"src/main/java/org/modeshape/jcr/query/model/FullTextSearch.java","line_number":379,"column_number":-1,"description":"Taking false branch"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/query/model/FullTextSearch.java","line_number":382,"column_number":-1,"description":"Taking true branch"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/query/model/FullTextSearch.java","line_number":382,"column_number":-1,"description":"Taking true branch"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/query/model/FullTextSearch.java","line_number":383,"column_number":-1,"description":"Skipping toString(): unknown method"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/query/model/FullTextSearch.java","line_number":385,"column_number":-1,"description":""},{"level":8,"filename":"src/main/java/org/modeshape/jcr/query/engine/ScanningQueryEngine.java","line_number":2759,"column_number":-1,"description":"start of procedure toRegularExpression(...)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/query/engine/ScanningQueryEngine.java","line_number":2761,"column_number":-1,"description":"Skipping replaceAll(...): unknown method"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/query/engine/ScanningQueryEngine.java","line_number":2765,"column_number":-1,"description":""},{"level":8,"filename":"src/main/java/org/modeshape/jcr/query/engine/ScanningQueryEngine.java","line_number":2768,"column_number":-1,"description":"Skipping replace(...): unknown method"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/query/engine/ScanningQueryEngine.java","line_number":2769,"column_number":-1,"description":"Skipping replace(...): unknown method"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/query/engine/ScanningQueryEngine.java","line_number":2770,"column_number":-1,"description":"return from a call to String ScanningQueryEngine.toRegularExpression(String)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/query/model/FullTextSearch.java","line_number":385,"column_number":-1,"description":"return from a call to String FullTextSearch$SimpleTerm.regexFromValue()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/query/model/FullTextSearch.java","line_number":372,"column_number":-1,"description":""},{"level":6,"filename":"src/main/java/org/modeshape/jcr/query/model/FullTextSearch.java","line_number":373,"column_number":-1,"description":"return from a call to FullTextSearch$SimpleTerm.<init>(String)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/query/parse/FullTextSearchParser.java","line_number":164,"column_number":-1,"description":"Taking false branch"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/query/parse/FullTextSearchParser.java","line_number":164,"column_number":-1,"description":"return from a call to FullTextSearch$Term FullTextSearchParser.parseTerm(TokenStream)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/query/parse/FullTextSearchParser.java","line_number":153,"column_number":-1,"description":"Taking false branch"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/query/parse/FullTextSearchParser.java","line_number":154,"column_number":-1,"description":"Skipping add(...): unknown method"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/query/parse/FullTextSearchParser.java","line_number":155,"column_number":-1,"description":"Taking true branch"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/query/parse/FullTextSearchParser.java","line_number":155,"column_number":-1,"description":"Taking true branch"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/query/parse/FullTextSearchParser.java","line_number":156,"column_number":-1,"description":"Taking true branch"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/query/parse/FullTextSearchParser.java","line_number":157,"column_number":-1,"description":"return from a call to FullTextSearch$Term FullTextSearchParser.parseDisjunctedTerms(TokenStream)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/parse/FullTextSearchParser.java","line_number":142,"column_number":-1,"description":"Taking true branch"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/parse/FullTextSearchParser.java","line_number":145,"column_number":-1,"description":"Taking true branch"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/parse/FullTextSearchParser.java","line_number":146,"column_number":-1,"description":"return from a call to FullTextSearch$Term FullTextSearchParser.parse(TokenStream)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/parse/FullTextSearchParser.java","line_number":125,"column_number":-1,"description":"return from a call to FullTextSearch$Term FullTextSearchParser.parse(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/model/FullTextSearch.java","line_number":257,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/model/FullTextSearch.java","line_number":259,"column_number":-1,"description":"return from a call to FullTextSearch$Term FullTextSearch.getTerm()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/engine/ScanningQueryEngine.java","line_number":1647,"column_number":-1,"description":""}],"key":"ScanningQueryEngine.java|evaluate|NULL_DEREFERENCE","node_key":"71bbd039293bbda847a7c7191bb8b301","hash":"a40d7bf9b18bd321c825aa5319cd8b4b","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `defn` last assigned on line 1888 could be null and is dereferenced at line 1890.","severity":"ERROR","line":1890,"column":-1,"procedure":"org.modeshape.jcr.RepositoryConfiguration$Indexes.validateIndexDefinitions(org.modeshape.common.collection.Problems):void","procedure_start_line":1886,"file":"src/main/java/org/modeshape/jcr/RepositoryConfiguration.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryConfiguration.java","line_number":1886,"column_number":-1,"description":"start of procedure validateIndexDefinitions(...)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryConfiguration.java","line_number":1887,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryConfiguration.java","line_number":1721,"column_number":-1,"description":"start of procedure getIndexNames()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryConfiguration.java","line_number":1722,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryConfiguration.java","line_number":1723,"column_number":-1,"description":"return from a call to Set RepositoryConfiguration$Indexes.getIndexNames()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryConfiguration.java","line_number":1887,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryConfiguration.java","line_number":1888,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryConfiguration.java","line_number":1737,"column_number":-1,"description":"start of procedure getIndex(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryConfiguration.java","line_number":1738,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryConfiguration.java","line_number":1739,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/RepositoryConfiguration.java","line_number":1733,"column_number":-1,"description":"start of procedure getRawIndex(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/RepositoryConfiguration.java","line_number":1734,"column_number":-1,"description":"Taking false branch"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/RepositoryConfiguration.java","line_number":1734,"column_number":-1,"description":"return from a call to Document RepositoryConfiguration$Indexes.getRawIndex(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryConfiguration.java","line_number":1740,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryConfiguration.java","line_number":1741,"column_number":-1,"description":"return from a call to IndexDefinition RepositoryConfiguration$Indexes.getIndex(String)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryConfiguration.java","line_number":1890,"column_number":-1,"description":""}],"key":"RepositoryConfiguration.java|validateIndexDefinitions|NULL_DEREFERENCE","node_key":"97ae71d743f3de6071409fc4323b326f","hash":"06c0ac6afcdec1f16952c0d66aca72d9","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `placeholder` last assigned on line 2840 could be null and is dereferenced at line 2842.","severity":"ERROR","line":2842,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode$DeepCopy.doPhase2():void","procedure_start_line":2831,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2831,"column_number":-1,"description":"start of procedure doPhase2()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2832,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2833,"column_number":-1,"description":"Skipping iterator(): unknown method"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2834,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2835,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2837,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2838,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2840,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":169,"column_number":-1,"description":"start of procedure getNode(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":170,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":171,"column_number":-1,"description":"Skipping readLock(): unknown method"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":173,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":174,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":176,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":178,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":180,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":182,"column_number":-1,"description":"return from a call to CachedNode WritableSessionCache.getNode(NodeKey)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2842,"column_number":-1,"description":""}],"key":"SessionNode.java|doPhase2|NULL_DEREFERENCE","node_key":"d3fe398837b3462b17912494f5a42057","hash":"e7d7040a5fa67b0e165e9b8bfd5d28cf","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object returned by `getProperty(org.modeshape.jcr.JcrLexicon.BASE_VERSION)` could be null and is dereferenced at line 3294.","severity":"ERROR","line":3294,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.getBaseVersion():org.modeshape.jcr.JcrVersionNode","procedure_start_line":3289,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3289,"column_number":-1,"description":"start of procedure getBaseVersion()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3290,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrItem.java","line_number":54,"column_number":-1,"description":"start of procedure checkSession()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrItem.java","line_number":55,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":325,"column_number":-1,"description":"start of procedure checkLive()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":326,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1803,"column_number":-1,"description":"start of procedure isLive()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1803,"column_number":-1,"description":"return from a call to boolean JcrSession.isLive()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":326,"column_number":-1,"description":"Taking false branch"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":329,"column_number":-1,"description":"return from a call to void JcrSession.checkLive()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrItem.java","line_number":56,"column_number":-1,"description":"return from a call to void AbstractJcrItem.checkSession()"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3291,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":528,"column_number":-1,"description":"start of procedure hasProperty(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":529,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":530,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":201,"column_number":-1,"description":"start of procedure node()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":185,"column_number":-1,"description":"start of procedure sessionCache()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"start of procedure cache()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"return from a call to SessionCache JcrSession.cache()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":"return from a call to SessionCache AbstractJcrNode.sessionCache()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":201,"column_number":-1,"description":"Skipping getNode(...): unknown method"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/CachedNodeSupplier.java","line_number":-1,"column_number":-1,"description":"Definition of getNode(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":202,"column_number":-1,"description":"Taking false branch"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":208,"column_number":-1,"description":"return from a call to CachedNode AbstractJcrNode.node()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":530,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":185,"column_number":-1,"description":"start of procedure sessionCache()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"start of procedure cache()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"return from a call to SessionCache JcrSession.cache()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":"return from a call to SessionCache AbstractJcrNode.sessionCache()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":530,"column_number":-1,"description":"return from a call to boolean AbstractJcrNode.hasProperty(Name)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3291,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3294,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":349,"column_number":-1,"description":"start of procedure getProperty(...)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":350,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":351,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":370,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":201,"column_number":-1,"description":"start of procedure node()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":185,"column_number":-1,"description":"start of procedure sessionCache()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":""},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"start of procedure cache()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"return from a call to SessionCache JcrSession.cache()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":"return from a call to SessionCache AbstractJcrNode.sessionCache()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":201,"column_number":-1,"description":"Skipping getNode(...): unknown method"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/CachedNodeSupplier.java","line_number":-1,"column_number":-1,"description":"Definition of getNode(...)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":202,"column_number":-1,"description":"Taking false branch"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":208,"column_number":-1,"description":"return from a call to CachedNode AbstractJcrNode.node()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":371,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":185,"column_number":-1,"description":"start of procedure sessionCache()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"start of procedure cache()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":372,"column_number":-1,"description":"return from a call to SessionCache JcrSession.cache()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":186,"column_number":-1,"description":"return from a call to SessionCache AbstractJcrNode.sessionCache()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":372,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":373,"column_number":-1,"description":"Skipping remove(...): unknown method"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":374,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":377,"column_number":-1,"description":"return from a call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3294,"column_number":-1,"description":""}],"key":"AbstractJcrNode.java|getBaseVersion|NULL_DEREFERENCE","node_key":"07c4ca0274b2c82c8349f056d2a4ea49","hash":"43bdaffbb7e9ea49c2732f6af3326e90","bug_type_hum":"Null Dereference"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String QueryParser.getLanguage()` of un-annotated interface `org.modeshape.jcr.query.parse.QueryParser`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":47,"column":-1,"procedure":"org.modeshape.jcr.query.parse.QueryParsers.<init>(org.modeshape.jcr.query.parse.QueryParser[])","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/query/parse/QueryParsers.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/parse/QueryParsers.java","line_number":47,"column_number":-1,"description":"call to void QueryParsers.addLanguage(QueryParser)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/parse/QueryParsers.java","line_number":69,"column_number":-1,"description":"Call to un-annotated interface method String QueryParser.getLanguage()"}],"key":"QueryParsers.java|<init>|INTERFACE_NOT_THREAD_SAFE","hash":"6a5e223c58d6e192b248b00b45505491","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEcAAAAEAAAAGgAAABKgsABFAP+SCT1zcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3F1ZXJ5L3BhcnNlL1F1ZXJ5UGFyc2Vycy5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String QueryParser.getLanguage()` of un-annotated interface `org.modeshape.jcr.query.parse.QueryParser`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":58,"column":-1,"procedure":"org.modeshape.jcr.query.parse.QueryParsers.<init>(java.lang.Iterable)","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/query/parse/QueryParsers.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/parse/QueryParsers.java","line_number":58,"column_number":-1,"description":"call to void QueryParsers.addLanguages(Iterable)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/parse/QueryParsers.java","line_number":96,"column_number":-1,"description":"call to void QueryParsers.addLanguage(QueryParser)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/parse/QueryParsers.java","line_number":69,"column_number":-1,"description":"Call to un-annotated interface method String QueryParser.getLanguage()"}],"key":"QueryParsers.java|<init>|INTERFACE_NOT_THREAD_SAFE","hash":"6a5e223c58d6e192b248b00b45505491","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEcAAAAEAAAAGgAAABKgsABFAP+SCT1zcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3F1ZXJ5L3BhcnNlL1F1ZXJ5UGFyc2Vycy5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `List Document.getArray(String)` of un-annotated interface `org.infinispan.schematic.document.Document`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":69,"column":-1,"procedure":"org.modeshape.jcr.cache.document.BucketedChildReferences.<init>(org.infinispan.schematic.document.Document,org.modeshape.jcr.cache.document.DocumentTranslator)","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":69,"column_number":-1,"description":"Call to un-annotated interface method List Document.getArray(String)"}],"key":"BucketedChildReferences.java|<init>|INTERFACE_NOT_THREAD_SAFE","hash":"bad7d68fb3ac4c89e668147a23ac9ddc","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAFUAAAAEAAAAHQAAABSgsABFAP+SCUtzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL2NhY2hlL2RvY3VtZW50L0J1Y2tldGVkQ2hpbGRSZWZlcmVuY2VzLmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `int Transaction.getStatus()` of un-annotated interface `javax.transaction.Transaction`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":40,"column":-1,"procedure":"org.modeshape.jcr.cache.document.ReadOnlySessionCache.<init>(org.modeshape.jcr.ExecutionContext,org.modeshape.jcr.cache.document.WorkspaceCache,org.modeshape.jcr.cache.RepositoryEnvironment)","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/ReadOnlySessionCache.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/ReadOnlySessionCache.java","line_number":40,"column_number":-1,"description":"call to AbstractSessionCache.<init>(ExecutionContext,WorkspaceCache,RepositoryEnvironment)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/AbstractSessionCache.java","line_number":94,"column_number":-1,"description":"call to void AbstractSessionCache.checkForTransaction()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/AbstractSessionCache.java","line_number":110,"column_number":-1,"description":"Call to un-annotated interface method int Transaction.getStatus()"}],"key":"ReadOnlySessionCache.java|<init>|INTERFACE_NOT_THREAD_SAFE","hash":"27302ee324d4681f7c59fed3e791102d","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAFIAAAAEAAAAHQAAABSgsABuAP+SCUhzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL2NhY2hlL2RvY3VtZW50L0Fic3RyYWN0U2Vzc2lvbkNhY2hlLmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `int Transaction.getStatus()` of un-annotated interface `javax.transaction.Transaction`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":143,"column":-1,"procedure":"org.modeshape.jcr.cache.document.WritableSessionCache.<init>(org.modeshape.jcr.ExecutionContext,org.modeshape.jcr.cache.document.WorkspaceCache,org.modeshape.jcr.cache.RepositoryEnvironment)","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":143,"column_number":-1,"description":"call to AbstractSessionCache.<init>(ExecutionContext,WorkspaceCache,RepositoryEnvironment)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/AbstractSessionCache.java","line_number":94,"column_number":-1,"description":"call to void AbstractSessionCache.checkForTransaction()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/AbstractSessionCache.java","line_number":110,"column_number":-1,"description":"Call to un-annotated interface method int Transaction.getStatus()"}],"key":"WritableSessionCache.java|<init>|INTERFACE_NOT_THREAD_SAFE","hash":"8257632e0dc80a3b0b762a19832e9c52","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAFIAAAAEAAAAHQAAABSgsABuAP+SCUhzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL2NhY2hlL2RvY3VtZW50L0Fic3RyYWN0U2Vzc2lvbkNhY2hlLmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String NamespaceRegistry$Namespace.getNamespaceUri()` of un-annotated interface `org.modeshape.jcr.value.NamespaceRegistry$Namespace`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":56,"column":-1,"procedure":"org.modeshape.jcr.SystemNamespaceRegistry.<init>(org.modeshape.jcr.JcrRepository$RunningState)","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/SystemNamespaceRegistry.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/SystemNamespaceRegistry.java","line_number":56,"column_number":-1,"description":"call to void SimpleNamespaceRegistry.register(Iterable)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/SimpleNamespaceRegistry.java","line_number":114,"column_number":-1,"description":"Call to un-annotated interface method String NamespaceRegistry$Namespace.getNamespaceUri()"}],"key":"SystemNamespaceRegistry.java|<init>|INTERFACE_NOT_THREAD_SAFE","hash":"7f84349b30abaff2315dcf8a9d1c6eaf","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAFIAAAAEAAAAHQAAABSgsAByAP+SCUhzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2Jhc2ljL1NpbXBsZU5hbWVzcGFjZVJlZ2lzdHJ5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Collection Multimap.get(Object)` of un-annotated interface `org.modeshape.common.collection.Multimap`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":112,"column":-1,"procedure":"org.modeshape.jcr.RepositoryNodeTypeManager.<init>(org.modeshape.jcr.JcrRepository$RunningState,boolean,boolean)","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/RepositoryNodeTypeManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryNodeTypeManager.java","line_number":112,"column_number":-1,"description":"call to NodeTypes.<init>(ExecutionContext)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":198,"column_number":-1,"description":"call to NodeTypes.<init>(ExecutionContext,Iterable,int)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":327,"column_number":-1,"description":"call to Collection JcrNodeType.allChildNodeDefinitions(Name,boolean)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":261,"column_number":-1,"description":"call to Collection DefinitionCache.allChildNodeDefinitions(Name,boolean)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/DefinitionCache.java","line_number":204,"column_number":-1,"description":"Call to un-annotated interface method Collection Multimap.get(Object)"}],"key":"RepositoryNodeTypeManager.java|<init>|INTERFACE_NOT_THREAD_SAFE","hash":"6f54f43838c029831c733218dc62c678","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEAzAD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9EZWZpbml0aW9uQ2FjaGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Iterable Document.fields()` of un-annotated interface `org.infinispan.schematic.document.Document`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":100,"column":-1,"procedure":"org.modeshape.jcr.Connectors.<init>(org.modeshape.jcr.JcrRepository$RunningState,java.util.Collection,java.util.Set,java.util.Map)","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/Connectors.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/Connectors.java","line_number":100,"column_number":-1,"description":"call to Connectors$Snapshot.<init>(Connectors,Collection,Set,Map)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/Connectors.java","line_number":698,"column_number":-1,"description":"call to void Connectors$Snapshot.registerConnectors(Collection)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/Connectors.java","line_number":738,"column_number":-1,"description":"call to Connector Connectors.instantiateConnector(RepositoryConfiguration$Component)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/Connectors.java","line_number":448,"column_number":-1,"description":"call to Object RepositoryConfiguration$Component.createInstance(ClassLoader)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/RepositoryConfiguration.java","line_number":2776,"column_number":-1,"description":"call to Object RepositoryConfiguration$Component.createGenericComponent(ClassLoader)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/RepositoryConfiguration.java","line_number":2788,"column_number":-1,"description":"call to void RepositoryConfiguration$Component.setTypeFields(Object,Document)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/RepositoryConfiguration.java","line_number":2819,"column_number":-1,"description":"Call to un-annotated interface method Iterable Document.fields()"}],"key":"Connectors.java|<init>|INTERFACE_NOT_THREAD_SAFE","hash":"0dce6e4c74d8345fd55ec505f482a69e","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEcAAAAEAAAAGgAAABKgsAELAwD/kgk8c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9SZXBvc2l0b3J5Q29uZmlndXJhdGlvbi5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `void Problems.addError(I18n,java.lang.Object[])` of un-annotated interface `org.modeshape.common.collection.Problems`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":131,"column":-1,"procedure":"org.modeshape.jcr.RepositoryIndexManager.<init>(org.modeshape.jcr.JcrRepository$RunningState,org.modeshape.jcr.RepositoryConfiguration)","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":131,"column_number":-1,"description":"call to List RepositoryConfiguration.getIndexProviders()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryConfiguration.java","line_number":1675,"column_number":-1,"description":"call to List RepositoryConfiguration.readComponents(Document,String,String,Map,Problems)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/RepositoryConfiguration.java","line_number":2502,"column_number":-1,"description":"Call to un-annotated interface method void Problems.addError(I18n,java.lang.Object[])"}],"key":"RepositoryIndexManager.java|<init>|INTERFACE_NOT_THREAD_SAFE","hash":"5f33419c21c93425ed9ff95df342c09c","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEcAAAAEAAAAGgAAABKgsAEJxgD/kgk8c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9SZXBvc2l0b3J5Q29uZmlndXJhdGlvbi5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `RepositoryIndexManager.<init>(JcrRepository$RunningState,RepositoryConfiguration)` indirectly reads with synchronization from container `byProvider` via call to `get`. Potentially races with unsynchronized write in method `RepositoryIndexManager.registerIndexes(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":135,"column":-1,"procedure":"org.modeshape.jcr.RepositoryIndexManager.<init>(org.modeshape.jcr.JcrRepository$RunningState,org.modeshape.jcr.RepositoryConfiguration)","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":135,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":135,"column_number":-1,"description":"call to void RepositoryIndexManager.register(IndexProvider)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":322,"column_number":-1,"description":"call to RepositoryIndexes RepositoryIndexManager.readIndexDefinitions()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":817,"column_number":-1,"description":"call to RepositoryIndexManager$Indexes.<init>(ExecutionContext,Collection,NodeTypes)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":878,"column_number":-1,"description":"Read of container `byProvider` via call to `get`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":529,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":529,"column_number":-1,"description":"call to RepositoryIndexes RepositoryIndexManager.readIndexDefinitions()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":817,"column_number":-1,"description":"call to RepositoryIndexManager$Indexes.<init>(ExecutionContext,Collection,NodeTypes)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":881,"column_number":-1,"description":"Write to container `byProvider` via call to `put`"}],"key":"RepositoryIndexManager.java|<init>|THREAD_SAFETY_VIOLATION","hash":"2d8f8cc9cd98d94c210478b431c4622b","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAIsAAAAIAAAAMgAAACSgsAEDbgD/kgk7c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9SZXBvc2l0b3J5SW5kZXhNYW5hZ2VyLmphdmGgsAEDcQD/kgk7c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9SZXBvc2l0b3J5SW5kZXhNYW5hZ2VyLmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `int Document.getInteger(String,int)` of un-annotated interface `org.infinispan.schematic.document.Document`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":82,"column":-1,"procedure":"org.modeshape.jcr.RepositoryLockManager.<init>(org.modeshape.jcr.JcrRepository$RunningState,org.modeshape.jcr.RepositoryConfiguration$GarbageCollection)","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","line_number":82,"column_number":-1,"description":"call to long RepositoryConfiguration$GarbageCollection.getIntervalInMillis()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryConfiguration.java","line_number":2065,"column_number":-1,"description":"call to int RepositoryConfiguration$GarbageCollection.getIntervalInHours()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/RepositoryConfiguration.java","line_number":2056,"column_number":-1,"description":"Call to un-annotated interface method int Document.getInteger(String,int)"}],"key":"RepositoryLockManager.java|<init>|INTERFACE_NOT_THREAD_SAFE","hash":"db0f69b95b9851d89aa1c4293263c325","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEcAAAAEAAAAGgAAABKgsAEICAD/kgk8c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9SZXBvc2l0b3J5Q29uZmlndXJhdGlvbi5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `boolean Multimap.containsKey(Object)` of un-annotated interface `org.modeshape.common.collection.Multimap`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":177,"column":-1,"procedure":"org.modeshape.jcr.JcrNodeType.<init>(org.modeshape.jcr.cache.NodeKey,org.modeshape.jcr.ExecutionContext,org.modeshape.jcr.JcrSession,org.modeshape.jcr.RepositoryNodeTypeManager,org.modeshape.jcr.value.Name,java.util.List,org.modeshape.jcr.value.Name,java.util.Collection,java.util.Collection,boolean,boolean,boolean,boolean)","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrNodeType.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":177,"column_number":-1,"description":"call to DefinitionCache.<init>(JcrNodeType)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/DefinitionCache.java","line_number":93,"column_number":-1,"description":"call to void DefinitionCache.addDefinitionsForTypeAndAllSupertypes(JcrNodeType)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/DefinitionCache.java","line_number":110,"column_number":-1,"description":"call to void DefinitionCache.addDefinitions(JcrNodeType)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/DefinitionCache.java","line_number":128,"column_number":-1,"description":"Call to un-annotated interface method boolean Multimap.containsKey(Object)"}],"key":"JcrNodeType.java|<init>|INTERFACE_NOT_THREAD_SAFE","hash":"9cb421f755b4fb7dad7a07e282776af7","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEAgAD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9EZWZpbml0aW9uQ2FjaGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `JcrNodeType.<init>(NodeKey,ExecutionContext,JcrSession,RepositoryNodeTypeManager,Name,List,Name,Collection,Collection,boolean,boolean,boolean,boolean)` indirectly writes to field `prototypeKey.sourceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":178,"column":-1,"procedure":"org.modeshape.jcr.JcrNodeType.<init>(org.modeshape.jcr.cache.NodeKey,org.modeshape.jcr.ExecutionContext,org.modeshape.jcr.JcrSession,org.modeshape.jcr.RepositoryNodeTypeManager,org.modeshape.jcr.value.Name,java.util.List,org.modeshape.jcr.value.Name,java.util.Collection,java.util.Collection,boolean,boolean,boolean,boolean)","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrNodeType.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":178,"column_number":-1,"description":"call to NodeKey NodeKey.withId(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":229,"column_number":-1,"description":"call to String NodeKey.getSourceKey()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":154,"column_number":-1,"description":"access to `prototypeKey.sourceKey`"}],"key":"JcrNodeType.java|<init>|THREAD_SAFETY_VIOLATION","hash":"3c1f62ffd91b50318e83655d6c6cd7ed","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEAmgD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `ClusteredJournal.<init>(LocalJournal,ClusteringService)` indirectly writes to field `localJournal.searchTimeDelta` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":66,"column":-1,"procedure":"org.modeshape.jcr.journal.ClusteredJournal.<init>(org.modeshape.jcr.journal.LocalJournal,org.modeshape.jcr.clustering.ClusteringService)","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":66,"column_number":-1,"description":"call to LocalJournal LocalJournal.withSearchTimeDelta(long)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","line_number":324,"column_number":-1,"description":"access to `localJournal.searchTimeDelta`"}],"key":"ClusteredJournal.java|<init>|THREAD_SAFETY_VIOLATION","hash":"af087767bcf7d7572a43486bfbc95589","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEQAAAAEAAAAGQAAABKgsAEBRAD/kgk5c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9qb3VybmFsL0xvY2FsSm91cm5hbC5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String Name.getString()` of un-annotated interface `org.modeshape.jcr.value.Name`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":36,"column":-1,"procedure":"org.modeshape.jcr.cache.document.BucketId.<init>(org.modeshape.jcr.value.Name,int)","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/BucketId.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketId.java","line_number":36,"column_number":-1,"description":"Call to un-annotated interface method String Name.getString()"}],"key":"BucketId.java|<init>|INTERFACE_NOT_THREAD_SAFE","hash":"598311408357814c1673304210fe925b","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEUAAAAEAAAAGgAAABKgsGQA/5IJPHNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvY2FjaGUvZG9jdW1lbnQvQnVja2V0SWQuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `void ItemVisitor.visit(Node)` of un-annotated interface `javax.jcr.ItemVisitor`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":3401,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.accept(javax.jcr.ItemVisitor):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3401,"column_number":-1,"description":"Call to un-annotated interface method void ItemVisitor.visit(Node)"}],"key":"AbstractJcrNode.java|accept|INTERFACE_NOT_THREAD_SAFE","hash":"efeeed809a6df746262734634150054e","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAENSQD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `void ItemVisitor.visit(Node)` of un-annotated interface `javax.jcr.ItemVisitor`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`.","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.accept(javax.jcr.ItemVisitor):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to void AbstractJcrNode.accept(ItemVisitor)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3401,"column_number":-1,"description":"Call to un-annotated interface method void ItemVisitor.visit(Node)"}],"key":"JcrSystemNode.java|accept|INTERFACE_NOT_THREAD_SAFE","hash":"a2431f68192b63cfad9a408411360e74","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAENSQD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `SessionNode WritableSessionCache.add(SessionNode)` reads with synchronization from `this.changedNodes`. Potentially races with unsynchronized write in method `WritableSessionCache.clearState()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1549,"column":-1,"procedure":"org.modeshape.jcr.cache.document.WritableSessionCache.add(org.modeshape.jcr.cache.document.SessionNode):org.modeshape.jcr.cache.document.SessionNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":1549,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":1549,"column_number":-1,"description":"access to `this.changedNodes`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":573,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":573,"column_number":-1,"description":"access to `this.changedNodes`"}],"key":"WritableSessionCache.java|add|THREAD_SAFETY_VIOLATION","hash":"1fedd26bd50ab63d4794e8faf7c70390","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAKUAAAAIAAAAOgAAACigsAEGDQD/kglIc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xcml0YWJsZVNlc3Npb25DYWNoZS5qYXZhoLABAj0A/5IJSHNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvY2FjaGUvZG9jdW1lbnQvV3JpdGFibGVTZXNzaW9uQ2FjaGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `SessionNode WritableSessionCache.add(SessionNode)` reads with synchronization from `this.replacedNodes`. Potentially races with unsynchronized write in method `WritableSessionCache.clearState()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1558,"column":-1,"procedure":"org.modeshape.jcr.cache.document.WritableSessionCache.add(org.modeshape.jcr.cache.document.SessionNode):org.modeshape.jcr.cache.document.SessionNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":1558,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":1558,"column_number":-1,"description":"access to `this.replacedNodes`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":577,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":577,"column_number":-1,"description":"access to `this.replacedNodes`"}],"key":"WritableSessionCache.java|add|THREAD_SAFETY_VIOLATION","hash":"4bab8ed382929de7ab087ca3d7eb72e7","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAKUAAAAIAAAAOgAAACigsAEGFgD/kglIc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xcml0YWJsZVNlc3Npb25DYWNoZS5qYXZhoLABAkEA/5IJSHNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvY2FjaGUvZG9jdW1lbnQvV3JpdGFibGVTZXNzaW9uQ2FjaGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrNode AbstractJcrNode.addAclNode(String,String)` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":994,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.addAclNode(java.lang.String,java.lang.String):org.modeshape.jcr.AbstractJcrNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":994,"column_number":-1,"description":"call to AbstractJcrNode AbstractJcrNode.addNode(String,String,NodeKey,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1045,"column_number":-1,"description":"call to AbstractJcrItem JcrSession.findItem(AbstractJcrNode,Path)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":699,"column_number":-1,"description":"call to AbstractJcrItem JcrSession.getItem(Path)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":880,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(Path)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":677,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,Path)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":659,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"AbstractJcrNode.java|addAclNode|THREAD_SAFETY_VIOLATION","hash":"ee86f91c269acfc2fe395882fdc9f368","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `void MutableCachedNode.addInternalProperty(String,Object)` of un-annotated interface `org.modeshape.jcr.cache.MutableCachedNode`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":1195,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.addChildNode(org.modeshape.jcr.value.Name,org.modeshape.jcr.value.Name,org.modeshape.jcr.cache.NodeKey,boolean,boolean):org.modeshape.jcr.AbstractJcrNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1195,"column_number":-1,"description":"Call to un-annotated interface method void MutableCachedNode.addInternalProperty(String,Object)"}],"key":"AbstractJcrNode.java|addChildNode|INTERFACE_NOT_THREAD_SAFE","hash":"5626a05ec30cfe0258e95240c05cdd9b","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEEqwD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `AbstractJcrNode AbstractJcrNode.addChildNode(Name,Name,NodeKey,boolean,boolean)` indirectly reads without synchronization from `nodeKey.workspaceKey`. Potentially races with write in method `AbstractJcrNode.addNode(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1167,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.addChildNode(org.modeshape.jcr.value.Name,org.modeshape.jcr.value.Name,org.modeshape.jcr.cache.NodeKey,boolean,boolean):org.modeshape.jcr.AbstractJcrNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1167,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1167,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":165,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":977,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":977,"column_number":-1,"description":"call to AbstractJcrNode AbstractJcrNode.addNode(String,String,NodeKey,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1045,"column_number":-1,"description":"call to AbstractJcrItem JcrSession.findItem(AbstractJcrNode,Path)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":699,"column_number":-1,"description":"call to AbstractJcrItem JcrSession.getItem(Path)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":880,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(Path)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":677,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,Path)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":659,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"AbstractJcrNode.java|addChildNode|THREAD_SAFETY_VIOLATION","hash":"ea30503ebfa864758d8da4b546be6f82","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAHkAAAAIAAAALgAAACKgsAEApQD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrNode AbstractJcrNode.addChildNode(Name,Name,NodeKey,boolean,boolean)` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1112,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.addChildNode(org.modeshape.jcr.value.Name,org.modeshape.jcr.value.Name,org.modeshape.jcr.cache.NodeKey,boolean,boolean):org.modeshape.jcr.AbstractJcrNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1112,"column_number":-1,"description":"call to boolean AbstractJcrNode.isLockedByAnotherSession()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":643,"column_number":-1,"description":"call to void AbstractJcrNode.checkForLock()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":635,"column_number":-1,"description":"call to Lock AbstractJcrNode.getLockIfExists()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3322,"column_number":-1,"description":"call to Lock JcrLockManager.getLockIfExists(AbstractJcrNode)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrLockManager.java","line_number":178,"column_number":-1,"description":"call to Lock RepositoryLockManager$ModeShapeLock.lockFor(JcrSession)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","line_number":661,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"AbstractJcrNode.java|addChildNode|THREAD_SAFETY_VIOLATION","hash":"70ec72b95de2e01261a1c4139282c73a","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrNode AbstractJcrNode.addChildNode(Name,Name,NodeKey,boolean,boolean)` indirectly mutates container `ace.privileges` via call to `addAll` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1109,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.addChildNode(org.modeshape.jcr.value.Name,org.modeshape.jcr.value.Name,org.modeshape.jcr.cache.NodeKey,boolean,boolean):org.modeshape.jcr.AbstractJcrNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1109,"column_number":-1,"description":"call to void JcrSession.checkPermission(AbstractJcrItem,java.lang.String[])"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1535,"column_number":-1,"description":"call to void JcrSession.checkPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1567,"column_number":-1,"description":"call to boolean JcrSession.hasPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1375,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPermission(Path,java.lang.String[])"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":322,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPrivileges(String,javax.jcr.security.Privilege[])"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":109,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.getApplicableACL(String)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":114,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.findAccessList(String,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":289,"column_number":-1,"description":"call to boolean JcrAccessControlList.addAccessControlEntry(Principal,javax.jcr.security.Privilege[])"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/security/acl/JcrAccessControlList.java","line_number":113,"column_number":-1,"description":"call to boolean AccessControlEntryImpl.addIfNotPresent(javax.jcr.security.Privilege[])"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/security/acl/AccessControlEntryImpl.java","line_number":103,"column_number":-1,"description":"Write to container `ace.privileges` via call to `addAll`"}],"key":"AbstractJcrNode.java|addChildNode|THREAD_SAFETY_VIOLATION","hash":"db1824114357ce90afcca7db82c21052","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFIAAAAEAAAAHQAAABSgsABnAP+SCUhzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3NlY3VyaXR5L2FjbC9BY2Nlc3NDb250cm9sRW50cnlJbXBsLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void ScanningQueryEngine$ScanQueryContext.addColumnsFor(PlanNode,QueryResults$Columns)` mutates container `this.columnsByPlanNode` via call to `put` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":3060,"column":-1,"procedure":"org.modeshape.jcr.query.engine.ScanningQueryEngine$ScanQueryContext.addColumnsFor(org.modeshape.jcr.query.plan.PlanNode,org.modeshape.jcr.query.QueryResults$Columns):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/query/engine/ScanningQueryEngine.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/engine/ScanningQueryEngine.java","line_number":3060,"column_number":-1,"description":"Write to container `this.columnsByPlanNode` via call to `put`"}],"key":"ScanningQueryEngine.java|addColumnsFor|THREAD_SAFETY_VIOLATION","hash":"f2baeb3ef40c3f351bd35e73ac09ae5f","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFAAAAAEAAAAHAAAABOgsAEL9AD/kglFc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9xdWVyeS9lbmdpbmUvU2Nhbm5pbmdRdWVyeUVuZ2luZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void JcrObservationManager.addEventListener(EventListener,int,String,boolean,java.lang.String[],java.lang.String[],boolean)` indirectly reads without synchronization from `this.session.context`. Potentially races with write in method `JcrObservationManager.setUserData(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":162,"column":-1,"procedure":"org.modeshape.jcr.JcrObservationManager.addEventListener(javax.jcr.observation.EventListener,int,java.lang.String,boolean,java.lang.String[],java.lang.String[],boolean):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrObservationManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrObservationManager.java","line_number":162,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrObservationManager.java","line_number":162,"column_number":-1,"description":"call to void JcrObservationManager.checkSession()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrObservationManager.java","line_number":175,"column_number":-1,"description":"call to void JcrSession.checkLive()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":327,"column_number":-1,"description":"call to String JcrSession.sessionId()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":313,"column_number":-1,"description":"access to `this.session.context`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrObservationManager.java","line_number":213,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrObservationManager.java","line_number":213,"column_number":-1,"description":"call to void JcrSession.addContextData(String,String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":434,"column_number":-1,"description":"access to `this.session.context`"}],"key":"JcrObservationManager.java|addEventListener|THREAD_SAFETY_VIOLATION","hash":"7f0d24eee7224ca323d0a8537f9a5192","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAHMAAAAIAAAALAAAACCgsAEBOQD/kgkvc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JTZXNzaW9uLmphdmGgsAEBsgD/kgkvc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JTZXNzaW9uLmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String QueryParser.getLanguage()` of un-annotated interface `org.modeshape.jcr.query.parse.QueryParser`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":69,"column":-1,"procedure":"org.modeshape.jcr.query.parse.QueryParsers.addLanguage(org.modeshape.jcr.query.parse.QueryParser):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/query/parse/QueryParsers.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/parse/QueryParsers.java","line_number":69,"column_number":-1,"description":"Call to un-annotated interface method String QueryParser.getLanguage()"}],"key":"QueryParsers.java|addLanguage|INTERFACE_NOT_THREAD_SAFE","hash":"e8146c55e807702e1f6694e47dc3c06d","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEcAAAAEAAAAGgAAABKgsABFAP+SCT1zcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3F1ZXJ5L3BhcnNlL1F1ZXJ5UGFyc2Vycy5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String QueryParser.getLanguage()` of un-annotated interface `org.modeshape.jcr.query.parse.QueryParser`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":96,"column":-1,"procedure":"org.modeshape.jcr.query.parse.QueryParsers.addLanguages(java.lang.Iterable):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/query/parse/QueryParsers.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/parse/QueryParsers.java","line_number":96,"column_number":-1,"description":"call to void QueryParsers.addLanguage(QueryParser)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/parse/QueryParsers.java","line_number":69,"column_number":-1,"description":"Call to un-annotated interface method String QueryParser.getLanguage()"}],"key":"QueryParsers.java|addLanguages|INTERFACE_NOT_THREAD_SAFE","hash":"a1fa5cbfa1bc99e853feb9c35b5cbddc","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEcAAAAEAAAAGgAAABKgsABFAP+SCT1zcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3F1ZXJ5L3BhcnNlL1F1ZXJ5UGFyc2Vycy5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String QueryParser.getLanguage()` of un-annotated interface `org.modeshape.jcr.query.parse.QueryParser`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":81,"column":-1,"procedure":"org.modeshape.jcr.query.parse.QueryParsers.addLanguages(org.modeshape.jcr.query.parse.QueryParser,org.modeshape.jcr.query.parse.QueryParser[]):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/query/parse/QueryParsers.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/parse/QueryParsers.java","line_number":81,"column_number":-1,"description":"call to void QueryParsers.addLanguage(QueryParser)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/parse/QueryParsers.java","line_number":69,"column_number":-1,"description":"Call to un-annotated interface method String QueryParser.getLanguage()"}],"key":"QueryParsers.java|addLanguages|INTERFACE_NOT_THREAD_SAFE","hash":"a1fa5cbfa1bc99e853feb9c35b5cbddc","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEcAAAAEAAAAGgAAABKgsABFAP+SCT1zcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3F1ZXJ5L3BhcnNlL1F1ZXJ5UGFyc2Vycy5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `ChildReference ChildReferences.getChild(Name)` of un-annotated interface `org.modeshape.jcr.cache.ChildReferences`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":102,"column":-1,"procedure":"org.modeshape.jcr.JcrLockManager.addLockToken(java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrLockManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrLockManager.java","line_number":102,"column_number":-1,"description":"call to boolean RepositoryLockManager.setHeldBySession(JcrSession,String,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","line_number":406,"column_number":-1,"description":"call to boolean SystemContent.changeLockHeldBySession(String,boolean)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/SystemContent.java","line_number":1118,"column_number":-1,"description":"call to CachedNode SystemContent.locksNode()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/SystemContent.java","line_number":206,"column_number":-1,"description":"call to NodeKey SystemContent.locksKey()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/SystemContent.java","line_number":172,"column_number":-1,"description":"call to CachedNode SystemContent.systemNode()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/SystemContent.java","line_number":190,"column_number":-1,"description":"call to NodeKey SystemContent.systemKey()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/SystemContent.java","line_number":133,"column_number":-1,"description":"Call to un-annotated interface method ChildReference ChildReferences.getChild(Name)"}],"key":"JcrLockManager.java|addLockToken|INTERFACE_NOT_THREAD_SAFE","hash":"787910a0283b8674b7de9326e3532ccd","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEAhQD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9TeXN0ZW1Db250ZW50LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `void MutableCachedNode.addInternalProperty(String,Object)` of un-annotated interface `org.modeshape.jcr.cache.MutableCachedNode`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":2514,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.addMixin(java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2514,"column_number":-1,"description":"Call to un-annotated interface method void MutableCachedNode.addInternalProperty(String,Object)"}],"key":"AbstractJcrNode.java|addMixin|INTERFACE_NOT_THREAD_SAFE","hash":"7ee70caac3caf7ea872d04122d0f7b40","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEJ0gD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void AbstractJcrNode.addMixin(String)` indirectly writes to field `defn.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":2518,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.addMixin(java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2518,"column_number":-1,"description":"call to void AbstractJcrNode.autoCreateItemsFor(JcrNodeType)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2362,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(Name,javax.jcr.Value[],int,boolean)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1826,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(Name,javax.jcr.Value[],int,boolean,boolean,boolean,boolean)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1955,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.canCastToTypeAndSatisfyConstraints(javax.jcr.Value[],JcrSession)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":437,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.canCastToTypeAndSatisfyConstraints(Value,JcrSession)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":413,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(Value,JcrSession)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":262,"column_number":-1,"description":"access to `defn.checker`"}],"key":"AbstractJcrNode.java|addMixin|THREAD_SAFETY_VIOLATION","hash":"201b793edb09f7db3886640f0ec64e59","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBBgD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void AbstractJcrNode.addMixin(String)` indirectly writes to field `type.key.sourceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":2491,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.addMixin(java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2491,"column_number":-1,"description":"call to boolean AbstractJcrNode.canAddMixin(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2746,"column_number":-1,"description":"call to JcrNodeType JcrNodeTypeManager.getNodeType(String)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrNodeTypeManager.java","line_number":131,"column_number":-1,"description":"call to JcrNodeType JcrNodeType.with(ExecutionContext,JcrSession)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":640,"column_number":-1,"description":"call to JcrNodeType.<init>(NodeKey,ExecutionContext,JcrSession,RepositoryNodeTypeManager,Name,List,Name,Collection,Collection,boolean,boolean,boolean,boolean)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":178,"column_number":-1,"description":"call to NodeKey NodeKey.withId(String)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":229,"column_number":-1,"description":"call to String NodeKey.getSourceKey()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":154,"column_number":-1,"description":"access to `type.key.sourceKey`"}],"key":"AbstractJcrNode.java|addMixin|THREAD_SAFETY_VIOLATION","hash":"063a7fea8ce8cb8e11faaf27a2552278","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEAmgD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void AbstractJcrNode.addMixin(String)` indirectly mutates container `ace.privileges` via call to `addAll` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":2489,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.addMixin(java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2489,"column_number":-1,"description":"call to void JcrSession.checkPermission(AbstractJcrItem,java.lang.String[])"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1535,"column_number":-1,"description":"call to void JcrSession.checkPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1567,"column_number":-1,"description":"call to boolean JcrSession.hasPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1375,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPermission(Path,java.lang.String[])"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":322,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPrivileges(String,javax.jcr.security.Privilege[])"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":109,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.getApplicableACL(String)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":114,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.findAccessList(String,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":289,"column_number":-1,"description":"call to boolean JcrAccessControlList.addAccessControlEntry(Principal,javax.jcr.security.Privilege[])"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/security/acl/JcrAccessControlList.java","line_number":113,"column_number":-1,"description":"call to boolean AccessControlEntryImpl.addIfNotPresent(javax.jcr.security.Privilege[])"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/security/acl/AccessControlEntryImpl.java","line_number":103,"column_number":-1,"description":"Write to container `ace.privileges` via call to `addAll`"}],"key":"AbstractJcrNode.java|addMixin|THREAD_SAFETY_VIOLATION","hash":"94bb6625745a3b51fd10f2eae2f6c3a4","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFIAAAAEAAAAHQAAABSgsABnAP+SCUhzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3NlY3VyaXR5L2FjbC9BY2Nlc3NDb250cm9sRW50cnlJbXBsLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void AbstractJcrNode.addMixin(String)` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":2486,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.addMixin(java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2486,"column_number":-1,"description":"call to void AbstractJcrNode.checkForLock()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":635,"column_number":-1,"description":"call to Lock AbstractJcrNode.getLockIfExists()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3322,"column_number":-1,"description":"call to Lock JcrLockManager.getLockIfExists(AbstractJcrNode)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrLockManager.java","line_number":178,"column_number":-1,"description":"call to Lock RepositoryLockManager$ModeShapeLock.lockFor(JcrSession)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","line_number":661,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"AbstractJcrNode.java|addMixin|THREAD_SAFETY_VIOLATION","hash":"28b5e6ced5b0f28aca39fd8d84613dc9","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void JcrSystemNode.addMixin(String)` indirectly writes to field `type.key.sourceKey` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.addMixin(java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to void AbstractJcrNode.addMixin(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2491,"column_number":-1,"description":"call to boolean AbstractJcrNode.canAddMixin(String)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2746,"column_number":-1,"description":"call to JcrNodeType JcrNodeTypeManager.getNodeType(String)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrNodeTypeManager.java","line_number":131,"column_number":-1,"description":"call to JcrNodeType JcrNodeType.with(ExecutionContext,JcrSession)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":640,"column_number":-1,"description":"call to JcrNodeType.<init>(NodeKey,ExecutionContext,JcrSession,RepositoryNodeTypeManager,Name,List,Name,Collection,Collection,boolean,boolean,boolean,boolean)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":178,"column_number":-1,"description":"call to NodeKey NodeKey.withId(String)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":229,"column_number":-1,"description":"call to String NodeKey.getSourceKey()"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":154,"column_number":-1,"description":"access to `type.key.sourceKey`"}],"key":"JcrSystemNode.java|addMixin|THREAD_SAFETY_VIOLATION","hash":"ac096553184147866816a9f5dfefd98a","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEAmgD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `ExecutionContext SessionCache.getContext()` of un-annotated interface `org.modeshape.jcr.cache.SessionCache`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":538,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.addMixin(org.modeshape.jcr.cache.SessionCache,org.modeshape.jcr.value.Name):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":538,"column_number":-1,"description":"Call to un-annotated interface method ExecutionContext SessionCache.getContext()"}],"key":"SessionNode.java|addMixin|INTERFACE_NOT_THREAD_SAFE","hash":"58ae61595053b6c9cbba31ec268dd979","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEoAAAAEAAAAGgAAABKgsAECGgD/kgk/c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9TZXNzaW9uTm9kZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Node AbstractJcrNode.addNode(String)` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":101,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.addNode(java.lang.String):javax.jcr.Node","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":101,"column_number":-1,"description":"call to AbstractJcrNode AbstractJcrNode.addNode(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":977,"column_number":-1,"description":"call to AbstractJcrNode AbstractJcrNode.addNode(String,String,NodeKey,boolean)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1045,"column_number":-1,"description":"call to AbstractJcrItem JcrSession.findItem(AbstractJcrNode,Path)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":699,"column_number":-1,"description":"call to AbstractJcrItem JcrSession.getItem(Path)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":880,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(Path)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":677,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,Path)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":659,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"AbstractJcrNode.java|addNode|THREAD_SAFETY_VIOLATION","hash":"30c7bd4f6e057f1339e2a010c6e1e9b3","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrNode AbstractJcrNode.addNode(String)` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":977,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.addNode(java.lang.String):org.modeshape.jcr.AbstractJcrNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":977,"column_number":-1,"description":"call to AbstractJcrNode AbstractJcrNode.addNode(String,String,NodeKey,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1045,"column_number":-1,"description":"call to AbstractJcrItem JcrSession.findItem(AbstractJcrNode,Path)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":699,"column_number":-1,"description":"call to AbstractJcrItem JcrSession.getItem(Path)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":880,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(Path)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":677,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,Path)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":659,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"AbstractJcrNode.java|addNode|THREAD_SAFETY_VIOLATION","hash":"a3467eca092d3fec39ea013455272614","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrNode JcrSystemNode.addNode(String)` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.addNode(java.lang.String):org.modeshape.jcr.AbstractJcrNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to AbstractJcrNode AbstractJcrNode.addNode(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":977,"column_number":-1,"description":"call to AbstractJcrNode AbstractJcrNode.addNode(String,String,NodeKey,boolean)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1045,"column_number":-1,"description":"call to AbstractJcrItem JcrSession.findItem(AbstractJcrNode,Path)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":699,"column_number":-1,"description":"call to AbstractJcrItem JcrSession.getItem(Path)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":880,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(Path)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":677,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,Path)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":659,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"JcrSystemNode.java|addNode|THREAD_SAFETY_VIOLATION","hash":"ca80548f3de48f82c1448a45ff404b8f","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Node AbstractJcrNode.addNode(String,String)` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":101,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.addNode(java.lang.String,java.lang.String):javax.jcr.Node","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":101,"column_number":-1,"description":"call to AbstractJcrNode AbstractJcrNode.addNode(String,String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":986,"column_number":-1,"description":"call to AbstractJcrNode AbstractJcrNode.addNode(String,String,NodeKey,boolean)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1045,"column_number":-1,"description":"call to AbstractJcrItem JcrSession.findItem(AbstractJcrNode,Path)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":699,"column_number":-1,"description":"call to AbstractJcrItem JcrSession.getItem(Path)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":880,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(Path)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":677,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,Path)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":659,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"AbstractJcrNode.java|addNode|THREAD_SAFETY_VIOLATION","hash":"5d640fbd82e74a6ae829d9b9ab8df34f","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrNode AbstractJcrNode.addNode(String,String)` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":986,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.addNode(java.lang.String,java.lang.String):org.modeshape.jcr.AbstractJcrNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":986,"column_number":-1,"description":"call to AbstractJcrNode AbstractJcrNode.addNode(String,String,NodeKey,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1045,"column_number":-1,"description":"call to AbstractJcrItem JcrSession.findItem(AbstractJcrNode,Path)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":699,"column_number":-1,"description":"call to AbstractJcrItem JcrSession.getItem(Path)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":880,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(Path)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":677,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,Path)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":659,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"AbstractJcrNode.java|addNode|THREAD_SAFETY_VIOLATION","hash":"94138a425dd6ce0b3e715fadb0bb9881","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrNode JcrSystemNode.addNode(String,String)` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.addNode(java.lang.String,java.lang.String):org.modeshape.jcr.AbstractJcrNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to AbstractJcrNode AbstractJcrNode.addNode(String,String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":986,"column_number":-1,"description":"call to AbstractJcrNode AbstractJcrNode.addNode(String,String,NodeKey,boolean)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1045,"column_number":-1,"description":"call to AbstractJcrItem JcrSession.findItem(AbstractJcrNode,Path)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":699,"column_number":-1,"description":"call to AbstractJcrItem JcrSession.getItem(Path)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":880,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(Path)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":677,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,Path)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":659,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"JcrSystemNode.java|addNode|THREAD_SAFETY_VIOLATION","hash":"e87917578acf49c4859cd233178a2268","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrNode AbstractJcrNode.addNode(String,String,NodeKey,boolean)` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1054,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.addNode(java.lang.String,java.lang.String,org.modeshape.jcr.cache.NodeKey,boolean):org.modeshape.jcr.AbstractJcrNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1054,"column_number":-1,"description":"call to AbstractJcrNode AbstractJcrNode.addChildNode(Name,Name,NodeKey,boolean,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1167,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"AbstractJcrNode.java|addNode|THREAD_SAFETY_VIOLATION","hash":"fbcc803ad0cd354c95e9e7d3ea50f979","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `int Path$Segment.getIndex()` of un-annotated interface `org.modeshape.jcr.value.Path$Segment`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":1037,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.addNode(java.lang.String,java.lang.String,org.modeshape.jcr.cache.NodeKey,boolean):org.modeshape.jcr.AbstractJcrNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1037,"column_number":-1,"description":"Call to un-annotated interface method int Path$Segment.getIndex()"}],"key":"AbstractJcrNode.java|addNode|INTERFACE_NOT_THREAD_SAFE","hash":"df4837d329c83dd0e2f4b9c8896e796d","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEEDQD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `AbstractJcrNode AbstractJcrNode.addNode(String,String,NodeKey,boolean)` indirectly reads without synchronization from `nodeKey.workspaceKey`. Potentially races with write in method `AbstractJcrNode.addNode(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1045,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.addNode(java.lang.String,java.lang.String,org.modeshape.jcr.cache.NodeKey,boolean):org.modeshape.jcr.AbstractJcrNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1045,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1045,"column_number":-1,"description":"call to AbstractJcrItem JcrSession.findItem(AbstractJcrNode,Path)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":699,"column_number":-1,"description":"call to AbstractJcrItem JcrSession.getItem(Path)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":880,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(Path)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":674,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.getNodeByIdentifier(String)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":778,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":165,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":977,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":977,"column_number":-1,"description":"call to AbstractJcrNode AbstractJcrNode.addNode(String,String,NodeKey,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1045,"column_number":-1,"description":"call to AbstractJcrItem JcrSession.findItem(AbstractJcrNode,Path)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":699,"column_number":-1,"description":"call to AbstractJcrItem JcrSession.getItem(Path)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":880,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(Path)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":677,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,Path)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":659,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"AbstractJcrNode.java|addNode|THREAD_SAFETY_VIOLATION","hash":"45c111cbde14ba8f3bda7ba975913a6e","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAHkAAAAIAAAALgAAACKgsAEApQD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `SchematicEntry DocumentStore.get(String)` of un-annotated interface `org.modeshape.jcr.cache.document.DocumentStore`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":989,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.addOrRemoveReferrers(org.modeshape.jcr.cache.SessionCache,org.modeshape.jcr.cache.SessionCache,org.modeshape.jcr.value.Property,java.util.Iterator,boolean):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":989,"column_number":-1,"description":"call to Name SessionNode.getPrimaryType(NodeCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":495,"column_number":-1,"description":"call to Property SessionNode.getProperty(Name,NodeCache)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":740,"column_number":-1,"description":"call to CachedNode SessionNode.nodeInWorkspace(AbstractSessionCache)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":309,"column_number":-1,"description":"call to CachedNode WorkspaceCache.getNode(NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":243,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(NodeKey)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":207,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(String)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":188,"column_number":-1,"description":"Call to un-annotated interface method SchematicEntry DocumentStore.get(String)"}],"key":"SessionNode.java|addOrRemoveReferrers|INTERFACE_NOT_THREAD_SAFE","hash":"13e674775d4a51cef2dc39231d1356fb","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEAvAD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xb3Jrc3BhY2VDYWNoZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void SessionNode.addOrRemoveReferrers(SessionCache,SessionCache,Property,Iterator,boolean)` indirectly mutates container `changes.addedStrong` via call to `put` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1023,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.addOrRemoveReferrers(org.modeshape.jcr.cache.SessionCache,org.modeshape.jcr.cache.SessionCache,org.modeshape.jcr.value.Property,java.util.Iterator,boolean):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1023,"column_number":-1,"description":"call to void SessionNode.addReferrer(SessionCache,Property,NodeKey,CachedNode$ReferenceType)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":678,"column_number":-1,"description":"call to void SessionNode$ReferrerChanges.addStrongReferrer(Property,NodeKey)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2474,"column_number":-1,"description":"call to void SessionNode$ReferrerChanges.processReferrerChange(Property,NodeKey,Map,Map)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2504,"column_number":-1,"description":"Write to container `changes.addedStrong` via call to `put`"}],"key":"SessionNode.java|addOrRemoveReferrers|THREAD_SAFETY_VIOLATION","hash":"22077783d50526ee30f8a94acfa4ff5e","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEoAAAAEAAAAGgAAABKgsAEJyAD/kgk/c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9TZXNzaW9uTm9kZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void SessionNode.addOrRemoveReferrers(SessionCache,SessionCache,Property,Iterator,boolean)` indirectly mutates container `changes.addedStrong` via call to `remove` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1025,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.addOrRemoveReferrers(org.modeshape.jcr.cache.SessionCache,org.modeshape.jcr.cache.SessionCache,org.modeshape.jcr.value.Property,java.util.Iterator,boolean):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1025,"column_number":-1,"description":"call to void SessionNode.removeReferrer(SessionCache,Property,NodeKey,CachedNode$ReferenceType)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":696,"column_number":-1,"description":"call to void SessionNode$ReferrerChanges.removeStrongReferrer(Property,NodeKey)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2479,"column_number":-1,"description":"call to void SessionNode$ReferrerChanges.processReferrerChange(Property,NodeKey,Map,Map)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2493,"column_number":-1,"description":"Write to container `changes.addedStrong` via call to `remove`"}],"key":"SessionNode.java|addOrRemoveReferrers|THREAD_SAFETY_VIOLATION","hash":"3bc51ced44fe76831564d20743fd177c","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEoAAAAEAAAAGgAAABKgsAEJvQD/kgk/c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9TZXNzaW9uTm9kZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void SessionNode.addReferrer(SessionCache,Property,NodeKey,CachedNode$ReferenceType)` indirectly mutates container `changes.addedWeak` via call to `put` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":675,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.addReferrer(org.modeshape.jcr.cache.SessionCache,org.modeshape.jcr.value.Property,org.modeshape.jcr.cache.NodeKey,org.modeshape.jcr.cache.CachedNode$ReferenceType):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":675,"column_number":-1,"description":"call to void SessionNode$ReferrerChanges.addWeakReferrer(Property,NodeKey)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2464,"column_number":-1,"description":"call to void SessionNode$ReferrerChanges.processReferrerChange(Property,NodeKey,Map,Map)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2504,"column_number":-1,"description":"Write to container `changes.addedWeak` via call to `put`"}],"key":"SessionNode.java|addReferrer|THREAD_SAFETY_VIOLATION","hash":"0d7157099c3dbad8b87733eedf0e9cb2","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEoAAAAEAAAAGgAAABKgsAEJyAD/kgk/c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9TZXNzaW9uTm9kZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void SessionNode.addReferrer(SessionCache,Property,NodeKey,CachedNode$ReferenceType)` indirectly mutates container `changes.addedStrong` via call to `put` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":678,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.addReferrer(org.modeshape.jcr.cache.SessionCache,org.modeshape.jcr.value.Property,org.modeshape.jcr.cache.NodeKey,org.modeshape.jcr.cache.CachedNode$ReferenceType):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":678,"column_number":-1,"description":"call to void SessionNode$ReferrerChanges.addStrongReferrer(Property,NodeKey)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2474,"column_number":-1,"description":"call to void SessionNode$ReferrerChanges.processReferrerChange(Property,NodeKey,Map,Map)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2504,"column_number":-1,"description":"Write to container `changes.addedStrong` via call to `put`"}],"key":"SessionNode.java|addReferrer|THREAD_SAFETY_VIOLATION","hash":"772c1069f4a95a662342ef28fb4c9825","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEoAAAAEAAAAGgAAABKgsAEJyAD/kgk/c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9TZXNzaW9uTm9kZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `boolean NodeTypes$ReusableNodeDefinitionSet.appliesTo(NodeTypes,Name,Set)` of un-annotated interface `org.modeshape.jcr.NodeTypes$ReusableNodeDefinitionSet`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":3085,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.addSharedNode(org.modeshape.jcr.AbstractJcrNode,org.modeshape.jcr.value.Name):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3085,"column_number":-1,"description":"call to JcrNodeDefinition AbstractJcrNode.validateChildNodeDefinition(Name,Name,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1265,"column_number":-1,"description":"call to NodeTypes$NodeDefinitionSet NodeTypes.findChildNodeDefinitions(Name,Set)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":2375,"column_number":-1,"description":"Call to un-annotated interface method boolean NodeTypes$ReusableNodeDefinitionSet.appliesTo(NodeTypes,Name,Set)"}],"key":"AbstractJcrNode.java|addSharedNode|INTERFACE_NOT_THREAD_SAFE","hash":"ce0c86f33a679e4df8353bf3c8608e83","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAADkAAAAEAAAAFgAAABCgsAEJRwD/kgkuc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9Ob2RlVHlwZXMuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void AbstractJcrNode.addSharedNode(AbstractJcrNode,Name)` indirectly mutates container `ace.privileges` via call to `addAll` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":3075,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.addSharedNode(org.modeshape.jcr.AbstractJcrNode,org.modeshape.jcr.value.Name):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3075,"column_number":-1,"description":"call to void JcrSession.checkPermission(AbstractJcrItem,java.lang.String[])"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1535,"column_number":-1,"description":"call to void JcrSession.checkPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1567,"column_number":-1,"description":"call to boolean JcrSession.hasPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1375,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPermission(Path,java.lang.String[])"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":322,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPrivileges(String,javax.jcr.security.Privilege[])"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":109,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.getApplicableACL(String)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":114,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.findAccessList(String,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":289,"column_number":-1,"description":"call to boolean JcrAccessControlList.addAccessControlEntry(Principal,javax.jcr.security.Privilege[])"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/security/acl/JcrAccessControlList.java","line_number":113,"column_number":-1,"description":"call to boolean AccessControlEntryImpl.addIfNotPresent(javax.jcr.security.Privilege[])"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/security/acl/AccessControlEntryImpl.java","line_number":103,"column_number":-1,"description":"Write to container `ace.privileges` via call to `addAll`"}],"key":"AbstractJcrNode.java|addSharedNode|THREAD_SAFETY_VIOLATION","hash":"1fc220842aa088ca60155e4762447456","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFIAAAAEAAAAHQAAABSgsABnAP+SCUhzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3NlY3VyaXR5L2FjbC9BY2Nlc3NDb250cm9sRW50cnlJbXBsLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void AbstractJcrNode.addSharedNode(AbstractJcrNode,Name)` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":3076,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.addSharedNode(org.modeshape.jcr.AbstractJcrNode,org.modeshape.jcr.value.Name):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3076,"column_number":-1,"description":"call to boolean AbstractJcrNode.isLockedByAnotherSession()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":643,"column_number":-1,"description":"call to void AbstractJcrNode.checkForLock()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":635,"column_number":-1,"description":"call to Lock AbstractJcrNode.getLockIfExists()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3322,"column_number":-1,"description":"call to Lock JcrLockManager.getLockIfExists(AbstractJcrNode)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrLockManager.java","line_number":178,"column_number":-1,"description":"call to Lock RepositoryLockManager$ModeShapeLock.lockFor(JcrSession)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","line_number":661,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"AbstractJcrNode.java|addSharedNode|THREAD_SAFETY_VIOLATION","hash":"0a077b79d788d0632e71d3a40a76831e","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void JcrVersionHistoryNode.addVersionLabel(String,String,boolean)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":320,"column":-1,"procedure":"org.modeshape.jcr.JcrVersionHistoryNode.addVersionLabel(java.lang.String,java.lang.String,boolean):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":320,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":336,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrVersionHistoryNode.java|addVersionLabel|THREAD_SAFETY_VIOLATION","hash":"a29290c355147aeb9412f0de2cfb6079","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `int Transaction.getStatus()` of un-annotated interface `javax.transaction.Transaction`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":328,"column":-1,"procedure":"org.modeshape.jcr.JcrVersionHistoryNode.addVersionLabel(java.lang.String,java.lang.String,boolean):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":328,"column_number":-1,"description":"call to SessionCache JcrSession.createSystemCache(boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":378,"column_number":-1,"description":"call to SessionCache JcrRepository.createSystemSession(ExecutionContext,boolean)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":501,"column_number":-1,"description":"call to SessionCache RepositoryCache.createSession(ExecutionContext,String,boolean)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/RepositoryCache.java","line_number":1137,"column_number":-1,"description":"call to ReadOnlySessionCache.<init>(ExecutionContext,WorkspaceCache,RepositoryEnvironment)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/ReadOnlySessionCache.java","line_number":40,"column_number":-1,"description":"call to AbstractSessionCache.<init>(ExecutionContext,WorkspaceCache,RepositoryEnvironment)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/document/AbstractSessionCache.java","line_number":94,"column_number":-1,"description":"call to void AbstractSessionCache.checkForTransaction()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/cache/document/AbstractSessionCache.java","line_number":110,"column_number":-1,"description":"Call to un-annotated interface method int Transaction.getStatus()"}],"key":"JcrVersionHistoryNode.java|addVersionLabel|INTERFACE_NOT_THREAD_SAFE","hash":"1d92154ee1c07768ede662ffaacec192","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAFIAAAAEAAAAHQAAABSgsABuAP+SCUhzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL2NhY2hlL2RvY3VtZW50L0Fic3RyYWN0U2Vzc2lvbkNhY2hlLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void JcrVersionHistoryNode.addVersionLabel(String,String,boolean)` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":315,"column":-1,"procedure":"org.modeshape.jcr.JcrVersionHistoryNode.addVersionLabel(java.lang.String,java.lang.String,boolean):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":315,"column_number":-1,"description":"call to AbstractJcrNode JcrVersionHistoryNode.versionLabels()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":77,"column_number":-1,"description":"call to AbstractJcrNode AbstractJcrNode.childNode(Name,AbstractJcrNode$Type)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":690,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"JcrVersionHistoryNode.java|addVersionLabel|THREAD_SAFETY_VIOLATION","hash":"6d245b928c4a1d1530605e5a3bdbb19a","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void JcrVersionHistoryNode.addVersionLabel(String,String,boolean)` indirectly writes to field `parentKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":316,"column":-1,"procedure":"org.modeshape.jcr.JcrVersionHistoryNode.addVersionLabel(java.lang.String,java.lang.String,boolean):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":316,"column_number":-1,"description":"call to JcrVersionNode JcrVersionHistoryNode.getVersion(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":93,"column_number":-1,"description":"call to AbstractJcrNode JcrSystemNode.getNode(String)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to AbstractJcrNode AbstractJcrNode.getNode(String)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":796,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,Path)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":662,"column_number":-1,"description":"call to AbstractJcrNode JcrSharedNodeCache$SharedSet.getSharedNodeAtOrBelow(Path)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSharedNodeCache.java","line_number":190,"column_number":-1,"description":"call to NodeIterator JcrSharedNodeCache$SharedSet.getSharedNodes()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrSharedNodeCache.java","line_number":243,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `parentKey.workspaceKey`"}],"key":"JcrVersionHistoryNode.java|addVersionLabel|THREAD_SAFETY_VIOLATION","hash":"2148018263f810935599b286e868aae2","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Collection Multimap.values()` of un-annotated interface `org.modeshape.common.collection.Multimap`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":256,"column":-1,"procedure":"org.modeshape.jcr.JcrNodeType.allChildNodeDefinitions():java.util.Collection","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrNodeType.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":256,"column_number":-1,"description":"call to Collection DefinitionCache.allChildNodeDefinitions()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/DefinitionCache.java","line_number":210,"column_number":-1,"description":"Call to un-annotated interface method Collection Multimap.values()"}],"key":"JcrNodeType.java|allChildNodeDefinitions|INTERFACE_NOT_THREAD_SAFE","hash":"f58df3008aa77612b2cb32284b277fa6","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEA0gD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9EZWZpbml0aW9uQ2FjaGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Collection Multimap.get(Object)` of un-annotated interface `org.modeshape.common.collection.Multimap`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":265,"column":-1,"procedure":"org.modeshape.jcr.JcrNodeType.allChildNodeDefinitions(org.modeshape.jcr.value.Name):java.util.Collection","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrNodeType.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":265,"column_number":-1,"description":"call to Collection DefinitionCache.allChildNodeDefinitions(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/DefinitionCache.java","line_number":197,"column_number":-1,"description":"Call to un-annotated interface method Collection Multimap.get(Object)"}],"key":"JcrNodeType.java|allChildNodeDefinitions|INTERFACE_NOT_THREAD_SAFE","hash":"01d98a289bf053ba975992dbada57789","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEAxQD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9EZWZpbml0aW9uQ2FjaGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Collection Multimap.get(Object)` of un-annotated interface `org.modeshape.common.collection.Multimap`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":261,"column":-1,"procedure":"org.modeshape.jcr.JcrNodeType.allChildNodeDefinitions(org.modeshape.jcr.value.Name,boolean):java.util.Collection","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrNodeType.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":261,"column_number":-1,"description":"call to Collection DefinitionCache.allChildNodeDefinitions(Name,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/DefinitionCache.java","line_number":204,"column_number":-1,"description":"Call to un-annotated interface method Collection Multimap.get(Object)"}],"key":"JcrNodeType.java|allChildNodeDefinitions|INTERFACE_NOT_THREAD_SAFE","hash":"01d98a289bf053ba975992dbada57789","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEAzAD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9EZWZpbml0aW9uQ2FjaGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Collection Multimap.get(Object)` of un-annotated interface `org.modeshape.common.collection.Multimap`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":243,"column":-1,"procedure":"org.modeshape.jcr.JcrNodeType.allMultiValuePropertyDefinitions(org.modeshape.jcr.value.Name):java.util.Collection","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrNodeType.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":243,"column_number":-1,"description":"call to Collection DefinitionCache.allMultiValuePropertyDefinitions(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/DefinitionCache.java","line_number":173,"column_number":-1,"description":"Call to un-annotated interface method Collection Multimap.get(Object)"}],"key":"JcrNodeType.java|allMultiValuePropertyDefinitions|INTERFACE_NOT_THREAD_SAFE","hash":"3b0f230c26300f6e2d28cf2393e13fb5","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEArQD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9EZWZpbml0aW9uQ2FjaGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Collection Multimap.values()` of un-annotated interface `org.modeshape.common.collection.Multimap`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":235,"column":-1,"procedure":"org.modeshape.jcr.JcrNodeType.allPropertyDefinitions():java.util.Collection","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrNodeType.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":235,"column_number":-1,"description":"call to Collection DefinitionCache.allPropertyDefinitions()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/DefinitionCache.java","line_number":181,"column_number":-1,"description":"Call to un-annotated interface method Collection Multimap.values()"}],"key":"JcrNodeType.java|allPropertyDefinitions|INTERFACE_NOT_THREAD_SAFE","hash":"be214bc744d2bfc0dabd3bb471861f75","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEAtQD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9EZWZpbml0aW9uQ2FjaGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Collection Multimap.get(Object)` of un-annotated interface `org.modeshape.common.collection.Multimap`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":247,"column":-1,"procedure":"org.modeshape.jcr.JcrNodeType.allPropertyDefinitions(org.modeshape.jcr.value.Name):java.util.Collection","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrNodeType.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":247,"column_number":-1,"description":"call to Collection DefinitionCache.allPropertyDefinitions(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/DefinitionCache.java","line_number":177,"column_number":-1,"description":"Call to un-annotated interface method Collection Multimap.get(Object)"}],"key":"JcrNodeType.java|allPropertyDefinitions|INTERFACE_NOT_THREAD_SAFE","hash":"fefa21b1c6e17a0a3b2336d4e8c20cc3","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEAsQD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9EZWZpbml0aW9uQ2FjaGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `ChangeJournal$Records ClusteredJournal.allRecords(boolean)` indirectly reads without synchronization from `this.localJournal.records`. Potentially races with write in method `ClusteredJournal.start()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":142,"column":-1,"procedure":"org.modeshape.jcr.journal.ClusteredJournal.allRecords(boolean):org.modeshape.jcr.journal.ChangeJournal$Records","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":142,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":142,"column_number":-1,"description":"call to ChangeJournal$Records LocalJournal.allRecords(boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","line_number":222,"column_number":-1,"description":"access to `this.localJournal.records`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":81,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":81,"column_number":-1,"description":"call to void LocalJournal.start()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","line_number":140,"column_number":-1,"description":"access to `this.localJournal.records`"}],"key":"ClusteredJournal.java|allRecords|THREAD_SAFETY_VIOLATION","hash":"b4c8dabcc04e4ce551c3eadfaeb815b1","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAIcAAAAIAAAAMgAAACSgsAEA3gD/kgk5c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9qb3VybmFsL0xvY2FsSm91cm5hbC5qYXZhoLABAIwA/5IJOXNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3Ivam91cm5hbC9Mb2NhbEpvdXJuYWwuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `ChangeJournal$Records LocalJournal.allRecords(boolean)` reads without synchronization from `this.records`. Potentially races with write in method `LocalJournal.start()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":222,"column":-1,"procedure":"org.modeshape.jcr.journal.LocalJournal.allRecords(boolean):org.modeshape.jcr.journal.ChangeJournal$Records","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","line_number":222,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","line_number":222,"column_number":-1,"description":"access to `this.records`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","line_number":140,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","line_number":140,"column_number":-1,"description":"access to `this.records`"}],"key":"LocalJournal.java|allRecords|THREAD_SAFETY_VIOLATION","hash":"74db1890d16aefcb7aabb34bbd37b724","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAIcAAAAIAAAAMgAAACSgsAEA3gD/kgk5c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9qb3VybmFsL0xvY2FsSm91cm5hbC5qYXZhoLABAIwA/5IJOXNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3Ivam91cm5hbC9Mb2NhbEpvdXJuYWwuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Collection Multimap.get(Object)` of un-annotated interface `org.modeshape.common.collection.Multimap`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":239,"column":-1,"procedure":"org.modeshape.jcr.JcrNodeType.allSingleValuePropertyDefinitions(org.modeshape.jcr.value.Name):java.util.Collection","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrNodeType.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":239,"column_number":-1,"description":"call to Collection DefinitionCache.allSingleValuePropertyDefinitions(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/DefinitionCache.java","line_number":169,"column_number":-1,"description":"Call to un-annotated interface method Collection Multimap.get(Object)"}],"key":"JcrNodeType.java|allSingleValuePropertyDefinitions|INTERFACE_NOT_THREAD_SAFE","hash":"9e34347e0f4cee57460d473a67256790","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEAqQD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9EZWZpbml0aW9uQ2FjaGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String Name.getLocalName()` of un-annotated interface `org.modeshape.jcr.value.Name`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":183,"column":-1,"procedure":"org.modeshape.jcr.cache.document.MutableChildReferences.append(org.modeshape.jcr.cache.NodeKey,org.modeshape.jcr.value.Name):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/MutableChildReferences.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/MutableChildReferences.java","line_number":183,"column_number":-1,"description":"call to ChildReference.<init>(NodeKey,Name,int)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/ChildReference.java","line_number":37,"column_number":-1,"description":"call to BasicPathSegment.<init>(Name,int)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/basic/BasicPathSegment.java","line_number":59,"column_number":-1,"description":"call to boolean BasicPathSegment.isSelfReference()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/basic/BasicPathSegment.java","line_number":85,"column_number":-1,"description":"Call to un-annotated interface method String Name.getLocalName()"}],"key":"MutableChildReferences.java|append|INTERFACE_NOT_THREAD_SAFE","hash":"235e21a54f0ce308e72afed1e91b47d2","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEsAAAAEAAAAGwAAABOgsABVAP+SCUFzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2Jhc2ljL0Jhc2ljUGF0aFNlZ21lbnQuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void WritableSessionCache.assertInSession(SessionNode)` reads without synchronization from `this.changedNodes`. Potentially races with write in method `WritableSessionCache.save()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":152,"column":-1,"procedure":"org.modeshape.jcr.cache.document.WritableSessionCache.assertInSession(org.modeshape.jcr.cache.document.SessionNode):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":152,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":152,"column_number":-1,"description":"access to `this.changedNodes`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":432,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":432,"column_number":-1,"description":"call to void WritableSessionCache.save(SessionCache$PreSave)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":489,"column_number":-1,"description":"call to void WritableSessionCache.clearState()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":573,"column_number":-1,"description":"access to `this.changedNodes`"}],"key":"WritableSessionCache.java|assertInSession|THREAD_SAFETY_VIOLATION","hash":"a311bd8d8dc47e7ec6cd95f0c216bdc3","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAKUAAAAIAAAAOgAAACigsAEAmAD/kglIc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xcml0YWJsZVNlc3Npb25DYWNoZS5qYXZhoLABAj0A/5IJSHNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvY2FjaGUvZG9jdW1lbnQvV3JpdGFibGVTZXNzaW9uQ2FjaGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Collection Multimap.get(Object)` of un-annotated interface `org.modeshape.common.collection.Multimap`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":1341,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.autoCreateChildren(org.modeshape.jcr.value.Name,org.modeshape.jcr.NodeTypes):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1341,"column_number":-1,"description":"call to Collection NodeTypes.getAutoCreatedChildNodeDefinitions(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":812,"column_number":-1,"description":"Call to un-annotated interface method Collection Multimap.get(Object)"}],"key":"AbstractJcrNode.java|autoCreateChildren|INTERFACE_NOT_THREAD_SAFE","hash":"8f5d889f2246b5e3f2752cb472e1b53d","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAADkAAAAEAAAAFgAAABCgsAEDLAD/kgkuc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9Ob2RlVHlwZXMuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Collection Multimap.get(Object)` of un-annotated interface `org.modeshape.common.collection.Multimap`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":1301,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.autoCreatePropertiesFor(org.modeshape.jcr.value.Name,org.modeshape.jcr.value.Name,org.modeshape.jcr.value.PropertyFactory,org.modeshape.jcr.NodeTypes):java.util.LinkedList","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1301,"column_number":-1,"description":"call to Collection NodeTypes.getAutoCreatedPropertyDefinitions(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":800,"column_number":-1,"description":"Call to un-annotated interface method Collection Multimap.get(Object)"}],"key":"AbstractJcrNode.java|autoCreatePropertiesFor|INTERFACE_NOT_THREAD_SAFE","hash":"972a383fb6ca773564d20f705e218ecb","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAADkAAAAEAAAAFgAAABCgsAEDIAD/kgkuc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9Ob2RlVHlwZXMuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Problems JcrRepositoryManager.backupRepository(File)` indirectly mutates container `ace.privileges` via call to `addAll` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":70,"column":-1,"procedure":"org.modeshape.jcr.JcrRepositoryManager.backupRepository(java.io.File):org.modeshape.jcr.api.Problems","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrRepositoryManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRepositoryManager.java","line_number":70,"column_number":-1,"description":"<Write on unknown thread>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRepositoryManager.java","line_number":70,"column_number":-1,"description":"call to Problems JcrRepositoryManager.backupRepository(File,BackupOptions)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrRepositoryManager.java","line_number":75,"column_number":-1,"description":"call to void JcrSession.checkPermission(Path,java.lang.String[])"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1514,"column_number":-1,"description":"call to void JcrSession.checkPermission(String,Path,java.lang.String[])"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1559,"column_number":-1,"description":"call to void JcrSession.checkPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1567,"column_number":-1,"description":"call to boolean JcrSession.hasPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1375,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPermission(Path,java.lang.String[])"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":322,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPrivileges(String,javax.jcr.security.Privilege[])"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":109,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.getApplicableACL(String)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":114,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.findAccessList(String,boolean)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":289,"column_number":-1,"description":"call to boolean JcrAccessControlList.addAccessControlEntry(Principal,javax.jcr.security.Privilege[])"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/security/acl/JcrAccessControlList.java","line_number":113,"column_number":-1,"description":"call to boolean AccessControlEntryImpl.addIfNotPresent(javax.jcr.security.Privilege[])"},{"level":11,"filename":"src/main/java/org/modeshape/jcr/security/acl/AccessControlEntryImpl.java","line_number":103,"column_number":-1,"description":"Write to container `ace.privileges` via call to `addAll`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRepositoryManager.java","line_number":60,"column_number":-1,"description":"<Write on background thread>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRepositoryManager.java","line_number":60,"column_number":-1,"description":"call to JcrRepositoryMonitor.<init>(JcrSession)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrRepositoryMonitor.java","line_number":39,"column_number":-1,"description":"call to boolean JcrSession.hasPermission(String,String)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1593,"column_number":-1,"description":"call to boolean JcrSession.hasPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1375,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPermission(Path,java.lang.String[])"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":322,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPrivileges(String,javax.jcr.security.Privilege[])"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":109,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.getApplicableACL(String)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":114,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.findAccessList(String,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":289,"column_number":-1,"description":"call to boolean JcrAccessControlList.addAccessControlEntry(Principal,javax.jcr.security.Privilege[])"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/security/acl/JcrAccessControlList.java","line_number":113,"column_number":-1,"description":"call to boolean AccessControlEntryImpl.addIfNotPresent(javax.jcr.security.Privilege[])"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/security/acl/AccessControlEntryImpl.java","line_number":103,"column_number":-1,"description":"Write to container `ace.privileges` via call to `addAll`"}],"key":"JcrRepositoryManager.java|backupRepository|THREAD_SAFETY_VIOLATION","hash":"5c91c12330634fa56d2a04843207007b","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAKMAAAAIAAAAOgAAACigsABnAP+SCUhzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3NlY3VyaXR5L2FjbC9BY2Nlc3NDb250cm9sRW50cnlJbXBsLmphdmGgsABnAP+SCUhzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3NlY3VyaXR5L2FjbC9BY2Nlc3NDb250cm9sRW50cnlJbXBsLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Problems JcrRepositoryManager.backupRepository(File,BackupOptions)` indirectly mutates container `ace.privileges` via call to `addAll` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":75,"column":-1,"procedure":"org.modeshape.jcr.JcrRepositoryManager.backupRepository(java.io.File,org.modeshape.jcr.api.BackupOptions):org.modeshape.jcr.api.Problems","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrRepositoryManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRepositoryManager.java","line_number":75,"column_number":-1,"description":"<Write on unknown thread>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRepositoryManager.java","line_number":75,"column_number":-1,"description":"call to void JcrSession.checkPermission(Path,java.lang.String[])"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1514,"column_number":-1,"description":"call to void JcrSession.checkPermission(String,Path,java.lang.String[])"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1559,"column_number":-1,"description":"call to void JcrSession.checkPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1567,"column_number":-1,"description":"call to boolean JcrSession.hasPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1375,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPermission(Path,java.lang.String[])"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":322,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPrivileges(String,javax.jcr.security.Privilege[])"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":109,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.getApplicableACL(String)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":114,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.findAccessList(String,boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":289,"column_number":-1,"description":"call to boolean JcrAccessControlList.addAccessControlEntry(Principal,javax.jcr.security.Privilege[])"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/security/acl/JcrAccessControlList.java","line_number":113,"column_number":-1,"description":"call to boolean AccessControlEntryImpl.addIfNotPresent(javax.jcr.security.Privilege[])"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/security/acl/AccessControlEntryImpl.java","line_number":103,"column_number":-1,"description":"Write to container `ace.privileges` via call to `addAll`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRepositoryManager.java","line_number":60,"column_number":-1,"description":"<Write on background thread>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRepositoryManager.java","line_number":60,"column_number":-1,"description":"call to JcrRepositoryMonitor.<init>(JcrSession)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrRepositoryMonitor.java","line_number":39,"column_number":-1,"description":"call to boolean JcrSession.hasPermission(String,String)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1593,"column_number":-1,"description":"call to boolean JcrSession.hasPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1375,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPermission(Path,java.lang.String[])"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":322,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPrivileges(String,javax.jcr.security.Privilege[])"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":109,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.getApplicableACL(String)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":114,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.findAccessList(String,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":289,"column_number":-1,"description":"call to boolean JcrAccessControlList.addAccessControlEntry(Principal,javax.jcr.security.Privilege[])"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/security/acl/JcrAccessControlList.java","line_number":113,"column_number":-1,"description":"call to boolean AccessControlEntryImpl.addIfNotPresent(javax.jcr.security.Privilege[])"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/security/acl/AccessControlEntryImpl.java","line_number":103,"column_number":-1,"description":"Write to container `ace.privileges` via call to `addAll`"}],"key":"JcrRepositoryManager.java|backupRepository|THREAD_SAFETY_VIOLATION","hash":"b79a52469b95cb66596413b39c347326","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAKMAAAAIAAAAOgAAACigsABnAP+SCUhzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3NlY3VyaXR5L2FjbC9BY2Nlc3NDb250cm9sRW50cnlJbXBsLmphdmGgsABnAP+SCUhzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3NlY3VyaXR5L2FjbC9BY2Nlc3NDb250cm9sRW50cnlJbXBsLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `BucketedChildReferences$Bucket BucketedChildReferences.bucketFor(Name)` indirectly reads without synchronization from container `this.rangeBucketsById` via call to `get`. Potentially races with write in method `BucketedChildReferences.getChildCount(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":269,"column":-1,"procedure":"org.modeshape.jcr.cache.document.BucketedChildReferences.bucketFor(org.modeshape.jcr.value.Name):org.modeshape.jcr.cache.document.BucketedChildReferences$Bucket","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":269,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":269,"column_number":-1,"description":"call to BucketedChildReferences$Bucket BucketedChildReferences.loadBucket(BucketId)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":273,"column_number":-1,"description":"Read of container `this.rangeBucketsById` via call to `get`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":88,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":88,"column_number":-1,"description":"call to BucketedChildReferences$Bucket BucketedChildReferences.bucketFor(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":269,"column_number":-1,"description":"call to BucketedChildReferences$Bucket BucketedChildReferences.loadBucket(BucketId)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":284,"column_number":-1,"description":"Write to container `this.rangeBucketsById` via call to `put`"}],"key":"BucketedChildReferences.java|bucketFor|THREAD_SAFETY_VIOLATION","hash":"9cf29f540645b1ac034569acc26da1e7","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAF8AAAAGAAAAJAAAABugsAEBEQD/kglLc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9CdWNrZXRlZENoaWxkUmVmZXJlbmNlcy5qYXZhoLABARwA/wQEQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `boolean NodeTypes$ReusableNodeDefinitionSet.appliesTo(NodeTypes,Name,Set)` of un-annotated interface `org.modeshape.jcr.NodeTypes$ReusableNodeDefinitionSet`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":284,"column":-1,"procedure":"org.modeshape.jcr.JcrNodeType.canAddChildNode(java.lang.String):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrNodeType.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":284,"column_number":-1,"description":"call to NodeTypes$NodeDefinitionSet NodeTypes.findChildNodeDefinitions(Name,Set)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":2375,"column_number":-1,"description":"Call to un-annotated interface method boolean NodeTypes$ReusableNodeDefinitionSet.appliesTo(NodeTypes,Name,Set)"}],"key":"JcrNodeType.java|canAddChildNode|INTERFACE_NOT_THREAD_SAFE","hash":"8df6f081e4158102cd3ac04182cc22b2","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAADkAAAAEAAAAFgAAABCgsAEJRwD/kgkuc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9Ob2RlVHlwZXMuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `boolean NodeTypes$ReusableNodeDefinitionSet.appliesTo(NodeTypes,Name,Set)` of un-annotated interface `org.modeshape.jcr.NodeTypes$ReusableNodeDefinitionSet`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":302,"column":-1,"procedure":"org.modeshape.jcr.JcrNodeType.canAddChildNode(java.lang.String,java.lang.String):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrNodeType.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":302,"column_number":-1,"description":"call to NodeTypes$NodeDefinitionSet NodeTypes.findChildNodeDefinitions(Name,Set)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":2375,"column_number":-1,"description":"Call to un-annotated interface method boolean NodeTypes$ReusableNodeDefinitionSet.appliesTo(NodeTypes,Name,Set)"}],"key":"JcrNodeType.java|canAddChildNode|INTERFACE_NOT_THREAD_SAFE","hash":"8df6f081e4158102cd3ac04182cc22b2","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAADkAAAAEAAAAFgAAABCgsAEJRwD/kgkuc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9Ob2RlVHlwZXMuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `boolean AbstractJcrNode.canAddMixin(String)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":2779,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.canAddMixin(java.lang.String):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2779,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|canAddMixin|THREAD_SAFETY_VIOLATION","hash":"3b8d0cc0a4a2c2f51db9063a63ee587a","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `boolean AbstractJcrNode.canAddMixin(String)` indirectly writes to field `type.key.sourceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":2746,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.canAddMixin(java.lang.String):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2746,"column_number":-1,"description":"call to JcrNodeType JcrNodeTypeManager.getNodeType(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrNodeTypeManager.java","line_number":131,"column_number":-1,"description":"call to JcrNodeType JcrNodeType.with(ExecutionContext,JcrSession)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":640,"column_number":-1,"description":"call to JcrNodeType.<init>(NodeKey,ExecutionContext,JcrSession,RepositoryNodeTypeManager,Name,List,Name,Collection,Collection,boolean,boolean,boolean,boolean)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":178,"column_number":-1,"description":"call to NodeKey NodeKey.withId(String)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":229,"column_number":-1,"description":"call to String NodeKey.getSourceKey()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":154,"column_number":-1,"description":"access to `type.key.sourceKey`"}],"key":"AbstractJcrNode.java|canAddMixin|THREAD_SAFETY_VIOLATION","hash":"f1a834b31cadeec5301736a593093724","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEAmgD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `boolean NodeTypes$ReusableNodeDefinitionSet.appliesTo(NodeTypes,Name,Set)` of un-annotated interface `org.modeshape.jcr.NodeTypes$ReusableNodeDefinitionSet`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":2749,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.canAddMixin(java.lang.String):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2749,"column_number":-1,"description":"call to boolean AbstractJcrNode.isCheckedOut()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3222,"column_number":-1,"description":"call to NodeDefinition AbstractJcrNode.getDefinition()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2835,"column_number":-1,"description":"call to NodeDefinition AbstractJcrNode.nodeDefinition()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2907,"column_number":-1,"description":"call to NodeTypes$NodeDefinitionSet NodeTypes.findChildNodeDefinitions(Name,Set)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":2375,"column_number":-1,"description":"Call to un-annotated interface method boolean NodeTypes$ReusableNodeDefinitionSet.appliesTo(NodeTypes,Name,Set)"}],"key":"AbstractJcrNode.java|canAddMixin|INTERFACE_NOT_THREAD_SAFE","hash":"dd22bf14c1ab083f7c88c3ba589aad74","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAADkAAAAEAAAAFgAAABCgsAEJRwD/kgkuc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9Ob2RlVHlwZXMuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `boolean AbstractJcrNode.canAddMixin(String)` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":2748,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.canAddMixin(java.lang.String):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2748,"column_number":-1,"description":"call to boolean AbstractJcrNode.isLockedByAnotherSession()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":643,"column_number":-1,"description":"call to void AbstractJcrNode.checkForLock()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":635,"column_number":-1,"description":"call to Lock AbstractJcrNode.getLockIfExists()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3322,"column_number":-1,"description":"call to Lock JcrLockManager.getLockIfExists(AbstractJcrNode)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrLockManager.java","line_number":178,"column_number":-1,"description":"call to Lock RepositoryLockManager$ModeShapeLock.lockFor(JcrSession)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","line_number":661,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"AbstractJcrNode.java|canAddMixin|THREAD_SAFETY_VIOLATION","hash":"8025fed0466ee0d69d4b5447a2774707","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `boolean AbstractJcrNode.canAddMixin(String)` indirectly writes to field `propDefn.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":2782,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.canAddMixin(java.lang.String):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2782,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.canCastToTypeAndSatisfyConstraints(javax.jcr.Value[],JcrSession)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":437,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.canCastToTypeAndSatisfyConstraints(Value,JcrSession)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":413,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(Value,JcrSession)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":262,"column_number":-1,"description":"access to `propDefn.checker`"}],"key":"AbstractJcrNode.java|canAddMixin|THREAD_SAFETY_VIOLATION","hash":"b1292e89928d29e31a51ee1df7df0bc6","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBBgD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `boolean JcrSystemNode.canAddMixin(String)` indirectly writes to field `type.key.sourceKey` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.canAddMixin(java.lang.String):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to boolean AbstractJcrNode.canAddMixin(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2746,"column_number":-1,"description":"call to JcrNodeType JcrNodeTypeManager.getNodeType(String)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrNodeTypeManager.java","line_number":131,"column_number":-1,"description":"call to JcrNodeType JcrNodeType.with(ExecutionContext,JcrSession)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":640,"column_number":-1,"description":"call to JcrNodeType.<init>(NodeKey,ExecutionContext,JcrSession,RepositoryNodeTypeManager,Name,List,Name,Collection,Collection,boolean,boolean,boolean,boolean)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":178,"column_number":-1,"description":"call to NodeKey NodeKey.withId(String)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":229,"column_number":-1,"description":"call to String NodeKey.getSourceKey()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":154,"column_number":-1,"description":"access to `type.key.sourceKey`"}],"key":"JcrSystemNode.java|canAddMixin|THREAD_SAFETY_VIOLATION","hash":"6ae648aa793e85663ac7d3c79a88b74a","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEAmgD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `boolean AbstractJcrNode.canAddNode(String,String)` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":3489,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.canAddNode(java.lang.String,java.lang.String):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3489,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,Path)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":659,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"AbstractJcrNode.java|canAddNode|THREAD_SAFETY_VIOLATION","hash":"f6f24fbfe88f7c6adf0ce4436aa9a475","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `boolean AbstractJcrNode.canAddNode(String,String)` indirectly writes to field `type.key.sourceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":3490,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.canAddNode(java.lang.String,java.lang.String):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3490,"column_number":-1,"description":"call to boolean AbstractJcrNode.canAddNode(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3507,"column_number":-1,"description":"call to JcrNodeType JcrNodeTypeManager.getNodeType(String)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrNodeTypeManager.java","line_number":131,"column_number":-1,"description":"call to JcrNodeType JcrNodeType.with(ExecutionContext,JcrSession)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":640,"column_number":-1,"description":"call to JcrNodeType.<init>(NodeKey,ExecutionContext,JcrSession,RepositoryNodeTypeManager,Name,List,Name,Collection,Collection,boolean,boolean,boolean,boolean)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":178,"column_number":-1,"description":"call to NodeKey NodeKey.withId(String)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":229,"column_number":-1,"description":"call to String NodeKey.getSourceKey()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":154,"column_number":-1,"description":"access to `type.key.sourceKey`"}],"key":"AbstractJcrNode.java|canAddNode|THREAD_SAFETY_VIOLATION","hash":"beeaa26b2031b8aaff45e06efeb9cb94","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEAmgD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `int Path$Segment.getIndex()` of un-annotated interface `org.modeshape.jcr.value.Path$Segment`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":3481,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.canAddNode(java.lang.String,java.lang.String):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3481,"column_number":-1,"description":"Call to un-annotated interface method int Path$Segment.getIndex()"}],"key":"AbstractJcrNode.java|canAddNode|INTERFACE_NOT_THREAD_SAFE","hash":"de85d103632b73335db7e411346bbc4e","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAENmQD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `boolean JcrNodeType.canCastToTypeAndMatchesConstraints(JcrSession,JcrPropertyDefinition,javax.jcr.Value[])` indirectly writes to field `propertyDefinition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":394,"column":-1,"procedure":"org.modeshape.jcr.JcrNodeType.canCastToTypeAndMatchesConstraints(org.modeshape.jcr.JcrSession,org.modeshape.jcr.JcrPropertyDefinition,javax.jcr.Value[]):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrNodeType.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":394,"column_number":-1,"description":"call to boolean JcrNodeType.canCastToTypeAndMatchesConstraints(JcrSession,JcrPropertyDefinition,Value)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":368,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(Value,JcrSession)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":262,"column_number":-1,"description":"access to `propertyDefinition.checker`"}],"key":"JcrNodeType.java|canCastToTypeAndMatchesConstraints|THREAD_SAFETY_VIOLATION","hash":"6fc80df1af0035567cb749ef1855fe33","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBBgD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `boolean JcrNodeType.canCastToTypeAndMatchesConstraints(JcrSession,JcrPropertyDefinition,Value)` indirectly writes to field `propertyDefinition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":368,"column":-1,"procedure":"org.modeshape.jcr.JcrNodeType.canCastToTypeAndMatchesConstraints(org.modeshape.jcr.JcrSession,org.modeshape.jcr.JcrPropertyDefinition,javax.jcr.Value):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrNodeType.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":368,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(Value,JcrSession)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":262,"column_number":-1,"description":"access to `propertyDefinition.checker`"}],"key":"JcrNodeType.java|canCastToTypeAndMatchesConstraints|THREAD_SAFETY_VIOLATION","hash":"8285b46c9d440c3e2e3cd5bfc4363d28","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBBgD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Collection Multimap.get(Object)` of un-annotated interface `org.modeshape.common.collection.Multimap`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":344,"column":-1,"procedure":"org.modeshape.jcr.JcrNodeType.canRemoveItem(java.lang.String):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrNodeType.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":344,"column_number":-1,"description":"call to boolean NodeTypes.canRemoveItem(Name,List,Name,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1699,"column_number":-1,"description":"call to Collection JcrNodeType.allPropertyDefinitions(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":247,"column_number":-1,"description":"call to Collection DefinitionCache.allPropertyDefinitions(Name)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/DefinitionCache.java","line_number":177,"column_number":-1,"description":"Call to un-annotated interface method Collection Multimap.get(Object)"}],"key":"JcrNodeType.java|canRemoveItem|INTERFACE_NOT_THREAD_SAFE","hash":"d9e64e79032fbe63aff755c15b626303","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEAsQD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9EZWZpbml0aW9uQ2FjaGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Collection Multimap.get(Object)` of un-annotated interface `org.modeshape.common.collection.Multimap`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":328,"column":-1,"procedure":"org.modeshape.jcr.JcrNodeType.canRemoveNode(java.lang.String):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrNodeType.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":328,"column_number":-1,"description":"call to boolean NodeTypes.canRemoveAllChildren(Name,Collection,Name,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1845,"column_number":-1,"description":"call to Collection JcrNodeType.allChildNodeDefinitions(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":265,"column_number":-1,"description":"call to Collection DefinitionCache.allChildNodeDefinitions(Name)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/DefinitionCache.java","line_number":197,"column_number":-1,"description":"Call to un-annotated interface method Collection Multimap.get(Object)"}],"key":"JcrNodeType.java|canRemoveNode|INTERFACE_NOT_THREAD_SAFE","hash":"2d65c0caa908f680ecdf92e68dae5342","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEAxQD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9EZWZpbml0aW9uQ2FjaGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Collection Multimap.get(Object)` of un-annotated interface `org.modeshape.common.collection.Multimap`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":440,"column":-1,"procedure":"org.modeshape.jcr.JcrNodeType.canRemoveProperty(java.lang.String):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrNodeType.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":440,"column_number":-1,"description":"call to boolean NodeTypes.canRemoveProperty(Name,List,Name,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1650,"column_number":-1,"description":"call to Collection JcrNodeType.allPropertyDefinitions(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":247,"column_number":-1,"description":"call to Collection DefinitionCache.allPropertyDefinitions(Name)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/DefinitionCache.java","line_number":177,"column_number":-1,"description":"Call to un-annotated interface method Collection Multimap.get(Object)"}],"key":"JcrNodeType.java|canRemoveProperty|INTERFACE_NOT_THREAD_SAFE","hash":"5b9620d4e4dd61811689da7b12608770","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEAsQD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9EZWZpbml0aW9uQ2FjaGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `boolean JcrNodeType.canSetProperty(String,javax.jcr.Value[])` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":408,"column":-1,"procedure":"org.modeshape.jcr.JcrNodeType.canSetProperty(java.lang.String,javax.jcr.Value[]):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrNodeType.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":408,"column_number":-1,"description":"call to boolean JcrNodeType.canSetProperty(JcrSession,String,javax.jcr.Value[])"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":431,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrNodeType.java|canSetProperty|THREAD_SAFETY_VIOLATION","hash":"4f2116dce38db929d102a39525a3d00f","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `boolean JcrNodeType.canSetProperty(String,Value)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":402,"column":-1,"procedure":"org.modeshape.jcr.JcrNodeType.canSetProperty(java.lang.String,javax.jcr.Value):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrNodeType.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":402,"column_number":-1,"description":"call to boolean JcrNodeType.canSetProperty(JcrSession,String,Value)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":418,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,Value,boolean,boolean)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":972,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,Value,boolean,boolean,boolean)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1065,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(Value,JcrSession)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":262,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrNodeType.java|canSetProperty|THREAD_SAFETY_VIOLATION","hash":"efdbd5c5d4abf6fd8e43a38262082d0c","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBBgD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Collection Multimap.get(Object)` of un-annotated interface `org.modeshape.common.collection.Multimap`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":426,"column":-1,"procedure":"org.modeshape.jcr.JcrNodeType.canSetProperty(org.modeshape.jcr.JcrSession,java.lang.String,javax.jcr.Value[]):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrNodeType.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":426,"column_number":-1,"description":"call to boolean JcrNodeType.canRemoveProperty(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":440,"column_number":-1,"description":"call to boolean NodeTypes.canRemoveProperty(Name,List,Name,boolean)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1650,"column_number":-1,"description":"call to Collection JcrNodeType.allPropertyDefinitions(Name)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":247,"column_number":-1,"description":"call to Collection DefinitionCache.allPropertyDefinitions(Name)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/DefinitionCache.java","line_number":177,"column_number":-1,"description":"Call to un-annotated interface method Collection Multimap.get(Object)"}],"key":"JcrNodeType.java|canSetProperty|INTERFACE_NOT_THREAD_SAFE","hash":"5839b90dda099a31a33d2067d4900757","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEAsQD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9EZWZpbml0aW9uQ2FjaGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `boolean JcrNodeType.canSetProperty(JcrSession,String,javax.jcr.Value[])` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":431,"column":-1,"procedure":"org.modeshape.jcr.JcrNodeType.canSetProperty(org.modeshape.jcr.JcrSession,java.lang.String,javax.jcr.Value[]):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrNodeType.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":431,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrNodeType.java|canSetProperty|THREAD_SAFETY_VIOLATION","hash":"01cb77c5fd6579603125f03536598b5a","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `boolean JcrNodeType.canSetProperty(JcrSession,String,Value)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":418,"column":-1,"procedure":"org.modeshape.jcr.JcrNodeType.canSetProperty(org.modeshape.jcr.JcrSession,java.lang.String,javax.jcr.Value):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrNodeType.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":418,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,Value,boolean,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":972,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,Value,boolean,boolean,boolean)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1065,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(Value,JcrSession)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":262,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrNodeType.java|canSetProperty|THREAD_SAFETY_VIOLATION","hash":"a0e6190a39615fbf03f4b7cc0ef5f65a","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBBgD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void AbstractJcrNode.cancelMerge(Version)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":2956,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.cancelMerge(javax.jcr.version.Version):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2956,"column_number":-1,"description":"call to void JcrVersionManager.cancelMerge(AbstractJcrNode,Version)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":971,"column_number":-1,"description":"call to void JcrVersionManager.removeVersionFromMergeFailedProperty(AbstractJcrNode,Version)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":983,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|cancelMerge|THREAD_SAFETY_VIOLATION","hash":"aff714a8c7e54cf877b3dddf1fee51ee","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void JcrSystemNode.cancelMerge(Version)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.cancelMerge(javax.jcr.version.Version):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to void AbstractJcrNode.cancelMerge(Version)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2956,"column_number":-1,"description":"call to void JcrVersionManager.cancelMerge(AbstractJcrNode,Version)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":971,"column_number":-1,"description":"call to void JcrVersionManager.removeVersionFromMergeFailedProperty(AbstractJcrNode,Version)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":983,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrSystemNode.java|cancelMerge|THREAD_SAFETY_VIOLATION","hash":"71bb8d70bc858f64e47eea42138feacf","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `RepositoryIndexManager$IndexChangeInfo RepositoryIndexManager.changeInfoForProvider(AtomicReference,Name)` reads without synchronization from container `byProviderName` via call to `get`. Potentially races with write in method `RepositoryIndexManager.changeInfoForProvider(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":727,"column":-1,"procedure":"org.modeshape.jcr.RepositoryIndexManager.changeInfoForProvider(java.util.concurrent.atomic.AtomicReference,org.modeshape.jcr.value.Name):org.modeshape.jcr.RepositoryIndexManager$IndexChangeInfo","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":727,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":727,"column_number":-1,"description":"Read of container `byProviderName` via call to `get`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":730,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":730,"column_number":-1,"description":"Write to container `byProviderName` via call to `put`"}],"key":"RepositoryIndexManager.java|changeInfoForProvider|THREAD_SAFETY_VIOLATION","hash":"8ce64dbb38eefacace10ccfb6ab616a7","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAE8AAAAGAAAAIAAAABmgsAEC1wD/kgk7c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9SZXBvc2l0b3J5SW5kZXhNYW5hZ2VyLmphdmGgsAEC2gD/BARA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `RepositoryIndexManager$IndexChangeInfo RepositoryIndexManager.changeInfoForProvider(AtomicReference,Name)` mutates container `byProviderName` via call to `put` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":730,"column":-1,"procedure":"org.modeshape.jcr.RepositoryIndexManager.changeInfoForProvider(java.util.concurrent.atomic.AtomicReference,org.modeshape.jcr.value.Name):org.modeshape.jcr.RepositoryIndexManager$IndexChangeInfo","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":730,"column_number":-1,"description":"Write to container `byProviderName` via call to `put`"}],"key":"RepositoryIndexManager.java|changeInfoForProvider|THREAD_SAFETY_VIOLATION","hash":"3a8fa2298c2348b8183ef82142f42370","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEYAAAAEAAAAGQAAABKgsAEC2gD/kgk7c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9SZXBvc2l0b3J5SW5kZXhNYW5hZ2VyLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `Set RecordingChanges.changedNodes()` reads without synchronization from `this.nodeKeys`. Potentially races with write in method `RecordingChanges.setChangedNodes(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":266,"column":-1,"procedure":"org.modeshape.jcr.cache.change.RecordingChanges.changedNodes():java.util.Set","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/change/RecordingChanges.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/change/RecordingChanges.java","line_number":266,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/change/RecordingChanges.java","line_number":266,"column_number":-1,"description":"access to `this.nodeKeys`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/change/RecordingChanges.java","line_number":291,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/change/RecordingChanges.java","line_number":291,"column_number":-1,"description":"access to `this.nodeKeys`"}],"key":"RecordingChanges.java|changedNodes|THREAD_SAFETY_VIOLATION","hash":"168e3d444ad6bb5c5500ad2ed4f640b4","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAJkAAAAIAAAANgAAACagsAEBCgD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9jaGFuZ2UvUmVjb3JkaW5nQ2hhbmdlcy5qYXZhoLABASMA/5IJQnNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvY2FjaGUvY2hhbmdlL1JlY29yZGluZ0NoYW5nZXMuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `Iterator ClusteredJournal.changedNodesSince(long)` indirectly reads without synchronization from `this.localJournal.records`. Potentially races with write in method `ClusteredJournal.start()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":159,"column":-1,"procedure":"org.modeshape.jcr.journal.ClusteredJournal.changedNodesSince(long):java.util.Iterator","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":159,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":159,"column_number":-1,"description":"call to Iterator LocalJournal.changedNodesSince(long)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","line_number":271,"column_number":-1,"description":"access to `this.localJournal.records`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":81,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":81,"column_number":-1,"description":"call to void LocalJournal.start()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","line_number":140,"column_number":-1,"description":"access to `this.localJournal.records`"}],"key":"ClusteredJournal.java|changedNodesSince|THREAD_SAFETY_VIOLATION","hash":"535ad6602aa7418de05d5a05a89ecca0","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAIcAAAAIAAAAMgAAACSgsAEBDwD/kgk5c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9qb3VybmFsL0xvY2FsSm91cm5hbC5qYXZhoLABAIwA/5IJOXNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3Ivam91cm5hbC9Mb2NhbEpvdXJuYWwuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `Iterator LocalJournal.changedNodesSince(long)` reads without synchronization from `this.searchTimeDelta`. Potentially races with write in method `LocalJournal.withSearchTimeDelta(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":270,"column":-1,"procedure":"org.modeshape.jcr.journal.LocalJournal.changedNodesSince(long):java.util.Iterator","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","line_number":270,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","line_number":270,"column_number":-1,"description":"access to `this.searchTimeDelta`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","line_number":324,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","line_number":324,"column_number":-1,"description":"access to `this.searchTimeDelta`"}],"key":"LocalJournal.java|changedNodesSince|THREAD_SAFETY_VIOLATION","hash":"490b62354046bba3ffd02f6aece3276d","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAIcAAAAIAAAAMgAAACSgsAEBDgD/kgk5c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9qb3VybmFsL0xvY2FsSm91cm5hbC5qYXZhoLABAUQA/5IJOXNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3Ivam91cm5hbC9Mb2NhbEpvdXJuYWwuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `Iterator LocalJournal.changedNodesSince(long)` reads without synchronization from `this.records`. Potentially races with write in method `LocalJournal.start()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":271,"column":-1,"procedure":"org.modeshape.jcr.journal.LocalJournal.changedNodesSince(long):java.util.Iterator","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","line_number":271,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","line_number":271,"column_number":-1,"description":"access to `this.records`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","line_number":140,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","line_number":140,"column_number":-1,"description":"access to `this.records`"}],"key":"LocalJournal.java|changedNodesSince|THREAD_SAFETY_VIOLATION","hash":"79beaf28d9b93685545bc43cb8f29cfc","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAIcAAAAIAAAAMgAAACSgsAEBDwD/kgk5c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9qb3VybmFsL0xvY2FsSm91cm5hbC5qYXZhoLABAIwA/5IJOXNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3Ivam91cm5hbC9Mb2NhbEpvdXJuYWwuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `boolean NodeTypes$ReusableNodeDefinitionSet.appliesTo(NodeTypes,Name,Set)` of un-annotated interface `org.modeshape.jcr.NodeTypes$ReusableNodeDefinitionSet`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":657,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.checkForCheckedOut():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":657,"column_number":-1,"description":"call to boolean AbstractJcrNode.isCheckedOut()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3222,"column_number":-1,"description":"call to NodeDefinition AbstractJcrNode.getDefinition()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2835,"column_number":-1,"description":"call to NodeDefinition AbstractJcrNode.nodeDefinition()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2907,"column_number":-1,"description":"call to NodeTypes$NodeDefinitionSet NodeTypes.findChildNodeDefinitions(Name,Set)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":2375,"column_number":-1,"description":"Call to un-annotated interface method boolean NodeTypes$ReusableNodeDefinitionSet.appliesTo(NodeTypes,Name,Set)"}],"key":"AbstractJcrNode.java|checkForCheckedOut|INTERFACE_NOT_THREAD_SAFE","hash":"5124fa9d081f326f10627de4a63204f9","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAADkAAAAEAAAAFgAAABCgsAEJRwD/kgkuc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9Ob2RlVHlwZXMuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String Lock.getLockToken()` of un-annotated interface `javax.jcr.lock.Lock`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":636,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.checkForLock():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":636,"column_number":-1,"description":"Call to un-annotated interface method String Lock.getLockToken()"}],"key":"AbstractJcrNode.java|checkForLock|INTERFACE_NOT_THREAD_SAFE","hash":"2faaf855a39468597f8da5a9416b049d","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAECfAD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void AbstractJcrNode.checkForLock()` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":635,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.checkForLock():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":635,"column_number":-1,"description":"call to Lock AbstractJcrNode.getLockIfExists()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3322,"column_number":-1,"description":"call to Lock JcrLockManager.getLockIfExists(AbstractJcrNode)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrLockManager.java","line_number":178,"column_number":-1,"description":"call to Lock RepositoryLockManager$ModeShapeLock.lockFor(JcrSession)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","line_number":661,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"AbstractJcrNode.java|checkForLock|THREAD_SAFETY_VIOLATION","hash":"d20611e460f351d102b2cbafd62d73a0","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Version AbstractJcrNode.checkin()` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":2938,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.checkin():javax.jcr.version.Version","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2938,"column_number":-1,"description":"call to JcrVersionNode JcrVersionManager.checkin(AbstractJcrNode)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":344,"column_number":-1,"description":"call to void JcrVersionManager.addVersionedPropertiesFor(AbstractJcrNode,boolean,List)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":499,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|checkin|THREAD_SAFETY_VIOLATION","hash":"7e19576eca30c28cca28b3593d7c20e2","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Version JcrSystemNode.checkin()` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.checkin():javax.jcr.version.Version","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to Version AbstractJcrNode.checkin()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2938,"column_number":-1,"description":"call to JcrVersionNode JcrVersionManager.checkin(AbstractJcrNode)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":344,"column_number":-1,"description":"call to void JcrVersionManager.addVersionedPropertiesFor(AbstractJcrNode,boolean,List)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":499,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrSystemNode.java|checkin|THREAD_SAFETY_VIOLATION","hash":"a2affca62fc686bab5470a75d4a09bd7","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void AbstractJcrNode.checkout()` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":2944,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.checkout():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2944,"column_number":-1,"description":"call to void JcrVersionManager.checkout(AbstractJcrNode)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":547,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|checkout|THREAD_SAFETY_VIOLATION","hash":"b6a555d235eebdc26af6dff1ca5cd1e8","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void JcrSystemNode.checkout()` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.checkout():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to void AbstractJcrNode.checkout()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2944,"column_number":-1,"description":"call to void JcrVersionManager.checkout(AbstractJcrNode)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":547,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrSystemNode.java|checkout|THREAD_SAFETY_VIOLATION","hash":"ca863d60381f034000ee130d6fe7b51e","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `ChildReferences CachedNode.getChildReferences(NodeCache)` of un-annotated interface `org.modeshape.jcr.cache.CachedNode`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":669,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.childCount():long","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":669,"column_number":-1,"description":"Call to un-annotated interface method ChildReferences CachedNode.getChildReferences(NodeCache)"}],"key":"AbstractJcrNode.java|childCount|INTERFACE_NOT_THREAD_SAFE","hash":"3fa9e7c889df4f8729b9f2d3f94b5828","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAECnQD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrNode AbstractJcrNode.childNode(Name,AbstractJcrNode$Type)` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":690,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.childNode(org.modeshape.jcr.value.Name,org.modeshape.jcr.AbstractJcrNode$Type):org.modeshape.jcr.AbstractJcrNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":690,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"AbstractJcrNode.java|childNode|THREAD_SAFETY_VIOLATION","hash":"22290e414233539a937e7f847e096e2d","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `ChildReference ChildReferences.getChild(Name)` of un-annotated interface `org.modeshape.jcr.cache.ChildReferences`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":685,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.childNode(org.modeshape.jcr.value.Name,org.modeshape.jcr.AbstractJcrNode$Type):org.modeshape.jcr.AbstractJcrNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":685,"column_number":-1,"description":"Call to un-annotated interface method ChildReference ChildReferences.getChild(Name)"}],"key":"AbstractJcrNode.java|childNode|INTERFACE_NOT_THREAD_SAFE","hash":"63ac13e148a7aeab79c5aa3540eed92c","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAECrQD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrNode AbstractJcrNode.childNode(Path$Segment,AbstractJcrNode$Type)` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":711,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.childNode(org.modeshape.jcr.value.Path$Segment,org.modeshape.jcr.AbstractJcrNode$Type):org.modeshape.jcr.AbstractJcrNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":711,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"AbstractJcrNode.java|childNode|THREAD_SAFETY_VIOLATION","hash":"9c1834574521e13e104e6609a28a5c17","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `ChildReference ChildReferences.getChild(Path$Segment)` of un-annotated interface `org.modeshape.jcr.cache.ChildReferences`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":706,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.childNode(org.modeshape.jcr.value.Path$Segment,org.modeshape.jcr.AbstractJcrNode$Type):org.modeshape.jcr.AbstractJcrNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":706,"column_number":-1,"description":"Call to un-annotated interface method ChildReference ChildReferences.getChild(Path$Segment)"}],"key":"AbstractJcrNode.java|childNode|INTERFACE_NOT_THREAD_SAFE","hash":"1b4d10a76f802c60ed6b30690e5aa6dd","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAECwgD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Collection Multimap.get(Object)` of un-annotated interface `org.modeshape.common.collection.Multimap`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":270,"column":-1,"procedure":"org.modeshape.jcr.JcrNodeType.childNodeDefinition(org.modeshape.jcr.NodeDefinitionId):org.modeshape.jcr.JcrNodeDefinition","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrNodeType.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":270,"column_number":-1,"description":"call to Collection JcrNodeType.allChildNodeDefinitions(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":265,"column_number":-1,"description":"call to Collection DefinitionCache.allChildNodeDefinitions(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/DefinitionCache.java","line_number":197,"column_number":-1,"description":"Call to un-annotated interface method Collection Multimap.get(Object)"}],"key":"JcrNodeType.java|childNodeDefinition|INTERFACE_NOT_THREAD_SAFE","hash":"fcc86769b16dd990e524a63ba176aa30","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEAxQD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9EZWZpbml0aW9uQ2FjaGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `void SessionCache.destroy(NodeKey)` of un-annotated interface `org.modeshape.jcr.cache.SessionCache`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":67,"column":-1,"procedure":"org.modeshape.jcr.JcrLockManager.cleanLocks():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrLockManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrLockManager.java","line_number":67,"column_number":-1,"description":"call to Set RepositoryLockManager.cleanLocks(JcrSession)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","line_number":479,"column_number":-1,"description":"call to void RepositoryLockManager.unlock(JcrSession,Iterable)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","line_number":441,"column_number":-1,"description":"call to void SystemContent.removeLock(RepositoryLockManager$ModeShapeLock)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/SystemContent.java","line_number":1103,"column_number":-1,"description":"Call to un-annotated interface method void SessionCache.destroy(NodeKey)"}],"key":"JcrLockManager.java|cleanLocks|INTERFACE_NOT_THREAD_SAFE","hash":"e9bfbf313ae04327ef318141b69fae27","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEETwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9TeXN0ZW1Db250ZW50LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `void SessionCache.destroy(NodeKey)` of un-annotated interface `org.modeshape.jcr.cache.SessionCache`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":479,"column":-1,"procedure":"org.modeshape.jcr.RepositoryLockManager.cleanLocks(org.modeshape.jcr.JcrSession):java.util.Set","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","line_number":479,"column_number":-1,"description":"call to void RepositoryLockManager.unlock(JcrSession,Iterable)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","line_number":441,"column_number":-1,"description":"call to void SystemContent.removeLock(RepositoryLockManager$ModeShapeLock)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/SystemContent.java","line_number":1103,"column_number":-1,"description":"Call to un-annotated interface method void SessionCache.destroy(NodeKey)"}],"key":"RepositoryLockManager.java|cleanLocks|INTERFACE_NOT_THREAD_SAFE","hash":"77bf801b7bb8a94063858ae32b0938aa","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEETwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9TeXN0ZW1Db250ZW50LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void JcrRepository$RunningState.cleanUpLocks()` indirectly mutates container `lockedNodes` via call to `add` outside of synchronization.\n Reporting because this access may occur on a background thread.","severity":"WARNING","line":1841,"column":-1,"procedure":"org.modeshape.jcr.JcrRepository$RunningState.cleanUpLocks():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrRepository.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1841,"column_number":-1,"description":"call to void RepositoryLockManager.cleanupLocks(Set)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","line_number":207,"column_number":-1,"description":"Write to container `lockedNodes` via call to `add`"}],"key":"JcrRepository.java|cleanUpLocks|THREAD_SAFETY_VIOLATION","hash":"a821310645693e20088876b3dfb9b622","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEAzwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9SZXBvc2l0b3J5TG9ja01hbmFnZXIuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `void SessionCache.destroy(NodeKey)` of un-annotated interface `org.modeshape.jcr.cache.SessionCache`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":200,"column":-1,"procedure":"org.modeshape.jcr.RepositoryLockManager.cleanupLocks(java.util.Set):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","line_number":200,"column_number":-1,"description":"call to void SystemContent.removeLock(RepositoryLockManager$ModeShapeLock)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/SystemContent.java","line_number":1103,"column_number":-1,"description":"Call to un-annotated interface method void SessionCache.destroy(NodeKey)"}],"key":"RepositoryLockManager.java|cleanupLocks|INTERFACE_NOT_THREAD_SAFE","hash":"0e1dc76370705e0d6631174f05ca9472","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEETwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9TeXN0ZW1Db250ZW50LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void RepositoryLockManager.cleanupLocks(Set)` mutates container `lockedNodes` via call to `add` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":207,"column":-1,"procedure":"org.modeshape.jcr.RepositoryLockManager.cleanupLocks(java.util.Set):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","line_number":207,"column_number":-1,"description":"Write to container `lockedNodes` via call to `add`"}],"key":"RepositoryLockManager.java|cleanupLocks|THREAD_SAFETY_VIOLATION","hash":"cb86eb672fc73151cd96ca0db809f14e","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEAzwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9SZXBvc2l0b3J5TG9ja01hbmFnZXIuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void WritableSessionCache.clearState()` writes to field `this.changedNodes` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":573,"column":-1,"procedure":"org.modeshape.jcr.cache.document.WritableSessionCache.clearState():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":573,"column_number":-1,"description":"access to `this.changedNodes`"}],"key":"WritableSessionCache.java|clearState|THREAD_SAFETY_VIOLATION","hash":"c7ecb0701d37756c292a6d34913ae36a","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFMAAAAEAAAAHQAAABSgsAECPQD/kglIc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xcml0YWJsZVNlc3Npb25DYWNoZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void WritableSessionCache.clearState()` mutates container `this.referrerChangesForRemovedNodes` via call to `clear` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":574,"column":-1,"procedure":"org.modeshape.jcr.cache.document.WritableSessionCache.clearState():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":574,"column_number":-1,"description":"Write to container `this.referrerChangesForRemovedNodes` via call to `clear`"}],"key":"WritableSessionCache.java|clearState|THREAD_SAFETY_VIOLATION","hash":"660fd0df73686298d3035e69f9c52415","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFMAAAAEAAAAHQAAABSgsAECPgD/kglIc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xcml0YWJsZVNlc3Npb25DYWNoZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `int Transaction.getStatus()` of un-annotated interface `javax.transaction.Transaction`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":578,"column":-1,"procedure":"org.modeshape.jcr.cache.document.WritableSessionCache.clearState():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":578,"column_number":-1,"description":"call to void AbstractSessionCache.checkForTransaction()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/AbstractSessionCache.java","line_number":110,"column_number":-1,"description":"Call to un-annotated interface method int Transaction.getStatus()"}],"key":"WritableSessionCache.java|clearState|INTERFACE_NOT_THREAD_SAFE","hash":"e585eeda04441b8c6854e7ec5d0790cc","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAFIAAAAEAAAAHQAAABSgsABuAP+SCUhzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL2NhY2hlL2RvY3VtZW50L0Fic3RyYWN0U2Vzc2lvbkNhY2hlLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void WritableSessionCache.clearState()` writes to field `this.replacedNodes` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":577,"column":-1,"procedure":"org.modeshape.jcr.cache.document.WritableSessionCache.clearState():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":577,"column_number":-1,"description":"access to `this.replacedNodes`"}],"key":"WritableSessionCache.java|clearState|THREAD_SAFETY_VIOLATION","hash":"7b1d12c52138bd373991b25143bf8b7f","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFMAAAAEAAAAHQAAABSgsAECQQD/kglIc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xcml0YWJsZVNlc3Npb25DYWNoZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void WritableSessionCache.clearState(Iterable)` reads without synchronization from `this.replacedNodes`. Potentially races with write in method `WritableSessionCache.save()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":586,"column":-1,"procedure":"org.modeshape.jcr.cache.document.WritableSessionCache.clearState(java.lang.Iterable):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":586,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":586,"column_number":-1,"description":"access to `this.replacedNodes`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":432,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":432,"column_number":-1,"description":"call to void WritableSessionCache.save(SessionCache$PreSave)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":489,"column_number":-1,"description":"call to void WritableSessionCache.clearState()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":577,"column_number":-1,"description":"access to `this.replacedNodes`"}],"key":"WritableSessionCache.java|clearState|THREAD_SAFETY_VIOLATION","hash":"03f03d1e396388a064ffabeb09ceb9ea","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAKUAAAAIAAAAOgAAACigsAECSgD/kglIc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xcml0YWJsZVNlc3Npb25DYWNoZS5qYXZhoLABAkEA/5IJSHNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvY2FjaGUvZG9jdW1lbnQvV3JpdGFibGVTZXNzaW9uQ2FjaGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void WritableSessionCache.clearState(Iterable)` reads without synchronization from `this.changedNodes`. Potentially races with write in method `WritableSessionCache.save()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":584,"column":-1,"procedure":"org.modeshape.jcr.cache.document.WritableSessionCache.clearState(java.lang.Iterable):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":584,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":584,"column_number":-1,"description":"access to `this.changedNodes`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":432,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":432,"column_number":-1,"description":"call to void WritableSessionCache.save(SessionCache$PreSave)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":489,"column_number":-1,"description":"call to void WritableSessionCache.clearState()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":573,"column_number":-1,"description":"access to `this.changedNodes`"}],"key":"WritableSessionCache.java|clearState|THREAD_SAFETY_VIOLATION","hash":"c618d342433f58d72253a4a6b131a55d","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAKUAAAAIAAAAOgAAACigsAECSAD/kglIc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xcml0YWJsZVNlc3Npb25DYWNoZS5qYXZhoLABAj0A/5IJSHNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvY2FjaGUvZG9jdW1lbnQvV3JpdGFibGVTZXNzaW9uQ2FjaGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `int Transaction.getStatus()` of un-annotated interface `javax.transaction.Transaction`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":592,"column":-1,"procedure":"org.modeshape.jcr.cache.document.WritableSessionCache.clearState(java.lang.Iterable):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":592,"column_number":-1,"description":"call to void AbstractSessionCache.checkForTransaction()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/AbstractSessionCache.java","line_number":110,"column_number":-1,"description":"Call to un-annotated interface method int Transaction.getStatus()"}],"key":"WritableSessionCache.java|clearState|INTERFACE_NOT_THREAD_SAFE","hash":"9a36dbf02fb691720480cbb8d9777048","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAFIAAAAEAAAAHQAAABSgsABuAP+SCUhzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL2NhY2hlL2RvY3VtZW50L0Fic3RyYWN0U2Vzc2lvbkNhY2hlLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void WritableSessionCache.clearState(Iterable)` mutates container `this.referrerChangesForRemovedNodes` via call to `remove` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":589,"column":-1,"procedure":"org.modeshape.jcr.cache.document.WritableSessionCache.clearState(java.lang.Iterable):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":589,"column_number":-1,"description":"Write to container `this.referrerChangesForRemovedNodes` via call to `remove`"}],"key":"WritableSessionCache.java|clearState|THREAD_SAFETY_VIOLATION","hash":"c5ee32dbf35b6d12cb9e8e2d945c446f","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFMAAAAEAAAAHQAAABSgsAECTQD/kglIc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xcml0YWJsZVNlc3Npb25DYWNoZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void JcrWorkspace.clone(String,String,String,boolean)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":292,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.clone(java.lang.String,java.lang.String,java.lang.String,boolean):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":292,"column_number":-1,"description":"call to void JcrWorkspace.internalClone(String,String,String,boolean,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":482,"column_number":-1,"description":"call to void JcrWorkspace.deepClone(JcrSession,NodeKey,JcrSession,NodeKey)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":841,"column_number":-1,"description":"call to JcrVersionNode AbstractJcrNode.getBaseVersion()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3294,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrWorkspace.java|clone|THREAD_SAFETY_VIOLATION","hash":"c1590f3ffb354fde75cbea925829227d","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void SharedLockingInputStream.close()` writes to field `this.processLock` outside of synchronization.\n Reporting because this access may occur on a background thread.","severity":"WARNING","line":117,"column":-1,"procedure":"org.modeshape.jcr.value.binary.SharedLockingInputStream.close():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/SharedLockingInputStream.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/SharedLockingInputStream.java","line_number":117,"column_number":-1,"description":"access to `this.processLock`"}],"key":"SharedLockingInputStream.java|close|THREAD_SAFETY_VIOLATION","hash":"c7a229ce83e041dcf7b217e446f8362f","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFQAAAAEAAAAHQAAABSgsAB1AP+SCUpzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2JpbmFyeS9TaGFyZWRMb2NraW5nSW5wdXRTdHJlYW0uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void SharedLockingInputStream.close()` reads without synchronization from `this.fileLock`. Potentially races with write in method `SharedLockingInputStream.close()`.\n Reporting because this access may occur on a background thread.","severity":"WARNING","line":108,"column":-1,"procedure":"org.modeshape.jcr.value.binary.SharedLockingInputStream.close():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/SharedLockingInputStream.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/SharedLockingInputStream.java","line_number":108,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/SharedLockingInputStream.java","line_number":108,"column_number":-1,"description":"access to `this.fileLock`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/SharedLockingInputStream.java","line_number":112,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/SharedLockingInputStream.java","line_number":112,"column_number":-1,"description":"access to `this.fileLock`"}],"key":"SharedLockingInputStream.java|close|THREAD_SAFETY_VIOLATION","hash":"19aa68b63b27dad8f82131326dac1acb","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFwAAAAGAAAAJAAAABugsABsAP+SCUpzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2JpbmFyeS9TaGFyZWRMb2NraW5nSW5wdXRTdHJlYW0uamF2YaCwAHAA/wQEQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void SharedLockingInputStream.close()` reads without synchronization from `this.processLock`. Potentially races with write in method `SharedLockingInputStream.close()`.\n Reporting because this access may occur on a background thread.","severity":"WARNING","line":113,"column":-1,"procedure":"org.modeshape.jcr.value.binary.SharedLockingInputStream.close():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/SharedLockingInputStream.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/SharedLockingInputStream.java","line_number":113,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/SharedLockingInputStream.java","line_number":113,"column_number":-1,"description":"access to `this.processLock`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/SharedLockingInputStream.java","line_number":117,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/SharedLockingInputStream.java","line_number":117,"column_number":-1,"description":"access to `this.processLock`"}],"key":"SharedLockingInputStream.java|close|THREAD_SAFETY_VIOLATION","hash":"f5fbcec2d78b3451ae28bde1134f5600","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFwAAAAGAAAAJAAAABugsABxAP+SCUpzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2JpbmFyeS9TaGFyZWRMb2NraW5nSW5wdXRTdHJlYW0uamF2YaCwAHUA/wQEQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void SharedLockingInputStream.close()` writes to field `this.fileLock` outside of synchronization.\n Reporting because this access may occur on a background thread.","severity":"WARNING","line":112,"column":-1,"procedure":"org.modeshape.jcr.value.binary.SharedLockingInputStream.close():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/SharedLockingInputStream.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/SharedLockingInputStream.java","line_number":112,"column_number":-1,"description":"access to `this.fileLock`"}],"key":"SharedLockingInputStream.java|close|THREAD_SAFETY_VIOLATION","hash":"a9181c351e5152f9b7f81547fb431117","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFQAAAAEAAAAHQAAABSgsABwAP+SCUpzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2JpbmFyeS9TaGFyZWRMb2NraW5nSW5wdXRTdHJlYW0uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void SharedLockingInputStream.close()` reads without synchronization from `this.stream`. Potentially races with write in method `SharedLockingInputStream.close()`.\n Reporting because this access may occur on a background thread.","severity":"WARNING","line":102,"column":-1,"procedure":"org.modeshape.jcr.value.binary.SharedLockingInputStream.close():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/SharedLockingInputStream.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/SharedLockingInputStream.java","line_number":102,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/SharedLockingInputStream.java","line_number":102,"column_number":-1,"description":"access to `this.stream`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/SharedLockingInputStream.java","line_number":107,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/SharedLockingInputStream.java","line_number":107,"column_number":-1,"description":"access to `this.stream`"}],"key":"SharedLockingInputStream.java|close|THREAD_SAFETY_VIOLATION","hash":"26c45061472b3a0157a9986c6193dc03","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFwAAAAGAAAAJAAAABugsABmAP+SCUpzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2JpbmFyeS9TaGFyZWRMb2NraW5nSW5wdXRTdHJlYW0uamF2YaCwAGsA/wQEQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void SharedLockingInputStream.close()` writes to field `this.stream` outside of synchronization.\n Reporting because this access may occur on a background thread.","severity":"WARNING","line":107,"column":-1,"procedure":"org.modeshape.jcr.value.binary.SharedLockingInputStream.close():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/SharedLockingInputStream.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/SharedLockingInputStream.java","line_number":107,"column_number":-1,"description":"access to `this.stream`"}],"key":"SharedLockingInputStream.java|close|THREAD_SAFETY_VIOLATION","hash":"e5f0d93babefc9d5e8b7ac5db644a9f9","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFQAAAAEAAAAHQAAABSgsABrAP+SCUpzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2JpbmFyeS9TaGFyZWRMb2NraW5nSW5wdXRTdHJlYW0uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `String ClusteringService.clusterName()` reads without synchronization from `this.channel`. Potentially races with write in method `ClusteringService.restart()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":245,"column":-1,"procedure":"org.modeshape.jcr.clustering.ClusteringService.clusterName():java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","line_number":245,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","line_number":245,"column_number":-1,"description":"access to `this.channel`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","line_number":141,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","line_number":141,"column_number":-1,"description":"call to boolean ClusteringService.shutdown()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","line_number":177,"column_number":-1,"description":"access to `this.channel`"}],"key":"ClusteringService.java|clusterName|THREAD_SAFETY_VIOLATION","hash":"7cde69aca29c9e42c8f6d11d0e965354","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAJcAAAAIAAAANgAAACagsAEA9QD/kglBc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jbHVzdGVyaW5nL0NsdXN0ZXJpbmdTZXJ2aWNlLmphdmGgsAEAsQD/kglBc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jbHVzdGVyaW5nL0NsdXN0ZXJpbmdTZXJ2aWNlLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `QueryResults$Columns ScanningQueryEngine$ScanQueryContext.columnsFor(PlanNode)` reads without synchronization from container `this.columnsByPlanNode` via call to `get`. Potentially races with write in method `ScanningQueryEngine$ScanQueryContext.addColumnsFor(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":3070,"column":-1,"procedure":"org.modeshape.jcr.query.engine.ScanningQueryEngine$ScanQueryContext.columnsFor(org.modeshape.jcr.query.plan.PlanNode):org.modeshape.jcr.query.QueryResults$Columns","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/query/engine/ScanningQueryEngine.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/engine/ScanningQueryEngine.java","line_number":3070,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/engine/ScanningQueryEngine.java","line_number":3070,"column_number":-1,"description":"Read of container `this.columnsByPlanNode` via call to `get`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/engine/ScanningQueryEngine.java","line_number":3060,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/engine/ScanningQueryEngine.java","line_number":3060,"column_number":-1,"description":"Write to container `this.columnsByPlanNode` via call to `put`"}],"key":"ScanningQueryEngine.java|columnsFor|THREAD_SAFETY_VIOLATION","hash":"402b6be5933c2fb1bdc3fc53d3463a65","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAJ8AAAAIAAAAOAAAACagsAEL/gD/kglFc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9xdWVyeS9lbmdpbmUvU2Nhbm5pbmdRdWVyeUVuZ2luZS5qYXZhoLABC/QA/5IJRXNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvcXVlcnkvZW5naW5lL1NjYW5uaW5nUXVlcnlFbmdpbmUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String NodeType.getName()` of un-annotated interface `javax.jcr.nodetype.NodeType`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":695,"column":-1,"procedure":"org.modeshape.jcr.JcrNodeType.conflictsWith(javax.jcr.nodetype.NodeType,javax.jcr.nodetype.NodeType[]):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrNodeType.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":695,"column_number":-1,"description":"Call to un-annotated interface method String NodeType.getName()"}],"key":"JcrNodeType.java|conflictsWith|INTERFACE_NOT_THREAD_SAFE","hash":"b8c9d84df14885ebf5056eb64767b224","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAADsAAAAEAAAAFwAAABGgsAECtwD/kgkwc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JOb2RlVHlwZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String ChangeSet.getProcessKey()` of un-annotated interface `org.modeshape.jcr.cache.change.ChangeSet`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":37,"column":-1,"procedure":"org.modeshape.jcr.bus.ClusteredChangeBus.consume(java.io.Serializable):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/bus/ClusteredChangeBus.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/bus/ClusteredChangeBus.java","line_number":37,"column_number":-1,"description":"call to void ClusteredChangeBus.consume(ChangeSet)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/bus/ClusteredChangeBus.java","line_number":72,"column_number":-1,"description":"call to void ClusteredChangeBus.logReceivedOperation(ChangeSet)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/bus/ClusteredChangeBus.java","line_number":138,"column_number":-1,"description":"Call to un-annotated interface method String ChangeSet.getProcessKey()"}],"key":"ClusteredChangeBus.java|consume|INTERFACE_NOT_THREAD_SAFE","hash":"6c39c31d4f2f9679f1ff3699e2e50ad4","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEYAAAAEAAAAGQAAABKgsAEAigD/kgk7c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9idXMvQ2x1c3RlcmVkQ2hhbmdlQnVzLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void ClusteredJournal.consume(Serializable)` indirectly reads without synchronization from `this.localJournal.journalId`. Potentially races with write in method `ClusteredJournal.start()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":41,"column":-1,"procedure":"org.modeshape.jcr.journal.ClusteredJournal.consume(java.io.Serializable):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":41,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":41,"column_number":-1,"description":"call to void ClusteredJournal.consume(ClusteredJournal$DeltaMessage)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":183,"column_number":-1,"description":"call to void ClusteredJournal.processDeltaResponse(ClusteredJournal$DeltaMessage)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":224,"column_number":-1,"description":"call to String ClusteredJournal.journalId()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":169,"column_number":-1,"description":"call to String LocalJournal.journalId()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","line_number":320,"column_number":-1,"description":"access to `this.localJournal.journalId`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":81,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":81,"column_number":-1,"description":"call to void LocalJournal.start()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","line_number":146,"column_number":-1,"description":"access to `this.localJournal.journalId`"}],"key":"ClusteredJournal.java|consume|THREAD_SAFETY_VIOLATION","hash":"63af54ee7c76bf9dfcdf94a3d32b0c80","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAIcAAAAIAAAAMgAAACSgsAEBQAD/kgk5c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9qb3VybmFsL0xvY2FsSm91cm5hbC5qYXZhoLABAJIA/5IJOXNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3Ivam91cm5hbC9Mb2NhbEpvdXJuYWwuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String ChangeSet.getProcessKey()` of un-annotated interface `org.modeshape.jcr.cache.change.ChangeSet`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":72,"column":-1,"procedure":"org.modeshape.jcr.bus.ClusteredChangeBus.consume(org.modeshape.jcr.cache.change.ChangeSet):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/bus/ClusteredChangeBus.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/bus/ClusteredChangeBus.java","line_number":72,"column_number":-1,"description":"call to void ClusteredChangeBus.logReceivedOperation(ChangeSet)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/bus/ClusteredChangeBus.java","line_number":138,"column_number":-1,"description":"Call to un-annotated interface method String ChangeSet.getProcessKey()"}],"key":"ClusteredChangeBus.java|consume|INTERFACE_NOT_THREAD_SAFE","hash":"6c39c31d4f2f9679f1ff3699e2e50ad4","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEYAAAAEAAAAGQAAABKgsAEAigD/kgk7c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9idXMvQ2x1c3RlcmVkQ2hhbmdlQnVzLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void ClusteredJournal.consume(ClusteredJournal$DeltaMessage)` indirectly reads without synchronization from `this.localJournal.journalId`. Potentially races with write in method `ClusteredJournal.start()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":183,"column":-1,"procedure":"org.modeshape.jcr.journal.ClusteredJournal.consume(org.modeshape.jcr.journal.ClusteredJournal$DeltaMessage):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":183,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":183,"column_number":-1,"description":"call to void ClusteredJournal.processDeltaResponse(ClusteredJournal$DeltaMessage)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":224,"column_number":-1,"description":"call to String ClusteredJournal.journalId()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":169,"column_number":-1,"description":"call to String LocalJournal.journalId()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","line_number":320,"column_number":-1,"description":"access to `this.localJournal.journalId`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":81,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":81,"column_number":-1,"description":"call to void LocalJournal.start()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","line_number":146,"column_number":-1,"description":"access to `this.localJournal.journalId`"}],"key":"ClusteredJournal.java|consume|THREAD_SAFETY_VIOLATION","hash":"466f5e1e4ced075a623c823a8fab2520","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAIcAAAAIAAAAMgAAACSgsAEBQAD/kgk5c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9qb3VybmFsL0xvY2FsSm91cm5hbC5qYXZhoLABAJIA/5IJOXNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3Ivam91cm5hbC9Mb2NhbEpvdXJuYWwuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void ClusteredJournal.consume(ClusteredJournal$DeltaMessage)` indirectly reads without synchronization from `this.localJournal.records`. Potentially races with write in method `ClusteredJournal.start()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":185,"column":-1,"procedure":"org.modeshape.jcr.journal.ClusteredJournal.consume(org.modeshape.jcr.journal.ClusteredJournal$DeltaMessage):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":185,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":185,"column_number":-1,"description":"call to void ClusteredJournal.processDeltaRequest(ClusteredJournal$DeltaMessage)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":210,"column_number":-1,"description":"call to ChangeJournal$Records ClusteredJournal.recordsNewerThan(DateTime,boolean,boolean)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":154,"column_number":-1,"description":"call to ChangeJournal$Records LocalJournal.recordsNewerThan(DateTime,boolean,boolean)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","line_number":247,"column_number":-1,"description":"access to `this.localJournal.records`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":81,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":81,"column_number":-1,"description":"call to void LocalJournal.start()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","line_number":140,"column_number":-1,"description":"access to `this.localJournal.records`"}],"key":"ClusteredJournal.java|consume|THREAD_SAFETY_VIOLATION","hash":"dd78c016c3e0bc403ac49ab8e6eba794","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAIcAAAAIAAAAMgAAACSgsAEA9wD/kgk5c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9qb3VybmFsL0xvY2FsSm91cm5hbC5qYXZhoLABAIwA/5IJOXNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3Ivam91cm5hbC9Mb2NhbEpvdXJuYWwuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `int ChildReferences$SingleNameContext.consume(Name,NodeKey)` writes to field `this.index` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":475,"column":-1,"procedure":"org.modeshape.jcr.cache.ChildReferences$SingleNameContext.consume(org.modeshape.jcr.value.Name,org.modeshape.jcr.cache.NodeKey):int","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/ChildReferences.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/ChildReferences.java","line_number":475,"column_number":-1,"description":"access to `this.index`"}],"key":"ChildReferences.java|consume|THREAD_SAFETY_VIOLATION","hash":"de888d68cbfa28b166314ea398d32466","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEB2wD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9DaGlsZFJlZmVyZW5jZXMuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `int ChildReferences$Context.consume(Name,NodeKey)` of un-annotated interface `org.modeshape.jcr.cache.ChildReferences$Context`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":527,"column":-1,"procedure":"org.modeshape.jcr.cache.ChildReferences$WithChanges.consume(org.modeshape.jcr.value.Name,org.modeshape.jcr.cache.NodeKey):int","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/ChildReferences.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/ChildReferences.java","line_number":527,"column_number":-1,"description":"Call to un-annotated interface method int ChildReferences$Context.consume(Name,NodeKey)"}],"key":"ChildReferences.java|consume|INTERFACE_NOT_THREAD_SAFE","hash":"86f496090af91a37a9eb19e093e73236","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAECDwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9DaGlsZFJlZmVyZW5jZXMuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Set SessionCache.getChangedNodeKeys()` of un-annotated interface `org.modeshape.jcr.cache.SessionCache`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":3547,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.containsChangesWithExternalDependencies(java.util.concurrent.atomic.AtomicReference):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3547,"column_number":-1,"description":"Call to un-annotated interface method Set SessionCache.getChangedNodeKeys()"}],"key":"AbstractJcrNode.java|containsChangesWithExternalDependencies|INTERFACE_NOT_THREAD_SAFE","hash":"cc38b96227574e8751b0fad85e07ef32","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEN2wD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `boolean AbstractJcrNode.containsChangesWithExternalDependencies(AtomicReference)` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":3549,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.containsChangesWithExternalDependencies(java.util.concurrent.atomic.AtomicReference):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3549,"column_number":-1,"description":"call to void AbstractJcrNode.removeReferrerChanges(Set,Set)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3573,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"AbstractJcrNode.java|containsChangesWithExternalDependencies|THREAD_SAFETY_VIOLATION","hash":"636da96b38c05eb6d94f5354d0acadc8","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void JcrWorkspace.copy(String,String)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":121,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.copy(java.lang.String,java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":121,"column_number":-1,"description":"call to void JcrWorkspace.copy(String,String,String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":229,"column_number":-1,"description":"call to JcrVersionNode AbstractJcrNode.getBaseVersion()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3294,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrWorkspace.java|copy|THREAD_SAFETY_VIOLATION","hash":"b69357082665749c4b9e0f980a5f6db0","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `void MutableCachedNode.addInternalProperty(String,Object)` of un-annotated interface `org.modeshape.jcr.cache.MutableCachedNode`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":211,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.copy(java.lang.String,java.lang.String,java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":211,"column_number":-1,"description":"call to AbstractJcrNode AbstractJcrNode.addChildNode(Name,Name,NodeKey,boolean,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1195,"column_number":-1,"description":"Call to un-annotated interface method void MutableCachedNode.addInternalProperty(String,Object)"}],"key":"JcrWorkspace.java|copy|INTERFACE_NOT_THREAD_SAFE","hash":"5b9d9b92fb48449cdb05973b5cf353e0","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEEqwD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void JcrWorkspace.copy(String,String,String)` indirectly reads without synchronization from `nodeKey.workspaceKey`. Potentially races with write in method `JcrWorkspace.deleteWorkspace(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":171,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.copy(java.lang.String,java.lang.String,java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":171,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":171,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(Path)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":674,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.getNodeByIdentifier(String)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":778,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":165,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":867,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":867,"column_number":-1,"description":"call to void AbstractJcrNode.remove()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3445,"column_number":-1,"description":"call to void AbstractJcrNode.removeShare()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3149,"column_number":-1,"description":"call to void AbstractJcrNode.internalRemove(boolean)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3170,"column_number":-1,"description":"call to void AbstractJcrNode.checkForLock()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":635,"column_number":-1,"description":"call to Lock AbstractJcrNode.getLockIfExists()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3322,"column_number":-1,"description":"call to Lock JcrLockManager.getLockIfExists(AbstractJcrNode)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrLockManager.java","line_number":178,"column_number":-1,"description":"call to Lock RepositoryLockManager$ModeShapeLock.lockFor(JcrSession)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","line_number":661,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":11,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"JcrWorkspace.java|copy|THREAD_SAFETY_VIOLATION","hash":"8251064abd06a14ac8ea2081f04601fa","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAHkAAAAIAAAALgAAACKgsAEApQD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void JcrWorkspace.copy(String,String,String)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":229,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.copy(java.lang.String,java.lang.String,java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":229,"column_number":-1,"description":"call to JcrVersionNode AbstractJcrNode.getBaseVersion()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3294,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrWorkspace.java|copy|THREAD_SAFETY_VIOLATION","hash":"c47dd54ef6f36ec1832aa6e2355d601d","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void JcrWorkspace.copy(String,String,String)` indirectly mutates container `ace.privileges` via call to `addAll` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":133,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.copy(java.lang.String,java.lang.String,java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":133,"column_number":-1,"description":"call to void JcrWorkspace.validateCrossWorkspaceAction(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":533,"column_number":-1,"description":"call to void JcrSession.checkWorkspacePermission(String,java.lang.String[])"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1582,"column_number":-1,"description":"call to void JcrSession.checkPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1567,"column_number":-1,"description":"call to boolean JcrSession.hasPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1375,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPermission(Path,java.lang.String[])"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":322,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPrivileges(String,javax.jcr.security.Privilege[])"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":109,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.getApplicableACL(String)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":114,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.findAccessList(String,boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":289,"column_number":-1,"description":"call to boolean JcrAccessControlList.addAccessControlEntry(Principal,javax.jcr.security.Privilege[])"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/security/acl/JcrAccessControlList.java","line_number":113,"column_number":-1,"description":"call to boolean AccessControlEntryImpl.addIfNotPresent(javax.jcr.security.Privilege[])"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/security/acl/AccessControlEntryImpl.java","line_number":103,"column_number":-1,"description":"Write to container `ace.privileges` via call to `addAll`"}],"key":"JcrWorkspace.java|copy|THREAD_SAFETY_VIOLATION","hash":"f48a3fc547e5194cf81ecd4a30aaafc4","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFIAAAAEAAAAHQAAABSgsABnAP+SCUhzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3NlY3VyaXR5L2FjbC9BY2Nlc3NDb250cm9sRW50cnlJbXBsLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void JcrWorkspace.copy(String,String,String)` indirectly writes to field `parentKey.sourceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":201,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.copy(java.lang.String,java.lang.String,java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":201,"column_number":-1,"description":"call to void JcrWorkspace.validateCopyForExternalNode(AbstractJcrNode,AbstractJcrNode)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":257,"column_number":-1,"description":"call to String NodeKey.getSourceKey()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":154,"column_number":-1,"description":"access to `parentKey.sourceKey`"}],"key":"JcrWorkspace.java|copy|THREAD_SAFETY_VIOLATION","hash":"c092630aa73a88a21efadeccc2d1c45d","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEAmgD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void JcrWorkspace.copy(String,String,String)` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":193,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.copy(java.lang.String,java.lang.String,java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":193,"column_number":-1,"description":"call to Lock JcrLockManager.getLockIfExists(AbstractJcrNode)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrLockManager.java","line_number":178,"column_number":-1,"description":"call to Lock RepositoryLockManager$ModeShapeLock.lockFor(JcrSession)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","line_number":661,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"JcrWorkspace.java|copy|THREAD_SAFETY_VIOLATION","hash":"1652e4bfdfbe10ec7f93668d6d0877a1","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `SchematicEntry DocumentStore.get(String)` of un-annotated interface `org.modeshape.jcr.cache.document.DocumentStore`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":3048,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.correspondingNodePath(java.lang.String):org.modeshape.jcr.value.Path","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3048,"column_number":-1,"description":"call to Path JcrSession.getPathForCorrespondingNode(String,NodeKey,Path)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1870,"column_number":-1,"description":"call to CachedNode WorkspaceCache.getNode(NodeKey)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":243,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":207,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(String)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":188,"column_number":-1,"description":"Call to un-annotated interface method SchematicEntry DocumentStore.get(String)"}],"key":"AbstractJcrNode.java|correspondingNodePath|INTERFACE_NOT_THREAD_SAFE","hash":"c3f53d140694e24c1921443458d7b86c","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEAvAD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xb3Jrc3BhY2VDYWNoZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Path AbstractJcrNode.correspondingNodePath(String)` indirectly writes to field `key.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":3045,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.correspondingNodePath(java.lang.String):org.modeshape.jcr.value.Path","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3045,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `key.workspaceKey`"}],"key":"AbstractJcrNode.java|correspondingNodePath|THREAD_SAFETY_VIOLATION","hash":"95023b1cc6398371a667ae70bc1003b4","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Path AbstractJcrNode.correspondingNodePath(String)` indirectly writes to field `key.identifier` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":3047,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.correspondingNodePath(java.lang.String):org.modeshape.jcr.value.Path","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3047,"column_number":-1,"description":"call to String NodeKey.getIdentifier()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":180,"column_number":-1,"description":"access to `key.identifier`"}],"key":"AbstractJcrNode.java|correspondingNodePath|THREAD_SAFETY_VIOLATION","hash":"a39c9fbd00e8981a48e254b0424a9e21","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEAtAD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `java.lang.Object[] AbstractValueFactory.create(boolean[])` writes to field `result.[_]` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":144,"column":-1,"procedure":"org.modeshape.jcr.value.basic.AbstractValueFactory.create(boolean[]):java.lang.Object[]","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/AbstractValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/AbstractValueFactory.java","line_number":144,"column_number":-1,"description":"access to `result.[_]`"}],"key":"AbstractValueFactory.java|create|THREAD_SAFETY_VIOLATION","hash":"b026b7fad784b2d39d5dcc968db92341","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFAAAAAEAAAAHAAAABOgsAEAkAD/kglFc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iYXNpYy9BYnN0cmFjdFZhbHVlRmFjdG9yeS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String TextDecoder.decode(String)` of un-annotated interface `org.modeshape.common.text.TextDecoder`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":46,"column":-1,"procedure":"org.modeshape.jcr.value.basic.NameValueFactory.create(byte[]):java.lang.Object","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","line_number":46,"column_number":-1,"description":"call to Name NameValueFactory.create(byte[])"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","line_number":314,"column_number":-1,"description":"call to Name NameValueFactory.create(String)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","line_number":85,"column_number":-1,"description":"call to Name NameValueFactory.create(String,TextDecoder)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","line_number":121,"column_number":-1,"description":"Call to un-annotated interface method String TextDecoder.decode(String)"}],"key":"NameValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"48068db2d786e8a07a3e066ec803bcf2","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEsAAAAEAAAAGwAAABOgsAB5AP+SCUFzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2Jhc2ljL05hbWVWYWx1ZUZhY3RvcnkuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String TextDecoder.decode(String)` of un-annotated interface `org.modeshape.common.text.TextDecoder`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":314,"column":-1,"procedure":"org.modeshape.jcr.value.basic.NameValueFactory.create(byte[]):org.modeshape.jcr.value.Name","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","line_number":314,"column_number":-1,"description":"call to Name NameValueFactory.create(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","line_number":85,"column_number":-1,"description":"call to Name NameValueFactory.create(String,TextDecoder)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","line_number":121,"column_number":-1,"description":"Call to un-annotated interface method String TextDecoder.decode(String)"}],"key":"NameValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"48068db2d786e8a07a3e066ec803bcf2","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEsAAAAEAAAAGwAAABOgsAB5AP+SCUFzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2Jhc2ljL05hbWVWYWx1ZUZhY3RvcnkuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String Name.getLocalName()` of un-annotated interface `org.modeshape.jcr.value.Name`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":50,"column":-1,"procedure":"org.modeshape.jcr.value.basic.PathValueFactory.create(byte[]):java.lang.Object","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":50,"column_number":-1,"description":"call to Path PathValueFactory.create(byte[])"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":671,"column_number":-1,"description":"call to Path PathValueFactory.create(String)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":106,"column_number":-1,"description":"call to Path PathValueFactory.create(String,TextDecoder)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":168,"column_number":-1,"description":"call to Path$Segment PathValueFactory.createSegment(String,TextDecoder)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":613,"column_number":-1,"description":"call to BasicPathSegment.<init>(Name,int)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/value/basic/BasicPathSegment.java","line_number":59,"column_number":-1,"description":"call to boolean BasicPathSegment.isSelfReference()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/value/basic/BasicPathSegment.java","line_number":85,"column_number":-1,"description":"Call to un-annotated interface method String Name.getLocalName()"}],"key":"PathValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"9bc24e3e10eb037054bed528aa35eba3","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEsAAAAEAAAAGwAAABOgsABVAP+SCUFzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2Jhc2ljL0Jhc2ljUGF0aFNlZ21lbnQuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String Name.getLocalName()` of un-annotated interface `org.modeshape.jcr.value.Name`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":671,"column":-1,"procedure":"org.modeshape.jcr.value.basic.PathValueFactory.create(byte[]):org.modeshape.jcr.value.Path","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":671,"column_number":-1,"description":"call to Path PathValueFactory.create(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":106,"column_number":-1,"description":"call to Path PathValueFactory.create(String,TextDecoder)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":168,"column_number":-1,"description":"call to Path$Segment PathValueFactory.createSegment(String,TextDecoder)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":613,"column_number":-1,"description":"call to BasicPathSegment.<init>(Name,int)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/value/basic/BasicPathSegment.java","line_number":59,"column_number":-1,"description":"call to boolean BasicPathSegment.isSelfReference()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/value/basic/BasicPathSegment.java","line_number":85,"column_number":-1,"description":"Call to un-annotated interface method String Name.getLocalName()"}],"key":"PathValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"9bc24e3e10eb037054bed528aa35eba3","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEsAAAAEAAAAGwAAABOgsABVAP+SCUFzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2Jhc2ljL0Jhc2ljUGF0aFNlZ21lbnQuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `java.lang.Object[] AbstractValueFactory.create(byte[][])` writes to field `result.[_]` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":155,"column":-1,"procedure":"org.modeshape.jcr.value.basic.AbstractValueFactory.create(byte[][]):java.lang.Object[]","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/AbstractValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/AbstractValueFactory.java","line_number":155,"column_number":-1,"description":"access to `result.[_]`"}],"key":"AbstractValueFactory.java|create|THREAD_SAFETY_VIOLATION","hash":"93f8105a2f2a3d7f53493232086ed838","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFAAAAAEAAAAHAAAABOgsAEAmwD/kglFc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iYXNpYy9BYnN0cmFjdFZhbHVlRmFjdG9yeS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `java.lang.Object[] AbstractValueFactory.create(double[])` writes to field `result.[_]` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":199,"column":-1,"procedure":"org.modeshape.jcr.value.basic.AbstractValueFactory.create(double[]):java.lang.Object[]","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/AbstractValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/AbstractValueFactory.java","line_number":199,"column_number":-1,"description":"access to `result.[_]`"}],"key":"AbstractValueFactory.java|create|THREAD_SAFETY_VIOLATION","hash":"81d0dcbbdf70f5acbf579dca45116d40","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFAAAAAEAAAAHAAAABOgsAEAxwD/kglFc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iYXNpYy9BYnN0cmFjdFZhbHVlRmFjdG9yeS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `java.lang.Object[] AbstractValueFactory.create(float[])` writes to field `result.[_]` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":210,"column":-1,"procedure":"org.modeshape.jcr.value.basic.AbstractValueFactory.create(float[]):java.lang.Object[]","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/AbstractValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/AbstractValueFactory.java","line_number":210,"column_number":-1,"description":"access to `result.[_]`"}],"key":"AbstractValueFactory.java|create|THREAD_SAFETY_VIOLATION","hash":"361ba4bed284139782d5758aae7f6d1b","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFAAAAAEAAAAHAAAABOgsAEA0gD/kglFc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iYXNpYy9BYnN0cmFjdFZhbHVlRmFjdG9yeS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `java.lang.Object[] AbstractValueFactory.create(int[])` writes to field `result.[_]` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":221,"column":-1,"procedure":"org.modeshape.jcr.value.basic.AbstractValueFactory.create(int[]):java.lang.Object[]","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/AbstractValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/AbstractValueFactory.java","line_number":221,"column_number":-1,"description":"access to `result.[_]`"}],"key":"AbstractValueFactory.java|create|THREAD_SAFETY_VIOLATION","hash":"610d1139a17b5164e9586f1c8e7d25c3","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFAAAAAEAAAAHAAAABOgsAEA3QD/kglFc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iYXNpYy9BYnN0cmFjdFZhbHVlRmFjdG9yeS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `java.lang.Object[] AbstractValueFactory.create(java.lang.Object[])` writes to field `result.[_]` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":254,"column":-1,"procedure":"org.modeshape.jcr.value.basic.AbstractValueFactory.create(java.lang.Object[]):java.lang.Object[]","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/AbstractValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/AbstractValueFactory.java","line_number":254,"column_number":-1,"description":"access to `result.[_]`"}],"key":"AbstractValueFactory.java|create|THREAD_SAFETY_VIOLATION","hash":"dc96fe44e755dc7679112734427e70bb","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFAAAAAEAAAAHAAAABOgsAEA/gD/kglFc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iYXNpYy9BYnN0cmFjdFZhbHVlRmFjdG9yeS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `java.lang.Object[] AbstractValueFactory.create(java.lang.String[])` writes to field `result.[_]` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":299,"column":-1,"procedure":"org.modeshape.jcr.value.basic.AbstractValueFactory.create(java.lang.String[]):java.lang.Object[]","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/AbstractValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/AbstractValueFactory.java","line_number":299,"column_number":-1,"description":"access to `result.[_]`"}],"key":"AbstractValueFactory.java|create|THREAD_SAFETY_VIOLATION","hash":"db4b5e06b1c6c4214dbc9d155f8f9775","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFAAAAAEAAAAHAAAABOgsAEBKwD/kglFc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iYXNpYy9BYnN0cmFjdFZhbHVlRmFjdG9yeS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `java.lang.Object[] AbstractValueFactory.create(java.lang.String[],TextDecoder)` writes to field `result.[_]` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":288,"column":-1,"procedure":"org.modeshape.jcr.value.basic.AbstractValueFactory.create(java.lang.String[],org.modeshape.common.text.TextDecoder):java.lang.Object[]","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/AbstractValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/AbstractValueFactory.java","line_number":288,"column_number":-1,"description":"access to `result.[_]`"}],"key":"AbstractValueFactory.java|create|THREAD_SAFETY_VIOLATION","hash":"4c26458de4f0062f77e648afed4afdde","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFAAAAAEAAAAHAAAABOgsAEBIAD/kglFc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iYXNpYy9BYnN0cmFjdFZhbHVlRmFjdG9yeS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `java.lang.Object[] AbstractValueFactory.create(java.math.BigDecimal[])` writes to field `result.[_]` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":133,"column":-1,"procedure":"org.modeshape.jcr.value.basic.AbstractValueFactory.create(java.math.BigDecimal[]):java.lang.Object[]","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/AbstractValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/AbstractValueFactory.java","line_number":133,"column_number":-1,"description":"access to `result.[_]`"}],"key":"AbstractValueFactory.java|create|THREAD_SAFETY_VIOLATION","hash":"38f08fdedc70d6700a2addc144dd4f27","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFAAAAAEAAAAHAAAABOgsAEAhQD/kglFc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iYXNpYy9BYnN0cmFjdFZhbHVlRmFjdG9yeS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `java.lang.Object[] AbstractValueFactory.create(java.net.URI[])` writes to field `result.[_]` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":310,"column":-1,"procedure":"org.modeshape.jcr.value.basic.AbstractValueFactory.create(java.net.URI[]):java.lang.Object[]","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/AbstractValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/AbstractValueFactory.java","line_number":310,"column_number":-1,"description":"access to `result.[_]`"}],"key":"AbstractValueFactory.java|create|THREAD_SAFETY_VIOLATION","hash":"e109f51d529736f3abbda1dca0391577","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFAAAAAEAAAAHAAAABOgsAEBNgD/kglFc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iYXNpYy9BYnN0cmFjdFZhbHVlRmFjdG9yeS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `java.lang.Object[] AbstractValueFactory.create(java.util.Calendar[])` writes to field `result.[_]` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":166,"column":-1,"procedure":"org.modeshape.jcr.value.basic.AbstractValueFactory.create(java.util.Calendar[]):java.lang.Object[]","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/AbstractValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/AbstractValueFactory.java","line_number":166,"column_number":-1,"description":"access to `result.[_]`"}],"key":"AbstractValueFactory.java|create|THREAD_SAFETY_VIOLATION","hash":"7183d477f9b0c899024c158c0974be81","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFAAAAAEAAAAHAAAABOgsAEApgD/kglFc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iYXNpYy9BYnN0cmFjdFZhbHVlRmFjdG9yeS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `java.lang.Object[] AbstractValueFactory.create(java.util.Date[])` writes to field `result.[_]` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":177,"column":-1,"procedure":"org.modeshape.jcr.value.basic.AbstractValueFactory.create(java.util.Date[]):java.lang.Object[]","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/AbstractValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/AbstractValueFactory.java","line_number":177,"column_number":-1,"description":"access to `result.[_]`"}],"key":"AbstractValueFactory.java|create|THREAD_SAFETY_VIOLATION","hash":"305d794b3e6568748115a39dce3953e7","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFAAAAAEAAAAHAAAABOgsAEAsQD/kglFc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iYXNpYy9BYnN0cmFjdFZhbHVlRmFjdG9yeS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `java.lang.Object[] AbstractValueFactory.create(java.util.UUID[])` writes to field `result.[_]` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":321,"column":-1,"procedure":"org.modeshape.jcr.value.basic.AbstractValueFactory.create(java.util.UUID[]):java.lang.Object[]","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/AbstractValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/AbstractValueFactory.java","line_number":321,"column_number":-1,"description":"access to `result.[_]`"}],"key":"AbstractValueFactory.java|create|THREAD_SAFETY_VIOLATION","hash":"9148163874738f4b0e7e040d0f334899","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFAAAAAEAAAAHAAAABOgsAEBQQD/kglFc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iYXNpYy9BYnN0cmFjdFZhbHVlRmFjdG9yeS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `java.lang.Object[] AbstractValueFactory.create(long[])` writes to field `result.[_]` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":232,"column":-1,"procedure":"org.modeshape.jcr.value.basic.AbstractValueFactory.create(long[]):java.lang.Object[]","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/AbstractValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/AbstractValueFactory.java","line_number":232,"column_number":-1,"description":"access to `result.[_]`"}],"key":"AbstractValueFactory.java|create|THREAD_SAFETY_VIOLATION","hash":"e15520d6a35f4700f439130dfcdbc486","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFAAAAAEAAAAHAAAABOgsAEA6AD/kglFc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iYXNpYy9BYnN0cmFjdFZhbHVlRmFjdG9yeS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `java.lang.Object[] AbstractValueFactory.create(org.modeshape.jcr.api.value.DateTime[])` writes to field `result.[_]` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":188,"column":-1,"procedure":"org.modeshape.jcr.value.basic.AbstractValueFactory.create(org.modeshape.jcr.api.value.DateTime[]):java.lang.Object[]","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/AbstractValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/AbstractValueFactory.java","line_number":188,"column_number":-1,"description":"access to `result.[_]`"}],"key":"AbstractValueFactory.java|create|THREAD_SAFETY_VIOLATION","hash":"b37902436a6229bcdbef5ad6be7b37b6","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFAAAAAEAAAAHAAAABOgsAEAvAD/kglFc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iYXNpYy9BYnN0cmFjdFZhbHVlRmFjdG9yeS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `java.lang.Object[] AbstractValueFactory.create(org.modeshape.jcr.cache.NodeKey[])` writes to field `result.[_]` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":332,"column":-1,"procedure":"org.modeshape.jcr.value.basic.AbstractValueFactory.create(org.modeshape.jcr.cache.NodeKey[]):java.lang.Object[]","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/AbstractValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/AbstractValueFactory.java","line_number":332,"column_number":-1,"description":"access to `result.[_]`"}],"key":"AbstractValueFactory.java|create|THREAD_SAFETY_VIOLATION","hash":"bbf3a11ce94158950dc7e0007542a313","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFAAAAAEAAAAHAAAABOgsAEBTAD/kglFc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iYXNpYy9BYnN0cmFjdFZhbHVlRmFjdG9yeS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `java.lang.Object[] AbstractValueFactory.create(org.modeshape.jcr.value.BinaryValue[])` writes to field `result.[_]` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":343,"column":-1,"procedure":"org.modeshape.jcr.value.basic.AbstractValueFactory.create(org.modeshape.jcr.value.BinaryValue[]):java.lang.Object[]","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/AbstractValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/AbstractValueFactory.java","line_number":343,"column_number":-1,"description":"access to `result.[_]`"}],"key":"AbstractValueFactory.java|create|THREAD_SAFETY_VIOLATION","hash":"fb3d2dcf0cc637e5e100bd59f224c668","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFAAAAAEAAAAHAAAABOgsAEBVwD/kglFc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iYXNpYy9BYnN0cmFjdFZhbHVlRmFjdG9yeS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `java.lang.Object[] AbstractValueFactory.create(org.modeshape.jcr.value.Name[])` writes to field `result.[_]` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":243,"column":-1,"procedure":"org.modeshape.jcr.value.basic.AbstractValueFactory.create(org.modeshape.jcr.value.Name[]):java.lang.Object[]","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/AbstractValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/AbstractValueFactory.java","line_number":243,"column_number":-1,"description":"access to `result.[_]`"}],"key":"AbstractValueFactory.java|create|THREAD_SAFETY_VIOLATION","hash":"bc69325ae4493333fcb0c63f03539e74","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFAAAAAEAAAAHAAAABOgsAEA8wD/kglFc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iYXNpYy9BYnN0cmFjdFZhbHVlRmFjdG9yeS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `java.lang.Object[] AbstractValueFactory.create(org.modeshape.jcr.value.Path[])` writes to field `result.[_]` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":265,"column":-1,"procedure":"org.modeshape.jcr.value.basic.AbstractValueFactory.create(org.modeshape.jcr.value.Path[]):java.lang.Object[]","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/AbstractValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/AbstractValueFactory.java","line_number":265,"column_number":-1,"description":"access to `result.[_]`"}],"key":"AbstractValueFactory.java|create|THREAD_SAFETY_VIOLATION","hash":"1427379460b1f1597c9a4556cdd3ec24","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFAAAAAEAAAAHAAAABOgsAEBCQD/kglFc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iYXNpYy9BYnN0cmFjdFZhbHVlRmFjdG9yeS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `java.lang.Object[] AbstractValueFactory.create(org.modeshape.jcr.value.Reference[])` writes to field `result.[_]` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":276,"column":-1,"procedure":"org.modeshape.jcr.value.basic.AbstractValueFactory.create(org.modeshape.jcr.value.Reference[]):java.lang.Object[]","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/AbstractValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/AbstractValueFactory.java","line_number":276,"column_number":-1,"description":"access to `result.[_]`"}],"key":"AbstractValueFactory.java|create|THREAD_SAFETY_VIOLATION","hash":"8c83fb5a40f1871a618643cd3c541791","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFAAAAAEAAAAHAAAABOgsAEBFAD/kglFc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iYXNpYy9BYnN0cmFjdFZhbHVlRmFjdG9yeS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String TextDecoder.decode(String)` of un-annotated interface `org.modeshape.common.text.TextDecoder`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":46,"column":-1,"procedure":"org.modeshape.jcr.value.basic.NameValueFactory.create(java.io.InputStream):java.lang.Object","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","line_number":46,"column_number":-1,"description":"call to Name NameValueFactory.create(InputStream)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","line_number":326,"column_number":-1,"description":"call to Name NameValueFactory.create(String)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","line_number":85,"column_number":-1,"description":"call to Name NameValueFactory.create(String,TextDecoder)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","line_number":121,"column_number":-1,"description":"Call to un-annotated interface method String TextDecoder.decode(String)"}],"key":"NameValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"48068db2d786e8a07a3e066ec803bcf2","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEsAAAAEAAAAGwAAABOgsAB5AP+SCUFzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2Jhc2ljL05hbWVWYWx1ZUZhY3RvcnkuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String TextDecoder.decode(String)` of un-annotated interface `org.modeshape.common.text.TextDecoder`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":326,"column":-1,"procedure":"org.modeshape.jcr.value.basic.NameValueFactory.create(java.io.InputStream):org.modeshape.jcr.value.Name","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","line_number":326,"column_number":-1,"description":"call to Name NameValueFactory.create(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","line_number":85,"column_number":-1,"description":"call to Name NameValueFactory.create(String,TextDecoder)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","line_number":121,"column_number":-1,"description":"Call to un-annotated interface method String TextDecoder.decode(String)"}],"key":"NameValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"48068db2d786e8a07a3e066ec803bcf2","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEsAAAAEAAAAGwAAABOgsAB5AP+SCUFzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2Jhc2ljL05hbWVWYWx1ZUZhY3RvcnkuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String Name.getLocalName()` of un-annotated interface `org.modeshape.jcr.value.Name`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":50,"column":-1,"procedure":"org.modeshape.jcr.value.basic.PathValueFactory.create(java.io.InputStream):java.lang.Object","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":50,"column_number":-1,"description":"call to Path PathValueFactory.create(InputStream)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":683,"column_number":-1,"description":"call to Path PathValueFactory.create(String)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":106,"column_number":-1,"description":"call to Path PathValueFactory.create(String,TextDecoder)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":168,"column_number":-1,"description":"call to Path$Segment PathValueFactory.createSegment(String,TextDecoder)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":613,"column_number":-1,"description":"call to BasicPathSegment.<init>(Name,int)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/value/basic/BasicPathSegment.java","line_number":59,"column_number":-1,"description":"call to boolean BasicPathSegment.isSelfReference()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/value/basic/BasicPathSegment.java","line_number":85,"column_number":-1,"description":"Call to un-annotated interface method String Name.getLocalName()"}],"key":"PathValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"9bc24e3e10eb037054bed528aa35eba3","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEsAAAAEAAAAGwAAABOgsABVAP+SCUFzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2Jhc2ljL0Jhc2ljUGF0aFNlZ21lbnQuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String Name.getLocalName()` of un-annotated interface `org.modeshape.jcr.value.Name`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":683,"column":-1,"procedure":"org.modeshape.jcr.value.basic.PathValueFactory.create(java.io.InputStream):org.modeshape.jcr.value.Path","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":683,"column_number":-1,"description":"call to Path PathValueFactory.create(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":106,"column_number":-1,"description":"call to Path PathValueFactory.create(String,TextDecoder)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":168,"column_number":-1,"description":"call to Path$Segment PathValueFactory.createSegment(String,TextDecoder)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":613,"column_number":-1,"description":"call to BasicPathSegment.<init>(Name,int)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/value/basic/BasicPathSegment.java","line_number":59,"column_number":-1,"description":"call to boolean BasicPathSegment.isSelfReference()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/value/basic/BasicPathSegment.java","line_number":85,"column_number":-1,"description":"Call to un-annotated interface method String Name.getLocalName()"}],"key":"PathValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"9bc24e3e10eb037054bed528aa35eba3","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEsAAAAEAAAAGwAAABOgsABVAP+SCUFzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2Jhc2ljL0Jhc2ljUGF0aFNlZ21lbnQuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `InputStream Binary.getStream()` of un-annotated interface `javax.jcr.Binary`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":117,"column":-1,"procedure":"org.modeshape.jcr.value.basic.AbstractValueFactory.create(java.lang.Object):java.lang.Object","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/AbstractValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/AbstractValueFactory.java","line_number":117,"column_number":-1,"description":"Call to un-annotated interface method InputStream Binary.getStream()"}],"key":"AbstractValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"6b4fd7ca2e1666c3c808ee4798de9152","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE8AAAAEAAAAHAAAABOgsAB1AP+SCUVzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2Jhc2ljL0Fic3RyYWN0VmFsdWVGYWN0b3J5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String TextDecoder.decode(String)` of un-annotated interface `org.modeshape.common.text.TextDecoder`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":46,"column":-1,"procedure":"org.modeshape.jcr.value.basic.NameValueFactory.create(java.lang.String):java.lang.Object","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","line_number":46,"column_number":-1,"description":"call to Name NameValueFactory.create(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","line_number":85,"column_number":-1,"description":"call to Name NameValueFactory.create(String,TextDecoder)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","line_number":121,"column_number":-1,"description":"Call to un-annotated interface method String TextDecoder.decode(String)"}],"key":"NameValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"48068db2d786e8a07a3e066ec803bcf2","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEsAAAAEAAAAGwAAABOgsAB5AP+SCUFzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2Jhc2ljL05hbWVWYWx1ZUZhY3RvcnkuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String TextDecoder.decode(String)` of un-annotated interface `org.modeshape.common.text.TextDecoder`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":85,"column":-1,"procedure":"org.modeshape.jcr.value.basic.NameValueFactory.create(java.lang.String):org.modeshape.jcr.value.Name","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","line_number":85,"column_number":-1,"description":"call to Name NameValueFactory.create(String,TextDecoder)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","line_number":121,"column_number":-1,"description":"Call to un-annotated interface method String TextDecoder.decode(String)"}],"key":"NameValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"48068db2d786e8a07a3e066ec803bcf2","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEsAAAAEAAAAGwAAABOgsAB5AP+SCUFzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2Jhc2ljL05hbWVWYWx1ZUZhY3RvcnkuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Object NodeIdentifierReferenceFactory.create(String)` indirectly writes to field `this.rootKey.sourceKey` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":34,"column":-1,"procedure":"org.modeshape.jcr.value.basic.NodeIdentifierReferenceFactory.create(java.lang.String):java.lang.Object","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/NodeIdentifierReferenceFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/NodeIdentifierReferenceFactory.java","line_number":34,"column_number":-1,"description":"call to Reference NodeIdentifierReferenceFactory.create(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/NodeIdentifierReferenceFactory.java","line_number":67,"column_number":-1,"description":"call to NodeKey JcrSession.createNodeKeyFromIdentifier(String,NodeKey)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1912,"column_number":-1,"description":"call to NodeKey NodeKey.withId(String)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":229,"column_number":-1,"description":"call to String NodeKey.getSourceKey()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":154,"column_number":-1,"description":"access to `this.rootKey.sourceKey`"}],"key":"NodeIdentifierReferenceFactory.java|create|THREAD_SAFETY_VIOLATION","hash":"62364e235b1652865d370e406ab0ffb0","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEAmgD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Reference NodeIdentifierReferenceFactory.create(String)` indirectly writes to field `this.rootKey.sourceKey` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":67,"column":-1,"procedure":"org.modeshape.jcr.value.basic.NodeIdentifierReferenceFactory.create(java.lang.String):org.modeshape.jcr.value.Reference","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/NodeIdentifierReferenceFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/NodeIdentifierReferenceFactory.java","line_number":67,"column_number":-1,"description":"call to NodeKey JcrSession.createNodeKeyFromIdentifier(String,NodeKey)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1912,"column_number":-1,"description":"call to NodeKey NodeKey.withId(String)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":229,"column_number":-1,"description":"call to String NodeKey.getSourceKey()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":154,"column_number":-1,"description":"access to `this.rootKey.sourceKey`"}],"key":"NodeIdentifierReferenceFactory.java|create|THREAD_SAFETY_VIOLATION","hash":"4f5e2541a8e8efc9141f8def176d3801","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEAmgD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String Name.getLocalName()` of un-annotated interface `org.modeshape.jcr.value.Name`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":50,"column":-1,"procedure":"org.modeshape.jcr.value.basic.PathValueFactory.create(java.lang.String):java.lang.Object","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":50,"column_number":-1,"description":"call to Path PathValueFactory.create(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":106,"column_number":-1,"description":"call to Path PathValueFactory.create(String,TextDecoder)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":168,"column_number":-1,"description":"call to Path$Segment PathValueFactory.createSegment(String,TextDecoder)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":613,"column_number":-1,"description":"call to BasicPathSegment.<init>(Name,int)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/value/basic/BasicPathSegment.java","line_number":59,"column_number":-1,"description":"call to boolean BasicPathSegment.isSelfReference()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/value/basic/BasicPathSegment.java","line_number":85,"column_number":-1,"description":"Call to un-annotated interface method String Name.getLocalName()"}],"key":"PathValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"9bc24e3e10eb037054bed528aa35eba3","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEsAAAAEAAAAGwAAABOgsABVAP+SCUFzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2Jhc2ljL0Jhc2ljUGF0aFNlZ21lbnQuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String Name.getLocalName()` of un-annotated interface `org.modeshape.jcr.value.Name`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":106,"column":-1,"procedure":"org.modeshape.jcr.value.basic.PathValueFactory.create(java.lang.String):org.modeshape.jcr.value.Path","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":106,"column_number":-1,"description":"call to Path PathValueFactory.create(String,TextDecoder)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":168,"column_number":-1,"description":"call to Path$Segment PathValueFactory.createSegment(String,TextDecoder)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":613,"column_number":-1,"description":"call to BasicPathSegment.<init>(Name,int)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/basic/BasicPathSegment.java","line_number":59,"column_number":-1,"description":"call to boolean BasicPathSegment.isSelfReference()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/value/basic/BasicPathSegment.java","line_number":85,"column_number":-1,"description":"Call to un-annotated interface method String Name.getLocalName()"}],"key":"PathValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"9bc24e3e10eb037054bed528aa35eba3","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEsAAAAEAAAAGwAAABOgsABVAP+SCUFzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2Jhc2ljL0Jhc2ljUGF0aFNlZ21lbnQuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String TextDecoder.decode(String)` of un-annotated interface `org.modeshape.common.text.TextDecoder`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":168,"column":-1,"procedure":"org.modeshape.jcr.value.basic.NameValueFactory.create(java.lang.String,java.lang.String):org.modeshape.jcr.value.Name","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","line_number":168,"column_number":-1,"description":"call to Name NameValueFactory.create(String,String,TextDecoder)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","line_number":177,"column_number":-1,"description":"Call to un-annotated interface method String TextDecoder.decode(String)"}],"key":"NameValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"48068db2d786e8a07a3e066ec803bcf2","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEwAAAAEAAAAGwAAABOgsAEAsQD/kglBc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iYXNpYy9OYW1lVmFsdWVGYWN0b3J5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String TextDecoder.decode(String)` of un-annotated interface `org.modeshape.common.text.TextDecoder`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":177,"column":-1,"procedure":"org.modeshape.jcr.value.basic.NameValueFactory.create(java.lang.String,java.lang.String,org.modeshape.common.text.TextDecoder):org.modeshape.jcr.value.Name","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","line_number":177,"column_number":-1,"description":"Call to un-annotated interface method String TextDecoder.decode(String)"}],"key":"NameValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"48068db2d786e8a07a3e066ec803bcf2","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEwAAAAEAAAAGwAAABOgsAEAsQD/kglBc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iYXNpYy9OYW1lVmFsdWVGYWN0b3J5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String TextDecoder.decode(String)` of un-annotated interface `org.modeshape.common.text.TextDecoder`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":72,"column":-1,"procedure":"org.modeshape.jcr.value.basic.BooleanValueFactory.create(java.lang.String,org.modeshape.common.text.TextDecoder):java.lang.Boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/BooleanValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/BooleanValueFactory.java","line_number":72,"column_number":-1,"description":"Call to un-annotated interface method String TextDecoder.decode(String)"}],"key":"BooleanValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"4fe3c28e52fe45bc2156f7aed60ab2f8","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE4AAAAEAAAAHAAAABOgsABIAP+SCURzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2Jhc2ljL0Jvb2xlYW5WYWx1ZUZhY3RvcnkuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String TextDecoder.decode(String)` of un-annotated interface `org.modeshape.common.text.TextDecoder`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":42,"column":-1,"procedure":"org.modeshape.jcr.value.basic.BooleanValueFactory.create(java.lang.String,org.modeshape.common.text.TextDecoder):java.lang.Object","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/BooleanValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/BooleanValueFactory.java","line_number":42,"column_number":-1,"description":"call to Boolean BooleanValueFactory.create(String,TextDecoder)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/BooleanValueFactory.java","line_number":72,"column_number":-1,"description":"Call to un-annotated interface method String TextDecoder.decode(String)"}],"key":"BooleanValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"4fe3c28e52fe45bc2156f7aed60ab2f8","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE4AAAAEAAAAHAAAABOgsABIAP+SCURzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2Jhc2ljL0Jvb2xlYW5WYWx1ZUZhY3RvcnkuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String TextDecoder.decode(String)` of un-annotated interface `org.modeshape.common.text.TextDecoder`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":42,"column":-1,"procedure":"org.modeshape.jcr.value.basic.DecimalValueFactory.create(java.lang.String,org.modeshape.common.text.TextDecoder):java.lang.Object","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/DecimalValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/DecimalValueFactory.java","line_number":42,"column_number":-1,"description":"call to BigDecimal DecimalValueFactory.create(String,TextDecoder)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/DecimalValueFactory.java","line_number":79,"column_number":-1,"description":"Call to un-annotated interface method String TextDecoder.decode(String)"}],"key":"DecimalValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"e1f483eb720ea6df68f0951bf1cb59e5","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE4AAAAEAAAAHAAAABOgsABPAP+SCURzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2Jhc2ljL0RlY2ltYWxWYWx1ZUZhY3RvcnkuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String TextDecoder.decode(String)` of un-annotated interface `org.modeshape.common.text.TextDecoder`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":79,"column":-1,"procedure":"org.modeshape.jcr.value.basic.DecimalValueFactory.create(java.lang.String,org.modeshape.common.text.TextDecoder):java.math.BigDecimal","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/DecimalValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/DecimalValueFactory.java","line_number":79,"column_number":-1,"description":"Call to un-annotated interface method String TextDecoder.decode(String)"}],"key":"DecimalValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"e1f483eb720ea6df68f0951bf1cb59e5","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE4AAAAEAAAAHAAAABOgsABPAP+SCURzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2Jhc2ljL0RlY2ltYWxWYWx1ZUZhY3RvcnkuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String TextDecoder.decode(String)` of un-annotated interface `org.modeshape.common.text.TextDecoder`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":79,"column":-1,"procedure":"org.modeshape.jcr.value.basic.DoubleValueFactory.create(java.lang.String,org.modeshape.common.text.TextDecoder):java.lang.Double","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/DoubleValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/DoubleValueFactory.java","line_number":79,"column_number":-1,"description":"Call to un-annotated interface method String TextDecoder.decode(String)"}],"key":"DoubleValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"42b862b551e0ff27eb415e13009d41cb","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsABPAP+SCUNzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2Jhc2ljL0RvdWJsZVZhbHVlRmFjdG9yeS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String TextDecoder.decode(String)` of un-annotated interface `org.modeshape.common.text.TextDecoder`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":42,"column":-1,"procedure":"org.modeshape.jcr.value.basic.DoubleValueFactory.create(java.lang.String,org.modeshape.common.text.TextDecoder):java.lang.Object","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/DoubleValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/DoubleValueFactory.java","line_number":42,"column_number":-1,"description":"call to Double DoubleValueFactory.create(String,TextDecoder)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/DoubleValueFactory.java","line_number":79,"column_number":-1,"description":"Call to un-annotated interface method String TextDecoder.decode(String)"}],"key":"DoubleValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"42b862b551e0ff27eb415e13009d41cb","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsABPAP+SCUNzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2Jhc2ljL0RvdWJsZVZhbHVlRmFjdG9yeS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String TextDecoder.decode(String)` of un-annotated interface `org.modeshape.common.text.TextDecoder`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":44,"column":-1,"procedure":"org.modeshape.jcr.value.basic.JodaDateTimeValueFactory.create(java.lang.String,org.modeshape.common.text.TextDecoder):java.lang.Object","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/JodaDateTimeValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/JodaDateTimeValueFactory.java","line_number":44,"column_number":-1,"description":"call to DateTime JodaDateTimeValueFactory.create(String,TextDecoder)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/JodaDateTimeValueFactory.java","line_number":88,"column_number":-1,"description":"Call to un-annotated interface method String TextDecoder.decode(String)"}],"key":"JodaDateTimeValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"b4b17f103786ac7e5ca278c7e10c5793","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAFMAAAAEAAAAHQAAABSgsABYAP+SCUlzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2Jhc2ljL0pvZGFEYXRlVGltZVZhbHVlRmFjdG9yeS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String TextDecoder.decode(String)` of un-annotated interface `org.modeshape.common.text.TextDecoder`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":88,"column":-1,"procedure":"org.modeshape.jcr.value.basic.JodaDateTimeValueFactory.create(java.lang.String,org.modeshape.common.text.TextDecoder):org.modeshape.jcr.api.value.DateTime","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/JodaDateTimeValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/JodaDateTimeValueFactory.java","line_number":88,"column_number":-1,"description":"Call to un-annotated interface method String TextDecoder.decode(String)"}],"key":"JodaDateTimeValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"b4b17f103786ac7e5ca278c7e10c5793","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAFMAAAAEAAAAHQAAABSgsABYAP+SCUlzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2Jhc2ljL0pvZGFEYXRlVGltZVZhbHVlRmFjdG9yeS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String TextDecoder.decode(String)` of un-annotated interface `org.modeshape.common.text.TextDecoder`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":79,"column":-1,"procedure":"org.modeshape.jcr.value.basic.LongValueFactory.create(java.lang.String,org.modeshape.common.text.TextDecoder):java.lang.Long","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/LongValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/LongValueFactory.java","line_number":79,"column_number":-1,"description":"Call to un-annotated interface method String TextDecoder.decode(String)"}],"key":"LongValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"7a8e4d1441570e73e55e226fe4af3933","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEsAAAAEAAAAGwAAABOgsABPAP+SCUFzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2Jhc2ljL0xvbmdWYWx1ZUZhY3RvcnkuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String TextDecoder.decode(String)` of un-annotated interface `org.modeshape.common.text.TextDecoder`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":42,"column":-1,"procedure":"org.modeshape.jcr.value.basic.LongValueFactory.create(java.lang.String,org.modeshape.common.text.TextDecoder):java.lang.Object","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/LongValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/LongValueFactory.java","line_number":42,"column_number":-1,"description":"call to Long LongValueFactory.create(String,TextDecoder)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/LongValueFactory.java","line_number":79,"column_number":-1,"description":"Call to un-annotated interface method String TextDecoder.decode(String)"}],"key":"LongValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"7a8e4d1441570e73e55e226fe4af3933","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEsAAAAEAAAAGwAAABOgsABPAP+SCUFzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2Jhc2ljL0xvbmdWYWx1ZUZhY3RvcnkuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String TextDecoder.decode(String)` of un-annotated interface `org.modeshape.common.text.TextDecoder`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":46,"column":-1,"procedure":"org.modeshape.jcr.value.basic.NameValueFactory.create(java.lang.String,org.modeshape.common.text.TextDecoder):java.lang.Object","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","line_number":46,"column_number":-1,"description":"call to Name NameValueFactory.create(String,TextDecoder)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","line_number":121,"column_number":-1,"description":"Call to un-annotated interface method String TextDecoder.decode(String)"}],"key":"NameValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"48068db2d786e8a07a3e066ec803bcf2","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEsAAAAEAAAAGwAAABOgsAB5AP+SCUFzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2Jhc2ljL05hbWVWYWx1ZUZhY3RvcnkuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String TextDecoder.decode(String)` of un-annotated interface `org.modeshape.common.text.TextDecoder`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":121,"column":-1,"procedure":"org.modeshape.jcr.value.basic.NameValueFactory.create(java.lang.String,org.modeshape.common.text.TextDecoder):org.modeshape.jcr.value.Name","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","line_number":121,"column_number":-1,"description":"Call to un-annotated interface method String TextDecoder.decode(String)"}],"key":"NameValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"48068db2d786e8a07a3e066ec803bcf2","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEsAAAAEAAAAGwAAABOgsAB5AP+SCUFzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2Jhc2ljL05hbWVWYWx1ZUZhY3RvcnkuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String Name.getLocalName()` of un-annotated interface `org.modeshape.jcr.value.Name`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":50,"column":-1,"procedure":"org.modeshape.jcr.value.basic.PathValueFactory.create(java.lang.String,org.modeshape.common.text.TextDecoder):java.lang.Object","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":50,"column_number":-1,"description":"call to Path PathValueFactory.create(String,TextDecoder)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":168,"column_number":-1,"description":"call to Path$Segment PathValueFactory.createSegment(String,TextDecoder)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":613,"column_number":-1,"description":"call to BasicPathSegment.<init>(Name,int)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/basic/BasicPathSegment.java","line_number":59,"column_number":-1,"description":"call to boolean BasicPathSegment.isSelfReference()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/value/basic/BasicPathSegment.java","line_number":85,"column_number":-1,"description":"Call to un-annotated interface method String Name.getLocalName()"}],"key":"PathValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"9bc24e3e10eb037054bed528aa35eba3","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEsAAAAEAAAAGwAAABOgsABVAP+SCUFzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2Jhc2ljL0Jhc2ljUGF0aFNlZ21lbnQuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String Name.getLocalName()` of un-annotated interface `org.modeshape.jcr.value.Name`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":168,"column":-1,"procedure":"org.modeshape.jcr.value.basic.PathValueFactory.create(java.lang.String,org.modeshape.common.text.TextDecoder):org.modeshape.jcr.value.Path","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":168,"column_number":-1,"description":"call to Path$Segment PathValueFactory.createSegment(String,TextDecoder)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":613,"column_number":-1,"description":"call to BasicPathSegment.<init>(Name,int)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/basic/BasicPathSegment.java","line_number":59,"column_number":-1,"description":"call to boolean BasicPathSegment.isSelfReference()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/basic/BasicPathSegment.java","line_number":85,"column_number":-1,"description":"Call to un-annotated interface method String Name.getLocalName()"}],"key":"PathValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"9bc24e3e10eb037054bed528aa35eba3","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEsAAAAEAAAAGwAAABOgsABVAP+SCUFzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2Jhc2ljL0Jhc2ljUGF0aFNlZ21lbnQuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String TextDecoder.decode(String)` of un-annotated interface `org.modeshape.common.text.TextDecoder`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":43,"column":-1,"procedure":"org.modeshape.jcr.value.basic.ReferenceValueFactory.create(java.lang.String,org.modeshape.common.text.TextDecoder):java.lang.Object","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/ReferenceValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/ReferenceValueFactory.java","line_number":43,"column_number":-1,"description":"call to Reference ReferenceValueFactory.create(String,TextDecoder)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/ReferenceValueFactory.java","line_number":106,"column_number":-1,"description":"Call to un-annotated interface method String TextDecoder.decode(String)"}],"key":"ReferenceValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"27246b8e276b515086d322b1f95cb614","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAFAAAAAEAAAAHAAAABOgsABqAP+SCUZzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2Jhc2ljL1JlZmVyZW5jZVZhbHVlRmFjdG9yeS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String TextDecoder.decode(String)` of un-annotated interface `org.modeshape.common.text.TextDecoder`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":106,"column":-1,"procedure":"org.modeshape.jcr.value.basic.ReferenceValueFactory.create(java.lang.String,org.modeshape.common.text.TextDecoder):org.modeshape.jcr.value.Reference","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/ReferenceValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/ReferenceValueFactory.java","line_number":106,"column_number":-1,"description":"Call to un-annotated interface method String TextDecoder.decode(String)"}],"key":"ReferenceValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"27246b8e276b515086d322b1f95cb614","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAFAAAAAEAAAAHAAAABOgsABqAP+SCUZzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2Jhc2ljL1JlZmVyZW5jZVZhbHVlRmFjdG9yeS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String TextDecoder.decode(String)` of un-annotated interface `org.modeshape.common.text.TextDecoder`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":53,"column":-1,"procedure":"org.modeshape.jcr.value.basic.StringValueFactory.create(java.lang.String,org.modeshape.common.text.TextDecoder):java.lang.Object","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/StringValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/StringValueFactory.java","line_number":53,"column_number":-1,"description":"call to String StringValueFactory.create(String,TextDecoder)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/StringValueFactory.java","line_number":111,"column_number":-1,"description":"Call to un-annotated interface method String TextDecoder.decode(String)"}],"key":"StringValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"29c02d81eff5d338e048407150c3b133","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsABvAP+SCUNzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2Jhc2ljL1N0cmluZ1ZhbHVlRmFjdG9yeS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String TextDecoder.decode(String)` of un-annotated interface `org.modeshape.common.text.TextDecoder`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":111,"column":-1,"procedure":"org.modeshape.jcr.value.basic.StringValueFactory.create(java.lang.String,org.modeshape.common.text.TextDecoder):java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/StringValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/StringValueFactory.java","line_number":111,"column_number":-1,"description":"Call to un-annotated interface method String TextDecoder.decode(String)"}],"key":"StringValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"29c02d81eff5d338e048407150c3b133","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsABvAP+SCUNzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2Jhc2ljL1N0cmluZ1ZhbHVlRmFjdG9yeS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String TextDecoder.decode(String)` of un-annotated interface `org.modeshape.common.text.TextDecoder`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":47,"column":-1,"procedure":"org.modeshape.jcr.value.basic.UriValueFactory.create(java.lang.String,org.modeshape.common.text.TextDecoder):java.lang.Object","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/UriValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/UriValueFactory.java","line_number":47,"column_number":-1,"description":"call to URI UriValueFactory.create(String,TextDecoder)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/UriValueFactory.java","line_number":98,"column_number":-1,"description":"Call to un-annotated interface method String TextDecoder.decode(String)"}],"key":"UriValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"3d306c991c5a5416516c64984d26f46c","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEoAAAAEAAAAGwAAABOgsABiAP+SCUBzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2Jhc2ljL1VyaVZhbHVlRmFjdG9yeS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String TextDecoder.decode(String)` of un-annotated interface `org.modeshape.common.text.TextDecoder`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":98,"column":-1,"procedure":"org.modeshape.jcr.value.basic.UriValueFactory.create(java.lang.String,org.modeshape.common.text.TextDecoder):java.net.URI","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/UriValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/UriValueFactory.java","line_number":98,"column_number":-1,"description":"Call to un-annotated interface method String TextDecoder.decode(String)"}],"key":"UriValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"3d306c991c5a5416516c64984d26f46c","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEoAAAAEAAAAGwAAABOgsABiAP+SCUBzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2Jhc2ljL1VyaVZhbHVlRmFjdG9yeS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String TextDecoder.decode(String)` of un-annotated interface `org.modeshape.common.text.TextDecoder`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":49,"column":-1,"procedure":"org.modeshape.jcr.value.binary.BinaryStoreValueFactory.create(java.lang.String,org.modeshape.common.text.TextDecoder):java.lang.Object","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/BinaryStoreValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/BinaryStoreValueFactory.java","line_number":49,"column_number":-1,"description":"call to BinaryValue BinaryStoreValueFactory.create(String,TextDecoder)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/BinaryStoreValueFactory.java","line_number":117,"column_number":-1,"description":"Call to un-annotated interface method String TextDecoder.decode(String)"}],"key":"BinaryStoreValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"ae95e65da47a7faf42c34f586d70397b","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAFMAAAAEAAAAHQAAABSgsAB1AP+SCUlzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2JpbmFyeS9CaW5hcnlTdG9yZVZhbHVlRmFjdG9yeS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String TextDecoder.decode(String)` of un-annotated interface `org.modeshape.common.text.TextDecoder`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":117,"column":-1,"procedure":"org.modeshape.jcr.value.binary.BinaryStoreValueFactory.create(java.lang.String,org.modeshape.common.text.TextDecoder):org.modeshape.jcr.value.BinaryValue","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/BinaryStoreValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/BinaryStoreValueFactory.java","line_number":117,"column_number":-1,"description":"Call to un-annotated interface method String TextDecoder.decode(String)"}],"key":"BinaryStoreValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"ae95e65da47a7faf42c34f586d70397b","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAFMAAAAEAAAAHQAAABSgsAB1AP+SCUlzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2JpbmFyeS9CaW5hcnlTdG9yZVZhbHVlRmFjdG9yeS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String TextDecoder.decode(String)` of un-annotated interface `org.modeshape.common.text.TextDecoder`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":46,"column":-1,"procedure":"org.modeshape.jcr.value.basic.NameValueFactory.create(java.net.URI):java.lang.Object","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","line_number":46,"column_number":-1,"description":"call to Name NameValueFactory.create(URI)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","line_number":290,"column_number":-1,"description":"call to Name NameValueFactory.create(String)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","line_number":85,"column_number":-1,"description":"call to Name NameValueFactory.create(String,TextDecoder)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","line_number":121,"column_number":-1,"description":"Call to un-annotated interface method String TextDecoder.decode(String)"}],"key":"NameValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"48068db2d786e8a07a3e066ec803bcf2","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEsAAAAEAAAAGwAAABOgsAB5AP+SCUFzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2Jhc2ljL05hbWVWYWx1ZUZhY3RvcnkuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String TextDecoder.decode(String)` of un-annotated interface `org.modeshape.common.text.TextDecoder`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":290,"column":-1,"procedure":"org.modeshape.jcr.value.basic.NameValueFactory.create(java.net.URI):org.modeshape.jcr.value.Name","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","line_number":290,"column_number":-1,"description":"call to Name NameValueFactory.create(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","line_number":85,"column_number":-1,"description":"call to Name NameValueFactory.create(String,TextDecoder)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","line_number":121,"column_number":-1,"description":"Call to un-annotated interface method String TextDecoder.decode(String)"}],"key":"NameValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"48068db2d786e8a07a3e066ec803bcf2","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEsAAAAEAAAAGwAAABOgsAB5AP+SCUFzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2Jhc2ljL05hbWVWYWx1ZUZhY3RvcnkuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String Name.getLocalName()` of un-annotated interface `org.modeshape.jcr.value.Name`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":50,"column":-1,"procedure":"org.modeshape.jcr.value.basic.PathValueFactory.create(java.net.URI):java.lang.Object","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":50,"column_number":-1,"description":"call to Path PathValueFactory.create(URI)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":646,"column_number":-1,"description":"call to Path PathValueFactory.create(String)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":106,"column_number":-1,"description":"call to Path PathValueFactory.create(String,TextDecoder)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":168,"column_number":-1,"description":"call to Path$Segment PathValueFactory.createSegment(String,TextDecoder)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":613,"column_number":-1,"description":"call to BasicPathSegment.<init>(Name,int)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/value/basic/BasicPathSegment.java","line_number":59,"column_number":-1,"description":"call to boolean BasicPathSegment.isSelfReference()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/value/basic/BasicPathSegment.java","line_number":85,"column_number":-1,"description":"Call to un-annotated interface method String Name.getLocalName()"}],"key":"PathValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"9bc24e3e10eb037054bed528aa35eba3","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEsAAAAEAAAAGwAAABOgsABVAP+SCUFzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2Jhc2ljL0Jhc2ljUGF0aFNlZ21lbnQuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String Name.getLocalName()` of un-annotated interface `org.modeshape.jcr.value.Name`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":646,"column":-1,"procedure":"org.modeshape.jcr.value.basic.PathValueFactory.create(java.net.URI):org.modeshape.jcr.value.Path","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":646,"column_number":-1,"description":"call to Path PathValueFactory.create(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":106,"column_number":-1,"description":"call to Path PathValueFactory.create(String,TextDecoder)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":168,"column_number":-1,"description":"call to Path$Segment PathValueFactory.createSegment(String,TextDecoder)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":613,"column_number":-1,"description":"call to BasicPathSegment.<init>(Name,int)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/value/basic/BasicPathSegment.java","line_number":59,"column_number":-1,"description":"call to boolean BasicPathSegment.isSelfReference()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/value/basic/BasicPathSegment.java","line_number":85,"column_number":-1,"description":"Call to un-annotated interface method String Name.getLocalName()"}],"key":"PathValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"9bc24e3e10eb037054bed528aa35eba3","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEsAAAAEAAAAGwAAABOgsABVAP+SCUFzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2Jhc2ljL0Jhc2ljUGF0aFNlZ21lbnQuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `long DateTime.getMilliseconds()` of un-annotated interface `org.modeshape.jcr.api.value.DateTime`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":42,"column":-1,"procedure":"org.modeshape.jcr.value.basic.DecimalValueFactory.create(org.modeshape.jcr.api.value.DateTime):java.lang.Object","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/DecimalValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/DecimalValueFactory.java","line_number":42,"column_number":-1,"description":"call to BigDecimal DecimalValueFactory.create(DateTime)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/DecimalValueFactory.java","line_number":130,"column_number":-1,"description":"Call to un-annotated interface method long DateTime.getMilliseconds()"}],"key":"DecimalValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"423ea0e2e896ab743bba7752b2c2261a","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE8AAAAEAAAAHAAAABOgsAEAggD/kglEc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iYXNpYy9EZWNpbWFsVmFsdWVGYWN0b3J5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `long DateTime.getMilliseconds()` of un-annotated interface `org.modeshape.jcr.api.value.DateTime`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":130,"column":-1,"procedure":"org.modeshape.jcr.value.basic.DecimalValueFactory.create(org.modeshape.jcr.api.value.DateTime):java.math.BigDecimal","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/DecimalValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/DecimalValueFactory.java","line_number":130,"column_number":-1,"description":"Call to un-annotated interface method long DateTime.getMilliseconds()"}],"key":"DecimalValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"423ea0e2e896ab743bba7752b2c2261a","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE8AAAAEAAAAHAAAABOgsAEAggD/kglEc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iYXNpYy9EZWNpbWFsVmFsdWVGYWN0b3J5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `long DateTime.getMilliseconds()` of un-annotated interface `org.modeshape.jcr.api.value.DateTime`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":137,"column":-1,"procedure":"org.modeshape.jcr.value.basic.DoubleValueFactory.create(org.modeshape.jcr.api.value.DateTime):java.lang.Double","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/DoubleValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/DoubleValueFactory.java","line_number":137,"column_number":-1,"description":"Call to un-annotated interface method long DateTime.getMilliseconds()"}],"key":"DoubleValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"af20d8d5c18008e12467329dfc5a46c5","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE4AAAAEAAAAGwAAABOgsAEAiQD/kglDc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iYXNpYy9Eb3VibGVWYWx1ZUZhY3RvcnkuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `long DateTime.getMilliseconds()` of un-annotated interface `org.modeshape.jcr.api.value.DateTime`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":42,"column":-1,"procedure":"org.modeshape.jcr.value.basic.DoubleValueFactory.create(org.modeshape.jcr.api.value.DateTime):java.lang.Object","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/DoubleValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/DoubleValueFactory.java","line_number":42,"column_number":-1,"description":"call to Double DoubleValueFactory.create(DateTime)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/DoubleValueFactory.java","line_number":137,"column_number":-1,"description":"Call to un-annotated interface method long DateTime.getMilliseconds()"}],"key":"DoubleValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"af20d8d5c18008e12467329dfc5a46c5","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE4AAAAEAAAAGwAAABOgsAEAiQD/kglDc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iYXNpYy9Eb3VibGVWYWx1ZUZhY3RvcnkuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `long DateTime.getMilliseconds()` of un-annotated interface `org.modeshape.jcr.api.value.DateTime`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":130,"column":-1,"procedure":"org.modeshape.jcr.value.basic.LongValueFactory.create(org.modeshape.jcr.api.value.DateTime):java.lang.Long","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/LongValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/LongValueFactory.java","line_number":130,"column_number":-1,"description":"Call to un-annotated interface method long DateTime.getMilliseconds()"}],"key":"LongValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"29147e60ff2e0519a67aaa8a43980196","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEwAAAAEAAAAGwAAABOgsAEAggD/kglBc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iYXNpYy9Mb25nVmFsdWVGYWN0b3J5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `long DateTime.getMilliseconds()` of un-annotated interface `org.modeshape.jcr.api.value.DateTime`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":42,"column":-1,"procedure":"org.modeshape.jcr.value.basic.LongValueFactory.create(org.modeshape.jcr.api.value.DateTime):java.lang.Object","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/LongValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/LongValueFactory.java","line_number":42,"column_number":-1,"description":"call to Long LongValueFactory.create(DateTime)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/LongValueFactory.java","line_number":130,"column_number":-1,"description":"Call to un-annotated interface method long DateTime.getMilliseconds()"}],"key":"LongValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"29147e60ff2e0519a67aaa8a43980196","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEwAAAAEAAAAGwAAABOgsAEAggD/kglBc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iYXNpYy9Mb25nVmFsdWVGYWN0b3J5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String DateTime.getString()` of un-annotated interface `org.modeshape.jcr.api.value.DateTime`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":53,"column":-1,"procedure":"org.modeshape.jcr.value.basic.StringValueFactory.create(org.modeshape.jcr.api.value.DateTime):java.lang.Object","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/StringValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/StringValueFactory.java","line_number":53,"column_number":-1,"description":"call to String StringValueFactory.create(DateTime)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/StringValueFactory.java","line_number":160,"column_number":-1,"description":"Call to un-annotated interface method String DateTime.getString()"}],"key":"StringValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"b3f8028c67c95d1efff4e93bf48c0128","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE4AAAAEAAAAGwAAABOgsAEAoAD/kglDc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iYXNpYy9TdHJpbmdWYWx1ZUZhY3RvcnkuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String DateTime.getString()` of un-annotated interface `org.modeshape.jcr.api.value.DateTime`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":160,"column":-1,"procedure":"org.modeshape.jcr.value.basic.StringValueFactory.create(org.modeshape.jcr.api.value.DateTime):java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/StringValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/StringValueFactory.java","line_number":160,"column_number":-1,"description":"Call to un-annotated interface method String DateTime.getString()"}],"key":"StringValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"b3f8028c67c95d1efff4e93bf48c0128","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE4AAAAEAAAAGwAAABOgsAEAoAD/kglDc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iYXNpYy9TdHJpbmdWYWx1ZUZhY3RvcnkuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `long DateTime.getMilliseconds()` of un-annotated interface `org.modeshape.jcr.api.value.DateTime`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":263,"column":-1,"procedure":"org.modeshape.jcr.value.basic.JodaDateTimeValueFactory.create(org.modeshape.jcr.api.value.DateTime,long):org.modeshape.jcr.api.value.DateTime","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/JodaDateTimeValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/JodaDateTimeValueFactory.java","line_number":263,"column_number":-1,"description":"Call to un-annotated interface method long DateTime.getMilliseconds()"}],"key":"JodaDateTimeValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"f0aea3b8e5f76bd7e505cf4a1a91d6a1","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAFQAAAAEAAAAHQAAABSgsAEBBwD/kglJc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iYXNpYy9Kb2RhRGF0ZVRpbWVWYWx1ZUZhY3RvcnkuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String TextDecoder.decode(String)` of un-annotated interface `org.modeshape.common.text.TextDecoder`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":46,"column":-1,"procedure":"org.modeshape.jcr.value.basic.NameValueFactory.create(org.modeshape.jcr.value.BinaryValue):java.lang.Object","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","line_number":46,"column_number":-1,"description":"call to Name NameValueFactory.create(BinaryValue)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","line_number":320,"column_number":-1,"description":"call to Name NameValueFactory.create(String)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","line_number":85,"column_number":-1,"description":"call to Name NameValueFactory.create(String,TextDecoder)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","line_number":121,"column_number":-1,"description":"Call to un-annotated interface method String TextDecoder.decode(String)"}],"key":"NameValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"48068db2d786e8a07a3e066ec803bcf2","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEsAAAAEAAAAGwAAABOgsAB5AP+SCUFzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2Jhc2ljL05hbWVWYWx1ZUZhY3RvcnkuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String TextDecoder.decode(String)` of un-annotated interface `org.modeshape.common.text.TextDecoder`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":320,"column":-1,"procedure":"org.modeshape.jcr.value.basic.NameValueFactory.create(org.modeshape.jcr.value.BinaryValue):org.modeshape.jcr.value.Name","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","line_number":320,"column_number":-1,"description":"call to Name NameValueFactory.create(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","line_number":85,"column_number":-1,"description":"call to Name NameValueFactory.create(String,TextDecoder)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","line_number":121,"column_number":-1,"description":"Call to un-annotated interface method String TextDecoder.decode(String)"}],"key":"NameValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"48068db2d786e8a07a3e066ec803bcf2","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEsAAAAEAAAAGwAAABOgsAB5AP+SCUFzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2Jhc2ljL05hbWVWYWx1ZUZhY3RvcnkuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String Name.getLocalName()` of un-annotated interface `org.modeshape.jcr.value.Name`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":50,"column":-1,"procedure":"org.modeshape.jcr.value.basic.PathValueFactory.create(org.modeshape.jcr.value.BinaryValue):java.lang.Object","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":50,"column_number":-1,"description":"call to Path PathValueFactory.create(BinaryValue)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":677,"column_number":-1,"description":"call to Path PathValueFactory.create(String)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":106,"column_number":-1,"description":"call to Path PathValueFactory.create(String,TextDecoder)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":168,"column_number":-1,"description":"call to Path$Segment PathValueFactory.createSegment(String,TextDecoder)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":613,"column_number":-1,"description":"call to BasicPathSegment.<init>(Name,int)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/value/basic/BasicPathSegment.java","line_number":59,"column_number":-1,"description":"call to boolean BasicPathSegment.isSelfReference()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/value/basic/BasicPathSegment.java","line_number":85,"column_number":-1,"description":"Call to un-annotated interface method String Name.getLocalName()"}],"key":"PathValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"9bc24e3e10eb037054bed528aa35eba3","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEsAAAAEAAAAGwAAABOgsABVAP+SCUFzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2Jhc2ljL0Jhc2ljUGF0aFNlZ21lbnQuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String Name.getLocalName()` of un-annotated interface `org.modeshape.jcr.value.Name`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":677,"column":-1,"procedure":"org.modeshape.jcr.value.basic.PathValueFactory.create(org.modeshape.jcr.value.BinaryValue):org.modeshape.jcr.value.Path","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":677,"column_number":-1,"description":"call to Path PathValueFactory.create(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":106,"column_number":-1,"description":"call to Path PathValueFactory.create(String,TextDecoder)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":168,"column_number":-1,"description":"call to Path$Segment PathValueFactory.createSegment(String,TextDecoder)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":613,"column_number":-1,"description":"call to BasicPathSegment.<init>(Name,int)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/value/basic/BasicPathSegment.java","line_number":59,"column_number":-1,"description":"call to boolean BasicPathSegment.isSelfReference()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/value/basic/BasicPathSegment.java","line_number":85,"column_number":-1,"description":"Call to un-annotated interface method String Name.getLocalName()"}],"key":"PathValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"9bc24e3e10eb037054bed528aa35eba3","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEsAAAAEAAAAGwAAABOgsABVAP+SCUFzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2Jhc2ljL0Jhc2ljUGF0aFNlZ21lbnQuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `void BinaryValue.dispose()` of un-annotated interface `org.modeshape.jcr.value.BinaryValue`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":53,"column":-1,"procedure":"org.modeshape.jcr.value.basic.StringValueFactory.create(org.modeshape.jcr.value.BinaryValue):java.lang.Object","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/StringValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/StringValueFactory.java","line_number":53,"column_number":-1,"description":"call to String StringValueFactory.create(BinaryValue)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/StringValueFactory.java","line_number":270,"column_number":-1,"description":"Call to un-annotated interface method void BinaryValue.dispose()"}],"key":"StringValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"cbc32ceb22d73867cab860dd220ee7bb","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE4AAAAEAAAAGwAAABOgsAEBDgD/kglDc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iYXNpYy9TdHJpbmdWYWx1ZUZhY3RvcnkuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `void BinaryValue.dispose()` of un-annotated interface `org.modeshape.jcr.value.BinaryValue`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":270,"column":-1,"procedure":"org.modeshape.jcr.value.basic.StringValueFactory.create(org.modeshape.jcr.value.BinaryValue):java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/StringValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/StringValueFactory.java","line_number":270,"column_number":-1,"description":"Call to un-annotated interface method void BinaryValue.dispose()"}],"key":"StringValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"cbc32ceb22d73867cab860dd220ee7bb","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE4AAAAEAAAAGwAAABOgsAEBDgD/kglDc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iYXNpYy9TdHJpbmdWYWx1ZUZhY3RvcnkuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `int Path.size()` of un-annotated interface `org.modeshape.jcr.value.Path`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":50,"column":-1,"procedure":"org.modeshape.jcr.value.basic.PathValueFactory.create(org.modeshape.jcr.value.Name):java.lang.Object","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":50,"column_number":-1,"description":"call to Path PathValueFactory.create(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":290,"column_number":-1,"description":"call to ChildPath.<init>(Path,Path$Segment)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/basic/ChildPath.java","line_number":51,"column_number":-1,"description":"Call to un-annotated interface method int Path.size()"}],"key":"PathValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"daf1c7b9ea6f45e6d569ff89438da701","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEMAAAAEAAAAGQAAABKgsHMA/5IJOnNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvdmFsdWUvYmFzaWMvQ2hpbGRQYXRoLmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `int Path.size()` of un-annotated interface `org.modeshape.jcr.value.Path`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":290,"column":-1,"procedure":"org.modeshape.jcr.value.basic.PathValueFactory.create(org.modeshape.jcr.value.Name):org.modeshape.jcr.value.Path","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":290,"column_number":-1,"description":"call to ChildPath.<init>(Path,Path$Segment)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/ChildPath.java","line_number":51,"column_number":-1,"description":"Call to un-annotated interface method int Path.size()"}],"key":"PathValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"daf1c7b9ea6f45e6d569ff89438da701","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEMAAAAEAAAAGQAAABKgsHMA/5IJOnNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvdmFsdWUvYmFzaWMvQ2hpbGRQYXRoLmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `NamespaceRegistry NamespaceRegistry$Holder.getNamespaceRegistry()` of un-annotated interface `org.modeshape.jcr.value.NamespaceRegistry$Holder`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":53,"column":-1,"procedure":"org.modeshape.jcr.value.basic.StringValueFactory.create(org.modeshape.jcr.value.Name):java.lang.Object","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/StringValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/StringValueFactory.java","line_number":53,"column_number":-1,"description":"call to String StringValueFactory.create(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/StringValueFactory.java","line_number":167,"column_number":-1,"description":"Call to un-annotated interface method NamespaceRegistry NamespaceRegistry$Holder.getNamespaceRegistry()"}],"key":"StringValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"03bd13ff6fee78460b8039acc3fe6b47","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE4AAAAEAAAAGwAAABOgsAEApwD/kglDc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iYXNpYy9TdHJpbmdWYWx1ZUZhY3RvcnkuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `NamespaceRegistry NamespaceRegistry$Holder.getNamespaceRegistry()` of un-annotated interface `org.modeshape.jcr.value.NamespaceRegistry$Holder`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":167,"column":-1,"procedure":"org.modeshape.jcr.value.basic.StringValueFactory.create(org.modeshape.jcr.value.Name):java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/StringValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/StringValueFactory.java","line_number":167,"column_number":-1,"description":"Call to un-annotated interface method NamespaceRegistry NamespaceRegistry$Holder.getNamespaceRegistry()"}],"key":"StringValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"03bd13ff6fee78460b8039acc3fe6b47","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE4AAAAEAAAAGwAAABOgsAEApwD/kglDc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iYXNpYy9TdHJpbmdWYWx1ZUZhY3RvcnkuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `NamespaceRegistry NamespaceRegistry$Holder.getNamespaceRegistry()` of un-annotated interface `org.modeshape.jcr.value.NamespaceRegistry$Holder`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":47,"column":-1,"procedure":"org.modeshape.jcr.value.basic.UriValueFactory.create(org.modeshape.jcr.value.Name):java.lang.Object","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/UriValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/UriValueFactory.java","line_number":47,"column_number":-1,"description":"call to URI UriValueFactory.create(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/UriValueFactory.java","line_number":172,"column_number":-1,"description":"Call to un-annotated interface method NamespaceRegistry NamespaceRegistry$Holder.getNamespaceRegistry()"}],"key":"UriValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"758bf667115abc47af86f91eee4ab3b7","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEsAAAAEAAAAGwAAABOgsAEArAD/kglAc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iYXNpYy9VcmlWYWx1ZUZhY3RvcnkuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `NamespaceRegistry NamespaceRegistry$Holder.getNamespaceRegistry()` of un-annotated interface `org.modeshape.jcr.value.NamespaceRegistry$Holder`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":172,"column":-1,"procedure":"org.modeshape.jcr.value.basic.UriValueFactory.create(org.modeshape.jcr.value.Name):java.net.URI","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/UriValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/UriValueFactory.java","line_number":172,"column_number":-1,"description":"Call to un-annotated interface method NamespaceRegistry NamespaceRegistry$Holder.getNamespaceRegistry()"}],"key":"UriValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"758bf667115abc47af86f91eee4ab3b7","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEsAAAAEAAAAGwAAABOgsAEArAD/kglAc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iYXNpYy9VcmlWYWx1ZUZhY3RvcnkuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Path$Segment Path.getLastSegment()` of un-annotated interface `org.modeshape.jcr.value.Path`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":46,"column":-1,"procedure":"org.modeshape.jcr.value.basic.NameValueFactory.create(org.modeshape.jcr.value.Path):java.lang.Object","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","line_number":46,"column_number":-1,"description":"call to Name NameValueFactory.create(Path)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","line_number":255,"column_number":-1,"description":"Call to un-annotated interface method Path$Segment Path.getLastSegment()"}],"key":"NameValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"dcb75beb04e5d5643f5bf12608196593","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEwAAAAEAAAAGwAAABOgsAEA/wD/kglBc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iYXNpYy9OYW1lVmFsdWVGYWN0b3J5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Path$Segment Path.getLastSegment()` of un-annotated interface `org.modeshape.jcr.value.Path`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":255,"column":-1,"procedure":"org.modeshape.jcr.value.basic.NameValueFactory.create(org.modeshape.jcr.value.Path):org.modeshape.jcr.value.Name","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","line_number":255,"column_number":-1,"description":"Call to un-annotated interface method Path$Segment Path.getLastSegment()"}],"key":"NameValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"dcb75beb04e5d5643f5bf12608196593","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEwAAAAEAAAAGwAAABOgsAEA/wD/kglBc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iYXNpYy9OYW1lVmFsdWVGYWN0b3J5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Path$Segment Path.getLastSegment()` of un-annotated interface `org.modeshape.jcr.value.Path`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":53,"column":-1,"procedure":"org.modeshape.jcr.value.basic.StringValueFactory.create(org.modeshape.jcr.value.Path):java.lang.Object","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/StringValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/StringValueFactory.java","line_number":53,"column_number":-1,"description":"call to String StringValueFactory.create(Path)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/StringValueFactory.java","line_number":177,"column_number":-1,"description":"Call to un-annotated interface method Path$Segment Path.getLastSegment()"}],"key":"StringValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"877c9725a58117c6b8fee72f181b4057","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE4AAAAEAAAAGwAAABOgsAEAsQD/kglDc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iYXNpYy9TdHJpbmdWYWx1ZUZhY3RvcnkuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Path$Segment Path.getLastSegment()` of un-annotated interface `org.modeshape.jcr.value.Path`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":177,"column":-1,"procedure":"org.modeshape.jcr.value.basic.StringValueFactory.create(org.modeshape.jcr.value.Path):java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/StringValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/StringValueFactory.java","line_number":177,"column_number":-1,"description":"Call to un-annotated interface method Path$Segment Path.getLastSegment()"}],"key":"StringValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"877c9725a58117c6b8fee72f181b4057","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE4AAAAEAAAAGwAAABOgsAEAsQD/kglDc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iYXNpYy9TdHJpbmdWYWx1ZUZhY3RvcnkuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `NamespaceRegistry NamespaceRegistry$Holder.getNamespaceRegistry()` of un-annotated interface `org.modeshape.jcr.value.NamespaceRegistry$Holder`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":47,"column":-1,"procedure":"org.modeshape.jcr.value.basic.UriValueFactory.create(org.modeshape.jcr.value.Path):java.lang.Object","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/UriValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/UriValueFactory.java","line_number":47,"column_number":-1,"description":"call to URI UriValueFactory.create(Path)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/UriValueFactory.java","line_number":179,"column_number":-1,"description":"Call to un-annotated interface method NamespaceRegistry NamespaceRegistry$Holder.getNamespaceRegistry()"}],"key":"UriValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"758bf667115abc47af86f91eee4ab3b7","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEsAAAAEAAAAGwAAABOgsAEAswD/kglAc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iYXNpYy9VcmlWYWx1ZUZhY3RvcnkuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `NamespaceRegistry NamespaceRegistry$Holder.getNamespaceRegistry()` of un-annotated interface `org.modeshape.jcr.value.NamespaceRegistry$Holder`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":179,"column":-1,"procedure":"org.modeshape.jcr.value.basic.UriValueFactory.create(org.modeshape.jcr.value.Path):java.net.URI","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/UriValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/UriValueFactory.java","line_number":179,"column_number":-1,"description":"Call to un-annotated interface method NamespaceRegistry NamespaceRegistry$Holder.getNamespaceRegistry()"}],"key":"UriValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"758bf667115abc47af86f91eee4ab3b7","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEsAAAAEAAAAGwAAABOgsAEAswD/kglAc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iYXNpYy9VcmlWYWx1ZUZhY3RvcnkuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `List Path.getSegmentsList()` of un-annotated interface `org.modeshape.jcr.value.Path`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":462,"column":-1,"procedure":"org.modeshape.jcr.value.basic.PathValueFactory.create(org.modeshape.jcr.value.Path,org.modeshape.jcr.value.Name[]):org.modeshape.jcr.value.Path","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":462,"column_number":-1,"description":"Call to un-annotated interface method List Path.getSegmentsList()"}],"key":"PathValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"f5e6e67b2090d39c406d77e7983f48ff","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEwAAAAEAAAAGwAAABOgsAEBzgD/kglBc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iYXNpYy9QYXRoVmFsdWVGYWN0b3J5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `List Path.getSegmentsList()` of un-annotated interface `org.modeshape.jcr.value.Path`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":491,"column":-1,"procedure":"org.modeshape.jcr.value.basic.PathValueFactory.create(org.modeshape.jcr.value.Path,org.modeshape.jcr.value.Path$Segment[]):org.modeshape.jcr.value.Path","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":491,"column_number":-1,"description":"Call to un-annotated interface method List Path.getSegmentsList()"}],"key":"PathValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"f5e6e67b2090d39c406d77e7983f48ff","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEwAAAAEAAAAGwAAABOgsAEB6wD/kglBc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iYXNpYy9QYXRoVmFsdWVGYWN0b3J5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `List Path.getSegmentsList()` of un-annotated interface `org.modeshape.jcr.value.Path`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":517,"column":-1,"procedure":"org.modeshape.jcr.value.basic.PathValueFactory.create(org.modeshape.jcr.value.Path,java.lang.Iterable):org.modeshape.jcr.value.Path","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":517,"column_number":-1,"description":"Call to un-annotated interface method List Path.getSegmentsList()"}],"key":"PathValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"f5e6e67b2090d39c406d77e7983f48ff","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEwAAAAEAAAAGwAAABOgsAECBQD/kglBc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iYXNpYy9QYXRoVmFsdWVGYWN0b3J5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String Name.getLocalName()` of un-annotated interface `org.modeshape.jcr.value.Name`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":553,"column":-1,"procedure":"org.modeshape.jcr.value.basic.PathValueFactory.create(org.modeshape.jcr.value.Path,java.lang.String):org.modeshape.jcr.value.Path","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":553,"column_number":-1,"description":"call to Path$Segment PathValueFactory.createSegment(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":588,"column_number":-1,"description":"call to Path$Segment PathValueFactory.createSegment(String,TextDecoder)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":613,"column_number":-1,"description":"call to BasicPathSegment.<init>(Name,int)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/basic/BasicPathSegment.java","line_number":59,"column_number":-1,"description":"call to boolean BasicPathSegment.isSelfReference()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/value/basic/BasicPathSegment.java","line_number":85,"column_number":-1,"description":"Call to un-annotated interface method String Name.getLocalName()"}],"key":"PathValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"9bc24e3e10eb037054bed528aa35eba3","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEsAAAAEAAAAGwAAABOgsABVAP+SCUFzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2Jhc2ljL0Jhc2ljUGF0aFNlZ21lbnQuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String Name.getLocalName()` of un-annotated interface `org.modeshape.jcr.value.Name`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":449,"column":-1,"procedure":"org.modeshape.jcr.value.basic.PathValueFactory.create(org.modeshape.jcr.value.Path,java.lang.String,int):org.modeshape.jcr.value.Path","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":449,"column_number":-1,"description":"call to Path PathValueFactory.create(Path,Name,int)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":442,"column_number":-1,"description":"call to BasicPathSegment.<init>(Name,int)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/basic/BasicPathSegment.java","line_number":59,"column_number":-1,"description":"call to boolean BasicPathSegment.isSelfReference()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/basic/BasicPathSegment.java","line_number":85,"column_number":-1,"description":"Call to un-annotated interface method String Name.getLocalName()"}],"key":"PathValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"9bc24e3e10eb037054bed528aa35eba3","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEsAAAAEAAAAGwAAABOgsABVAP+SCUFzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2Jhc2ljL0Jhc2ljUGF0aFNlZ21lbnQuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String Name.getLocalName()` of un-annotated interface `org.modeshape.jcr.value.Name`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":442,"column":-1,"procedure":"org.modeshape.jcr.value.basic.PathValueFactory.create(org.modeshape.jcr.value.Path,org.modeshape.jcr.value.Name,int):org.modeshape.jcr.value.Path","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":442,"column_number":-1,"description":"call to BasicPathSegment.<init>(Name,int)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/BasicPathSegment.java","line_number":59,"column_number":-1,"description":"call to boolean BasicPathSegment.isSelfReference()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/basic/BasicPathSegment.java","line_number":85,"column_number":-1,"description":"Call to un-annotated interface method String Name.getLocalName()"}],"key":"PathValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"9bc24e3e10eb037054bed528aa35eba3","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEsAAAAEAAAAGwAAABOgsABVAP+SCUFzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2Jhc2ljL0Jhc2ljUGF0aFNlZ21lbnQuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `List Path.getSegmentsList()` of un-annotated interface `org.modeshape.jcr.value.Path`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":424,"column":-1,"procedure":"org.modeshape.jcr.value.basic.PathValueFactory.create(org.modeshape.jcr.value.Path,org.modeshape.jcr.value.Path):org.modeshape.jcr.value.Path","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":424,"column_number":-1,"description":"Call to un-annotated interface method List Path.getSegmentsList()"}],"key":"PathValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"f5e6e67b2090d39c406d77e7983f48ff","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEwAAAAEAAAAGwAAABOgsAEBqAD/kglBc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iYXNpYy9QYXRoVmFsdWVGYWN0b3J5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Name Path$Segment.getName()` of un-annotated interface `org.modeshape.jcr.value.Path$Segment`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":46,"column":-1,"procedure":"org.modeshape.jcr.value.basic.NameValueFactory.create(org.modeshape.jcr.value.Path$Segment):java.lang.Object","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","line_number":46,"column_number":-1,"description":"call to Name NameValueFactory.create(Path$Segment)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","line_number":268,"column_number":-1,"description":"Call to un-annotated interface method Name Path$Segment.getName()"}],"key":"NameValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"8626555fa552fbd9b5b1f389b9439be7","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEwAAAAEAAAAGwAAABOgsAEBDAD/kglBc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iYXNpYy9OYW1lVmFsdWVGYWN0b3J5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Name Path$Segment.getName()` of un-annotated interface `org.modeshape.jcr.value.Path$Segment`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":268,"column":-1,"procedure":"org.modeshape.jcr.value.basic.NameValueFactory.create(org.modeshape.jcr.value.Path$Segment):org.modeshape.jcr.value.Name","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","line_number":268,"column_number":-1,"description":"Call to un-annotated interface method Name Path$Segment.getName()"}],"key":"NameValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"8626555fa552fbd9b5b1f389b9439be7","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEwAAAAEAAAAGwAAABOgsAEBDAD/kglBc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iYXNpYy9OYW1lVmFsdWVGYWN0b3J5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `boolean Path$Segment.isParentReference()` of un-annotated interface `org.modeshape.jcr.value.Path$Segment`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":50,"column":-1,"procedure":"org.modeshape.jcr.value.basic.PathValueFactory.create(org.modeshape.jcr.value.Path$Segment):java.lang.Object","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":50,"column_number":-1,"description":"call to Path PathValueFactory.create(Path$Segment)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":306,"column_number":-1,"description":"call to Path PathValueFactory.createAbsolutePath(org.modeshape.jcr.value.Path$Segment[])"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":340,"column_number":-1,"description":"call to BasicPath.<init>(List,boolean)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/basic/BasicPath.java","line_number":64,"column_number":-1,"description":"call to boolean AbstractPath.isNormalized(List)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/value/basic/AbstractPath.java","line_number":74,"column_number":-1,"description":"Call to un-annotated interface method boolean Path$Segment.isParentReference()"}],"key":"PathValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"1db178b22b9ce9d9af90347362ba9af8","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEcAAAAEAAAAGgAAABKgsABKAP+SCT1zcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2Jhc2ljL0Fic3RyYWN0UGF0aC5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `boolean Path$Segment.isParentReference()` of un-annotated interface `org.modeshape.jcr.value.Path$Segment`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":306,"column":-1,"procedure":"org.modeshape.jcr.value.basic.PathValueFactory.create(org.modeshape.jcr.value.Path$Segment):org.modeshape.jcr.value.Path","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":306,"column_number":-1,"description":"call to Path PathValueFactory.createAbsolutePath(org.modeshape.jcr.value.Path$Segment[])"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":340,"column_number":-1,"description":"call to BasicPath.<init>(List,boolean)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/basic/BasicPath.java","line_number":64,"column_number":-1,"description":"call to boolean AbstractPath.isNormalized(List)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/basic/AbstractPath.java","line_number":74,"column_number":-1,"description":"Call to un-annotated interface method boolean Path$Segment.isParentReference()"}],"key":"PathValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"1db178b22b9ce9d9af90347362ba9af8","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEcAAAAEAAAAGgAAABKgsABKAP+SCT1zcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2Jhc2ljL0Fic3RyYWN0UGF0aC5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String Name.getLocalName()` of un-annotated interface `org.modeshape.jcr.value.Name`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":53,"column":-1,"procedure":"org.modeshape.jcr.value.basic.StringValueFactory.create(org.modeshape.jcr.value.Path$Segment):java.lang.Object","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/StringValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/StringValueFactory.java","line_number":53,"column_number":-1,"description":"call to String StringValueFactory.create(Path$Segment)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/StringValueFactory.java","line_number":202,"column_number":-1,"description":"Call to un-annotated interface method String Name.getLocalName()"}],"key":"StringValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"04e643e8250f02894fcfc039a245afc4","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE4AAAAEAAAAGwAAABOgsAEAygD/kglDc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iYXNpYy9TdHJpbmdWYWx1ZUZhY3RvcnkuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String Name.getLocalName()` of un-annotated interface `org.modeshape.jcr.value.Name`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":202,"column":-1,"procedure":"org.modeshape.jcr.value.basic.StringValueFactory.create(org.modeshape.jcr.value.Path$Segment):java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/StringValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/StringValueFactory.java","line_number":202,"column_number":-1,"description":"Call to un-annotated interface method String Name.getLocalName()"}],"key":"StringValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"04e643e8250f02894fcfc039a245afc4","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE4AAAAEAAAAGwAAABOgsAEAygD/kglDc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iYXNpYy9TdHJpbmdWYWx1ZUZhY3RvcnkuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `NamespaceRegistry NamespaceRegistry$Holder.getNamespaceRegistry()` of un-annotated interface `org.modeshape.jcr.value.NamespaceRegistry$Holder`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":47,"column":-1,"procedure":"org.modeshape.jcr.value.basic.UriValueFactory.create(org.modeshape.jcr.value.Path$Segment):java.lang.Object","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/UriValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/UriValueFactory.java","line_number":47,"column_number":-1,"description":"call to URI UriValueFactory.create(Path$Segment)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/UriValueFactory.java","line_number":187,"column_number":-1,"description":"Call to un-annotated interface method NamespaceRegistry NamespaceRegistry$Holder.getNamespaceRegistry()"}],"key":"UriValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"758bf667115abc47af86f91eee4ab3b7","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEsAAAAEAAAAGwAAABOgsAEAuwD/kglAc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iYXNpYy9VcmlWYWx1ZUZhY3RvcnkuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `NamespaceRegistry NamespaceRegistry$Holder.getNamespaceRegistry()` of un-annotated interface `org.modeshape.jcr.value.NamespaceRegistry$Holder`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":187,"column":-1,"procedure":"org.modeshape.jcr.value.basic.UriValueFactory.create(org.modeshape.jcr.value.Path$Segment):java.net.URI","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/UriValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/UriValueFactory.java","line_number":187,"column_number":-1,"description":"Call to un-annotated interface method NamespaceRegistry NamespaceRegistry$Holder.getNamespaceRegistry()"}],"key":"UriValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"758bf667115abc47af86f91eee4ab3b7","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEsAAAAEAAAAGwAAABOgsAEAuwD/kglAc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iYXNpYy9VcmlWYWx1ZUZhY3RvcnkuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String Reference.getString(TextEncoder)` of un-annotated interface `org.modeshape.jcr.value.Reference`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":53,"column":-1,"procedure":"org.modeshape.jcr.value.basic.StringValueFactory.create(org.modeshape.jcr.value.Reference):java.lang.Object","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/StringValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/StringValueFactory.java","line_number":53,"column_number":-1,"description":"call to String StringValueFactory.create(Reference)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/StringValueFactory.java","line_number":219,"column_number":-1,"description":"Call to un-annotated interface method String Reference.getString(TextEncoder)"}],"key":"StringValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"308012c884cb49e15f75d6e661846f13","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE4AAAAEAAAAGwAAABOgsAEA2wD/kglDc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iYXNpYy9TdHJpbmdWYWx1ZUZhY3RvcnkuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String Reference.getString(TextEncoder)` of un-annotated interface `org.modeshape.jcr.value.Reference`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":219,"column":-1,"procedure":"org.modeshape.jcr.value.basic.StringValueFactory.create(org.modeshape.jcr.value.Reference):java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/StringValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/StringValueFactory.java","line_number":219,"column_number":-1,"description":"Call to un-annotated interface method String Reference.getString(TextEncoder)"}],"key":"StringValueFactory.java|create|INTERFACE_NOT_THREAD_SAFE","hash":"308012c884cb49e15f75d6e661846f13","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE4AAAAEAAAAGwAAABOgsAEA2wD/kglDc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iYXNpYy9TdHJpbmdWYWx1ZUZhY3RvcnkuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `boolean Path$Segment.isParentReference()` of un-annotated interface `org.modeshape.jcr.value.Path$Segment`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":323,"column":-1,"procedure":"org.modeshape.jcr.value.basic.PathValueFactory.createAbsolutePath(org.modeshape.jcr.value.Name[]):org.modeshape.jcr.value.Path","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":323,"column_number":-1,"description":"call to BasicPath.<init>(List,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/BasicPath.java","line_number":64,"column_number":-1,"description":"call to boolean AbstractPath.isNormalized(List)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/basic/AbstractPath.java","line_number":74,"column_number":-1,"description":"Call to un-annotated interface method boolean Path$Segment.isParentReference()"}],"key":"PathValueFactory.java|createAbsolutePath|INTERFACE_NOT_THREAD_SAFE","hash":"2db555240ebc9541619bce223d92cc8f","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEcAAAAEAAAAGgAAABKgsABKAP+SCT1zcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2Jhc2ljL0Fic3RyYWN0UGF0aC5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `boolean Path$Segment.isParentReference()` of un-annotated interface `org.modeshape.jcr.value.Path$Segment`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":340,"column":-1,"procedure":"org.modeshape.jcr.value.basic.PathValueFactory.createAbsolutePath(org.modeshape.jcr.value.Path$Segment[]):org.modeshape.jcr.value.Path","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":340,"column_number":-1,"description":"call to BasicPath.<init>(List,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/BasicPath.java","line_number":64,"column_number":-1,"description":"call to boolean AbstractPath.isNormalized(List)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/basic/AbstractPath.java","line_number":74,"column_number":-1,"description":"Call to un-annotated interface method boolean Path$Segment.isParentReference()"}],"key":"PathValueFactory.java|createAbsolutePath|INTERFACE_NOT_THREAD_SAFE","hash":"2db555240ebc9541619bce223d92cc8f","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEcAAAAEAAAAGgAAABKgsABKAP+SCT1zcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2Jhc2ljL0Fic3RyYWN0UGF0aC5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `boolean Path$Segment.isParentReference()` of un-annotated interface `org.modeshape.jcr.value.Path$Segment`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":357,"column":-1,"procedure":"org.modeshape.jcr.value.basic.PathValueFactory.createAbsolutePath(java.lang.Iterable):org.modeshape.jcr.value.Path","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":357,"column_number":-1,"description":"call to BasicPath.<init>(List,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/BasicPath.java","line_number":64,"column_number":-1,"description":"call to boolean AbstractPath.isNormalized(List)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/basic/AbstractPath.java","line_number":74,"column_number":-1,"description":"Call to un-annotated interface method boolean Path$Segment.isParentReference()"}],"key":"PathValueFactory.java|createAbsolutePath|INTERFACE_NOT_THREAD_SAFE","hash":"2db555240ebc9541619bce223d92cc8f","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEcAAAAEAAAAGgAAABKgsABKAP+SCT1zcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2Jhc2ljL0Fic3RyYWN0UGF0aC5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String Name.getLocalName()` of un-annotated interface `org.modeshape.jcr.value.Name`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":1209,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.createChild(org.modeshape.jcr.cache.SessionCache,org.modeshape.jcr.cache.NodeKey,org.modeshape.jcr.value.Name,java.lang.Iterable):org.modeshape.jcr.cache.MutableCachedNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1209,"column_number":-1,"description":"call to void MutableChildReferences.append(NodeKey,Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/MutableChildReferences.java","line_number":183,"column_number":-1,"description":"call to ChildReference.<init>(NodeKey,Name,int)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/ChildReference.java","line_number":37,"column_number":-1,"description":"call to BasicPathSegment.<init>(Name,int)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/basic/BasicPathSegment.java","line_number":59,"column_number":-1,"description":"call to boolean BasicPathSegment.isSelfReference()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/value/basic/BasicPathSegment.java","line_number":85,"column_number":-1,"description":"Call to un-annotated interface method String Name.getLocalName()"}],"key":"SessionNode.java|createChild|INTERFACE_NOT_THREAD_SAFE","hash":"862b88d20b9ddd66631857b889073afb","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEsAAAAEAAAAGwAAABOgsABVAP+SCUFzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2Jhc2ljL0Jhc2ljUGF0aFNlZ21lbnQuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `MutableCachedNode SessionNode.createChild(SessionCache,NodeKey,Name,Iterable)` indirectly mutates container `changes.addedStrong` via call to `put` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1201,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.createChild(org.modeshape.jcr.cache.SessionCache,org.modeshape.jcr.cache.NodeKey,org.modeshape.jcr.value.Name,java.lang.Iterable):org.modeshape.jcr.cache.MutableCachedNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1201,"column_number":-1,"description":"call to void SessionNode.setProperty(SessionCache,Property)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":819,"column_number":-1,"description":"call to void SessionNode.processPropertyChange(SessionCache,Name,SessionCache)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":965,"column_number":-1,"description":"call to void SessionNode.addOrRemoveReferrers(SessionCache,SessionCache,Property,Iterator,boolean)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1023,"column_number":-1,"description":"call to void SessionNode.addReferrer(SessionCache,Property,NodeKey,CachedNode$ReferenceType)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":678,"column_number":-1,"description":"call to void SessionNode$ReferrerChanges.addStrongReferrer(Property,NodeKey)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2474,"column_number":-1,"description":"call to void SessionNode$ReferrerChanges.processReferrerChange(Property,NodeKey,Map,Map)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2504,"column_number":-1,"description":"Write to container `changes.addedStrong` via call to `put`"}],"key":"SessionNode.java|createChild|THREAD_SAFETY_VIOLATION","hash":"ea5a40abb8c029584ad06de394f0ad6c","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEoAAAAEAAAAGgAAABKgsAEJyAD/kgk/c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9TZXNzaW9uTm9kZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `MutableCachedNode SessionNode.createChild(SessionCache,NodeKey,Name,Iterable)` indirectly reads without synchronization from container `session.changedNodes` via call to `get`. Potentially races with write in method `SessionNode.createChild(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1188,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.createChild(org.modeshape.jcr.cache.SessionCache,org.modeshape.jcr.cache.NodeKey,org.modeshape.jcr.value.Name,java.lang.Iterable):org.modeshape.jcr.cache.MutableCachedNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1188,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1188,"column_number":-1,"description":"call to void WritableSessionCache.assertInSession(SessionNode)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":152,"column_number":-1,"description":"Read of container `session.changedNodes` via call to `get`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1196,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1196,"column_number":-1,"description":"call to SessionNode WritableSessionCache.add(SessionNode)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":1549,"column_number":-1,"description":"Write to container `session.changedNodes` via call to `put`"}],"key":"SessionNode.java|createChild|THREAD_SAFETY_VIOLATION","hash":"369c2060486115cd7db51e62a7b4e445","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAKUAAAAIAAAAOgAAACigsAEAmAD/kglIc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xcml0YWJsZVNlc3Npb25DYWNoZS5qYXZhoLABBg0A/5IJSHNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvY2FjaGUvZG9jdW1lbnQvV3JpdGFibGVTZXNzaW9uQ2FjaGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `MutableCachedNode SessionNode.createChild(SessionCache,NodeKey,Name,Property,org.modeshape.jcr.value.Property[])` indirectly mutates container `changes.addedStrong` via call to `put` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1165,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.createChild(org.modeshape.jcr.cache.SessionCache,org.modeshape.jcr.cache.NodeKey,org.modeshape.jcr.value.Name,org.modeshape.jcr.value.Property,org.modeshape.jcr.value.Property[]):org.modeshape.jcr.cache.MutableCachedNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1165,"column_number":-1,"description":"call to void SessionNode.setProperty(SessionCache,Property)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":819,"column_number":-1,"description":"call to void SessionNode.processPropertyChange(SessionCache,Name,SessionCache)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":965,"column_number":-1,"description":"call to void SessionNode.addOrRemoveReferrers(SessionCache,SessionCache,Property,Iterator,boolean)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1023,"column_number":-1,"description":"call to void SessionNode.addReferrer(SessionCache,Property,NodeKey,CachedNode$ReferenceType)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":678,"column_number":-1,"description":"call to void SessionNode$ReferrerChanges.addStrongReferrer(Property,NodeKey)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2474,"column_number":-1,"description":"call to void SessionNode$ReferrerChanges.processReferrerChange(Property,NodeKey,Map,Map)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2504,"column_number":-1,"description":"Write to container `changes.addedStrong` via call to `put`"}],"key":"SessionNode.java|createChild|THREAD_SAFETY_VIOLATION","hash":"5f465578bab53ba1b6353cc34885c03e","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEoAAAAEAAAAGgAAABKgsAEJyAD/kgk/c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9TZXNzaW9uTm9kZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String Name.getLocalName()` of un-annotated interface `org.modeshape.jcr.value.Name`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":1177,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.createChild(org.modeshape.jcr.cache.SessionCache,org.modeshape.jcr.cache.NodeKey,org.modeshape.jcr.value.Name,org.modeshape.jcr.value.Property,org.modeshape.jcr.value.Property[]):org.modeshape.jcr.cache.MutableCachedNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1177,"column_number":-1,"description":"call to void MutableChildReferences.append(NodeKey,Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/MutableChildReferences.java","line_number":183,"column_number":-1,"description":"call to ChildReference.<init>(NodeKey,Name,int)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/ChildReference.java","line_number":37,"column_number":-1,"description":"call to BasicPathSegment.<init>(Name,int)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/basic/BasicPathSegment.java","line_number":59,"column_number":-1,"description":"call to boolean BasicPathSegment.isSelfReference()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/value/basic/BasicPathSegment.java","line_number":85,"column_number":-1,"description":"Call to un-annotated interface method String Name.getLocalName()"}],"key":"SessionNode.java|createChild|INTERFACE_NOT_THREAD_SAFE","hash":"862b88d20b9ddd66631857b889073afb","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEsAAAAEAAAAGwAAABOgsABVAP+SCUFzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2Jhc2ljL0Jhc2ljUGF0aFNlZ21lbnQuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `MutableCachedNode SessionNode.createChild(SessionCache,NodeKey,Name,Property,org.modeshape.jcr.value.Property[])` indirectly reads without synchronization from container `session.changedNodes` via call to `get`. Potentially races with write in method `SessionNode.setPermissions(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1153,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.createChild(org.modeshape.jcr.cache.SessionCache,org.modeshape.jcr.cache.NodeKey,org.modeshape.jcr.value.Name,org.modeshape.jcr.value.Property,org.modeshape.jcr.value.Property[]):org.modeshape.jcr.cache.MutableCachedNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1153,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1153,"column_number":-1,"description":"call to void WritableSessionCache.assertInSession(SessionNode)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":152,"column_number":-1,"description":"Read of container `session.changedNodes` via call to `get`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1545,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1545,"column_number":-1,"description":"call to MutableCachedNode SessionNode.createChild(SessionCache,NodeKey,Name,Property,org.modeshape.jcr.value.Property[])"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1161,"column_number":-1,"description":"call to SessionNode WritableSessionCache.add(SessionNode)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":1549,"column_number":-1,"description":"Write to container `session.changedNodes` via call to `put`"}],"key":"SessionNode.java|createChild|THREAD_SAFETY_VIOLATION","hash":"463e1340eb6ad8d50289effc1b1e3700","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAKUAAAAIAAAAOgAAACigsAEAmAD/kglIc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xcml0YWJsZVNlc3Npb25DYWNoZS5qYXZhoLABBg0A/5IJSHNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvY2FjaGUvZG9jdW1lbnQvV3JpdGFibGVTZXNzaW9uQ2FjaGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String Name.getString()` of un-annotated interface `org.modeshape.jcr.value.Name`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":429,"column":-1,"procedure":"org.modeshape.jcr.RepositoryIndexManager.createIndexDefinitionTemplate():org.modeshape.jcr.api.index.IndexDefinitionTemplate","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":429,"column_number":-1,"description":"call to RepositoryIndexDefinitionTemplate.<init>()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexDefinitionTemplate.java","line_number":32,"column_number":-1,"description":"Call to un-annotated interface method String Name.getString()"}],"key":"RepositoryIndexManager.java|createIndexDefinitionTemplate|INTERFACE_NOT_THREAD_SAFE","hash":"85cece1bfd35150e5a982a637996f470","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE8AAAAEAAAAHAAAABOgsGAA/5IJRnNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvUmVwb3NpdG9yeUluZGV4RGVmaW5pdGlvblRlbXBsYXRlLmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Iterator ChildReferences.iterator(ChildReferences$Context)` of un-annotated interface `org.modeshape.jcr.cache.ChildReferences`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":215,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionChildReferences.createIterator(org.modeshape.jcr.cache.ChildReferences$Context):java.util.Iterator","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionChildReferences.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionChildReferences.java","line_number":215,"column_number":-1,"description":"Call to un-annotated interface method Iterator ChildReferences.iterator(ChildReferences$Context)"}],"key":"SessionChildReferences.java|createIterator|INTERFACE_NOT_THREAD_SAFE","hash":"52f63aeec8d80fb2e4901ec536d933a7","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAFUAAAAEAAAAHQAAABSgsAEA1wD/kglKc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9TZXNzaW9uQ2hpbGRSZWZlcmVuY2VzLmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Iterator ChildReferences.iterator(Name,ChildReferences$Context)` of un-annotated interface `org.modeshape.jcr.cache.ChildReferences`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":197,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionChildReferences.createIterator(org.modeshape.jcr.value.Name,org.modeshape.jcr.cache.ChildReferences$Context):java.util.Iterator","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionChildReferences.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionChildReferences.java","line_number":197,"column_number":-1,"description":"Call to un-annotated interface method Iterator ChildReferences.iterator(Name,ChildReferences$Context)"}],"key":"SessionChildReferences.java|createIterator|INTERFACE_NOT_THREAD_SAFE","hash":"95f79db7f0921e409144dbc094c39715","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAFUAAAAEAAAAHQAAABSgsAEAxQD/kglKc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9TZXNzaW9uQ2hpbGRSZWZlcmVuY2VzLmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `boolean Path$Segment.isParentReference()` of un-annotated interface `org.modeshape.jcr.value.Path$Segment`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":375,"column":-1,"procedure":"org.modeshape.jcr.value.basic.PathValueFactory.createRelativePath(org.modeshape.jcr.value.Name[]):org.modeshape.jcr.value.Path","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":375,"column_number":-1,"description":"call to BasicPath.<init>(List,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/BasicPath.java","line_number":64,"column_number":-1,"description":"call to boolean AbstractPath.isNormalized(List)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/basic/AbstractPath.java","line_number":74,"column_number":-1,"description":"Call to un-annotated interface method boolean Path$Segment.isParentReference()"}],"key":"PathValueFactory.java|createRelativePath|INTERFACE_NOT_THREAD_SAFE","hash":"50241a58bd6939d6860f280b2624a5d3","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEcAAAAEAAAAGgAAABKgsABKAP+SCT1zcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2Jhc2ljL0Fic3RyYWN0UGF0aC5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `boolean Path$Segment.isIdentifier()` of un-annotated interface `org.modeshape.jcr.value.Path$Segment`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":387,"column":-1,"procedure":"org.modeshape.jcr.value.basic.PathValueFactory.createRelativePath(org.modeshape.jcr.value.Path$Segment[]):org.modeshape.jcr.value.Path","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":387,"column_number":-1,"description":"Call to un-annotated interface method boolean Path$Segment.isIdentifier()"}],"key":"PathValueFactory.java|createRelativePath|INTERFACE_NOT_THREAD_SAFE","hash":"0f929bd4c88e87ecd75fcba338c62abf","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEwAAAAEAAAAGwAAABOgsAEBgwD/kglBc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iYXNpYy9QYXRoVmFsdWVGYWN0b3J5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `boolean Path$Segment.isIdentifier()` of un-annotated interface `org.modeshape.jcr.value.Path$Segment`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":404,"column":-1,"procedure":"org.modeshape.jcr.value.basic.PathValueFactory.createRelativePath(java.lang.Iterable):org.modeshape.jcr.value.Path","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":404,"column_number":-1,"description":"Call to un-annotated interface method boolean Path$Segment.isIdentifier()"}],"key":"PathValueFactory.java|createRelativePath|INTERFACE_NOT_THREAD_SAFE","hash":"0f929bd4c88e87ecd75fcba338c62abf","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEwAAAAEAAAAGwAAABOgsAEBlAD/kglBc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iYXNpYy9QYXRoVmFsdWVGYWN0b3J5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String Name.getLocalName()` of un-annotated interface `org.modeshape.jcr.value.Name`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":588,"column":-1,"procedure":"org.modeshape.jcr.value.basic.PathValueFactory.createSegment(java.lang.String):org.modeshape.jcr.value.Path$Segment","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":588,"column_number":-1,"description":"call to Path$Segment PathValueFactory.createSegment(String,TextDecoder)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":613,"column_number":-1,"description":"call to BasicPathSegment.<init>(Name,int)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/basic/BasicPathSegment.java","line_number":59,"column_number":-1,"description":"call to boolean BasicPathSegment.isSelfReference()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/basic/BasicPathSegment.java","line_number":85,"column_number":-1,"description":"Call to un-annotated interface method String Name.getLocalName()"}],"key":"PathValueFactory.java|createSegment|INTERFACE_NOT_THREAD_SAFE","hash":"8086190c6a419a79456e3ee816335f53","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEsAAAAEAAAAGwAAABOgsABVAP+SCUFzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2Jhc2ljL0Jhc2ljUGF0aFNlZ21lbnQuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String Name.getLocalName()` of un-annotated interface `org.modeshape.jcr.value.Name`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":626,"column":-1,"procedure":"org.modeshape.jcr.value.basic.PathValueFactory.createSegment(java.lang.String,int):org.modeshape.jcr.value.Path$Segment","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":626,"column_number":-1,"description":"call to BasicPathSegment.<init>(Name,int)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/BasicPathSegment.java","line_number":59,"column_number":-1,"description":"call to boolean BasicPathSegment.isSelfReference()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/basic/BasicPathSegment.java","line_number":85,"column_number":-1,"description":"Call to un-annotated interface method String Name.getLocalName()"}],"key":"PathValueFactory.java|createSegment|INTERFACE_NOT_THREAD_SAFE","hash":"8086190c6a419a79456e3ee816335f53","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEsAAAAEAAAAGwAAABOgsABVAP+SCUFzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2Jhc2ljL0Jhc2ljUGF0aFNlZ21lbnQuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String Name.getLocalName()` of un-annotated interface `org.modeshape.jcr.value.Name`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":613,"column":-1,"procedure":"org.modeshape.jcr.value.basic.PathValueFactory.createSegment(java.lang.String,org.modeshape.common.text.TextDecoder):org.modeshape.jcr.value.Path$Segment","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":613,"column_number":-1,"description":"call to BasicPathSegment.<init>(Name,int)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/BasicPathSegment.java","line_number":59,"column_number":-1,"description":"call to boolean BasicPathSegment.isSelfReference()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/basic/BasicPathSegment.java","line_number":85,"column_number":-1,"description":"Call to un-annotated interface method String Name.getLocalName()"}],"key":"PathValueFactory.java|createSegment|INTERFACE_NOT_THREAD_SAFE","hash":"8086190c6a419a79456e3ee816335f53","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEsAAAAEAAAAGwAAABOgsABVAP+SCUFzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2Jhc2ljL0Jhc2ljUGF0aFNlZ21lbnQuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String Name.getLocalName()` of un-annotated interface `org.modeshape.jcr.value.Name`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":583,"column":-1,"procedure":"org.modeshape.jcr.value.basic.PathValueFactory.createSegment(org.modeshape.jcr.value.Name,int):org.modeshape.jcr.value.Path$Segment","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/PathValueFactory.java","line_number":583,"column_number":-1,"description":"call to BasicPathSegment.<init>(Name,int)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/basic/BasicPathSegment.java","line_number":59,"column_number":-1,"description":"call to boolean BasicPathSegment.isSelfReference()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/basic/BasicPathSegment.java","line_number":85,"column_number":-1,"description":"Call to un-annotated interface method String Name.getLocalName()"}],"key":"PathValueFactory.java|createSegment|INTERFACE_NOT_THREAD_SAFE","hash":"8086190c6a419a79456e3ee816335f53","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEsAAAAEAAAAGwAAABOgsABVAP+SCUFzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2Jhc2ljL0Jhc2ljUGF0aFNlZ21lbnQuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void JcrWorkspace.createWorkspace(String)` indirectly mutates container `ace.privileges` via call to `addAll` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":784,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.createWorkspace(java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":784,"column_number":-1,"description":"call to void JcrSession.checkWorkspacePermission(String,java.lang.String[])"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1582,"column_number":-1,"description":"call to void JcrSession.checkPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1567,"column_number":-1,"description":"call to boolean JcrSession.hasPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1375,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPermission(Path,java.lang.String[])"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":322,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPrivileges(String,javax.jcr.security.Privilege[])"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":109,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.getApplicableACL(String)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":114,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.findAccessList(String,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":289,"column_number":-1,"description":"call to boolean JcrAccessControlList.addAccessControlEntry(Principal,javax.jcr.security.Privilege[])"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/security/acl/JcrAccessControlList.java","line_number":113,"column_number":-1,"description":"call to boolean AccessControlEntryImpl.addIfNotPresent(javax.jcr.security.Privilege[])"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/security/acl/AccessControlEntryImpl.java","line_number":103,"column_number":-1,"description":"Write to container `ace.privileges` via call to `addAll`"}],"key":"JcrWorkspace.java|createWorkspace|THREAD_SAFETY_VIOLATION","hash":"14b16e901a1e258395a09ad1376f2375","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFIAAAAEAAAAHQAAABSgsABnAP+SCUhzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3NlY3VyaXR5L2FjbC9BY2Nlc3NDb250cm9sRW50cnlJbXBsLmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `void Problems.addWarning(I18n,java.lang.Object[])` of un-annotated interface `org.modeshape.common.collection.Problems`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":794,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.createWorkspace(java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":794,"column_number":-1,"description":"call to void InitialContentImporter.importInitialContent(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/InitialContentImporter.java","line_number":79,"column_number":-1,"description":"call to InputStream InitialContentImporter.getInitialContentFileStream(String)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/InitialContentImporter.java","line_number":122,"column_number":-1,"description":"call to void JcrRepository$RunningState.warn(I18n,java.lang.Object[])"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1545,"column_number":-1,"description":"Call to un-annotated interface method void Problems.addWarning(I18n,java.lang.Object[])"}],"key":"JcrWorkspace.java|createWorkspace|INTERFACE_NOT_THREAD_SAFE","hash":"93a7c05dfc2c34b32b745df5d8fb74a3","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEGCQD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JSZXBvc2l0b3J5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void JcrWorkspace.createWorkspace(String,String)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":810,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.createWorkspace(java.lang.String,java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":810,"column_number":-1,"description":"call to void JcrWorkspace.deepClone(JcrSession,NodeKey,JcrSession,NodeKey)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":841,"column_number":-1,"description":"call to JcrVersionNode AbstractJcrNode.getBaseVersion()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3294,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrWorkspace.java|createWorkspace|THREAD_SAFETY_VIOLATION","hash":"c819e4a51106c1767f8afd849a370d7b","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `void Problems.addWarning(I18n,java.lang.Object[])` of un-annotated interface `org.modeshape.common.collection.Problems`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":805,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.createWorkspace(java.lang.String,java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":805,"column_number":-1,"description":"call to void JcrWorkspace.createWorkspace(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":794,"column_number":-1,"description":"call to void InitialContentImporter.importInitialContent(String)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/InitialContentImporter.java","line_number":79,"column_number":-1,"description":"call to InputStream InitialContentImporter.getInitialContentFileStream(String)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/InitialContentImporter.java","line_number":122,"column_number":-1,"description":"call to void JcrRepository$RunningState.warn(I18n,java.lang.Object[])"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1545,"column_number":-1,"description":"Call to un-annotated interface method void Problems.addWarning(I18n,java.lang.Object[])"}],"key":"JcrWorkspace.java|createWorkspace|INTERFACE_NOT_THREAD_SAFE","hash":"93a7c05dfc2c34b32b745df5d8fb74a3","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEGCQD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JSZXBvc2l0b3J5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void JcrWorkspace.createWorkspace(String,String)` indirectly mutates container `ace.privileges` via call to `addAll` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":804,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.createWorkspace(java.lang.String,java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":804,"column_number":-1,"description":"call to void JcrWorkspace.validateCrossWorkspaceAction(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":533,"column_number":-1,"description":"call to void JcrSession.checkWorkspacePermission(String,java.lang.String[])"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1582,"column_number":-1,"description":"call to void JcrSession.checkPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1567,"column_number":-1,"description":"call to boolean JcrSession.hasPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1375,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPermission(Path,java.lang.String[])"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":322,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPrivileges(String,javax.jcr.security.Privilege[])"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":109,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.getApplicableACL(String)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":114,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.findAccessList(String,boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":289,"column_number":-1,"description":"call to boolean JcrAccessControlList.addAccessControlEntry(Principal,javax.jcr.security.Privilege[])"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/security/acl/JcrAccessControlList.java","line_number":113,"column_number":-1,"description":"call to boolean AccessControlEntryImpl.addIfNotPresent(javax.jcr.security.Privilege[])"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/security/acl/AccessControlEntryImpl.java","line_number":103,"column_number":-1,"description":"Write to container `ace.privileges` via call to `addAll`"}],"key":"JcrWorkspace.java|createWorkspace|THREAD_SAFETY_VIOLATION","hash":"e39b32a8be0c5d0fd7bed5498b91acce","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFIAAAAEAAAAHQAAABSgsABnAP+SCUhzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3NlY3VyaXR5L2FjbC9BY2Nlc3NDb250cm9sRW50cnlJbXBsLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `Database DatabaseBinaryStore.database()` reads without synchronization from `this.database`. Potentially races with write in method `DatabaseBinaryStore.start()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":155,"column":-1,"procedure":"org.modeshape.jcr.value.binary.DatabaseBinaryStore.database():org.modeshape.jcr.value.binary.Database","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":155,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":155,"column_number":-1,"description":"access to `this.database`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":151,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":151,"column_number":-1,"description":"call to Database DatabaseBinaryStore.database()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":158,"column_number":-1,"description":"access to `this.database`"}],"key":"DatabaseBinaryStore.java|database|THREAD_SAFETY_VIOLATION","hash":"1a29f23ac06d39bd6f49b084cd03b5fa","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFkAAAAGAAAAIwAAABqgsAEAmwD/kglFc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvRGF0YWJhc2VCaW5hcnlTdG9yZS5qYXZhoLABAJ4A/wQEQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `Database DatabaseBinaryStore.database()` indirectly reads without synchronization from `this.dataSource`. Potentially races with write in method `DatabaseBinaryStore.start()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":156,"column":-1,"procedure":"org.modeshape.jcr.value.binary.DatabaseBinaryStore.database():org.modeshape.jcr.value.binary.Database","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":156,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":156,"column_number":-1,"description":"call to Connection DatabaseBinaryStore.newConnection()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":328,"column_number":-1,"description":"access to `this.dataSource`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":146,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":146,"column_number":-1,"description":"call to void DatabaseBinaryStore.lookupDataSource()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":338,"column_number":-1,"description":"access to `this.dataSource`"}],"key":"DatabaseBinaryStore.java|database|THREAD_SAFETY_VIOLATION","hash":"fbdbb5f614f1b62b37618c92ea2e1f35","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAJ8AAAAIAAAAOAAAACagsAEBSAD/kglFc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvRGF0YWJhc2VCaW5hcnlTdG9yZS5qYXZhoLABAVIA/5IJRXNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvdmFsdWUvYmluYXJ5L0RhdGFiYXNlQmluYXJ5U3RvcmUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Database DatabaseBinaryStore.database()` writes to field `this.database` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":158,"column":-1,"procedure":"org.modeshape.jcr.value.binary.DatabaseBinaryStore.database():org.modeshape.jcr.value.binary.Database","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":158,"column_number":-1,"description":"access to `this.database`"}],"key":"DatabaseBinaryStore.java|database|THREAD_SAFETY_VIOLATION","hash":"acbf8e9d7e761aa002ea45e3963571f3","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFAAAAAEAAAAHAAAABOgsAEAngD/kglFc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvRGF0YWJhc2VCaW5hcnlTdG9yZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void JcrWorkspace.deepClone(JcrSession,NodeKey,JcrSession,NodeKey)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":841,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.deepClone(org.modeshape.jcr.JcrSession,org.modeshape.jcr.cache.NodeKey,org.modeshape.jcr.JcrSession,org.modeshape.jcr.cache.NodeKey):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":841,"column_number":-1,"description":"call to JcrVersionNode AbstractJcrNode.getBaseVersion()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3294,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrWorkspace.java|deepClone|THREAD_SAFETY_VIOLATION","hash":"3554f13a51eb1ed251b003f6d66bc14a","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void JcrWorkspace.deepClone(JcrSession,NodeKey,JcrSession,NodeKey)` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":824,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.deepClone(org.modeshape.jcr.JcrSession,org.modeshape.jcr.cache.NodeKey,org.modeshape.jcr.JcrSession,org.modeshape.jcr.cache.NodeKey):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":824,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"JcrWorkspace.java|deepClone|THREAD_SAFETY_VIOLATION","hash":"74afad44d976fedf90a187fdb93e1d63","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `void Transactions$Transaction.commit()` of un-annotated interface `org.modeshape.jcr.txn.Transactions$Transaction`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":844,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.deepClone(org.modeshape.jcr.JcrSession,org.modeshape.jcr.cache.NodeKey,org.modeshape.jcr.JcrSession,org.modeshape.jcr.cache.NodeKey):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":844,"column_number":-1,"description":"call to void JcrSession.save()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1172,"column_number":-1,"description":"call to JcrSession$JcrPreSave.<init>(JcrSession,SystemContent,Map,Map,long)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":2066,"column_number":-1,"description":"call to void JcrSession$JcrPreSave.aclMetadataRefresh(long)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":2077,"column_number":-1,"description":"call to void RepositoryCache.setAccessControlEnabled(boolean)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/RepositoryCache.java","line_number":415,"column_number":-1,"description":"call to void RepositoryCache.refreshRepositoryMetadata(boolean)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/RepositoryCache.java","line_number":624,"column_number":-1,"description":"call to Object RepositoryCache.runInTransaction(Callable,int,java.lang.String[])"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/cache/RepositoryCache.java","line_number":517,"column_number":-1,"description":"Call to un-annotated interface method void Transactions$Transaction.commit()"}],"key":"JcrWorkspace.java|deepClone|INTERFACE_NOT_THREAD_SAFE","hash":"c2cb7e668ca1da1cec949ba168ef641c","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAECBQD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9SZXBvc2l0b3J5Q2FjaGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Path CachedNode.getPath(NodeCache)` of un-annotated interface `org.modeshape.jcr.cache.CachedNode`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":1416,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.deepClone(org.modeshape.jcr.cache.SessionCache,org.modeshape.jcr.cache.CachedNode,org.modeshape.jcr.cache.SessionCache,java.lang.String,org.modeshape.jcr.Connectors):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1416,"column_number":-1,"description":"call to SessionNode$DeepClone.<init>(SessionNode,SessionNode,WritableSessionCache,CachedNode,SessionCache,String,Connectors)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":3042,"column_number":-1,"description":"call to SessionNode$DeepCopy.<init>(SessionNode,SessionNode,WritableSessionCache,CachedNode,SessionCache,String,Connectors)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2686,"column_number":-1,"description":"Call to un-annotated interface method Path CachedNode.getPath(NodeCache)"}],"key":"SessionNode.java|deepClone|INTERFACE_NOT_THREAD_SAFE","hash":"1c033a9d7112e6736b8a1e241349ae6e","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEoAAAAEAAAAGgAAABKgsAEKfgD/kgk/c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9TZXNzaW9uTm9kZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void SessionNode.deepClone(SessionCache,CachedNode,SessionCache,String,Connectors)` indirectly reads with synchronization from container `changes.addedStrong` via call to `get`. Potentially races with unsynchronized write in method `SessionNode.setProperties(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1417,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.deepClone(org.modeshape.jcr.cache.SessionCache,org.modeshape.jcr.cache.CachedNode,org.modeshape.jcr.cache.SessionCache,java.lang.String,org.modeshape.jcr.Connectors):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1417,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1417,"column_number":-1,"description":"call to void SessionNode$DeepCopy.execute()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2700,"column_number":-1,"description":"call to void SessionNode$DeepCopy.doPhase1(MutableCachedNode,CachedNode)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2763,"column_number":-1,"description":"call to void WritableSessionCache.destroy(NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":1662,"column_number":-1,"description":"call to void SessionNode.removeAllReferences(SessionCache)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":979,"column_number":-1,"description":"call to void SessionNode.addOrRemoveReferrers(SessionCache,SessionCache,Property,Iterator,boolean)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1023,"column_number":-1,"description":"call to void SessionNode.addReferrer(SessionCache,Property,NodeKey,CachedNode$ReferenceType)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":678,"column_number":-1,"description":"call to void SessionNode$ReferrerChanges.addStrongReferrer(Property,NodeKey)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2474,"column_number":-1,"description":"call to void SessionNode$ReferrerChanges.processReferrerChange(Property,NodeKey,Map,Map)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2501,"column_number":-1,"description":"Read of container `changes.addedStrong` via call to `get`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1064,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1064,"column_number":-1,"description":"call to void SessionNode.processPropertyChange(SessionCache,Name,SessionCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":965,"column_number":-1,"description":"call to void SessionNode.addOrRemoveReferrers(SessionCache,SessionCache,Property,Iterator,boolean)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1023,"column_number":-1,"description":"call to void SessionNode.addReferrer(SessionCache,Property,NodeKey,CachedNode$ReferenceType)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":678,"column_number":-1,"description":"call to void SessionNode$ReferrerChanges.addStrongReferrer(Property,NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2474,"column_number":-1,"description":"call to void SessionNode$ReferrerChanges.processReferrerChange(Property,NodeKey,Map,Map)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2504,"column_number":-1,"description":"Write to container `changes.addedStrong` via call to `put`"}],"key":"SessionNode.java|deepClone|THREAD_SAFETY_VIOLATION","hash":"8120883850b705ec63a27b4c959ee92f","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFMAAAAGAAAAIQAAABmgsAEJxQD/kgk/c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9TZXNzaW9uTm9kZS5qYXZhoLABCcgA/wQEQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Path CachedNode.getPath(NodeCache)` of un-annotated interface `org.modeshape.jcr.cache.CachedNode`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":1403,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.deepCopy(org.modeshape.jcr.cache.SessionCache,org.modeshape.jcr.cache.CachedNode,org.modeshape.jcr.cache.SessionCache,java.lang.String,org.modeshape.jcr.Connectors):java.util.Map","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1403,"column_number":-1,"description":"call to SessionNode$DeepCopy.<init>(SessionNode,SessionNode,WritableSessionCache,CachedNode,SessionCache,String,Connectors)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2686,"column_number":-1,"description":"Call to un-annotated interface method Path CachedNode.getPath(NodeCache)"}],"key":"SessionNode.java|deepCopy|INTERFACE_NOT_THREAD_SAFE","hash":"6e169311f42b468413913e913b94d1a7","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEoAAAAEAAAAGgAAABKgsAEKfgD/kgk/c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9TZXNzaW9uTm9kZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `Map SessionNode.deepCopy(SessionCache,CachedNode,SessionCache,String,Connectors)` indirectly reads with synchronization from container `changes.addedStrong` via call to `get`. Potentially races with unsynchronized write in method `SessionNode.setProperties(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1404,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.deepCopy(org.modeshape.jcr.cache.SessionCache,org.modeshape.jcr.cache.CachedNode,org.modeshape.jcr.cache.SessionCache,java.lang.String,org.modeshape.jcr.Connectors):java.util.Map","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1404,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1404,"column_number":-1,"description":"call to void SessionNode$DeepCopy.execute()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2700,"column_number":-1,"description":"call to void SessionNode$DeepCopy.doPhase1(MutableCachedNode,CachedNode)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2763,"column_number":-1,"description":"call to void WritableSessionCache.destroy(NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":1662,"column_number":-1,"description":"call to void SessionNode.removeAllReferences(SessionCache)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":979,"column_number":-1,"description":"call to void SessionNode.addOrRemoveReferrers(SessionCache,SessionCache,Property,Iterator,boolean)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1023,"column_number":-1,"description":"call to void SessionNode.addReferrer(SessionCache,Property,NodeKey,CachedNode$ReferenceType)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":678,"column_number":-1,"description":"call to void SessionNode$ReferrerChanges.addStrongReferrer(Property,NodeKey)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2474,"column_number":-1,"description":"call to void SessionNode$ReferrerChanges.processReferrerChange(Property,NodeKey,Map,Map)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2501,"column_number":-1,"description":"Read of container `changes.addedStrong` via call to `get`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1064,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1064,"column_number":-1,"description":"call to void SessionNode.processPropertyChange(SessionCache,Name,SessionCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":965,"column_number":-1,"description":"call to void SessionNode.addOrRemoveReferrers(SessionCache,SessionCache,Property,Iterator,boolean)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1023,"column_number":-1,"description":"call to void SessionNode.addReferrer(SessionCache,Property,NodeKey,CachedNode$ReferenceType)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":678,"column_number":-1,"description":"call to void SessionNode$ReferrerChanges.addStrongReferrer(Property,NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2474,"column_number":-1,"description":"call to void SessionNode$ReferrerChanges.processReferrerChange(Property,NodeKey,Map,Map)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2504,"column_number":-1,"description":"Write to container `changes.addedStrong` via call to `put`"}],"key":"SessionNode.java|deepCopy|THREAD_SAFETY_VIOLATION","hash":"a83843c205aaa59fbaf2297735e2ddff","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFMAAAAGAAAAIQAAABmgsAEJxQD/kgk/c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9TZXNzaW9uTm9kZS5qYXZhoLABCcgA/wQEQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Configuration EmbeddedCacheManager.defineConfiguration(String,Configuration)` of un-annotated interface `org.infinispan.manager.EmbeddedCacheManager`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.Environment` is annotated `@ThreadSafe`.","severity":"WARNING","line":371,"column":-1,"procedure":"org.modeshape.jcr.LocalEnvironment.defineCache(java.lang.String,java.lang.String,org.infinispan.configuration.cache.Configuration):org.infinispan.configuration.cache.Configuration","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/LocalEnvironment.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/LocalEnvironment.java","line_number":371,"column_number":-1,"description":"Call to un-annotated interface method Configuration EmbeddedCacheManager.defineConfiguration(String,Configuration)"}],"key":"LocalEnvironment.java|defineCache|INTERFACE_NOT_THREAD_SAFE","hash":"670bf65eba8a6c20eca467b7477f5f2c","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEAAAAAEAAAAGAAAABGgsAEBcwD/kgk1c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9Mb2NhbEVudmlyb25tZW50LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Configuration EmbeddedCacheManager.defineConfiguration(String,Configuration)` of un-annotated interface `org.infinispan.manager.EmbeddedCacheManager`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.Environment` is annotated `@ThreadSafe`.","severity":"WARNING","line":343,"column":-1,"procedure":"org.modeshape.jcr.LocalEnvironment.defineCache(java.lang.String,org.infinispan.configuration.cache.Configuration):org.infinispan.configuration.cache.Configuration","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/LocalEnvironment.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/LocalEnvironment.java","line_number":343,"column_number":-1,"description":"call to Configuration LocalEnvironment.defineCache(String,String,Configuration)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/LocalEnvironment.java","line_number":371,"column_number":-1,"description":"Call to un-annotated interface method Configuration EmbeddedCacheManager.defineConfiguration(String,Configuration)"}],"key":"LocalEnvironment.java|defineCache|INTERFACE_NOT_THREAD_SAFE","hash":"670bf65eba8a6c20eca467b7477f5f2c","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEAAAAAEAAAAGAAAABGgsAEBcwD/kgk1c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9Mb2NhbEVudmlyb25tZW50LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void JcrWorkspace.deleteWorkspace(String)` indirectly mutates container `ace.privileges` via call to `addAll` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":851,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.deleteWorkspace(java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":851,"column_number":-1,"description":"call to void JcrSession.checkWorkspacePermission(String,java.lang.String[])"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1582,"column_number":-1,"description":"call to void JcrSession.checkPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1567,"column_number":-1,"description":"call to boolean JcrSession.hasPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1375,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPermission(Path,java.lang.String[])"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":322,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPrivileges(String,javax.jcr.security.Privilege[])"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":109,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.getApplicableACL(String)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":114,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.findAccessList(String,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":289,"column_number":-1,"description":"call to boolean JcrAccessControlList.addAccessControlEntry(Principal,javax.jcr.security.Privilege[])"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/security/acl/JcrAccessControlList.java","line_number":113,"column_number":-1,"description":"call to boolean AccessControlEntryImpl.addIfNotPresent(javax.jcr.security.Privilege[])"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/security/acl/AccessControlEntryImpl.java","line_number":103,"column_number":-1,"description":"Write to container `ace.privileges` via call to `addAll`"}],"key":"JcrWorkspace.java|deleteWorkspace|THREAD_SAFETY_VIOLATION","hash":"814ec8b652b9b19047aca347e814c803","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFIAAAAEAAAAHQAAABSgsABnAP+SCUhzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3NlY3VyaXR5L2FjbC9BY2Nlc3NDb250cm9sRW50cnlJbXBsLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void JcrWorkspace.deleteWorkspace(String)` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":867,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.deleteWorkspace(java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":867,"column_number":-1,"description":"call to void AbstractJcrNode.remove()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3445,"column_number":-1,"description":"call to void AbstractJcrNode.removeShare()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3149,"column_number":-1,"description":"call to void AbstractJcrNode.internalRemove(boolean)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3170,"column_number":-1,"description":"call to void AbstractJcrNode.checkForLock()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":635,"column_number":-1,"description":"call to Lock AbstractJcrNode.getLockIfExists()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3322,"column_number":-1,"description":"call to Lock JcrLockManager.getLockIfExists(AbstractJcrNode)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrLockManager.java","line_number":178,"column_number":-1,"description":"call to Lock RepositoryLockManager$ModeShapeLock.lockFor(JcrSession)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","line_number":661,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":11,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"JcrWorkspace.java|deleteWorkspace|THREAD_SAFETY_VIOLATION","hash":"96e4a663c8095fc21f5e857e3fa9ea43","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `void Transactions$Transaction.commit()` of un-annotated interface `org.modeshape.jcr.txn.Transactions$Transaction`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":872,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.deleteWorkspace(java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":872,"column_number":-1,"description":"call to boolean RepositoryCache.destroyWorkspace(String,WritableSessionCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/RepositoryCache.java","line_number":1034,"column_number":-1,"description":"call to Object RepositoryCache.runInTransaction(Callable,int,java.lang.String[])"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/RepositoryCache.java","line_number":517,"column_number":-1,"description":"Call to un-annotated interface method void Transactions$Transaction.commit()"}],"key":"JcrWorkspace.java|deleteWorkspace|INTERFACE_NOT_THREAD_SAFE","hash":"379abd703d75e758a49cce0685af53b0","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAECBQD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9SZXBvc2l0b3J5Q2FjaGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `void Problems.addError(I18n,java.lang.Object[])` of un-annotated interface `org.modeshape.common.collection.Problems`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":478,"column":-1,"procedure":"org.modeshape.jcr.ModeShapeEngine.deploy(org.modeshape.jcr.RepositoryConfiguration,java.lang.String):org.modeshape.jcr.JcrRepository","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/ModeShapeEngine.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/ModeShapeEngine.java","line_number":478,"column_number":-1,"description":"call to Problems RepositoryConfiguration.validate()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryConfiguration.java","line_number":2620,"column_number":-1,"description":"call to void RepositoryConfiguration$Security.validateCustomProviders(Problems)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/RepositoryConfiguration.java","line_number":1542,"column_number":-1,"description":"call to List RepositoryConfiguration.readComponents(Document,String,String,Map,Problems)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/RepositoryConfiguration.java","line_number":2502,"column_number":-1,"description":"Call to un-annotated interface method void Problems.addError(I18n,java.lang.Object[])"}],"key":"ModeShapeEngine.java|deploy|INTERFACE_NOT_THREAD_SAFE","hash":"13652bcf43054eb61614271e9fba56ef","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEcAAAAEAAAAGgAAABKgsAEJxgD/kgk8c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9SZXBvc2l0b3J5Q29uZmlndXJhdGlvbi5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void WritableSessionCache.destroy(NodeKey)` indirectly reads with synchronization from `this.changedNodes`. Potentially races with unsynchronized write in method `WritableSessionCache.clearState()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1575,"column":-1,"procedure":"org.modeshape.jcr.cache.document.WritableSessionCache.destroy(org.modeshape.jcr.cache.NodeKey):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":1575,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":1575,"column_number":-1,"description":"call to CachedNode WritableSessionCache.getNode(NodeKey)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":174,"column_number":-1,"description":"access to `this.changedNodes`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":573,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":573,"column_number":-1,"description":"access to `this.changedNodes`"}],"key":"WritableSessionCache.java|destroy|THREAD_SAFETY_VIOLATION","hash":"a48be5f76b884abe35897fcf10e44de5","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAKUAAAAIAAAAOgAAACigsAEArgD/kglIc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xcml0YWJsZVNlc3Npb25DYWNoZS5qYXZhoLABAj0A/5IJSHNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvY2FjaGUvZG9jdW1lbnQvV3JpdGFibGVTZXNzaW9uQ2FjaGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `String ContentDetector.detect(InputStream,Metadata)` reads without synchronization from `this.detector`. Potentially races with write in method `ContentDetector.initDetector(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":74,"column":-1,"procedure":"org.modeshape.jcr.mimetype.ContentDetector.detect(java.io.InputStream,org.apache.tika.metadata.Metadata):java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/mimetype/ContentDetector.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/mimetype/ContentDetector.java","line_number":74,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/mimetype/ContentDetector.java","line_number":74,"column_number":-1,"description":"access to `this.detector`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/mimetype/ContentDetector.java","line_number":57,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/mimetype/ContentDetector.java","line_number":57,"column_number":-1,"description":"access to `this.detector`"}],"key":"ContentDetector.java|detect|THREAD_SAFETY_VIOLATION","hash":"017f9b896ff3d75517708f4477630478","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAIwAAAAIAAAANAAAACSgsABKAP+SCT1zcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL21pbWV0eXBlL0NvbnRlbnREZXRlY3Rvci5qYXZhoLB5AP+SCT1zcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL21pbWV0eXBlL0NvbnRlbnREZXRlY3Rvci5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `String NameOnlyDetector.detect(InputStream,Metadata)` reads without synchronization from `this.detector`. Potentially races with write in method `NameOnlyDetector.initDetector(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":64,"column":-1,"procedure":"org.modeshape.jcr.mimetype.NameOnlyDetector.detect(java.io.InputStream,org.apache.tika.metadata.Metadata):java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/mimetype/NameOnlyDetector.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/mimetype/NameOnlyDetector.java","line_number":64,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/mimetype/NameOnlyDetector.java","line_number":64,"column_number":-1,"description":"access to `this.detector`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/mimetype/NameOnlyDetector.java","line_number":54,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/mimetype/NameOnlyDetector.java","line_number":54,"column_number":-1,"description":"access to `this.detector`"}],"key":"NameOnlyDetector.java|detect|THREAD_SAFETY_VIOLATION","hash":"ae57a48b7556a620eaf54892532bfe5c","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAI4AAAAIAAAANAAAACSgsABAAP+SCT5zcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL21pbWV0eXBlL05hbWVPbmx5RGV0ZWN0b3IuamF2YaCwdgD/kgk+c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9taW1ldHlwZS9OYW1lT25seURldGVjdG9yLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void WritableSessionCache.doClear()` reads with synchronization from `this.changedNodes`. Potentially races with unsynchronized write in method `WritableSessionCache.clearState()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":230,"column":-1,"procedure":"org.modeshape.jcr.cache.document.WritableSessionCache.doClear():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":230,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":230,"column_number":-1,"description":"access to `this.changedNodes`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":573,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":573,"column_number":-1,"description":"access to `this.changedNodes`"}],"key":"WritableSessionCache.java|doClear|THREAD_SAFETY_VIOLATION","hash":"2910035a431231837f9f43259d48ea43","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAKUAAAAIAAAAOgAAACigsAEA5gD/kglIc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xcml0YWJsZVNlc3Npb25DYWNoZS5qYXZhoLABAj0A/5IJSHNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvY2FjaGUvZG9jdW1lbnQvV3JpdGFibGVTZXNzaW9uQ2FjaGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Path CachedNode.getPath(NodeCache)` of un-annotated interface `org.modeshape.jcr.cache.CachedNode`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":241,"column":-1,"procedure":"org.modeshape.jcr.cache.document.WritableSessionCache.doClear(org.modeshape.jcr.cache.CachedNode):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":241,"column_number":-1,"description":"Call to un-annotated interface method Path CachedNode.getPath(NodeCache)"}],"key":"WritableSessionCache.java|doClear|INTERFACE_NOT_THREAD_SAFE","hash":"d293466a850f8fd633c2ef863d4ede7e","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAFMAAAAEAAAAHQAAABSgsAEA8QD/kglIc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xcml0YWJsZVNlc3Npb25DYWNoZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void WritableSessionCache.doClear(CachedNode)` indirectly reads with synchronization from `this.changedNodes`. Potentially races with unsynchronized write in method `WritableSessionCache.clearState()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":246,"column":-1,"procedure":"org.modeshape.jcr.cache.document.WritableSessionCache.doClear(org.modeshape.jcr.cache.CachedNode):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":246,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":246,"column_number":-1,"description":"call to List WritableSessionCache.getChangedNodesAtOrBelowChildrenFirst(Path)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":268,"column_number":-1,"description":"access to `this.changedNodes`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":573,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":573,"column_number":-1,"description":"access to `this.changedNodes`"}],"key":"WritableSessionCache.java|doClear|THREAD_SAFETY_VIOLATION","hash":"4f892ca0d4396f345a70312163937ae8","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAKUAAAAIAAAAOgAAACigsAEBDAD/kglIc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xcml0YWJsZVNlc3Npb25DYWNoZS5qYXZhoLABAj0A/5IJSHNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvY2FjaGUvZG9jdW1lbnQvV3JpdGFibGVTZXNzaW9uQ2FjaGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `void SessionCache.destroy(NodeKey)` of un-annotated interface `org.modeshape.jcr.cache.SessionCache`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":111,"column":-1,"procedure":"org.modeshape.jcr.JcrNode.doRemove():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNode.java","line_number":111,"column_number":-1,"description":"Call to un-annotated interface method void SessionCache.destroy(NodeKey)"}],"key":"JcrNode.java|doRemove|INTERFACE_NOT_THREAD_SAFE","hash":"5ee30156952afc8d86993a9bc8de834e","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAADYAAAAEAAAAFgAAABCgsABvAP+SCSxzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL0pjck5vZGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void JcrNode.doRemove()` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":119,"column":-1,"procedure":"org.modeshape.jcr.JcrNode.doRemove():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNode.java","line_number":119,"column_number":-1,"description":"call to void JcrSharedNodeCache.removed(AbstractJcrNode)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSharedNodeCache.java","line_number":105,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"JcrNode.java|doRemove|THREAD_SAFETY_VIOLATION","hash":"ea8177d95e83c2ce76029cab4567b863","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `void CacheContainer.stop()` of un-annotated interface `org.infinispan.manager.CacheContainer`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.Environment` is annotated `@ThreadSafe`.","severity":"WARNING","line":128,"column":-1,"procedure":"org.modeshape.jcr.LocalEnvironment.doShutdown():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/LocalEnvironment.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/LocalEnvironment.java","line_number":128,"column_number":-1,"description":"call to void LocalEnvironment.shutdown(CacheContainer)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/LocalEnvironment.java","line_number":176,"column_number":-1,"description":"Call to un-annotated interface method void CacheContainer.stop()"}],"key":"LocalEnvironment.java|doShutdown|INTERFACE_NOT_THREAD_SAFE","hash":"6252f1a2d964dc20807c648e3708b7de","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEAAAAAEAAAAGAAAABGgsAEAsAD/kgk1c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9Mb2NhbEVudmlyb25tZW50LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void AbstractJcrNode.doneMerge(Version)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":2950,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.doneMerge(javax.jcr.version.Version):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2950,"column_number":-1,"description":"call to void JcrVersionManager.doneMerge(AbstractJcrNode,Version)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":953,"column_number":-1,"description":"call to void JcrVersionManager.removeVersionFromMergeFailedProperty(AbstractJcrNode,Version)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":983,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|doneMerge|THREAD_SAFETY_VIOLATION","hash":"bdb50fdd9bbb8c578e8c171466569f5d","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void JcrSystemNode.doneMerge(Version)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.doneMerge(javax.jcr.version.Version):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to void AbstractJcrNode.doneMerge(Version)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2950,"column_number":-1,"description":"call to void JcrVersionManager.doneMerge(AbstractJcrNode,Version)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":953,"column_number":-1,"description":"call to void JcrVersionManager.removeVersionFromMergeFailedProperty(AbstractJcrNode,Version)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":983,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrSystemNode.java|doneMerge|THREAD_SAFETY_VIOLATION","hash":"0a324e4334f04b7e3be7eb021025310d","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String NodeType.getName()` of un-annotated interface `javax.jcr.nodetype.NodeType`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":606,"column":-1,"procedure":"org.modeshape.jcr.JcrNodeType.equals(java.lang.Object):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrNodeType.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":606,"column_number":-1,"description":"Call to un-annotated interface method String NodeType.getName()"}],"key":"JcrNodeType.java|equals|INTERFACE_NOT_THREAD_SAFE","hash":"231b7cb97b1999164fe9ad6ec5ed5e2b","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAADsAAAAEAAAAFwAAABGgsAECXgD/kgkwc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JOb2RlVHlwZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `NodeKey CachedNode.getKey()` of un-annotated interface `org.modeshape.jcr.cache.CachedNode`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":539,"column":-1,"procedure":"org.modeshape.jcr.cache.document.LazyCachedNode.equals(java.lang.Object):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":539,"column_number":-1,"description":"Call to un-annotated interface method NodeKey CachedNode.getKey()"}],"key":"LazyCachedNode.java|equals|INTERFACE_NOT_THREAD_SAFE","hash":"ea597eef7176754b7a038779a9076b6a","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAECGwD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9MYXp5Q2FjaGVkTm9kZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `NodeKey CachedNode.getKey()` of un-annotated interface `org.modeshape.jcr.cache.CachedNode`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":1618,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.equals(java.lang.Object):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1618,"column_number":-1,"description":"Call to un-annotated interface method NodeKey CachedNode.getKey()"}],"key":"SessionNode.java|equals|INTERFACE_NOT_THREAD_SAFE","hash":"5e31b4b60f25dad8657dd7ed5e3c0470","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEoAAAAEAAAAGgAAABKgsAEGUgD/kgk/c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9TZXNzaW9uTm9kZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String QueryParser.getLanguage()` of un-annotated interface `org.modeshape.jcr.query.parse.QueryParser`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":196,"column":-1,"procedure":"org.modeshape.jcr.query.parse.QueryParsers.equals(java.lang.Object):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/query/parse/QueryParsers.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/parse/QueryParsers.java","line_number":196,"column_number":-1,"description":"call to Set QueryParsers.getLanguages()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/parse/QueryParsers.java","line_number":142,"column_number":-1,"description":"Call to un-annotated interface method String QueryParser.getLanguage()"}],"key":"QueryParsers.java|equals|INTERFACE_NOT_THREAD_SAFE","hash":"ff3f5faf5b897dde0e9ec6719ea68754","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEgAAAAEAAAAGgAAABKgsAEAjgD/kgk9c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9xdWVyeS9wYXJzZS9RdWVyeVBhcnNlcnMuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `ModeShapeFederationManager JcrWorkspace.federationManager()` reads without synchronization from `this.federationManager`. Potentially races with write in method `JcrWorkspace.getFederationManager()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":959,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.federationManager():org.modeshape.jcr.ModeShapeFederationManager","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":959,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":959,"column_number":-1,"description":"access to `this.federationManager`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":955,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":955,"column_number":-1,"description":"call to ModeShapeFederationManager JcrWorkspace.federationManager()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":964,"column_number":-1,"description":"access to `this.federationManager`"}],"key":"JcrWorkspace.java|federationManager|THREAD_SAFETY_VIOLATION","hash":"e017cc1a36ee4af8d5e441ec15df5852","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAHcAAAAIAAAALgAAACKgsAEDvwD/kgkxc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JXb3Jrc3BhY2UuamF2YaCwAQPEAP+SCTFzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL0pjcldvcmtzcGFjZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Collection Multimap.get(Object)` of un-annotated interface `org.modeshape.common.collection.Multimap`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":501,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.findBestPropertyDefinition(org.modeshape.jcr.value.Name,java.util.Collection,org.modeshape.jcr.value.Property,boolean,boolean,boolean,org.modeshape.jcr.NodeTypes):org.modeshape.jcr.JcrPropertyDefinition","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":501,"column_number":-1,"description":"call to int PropertyTypeUtil.jcrPropertyTypeFor(Property)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/PropertyTypeUtil.java","line_number":44,"column_number":-1,"description":"call to PropertyType PropertyType.discoverType(Object)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/PropertyType.java","line_number":280,"column_number":-1,"description":"call to PropertyType PropertyType.discoverType(Class)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/PropertyType.java","line_number":318,"column_number":-1,"description":"Call to un-annotated interface method Collection Multimap.get(Object)"}],"key":"AbstractJcrNode.java|findBestPropertyDefinition|INTERFACE_NOT_THREAD_SAFE","hash":"cb32d2c54f0231acddeebb45bf8182cc","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEIAAAAEAAAAGAAAABGgsAEBPgD/kgk3c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9Qcm9wZXJ0eVR5cGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":509,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.findBestPropertyDefinition(org.modeshape.jcr.value.Name,java.util.Collection,org.modeshape.jcr.value.Property,boolean,boolean,boolean,org.modeshape.jcr.NodeTypes):org.modeshape.jcr.JcrPropertyDefinition","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":509,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,Value,boolean,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":972,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,Value,boolean,boolean,boolean)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1065,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(Value,JcrSession)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":262,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|findBestPropertyDefinition|THREAD_SAFETY_VIOLATION","hash":"fea7b9583c02657cf61857ffd98d4b6e","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBBgD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":518,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.findBestPropertyDefinition(org.modeshape.jcr.value.Name,java.util.Collection,org.modeshape.jcr.value.Property,boolean,boolean,boolean,org.modeshape.jcr.NodeTypes):org.modeshape.jcr.JcrPropertyDefinition","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|findBestPropertyDefinition|THREAD_SAFETY_VIOLATION","hash":"fea7b9583c02657cf61857ffd98d4b6e","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Collection AbstractJcrNode.findJcrProperties(Iterator)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":2058,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.findJcrProperties(java.util.Iterator):java.util.Collection","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2058,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|findJcrProperties|THREAD_SAFETY_VIOLATION","hash":"d309cd3bce3ccf2e7667d7dbc32d00e1","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Name Property.getName()` of un-annotated interface `org.modeshape.jcr.value.Property`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":2057,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.findJcrProperties(java.util.Iterator):java.util.Collection","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2057,"column_number":-1,"description":"Call to un-annotated interface method Name Property.getName()"}],"key":"AbstractJcrNode.java|findJcrProperties|INTERFACE_NOT_THREAD_SAFE","hash":"f172cb198936db2c84c09ccd6378dc4b","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEICQD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Object Property.getFirstValue()` of un-annotated interface `org.modeshape.jcr.value.Property`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":539,"column":-1,"procedure":"org.modeshape.jcr.RepositoryLockManager.firstBoolean(org.modeshape.jcr.value.Property):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","line_number":539,"column_number":-1,"description":"Call to un-annotated interface method Object Property.getFirstValue()"}],"key":"RepositoryLockManager.java|firstBoolean|INTERFACE_NOT_THREAD_SAFE","hash":"6357172451633c2074279cc32ac704f1","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAECGwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9SZXBvc2l0b3J5TG9ja01hbmFnZXIuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Object Property.getFirstValue()` of un-annotated interface `org.modeshape.jcr.value.Property`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":544,"column":-1,"procedure":"org.modeshape.jcr.RepositoryLockManager.firstDate(org.modeshape.jcr.value.Property):org.modeshape.jcr.api.value.DateTime","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","line_number":544,"column_number":-1,"description":"Call to un-annotated interface method Object Property.getFirstValue()"}],"key":"RepositoryLockManager.java|firstDate|INTERFACE_NOT_THREAD_SAFE","hash":"a431b0ac196823475edc99d9294e6032","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAECIAD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9SZXBvc2l0b3J5TG9ja01hbmFnZXIuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Object Property.getFirstValue()` of un-annotated interface `org.modeshape.jcr.value.Property`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":534,"column":-1,"procedure":"org.modeshape.jcr.RepositoryLockManager.firstString(org.modeshape.jcr.value.Property):java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","line_number":534,"column_number":-1,"description":"Call to un-annotated interface method Object Property.getFirstValue()"}],"key":"RepositoryLockManager.java|firstString|INTERFACE_NOT_THREAD_SAFE","hash":"af8ce4ce6ffa96c332547e8133c8d31d","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAECFgD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9SZXBvc2l0b3J5TG9ja01hbmFnZXIuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void RecordingChanges.freeze(String,Map,DateTime)` writes to field `this.timestamp` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":309,"column":-1,"procedure":"org.modeshape.jcr.cache.change.RecordingChanges.freeze(java.lang.String,java.util.Map,org.modeshape.jcr.api.value.DateTime):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/change/RecordingChanges.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/change/RecordingChanges.java","line_number":309,"column_number":-1,"description":"access to `this.timestamp`"}],"key":"RecordingChanges.java|freeze|THREAD_SAFETY_VIOLATION","hash":"27853296c76a54af9caf480847cf4dc5","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEBNQD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9jaGFuZ2UvUmVjb3JkaW5nQ2hhbmdlcy5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void RecordingChanges.freeze(String,Map,DateTime)` writes to field `this.userData` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":307,"column":-1,"procedure":"org.modeshape.jcr.cache.change.RecordingChanges.freeze(java.lang.String,java.util.Map,org.modeshape.jcr.api.value.DateTime):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/change/RecordingChanges.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/change/RecordingChanges.java","line_number":307,"column_number":-1,"description":"access to `this.userData`"}],"key":"RecordingChanges.java|freeze|THREAD_SAFETY_VIOLATION","hash":"84f5371985509d954c09203511bac637","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEBMwD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9jaGFuZ2UvUmVjb3JkaW5nQ2hhbmdlcy5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void RecordingChanges.freeze(String,Map,DateTime)` writes to field `this.userId` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":305,"column":-1,"procedure":"org.modeshape.jcr.cache.change.RecordingChanges.freeze(java.lang.String,java.util.Map,org.modeshape.jcr.api.value.DateTime):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/change/RecordingChanges.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/change/RecordingChanges.java","line_number":305,"column_number":-1,"description":"access to `this.userId`"}],"key":"RecordingChanges.java|freeze|THREAD_SAFETY_VIOLATION","hash":"65dd0a1d133775e1738b7eaba43ece98","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEBMQD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9jaGFuZ2UvUmVjb3JkaW5nQ2hhbmdlcy5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `NodeKey RepositoryLockManager.generateLockKey(NodeKey,NodeKey)` indirectly writes to field `prototype.sourceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":278,"column":-1,"procedure":"org.modeshape.jcr.RepositoryLockManager.generateLockKey(org.modeshape.jcr.cache.NodeKey,org.modeshape.jcr.cache.NodeKey):org.modeshape.jcr.cache.NodeKey","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","line_number":278,"column_number":-1,"description":"call to NodeKey NodeKey.withId(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":229,"column_number":-1,"description":"call to String NodeKey.getSourceKey()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":154,"column_number":-1,"description":"access to `prototype.sourceKey`"}],"key":"RepositoryLockManager.java|generateLockKey|THREAD_SAFETY_VIOLATION","hash":"7d371ed7ea8bd4e69ef8953796a10d63","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEAmgD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `java.lang.String[] JcrWorkspace.getAccessibleWorkspaceNames()` indirectly mutates container `ace.privileges` via call to `addAll` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":770,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.getAccessibleWorkspaceNames():java.lang.String[]","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":770,"column_number":-1,"description":"call to void JcrSession.checkWorkspacePermission(String,java.lang.String[])"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1582,"column_number":-1,"description":"call to void JcrSession.checkPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1567,"column_number":-1,"description":"call to boolean JcrSession.hasPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1375,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPermission(Path,java.lang.String[])"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":322,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPrivileges(String,javax.jcr.security.Privilege[])"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":109,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.getApplicableACL(String)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":114,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.findAccessList(String,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":289,"column_number":-1,"description":"call to boolean JcrAccessControlList.addAccessControlEntry(Principal,javax.jcr.security.Privilege[])"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/security/acl/JcrAccessControlList.java","line_number":113,"column_number":-1,"description":"call to boolean AccessControlEntryImpl.addIfNotPresent(javax.jcr.security.Privilege[])"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/security/acl/AccessControlEntryImpl.java","line_number":103,"column_number":-1,"description":"Write to container `ace.privileges` via call to `addAll`"}],"key":"JcrWorkspace.java|getAccessibleWorkspaceNames|THREAD_SAFETY_VIOLATION","hash":"f24d7b5ac5c6e98ee1888ef6fdd124c4","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFIAAAAEAAAAHQAAABSgsABnAP+SCUhzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3NlY3VyaXR5L2FjbC9BY2Nlc3NDb250cm9sRW50cnlJbXBsLmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Iterator Property.iterator()` of un-annotated interface `org.modeshape.jcr.value.Property`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":620,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.getAddedMixins(org.modeshape.jcr.cache.SessionCache):java.util.Set","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":620,"column_number":-1,"description":"Call to un-annotated interface method Iterator Property.iterator()"}],"key":"SessionNode.java|getAddedMixins|INTERFACE_NOT_THREAD_SAFE","hash":"bfe4f494df4ea8e93b131c9af20fb347","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEoAAAAEAAAAGgAAABKgsAECbAD/kgk/c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9TZXNzaW9uTm9kZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Object Document.get(String)` of un-annotated interface `org.infinispan.schematic.document.Document`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":139,"column":-1,"procedure":"org.modeshape.jcr.cache.document.LazyCachedNode.getAdditionalParentKeys(org.modeshape.jcr.cache.NodeCache):java.util.Set","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":139,"column_number":-1,"description":"call to Set DocumentTranslator.getAdditionalParentKeys(Document)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/DocumentTranslator.java","line_number":173,"column_number":-1,"description":"Call to un-annotated interface method Object Document.get(String)"}],"key":"LazyCachedNode.java|getAdditionalParentKeys|INTERFACE_NOT_THREAD_SAFE","hash":"93bd2146c5d54e6784fa5891387e7363","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAFEAAAAEAAAAHAAAABOgsAEArQD/kglGc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Eb2N1bWVudFRyYW5zbGF0b3IuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `SchematicEntry DocumentStore.get(String)` of un-annotated interface `org.modeshape.jcr.cache.document.DocumentStore`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":348,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.getAdditionalParentKeys(org.modeshape.jcr.cache.NodeCache):java.util.Set","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":348,"column_number":-1,"description":"call to CachedNode SessionNode.nodeInWorkspace(AbstractSessionCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":309,"column_number":-1,"description":"call to CachedNode WorkspaceCache.getNode(NodeKey)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":243,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":207,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(String)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":188,"column_number":-1,"description":"Call to un-annotated interface method SchematicEntry DocumentStore.get(String)"}],"key":"SessionNode.java|getAdditionalParentKeys|INTERFACE_NOT_THREAD_SAFE","hash":"8f9e18db37f220d10d94256a6d81442c","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEAvAD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xb3Jrc3BhY2VDYWNoZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `Iterable CassandraBinaryStore.getAllBinaryKeys()` reads without synchronization from `this.session`. Potentially races with write in method `CassandraBinaryStore.start()`.\n Reporting because a superclass `class org.modeshape.jcr.value.binary.AbstractBinaryStore` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":241,"column":-1,"procedure":"org.modeshape.jcr.value.binary.CassandraBinaryStore.getAllBinaryKeys():java.lang.Iterable","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/CassandraBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/CassandraBinaryStore.java","line_number":241,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/CassandraBinaryStore.java","line_number":241,"column_number":-1,"description":"access to `this.session`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/CassandraBinaryStore.java","line_number":262,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/CassandraBinaryStore.java","line_number":262,"column_number":-1,"description":"access to `this.session`"}],"key":"CassandraBinaryStore.java|getAllBinaryKeys|THREAD_SAFETY_VIOLATION","hash":"4c400cec49dadbc144636105af0551ff","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAKEAAAAIAAAAOAAAACagsAEA8QD/kglGc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvQ2Fzc2FuZHJhQmluYXJ5U3RvcmUuamF2YaCwAQEGAP+SCUZzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2JpbmFyeS9DYXNzYW5kcmFCaW5hcnlTdG9yZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `Iterable DatabaseBinaryStore.getAllBinaryKeys()` indirectly reads without synchronization from `this.dataSource`. Potentially races with write in method `DatabaseBinaryStore.start()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":313,"column":-1,"procedure":"org.modeshape.jcr.value.binary.DatabaseBinaryStore.getAllBinaryKeys():java.lang.Iterable","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":313,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":313,"column_number":-1,"description":"call to Object DatabaseBinaryStore.dbCall(DatabaseBinaryStore$DBCallable)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":357,"column_number":-1,"description":"call to Connection DatabaseBinaryStore.newConnection()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":328,"column_number":-1,"description":"access to `this.dataSource`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":146,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":146,"column_number":-1,"description":"call to void DatabaseBinaryStore.lookupDataSource()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":338,"column_number":-1,"description":"access to `this.dataSource`"}],"key":"DatabaseBinaryStore.java|getAllBinaryKeys|THREAD_SAFETY_VIOLATION","hash":"58bdea786a1eaef3144578e03a1a9f82","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAJ8AAAAIAAAAOAAAACagsAEBSAD/kglFc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvRGF0YWJhc2VCaW5hcnlTdG9yZS5qYXZhoLABAVIA/5IJRXNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvdmFsdWUvYmluYXJ5L0RhdGFiYXNlQmluYXJ5U3RvcmUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `Iterable MongodbBinaryStore.getAllBinaryKeys()` indirectly reads without synchronization from `this.db`. Potentially races with write in method `MongodbBinaryStore.start()`.\n Reporting because a superclass `class org.modeshape.jcr.value.binary.AbstractBinaryStore` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":312,"column":-1,"procedure":"org.modeshape.jcr.value.binary.MongodbBinaryStore.getAllBinaryKeys():java.lang.Iterable","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":312,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":312,"column_number":-1,"description":"call to Set MongodbBinaryStore.getStoredKeys(boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":322,"column_number":-1,"description":"access to `this.db`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":346,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":346,"column_number":-1,"description":"call to void MongodbBinaryStore.initMongoDatabase()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":367,"column_number":-1,"description":"access to `this.db`"}],"key":"MongodbBinaryStore.java|getAllBinaryKeys|THREAD_SAFETY_VIOLATION","hash":"b5f2278f0c7e3401093cfcfe1338b1cd","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAJ0AAAAIAAAAOAAAACagsAEBQgD/kglEc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvTW9uZ29kYkJpbmFyeVN0b3JlLmphdmGgsAEBbwD/kglEc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvTW9uZ29kYkJpbmFyeVN0b3JlLmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `AdvancedCache Cache.getAdvancedCache()` of un-annotated interface `org.infinispan.Cache`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":582,"column":-1,"procedure":"org.modeshape.jcr.value.binary.infinispan.InfinispanBinaryStore.getAllBinaryKeys():java.lang.Iterable","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":582,"column_number":-1,"description":"Call to un-annotated interface method AdvancedCache Cache.getAdvancedCache()"}],"key":"InfinispanBinaryStore.java|getAllBinaryKeys|INTERFACE_NOT_THREAD_SAFE","hash":"761daad1577fffa62c5bdd4a960e85af","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAF0AAAAEAAAAHwAAABWgsAECRgD/kglSc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvaW5maW5pc3Bhbi9JbmZpbmlzcGFuQmluYXJ5U3RvcmUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `Iterable InfinispanBinaryStore.getAllBinaryKeys()` reads without synchronization from `this.metadataCache`. Potentially races with write in method `InfinispanBinaryStore.start()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":574,"column":-1,"procedure":"org.modeshape.jcr.value.binary.infinispan.InfinispanBinaryStore.getAllBinaryKeys():java.lang.Iterable","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":574,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":574,"column_number":-1,"description":"access to `this.metadataCache`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":179,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":179,"column_number":-1,"description":"access to `this.metadataCache`"}],"key":"InfinispanBinaryStore.java|getAllBinaryKeys|THREAD_SAFETY_VIOLATION","hash":"86cc586125e2799e58e1230a8bd6d648","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAALkAAAAIAAAAPgAAACqgsAECPgD/kglSc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvaW5maW5pc3Bhbi9JbmZpbmlzcGFuQmluYXJ5U3RvcmUuamF2YaCwAQCzAP+SCVJzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2JpbmFyeS9pbmZpbmlzcGFuL0luZmluaXNwYW5CaW5hcnlTdG9yZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `ChildReferences CachedNode.getChildReferences(NodeCache)` of un-annotated interface `org.modeshape.jcr.cache.CachedNode`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":356,"column":-1,"procedure":"org.modeshape.jcr.JcrVersionHistoryNode.getAllFrozenNodes():javax.jcr.NodeIterator","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":356,"column_number":-1,"description":"call to VersionIterator JcrVersionHistoryNode.getAllVersions()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":82,"column_number":-1,"description":"call to NodeIterator AbstractJcrNode.getNodesInternal()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":851,"column_number":-1,"description":"Call to un-annotated interface method ChildReferences CachedNode.getChildReferences(NodeCache)"}],"key":"JcrVersionHistoryNode.java|getAllFrozenNodes|INTERFACE_NOT_THREAD_SAFE","hash":"07f97d214f8063c1ad4490259dab3693","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEDUwD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Iterator ChildReferences.getAllKeys()` of un-annotated interface `org.modeshape.jcr.cache.ChildReferences`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":228,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionChildReferences.getAllKeys():java.util.Iterator","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionChildReferences.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionChildReferences.java","line_number":228,"column_number":-1,"description":"Call to un-annotated interface method Iterator ChildReferences.getAllKeys()"}],"key":"SessionChildReferences.java|getAllKeys|INTERFACE_NOT_THREAD_SAFE","hash":"54e658e370f03c6d52bd6e1b60c4e8ff","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAFUAAAAEAAAAHQAAABSgsAEA5AD/kglKc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9TZXNzaW9uQ2hpbGRSZWZlcmVuY2VzLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `NodeIterator JcrVersionHistoryNode.getAllLinearFrozenNodes()` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":361,"column":-1,"procedure":"org.modeshape.jcr.JcrVersionHistoryNode.getAllLinearFrozenNodes():javax.jcr.NodeIterator","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":361,"column_number":-1,"description":"call to VersionIterator JcrVersionHistoryNode.getAllLinearVersions()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":366,"column_number":-1,"description":"call to String JcrVersionHistoryNode.getVersionableIdentifier()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":384,"column_number":-1,"description":"call to String JcrVersionHistoryNode.getVersionableUUID()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":163,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrVersionHistoryNode.java|getAllLinearFrozenNodes|THREAD_SAFETY_VIOLATION","hash":"e97a82242ef9a4f212c4ed1ad8e4c28c","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `VersionIterator JcrVersionHistoryNode.getAllLinearVersions()` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":372,"column":-1,"procedure":"org.modeshape.jcr.JcrVersionHistoryNode.getAllLinearVersions():javax.jcr.version.VersionIterator","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":372,"column_number":-1,"description":"call to JcrVersionNode AbstractJcrNode.getBaseVersion()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3296,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"JcrVersionHistoryNode.java|getAllLinearVersions|THREAD_SAFETY_VIOLATION","hash":"99de6a5ed0a5bbffcaf11ae6e8181e2c","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `VersionIterator JcrVersionHistoryNode.getAllLinearVersions()` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":366,"column":-1,"procedure":"org.modeshape.jcr.JcrVersionHistoryNode.getAllLinearVersions():javax.jcr.version.VersionIterator","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":366,"column_number":-1,"description":"call to String JcrVersionHistoryNode.getVersionableIdentifier()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":384,"column_number":-1,"description":"call to String JcrVersionHistoryNode.getVersionableUUID()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":163,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrVersionHistoryNode.java|getAllLinearVersions|THREAD_SAFETY_VIOLATION","hash":"af4109bdd36509e6396e3c26fc8e67c5","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `ChildReferences CachedNode.getChildReferences(NodeCache)` of un-annotated interface `org.modeshape.jcr.cache.CachedNode`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":367,"column":-1,"procedure":"org.modeshape.jcr.JcrVersionHistoryNode.getAllLinearVersions():javax.jcr.version.VersionIterator","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":367,"column_number":-1,"description":"call to VersionIterator JcrVersionHistoryNode.getAllVersions()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":82,"column_number":-1,"description":"call to NodeIterator AbstractJcrNode.getNodesInternal()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":851,"column_number":-1,"description":"Call to un-annotated interface method ChildReferences CachedNode.getChildReferences(NodeCache)"}],"key":"JcrVersionHistoryNode.java|getAllLinearVersions|INTERFACE_NOT_THREAD_SAFE","hash":"491ff0ce89491d82fc4c5fae3f806fdb","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEDUwD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `ChildReferences CachedNode.getChildReferences(NodeCache)` of un-annotated interface `org.modeshape.jcr.cache.CachedNode`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":82,"column":-1,"procedure":"org.modeshape.jcr.JcrVersionHistoryNode.getAllVersions():javax.jcr.version.VersionIterator","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":82,"column_number":-1,"description":"call to NodeIterator AbstractJcrNode.getNodesInternal()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":851,"column_number":-1,"description":"Call to un-annotated interface method ChildReferences CachedNode.getChildReferences(NodeCache)"}],"key":"JcrVersionHistoryNode.java|getAllVersions|INTERFACE_NOT_THREAD_SAFE","hash":"b7d9ffc91a9546fb94c6b951d97b9f43","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEDUwD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `int Path.size()` of un-annotated interface `org.modeshape.jcr.value.Path`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":107,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrItem.getAncestor(int):javax.jcr.Item","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrItem.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrItem.java","line_number":107,"column_number":-1,"description":"call to int AbstractJcrItem.getDepth()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrItem.java","line_number":123,"column_number":-1,"description":"Call to un-annotated interface method int Path.size()"}],"key":"AbstractJcrItem.java|getAncestor|INTERFACE_NOT_THREAD_SAFE","hash":"59388ac5450ed021ae0b0bd6c75d40f0","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD4AAAAEAAAAGAAAABGgsAB7AP+SCTRzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL0Fic3RyYWN0SmNySXRlbS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `int Path.size()` of un-annotated interface `org.modeshape.jcr.value.Path`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`.","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.getAncestor(int):javax.jcr.Item","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to Item AbstractJcrItem.getAncestor(int)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrItem.java","line_number":107,"column_number":-1,"description":"call to int AbstractJcrItem.getDepth()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrItem.java","line_number":123,"column_number":-1,"description":"Call to un-annotated interface method int Path.size()"}],"key":"JcrSystemNode.java|getAncestor|INTERFACE_NOT_THREAD_SAFE","hash":"44bb58063295a35be5f3fe2972eae8c8","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD4AAAAEAAAAGAAAABGgsAB7AP+SCTRzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL0Fic3RyYWN0SmNySXRlbS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Version AbstractJcrNode.getBaseVersion()` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":101,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.getBaseVersion():javax.jcr.version.Version","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":101,"column_number":-1,"description":"call to JcrVersionNode AbstractJcrNode.getBaseVersion()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3294,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|getBaseVersion|THREAD_SAFETY_VIOLATION","hash":"dfe9ae43bb6b8703163530d530769c49","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `JcrVersionNode AbstractJcrNode.getBaseVersion()` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":3296,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.getBaseVersion():org.modeshape.jcr.JcrVersionNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3296,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"AbstractJcrNode.java|getBaseVersion|THREAD_SAFETY_VIOLATION","hash":"7d6dc9e02474d608c47ff8ca271adcc6","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `CachedNode SessionCache.getNode(NodeKey)` of un-annotated interface `org.modeshape.jcr.cache.SessionCache`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":3291,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.getBaseVersion():org.modeshape.jcr.JcrVersionNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3291,"column_number":-1,"description":"call to boolean AbstractJcrNode.hasProperty(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":530,"column_number":-1,"description":"call to CachedNode AbstractJcrNode.node()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":201,"column_number":-1,"description":"Call to un-annotated interface method CachedNode SessionCache.getNode(NodeKey)"}],"key":"AbstractJcrNode.java|getBaseVersion|INTERFACE_NOT_THREAD_SAFE","hash":"81c299d8d2e03a3ee97ec02eb2b1e64b","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEAyQD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `JcrVersionNode AbstractJcrNode.getBaseVersion()` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":3294,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.getBaseVersion():org.modeshape.jcr.JcrVersionNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3294,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|getBaseVersion|THREAD_SAFETY_VIOLATION","hash":"45fa466d175db2781eabb06befe842a3","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `JcrVersionNode JcrSystemNode.getBaseVersion()` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.getBaseVersion():org.modeshape.jcr.JcrVersionNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to JcrVersionNode AbstractJcrNode.getBaseVersion()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3294,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrSystemNode.java|getBaseVersion|THREAD_SAFETY_VIOLATION","hash":"1851121cb38cfc83fae2e83bf9a735dc","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `List InfinispanBinaryStore.getCaches()` reads without synchronization from `this.blobCache`. Potentially races with write in method `InfinispanBinaryStore.start()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":203,"column":-1,"procedure":"org.modeshape.jcr.value.binary.infinispan.InfinispanBinaryStore.getCaches():java.util.List","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":203,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":203,"column_number":-1,"description":"access to `this.blobCache`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":180,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":180,"column_number":-1,"description":"access to `this.blobCache`"}],"key":"InfinispanBinaryStore.java|getCaches|THREAD_SAFETY_VIOLATION","hash":"721ceaaecfc7013fd84ee558b8ebb620","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAALkAAAAIAAAAPgAAACqgsAEAywD/kglSc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvaW5maW5pc3Bhbi9JbmZpbmlzcGFuQmluYXJ5U3RvcmUuamF2YaCwAQC0AP+SCVJzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2JpbmFyeS9pbmZpbmlzcGFuL0luZmluaXNwYW5CaW5hcnlTdG9yZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `List InfinispanBinaryStore.getCaches()` reads without synchronization from `this.metadataCache`. Potentially races with write in method `InfinispanBinaryStore.start()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":200,"column":-1,"procedure":"org.modeshape.jcr.value.binary.infinispan.InfinispanBinaryStore.getCaches():java.util.List","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":200,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":200,"column_number":-1,"description":"access to `this.metadataCache`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":179,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":179,"column_number":-1,"description":"access to `this.metadataCache`"}],"key":"InfinispanBinaryStore.java|getCaches|THREAD_SAFETY_VIOLATION","hash":"8d22376490c06168d81dcf7c4b7befea","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAALkAAAAIAAAAPgAAACqgsAEAyAD/kglSc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvaW5maW5pc3Bhbi9JbmZpbmlzcGFuQmluYXJ5U3RvcmUuamF2YaCwAQCzAP+SCVJzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2JpbmFyeS9pbmZpbmlzcGFuL0luZmluaXNwYW5CaW5hcnlTdG9yZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `Set WritableSessionCache.getChangedNodeKeys()` reads with synchronization from `this.changedNodes`. Potentially races with unsynchronized write in method `WritableSessionCache.clearState()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":299,"column":-1,"procedure":"org.modeshape.jcr.cache.document.WritableSessionCache.getChangedNodeKeys():java.util.Set","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":299,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":299,"column_number":-1,"description":"access to `this.changedNodes`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":573,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":573,"column_number":-1,"description":"access to `this.changedNodes`"}],"key":"WritableSessionCache.java|getChangedNodeKeys|THREAD_SAFETY_VIOLATION","hash":"fb09981936aea62cf02edd4cde6c9c72","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAKUAAAAIAAAAOgAAACigsAEBKwD/kglIc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xcml0YWJsZVNlc3Npb25DYWNoZS5qYXZhoLABAj0A/5IJSHNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvY2FjaGUvZG9jdW1lbnQvV3JpdGFibGVTZXNzaW9uQ2FjaGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Path CachedNode.getPath(NodeCache)` of un-annotated interface `org.modeshape.jcr.cache.CachedNode`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":308,"column":-1,"procedure":"org.modeshape.jcr.cache.document.WritableSessionCache.getChangedNodeKeysAtOrBelow(org.modeshape.jcr.cache.CachedNode):java.util.Set","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":308,"column_number":-1,"description":"Call to un-annotated interface method Path CachedNode.getPath(NodeCache)"}],"key":"WritableSessionCache.java|getChangedNodeKeysAtOrBelow|INTERFACE_NOT_THREAD_SAFE","hash":"4d9457f5d12fec13c2a1a06e51b26ac7","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAFMAAAAEAAAAHQAAABSgsAEBNAD/kglIc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xcml0YWJsZVNlc3Npb25DYWNoZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `Set WritableSessionCache.getChangedNodeKeysAtOrBelow(CachedNode)` reads with synchronization from `this.changedNodes`. Potentially races with unsynchronized write in method `WritableSessionCache.clearState()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":335,"column":-1,"procedure":"org.modeshape.jcr.cache.document.WritableSessionCache.getChangedNodeKeysAtOrBelow(org.modeshape.jcr.cache.CachedNode):java.util.Set","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":335,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":335,"column_number":-1,"description":"access to `this.changedNodes`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":573,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":573,"column_number":-1,"description":"access to `this.changedNodes`"}],"key":"WritableSessionCache.java|getChangedNodeKeysAtOrBelow|THREAD_SAFETY_VIOLATION","hash":"7dc294ac981c1c6f6df4e2a6305de107","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAKUAAAAIAAAAOgAAACigsAEBTwD/kglIc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xcml0YWJsZVNlc3Npb25DYWNoZS5qYXZhoLABAj0A/5IJSHNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvY2FjaGUvZG9jdW1lbnQvV3JpdGFibGVTZXNzaW9uQ2FjaGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `JChannel ClusteringService.getChannel()` reads without synchronization from `this.channel`. Potentially races with write in method `ClusteringService.restart()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":338,"column":-1,"procedure":"org.modeshape.jcr.clustering.ClusteringService.getChannel():org.jgroups.JChannel","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","line_number":338,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","line_number":338,"column_number":-1,"description":"access to `this.channel`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","line_number":141,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","line_number":141,"column_number":-1,"description":"call to boolean ClusteringService.shutdown()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","line_number":177,"column_number":-1,"description":"access to `this.channel`"}],"key":"ClusteringService.java|getChannel|THREAD_SAFETY_VIOLATION","hash":"de966fa3e9d89bdf7fb817a733cbc55f","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAJcAAAAIAAAANgAAACagsAEBUgD/kglBc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jbHVzdGVyaW5nL0NsdXN0ZXJpbmdTZXJ2aWNlLmphdmGgsAEAsQD/kglBc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jbHVzdGVyaW5nL0NsdXN0ZXJpbmdTZXJ2aWNlLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `ChildReference BucketedChildReferences.getChild(NodeKey)` indirectly reads without synchronization from container `this.rangeBucketsById` via call to `get`. Potentially races with write in method `BucketedChildReferences.getChildCount(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":130,"column":-1,"procedure":"org.modeshape.jcr.cache.document.BucketedChildReferences.getChild(org.modeshape.jcr.cache.NodeKey):org.modeshape.jcr.cache.ChildReference","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":130,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":130,"column_number":-1,"description":"call to ChildReference BucketedChildReferences.getChild(NodeKey,ChildReferences$Context)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":138,"column_number":-1,"description":"call to BucketedChildReferences$Bucket BucketedChildReferences.loadBucket(BucketId)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":273,"column_number":-1,"description":"Read of container `this.rangeBucketsById` via call to `get`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":88,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":88,"column_number":-1,"description":"call to BucketedChildReferences$Bucket BucketedChildReferences.bucketFor(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":269,"column_number":-1,"description":"call to BucketedChildReferences$Bucket BucketedChildReferences.loadBucket(BucketId)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":284,"column_number":-1,"description":"Write to container `this.rangeBucketsById` via call to `put`"}],"key":"BucketedChildReferences.java|getChild|THREAD_SAFETY_VIOLATION","hash":"e56ae8ab8fac8f8868c0c0880e2ccc47","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAF8AAAAGAAAAJAAAABugsAEBEQD/kglLc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9CdWNrZXRlZENoaWxkUmVmZXJlbmNlcy5qYXZhoLABARwA/wQEQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `ChildReference BucketedChildReferences.getChild(NodeKey,ChildReferences$Context)` indirectly reads without synchronization from container `this.rangeBucketsById` via call to `get`. Potentially races with write in method `BucketedChildReferences.getChildCount(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":138,"column":-1,"procedure":"org.modeshape.jcr.cache.document.BucketedChildReferences.getChild(org.modeshape.jcr.cache.NodeKey,org.modeshape.jcr.cache.ChildReferences$Context):org.modeshape.jcr.cache.ChildReference","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":138,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":138,"column_number":-1,"description":"call to BucketedChildReferences$Bucket BucketedChildReferences.loadBucket(BucketId)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":273,"column_number":-1,"description":"Read of container `this.rangeBucketsById` via call to `get`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":88,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":88,"column_number":-1,"description":"call to BucketedChildReferences$Bucket BucketedChildReferences.bucketFor(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":269,"column_number":-1,"description":"call to BucketedChildReferences$Bucket BucketedChildReferences.loadBucket(BucketId)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":284,"column_number":-1,"description":"Write to container `this.rangeBucketsById` via call to `put`"}],"key":"BucketedChildReferences.java|getChild|THREAD_SAFETY_VIOLATION","hash":"2302d0854e9275ef86746842f5b8274b","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAF8AAAAGAAAAJAAAABugsAEBEQD/kglLc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9CdWNrZXRlZENoaWxkUmVmZXJlbmNlcy5qYXZhoLABARwA/wQEQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `ChildReferences$Changes ChildReferences$Context.changes()` of un-annotated interface `org.modeshape.jcr.cache.ChildReferences$Context`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":145,"column":-1,"procedure":"org.modeshape.jcr.cache.document.BucketedChildReferences.getChild(org.modeshape.jcr.cache.NodeKey,org.modeshape.jcr.cache.ChildReferences$Context):org.modeshape.jcr.cache.ChildReference","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":145,"column_number":-1,"description":"Call to un-annotated interface method ChildReferences$Changes ChildReferences$Context.changes()"}],"key":"BucketedChildReferences.java|getChild|INTERFACE_NOT_THREAD_SAFE","hash":"2198d24d23305bab5eb7bc0d809543b6","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAFYAAAAEAAAAHQAAABSgsAEAkQD/kglLc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9CdWNrZXRlZENoaWxkUmVmZXJlbmNlcy5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `ChildReference ChildReferences.getChild(NodeKey,ChildReferences$Context)` of un-annotated interface `org.modeshape.jcr.cache.ChildReferences`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":148,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionChildReferences.getChild(org.modeshape.jcr.cache.NodeKey,org.modeshape.jcr.cache.ChildReferences$Context):org.modeshape.jcr.cache.ChildReference","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionChildReferences.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionChildReferences.java","line_number":148,"column_number":-1,"description":"Call to un-annotated interface method ChildReference ChildReferences.getChild(NodeKey,ChildReferences$Context)"}],"key":"SessionChildReferences.java|getChild|INTERFACE_NOT_THREAD_SAFE","hash":"61114ad61ce751bbc46df2aee06c57c9","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAFUAAAAEAAAAHQAAABSgsAEAlAD/kglKc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9TZXNzaW9uQ2hpbGRSZWZlcmVuY2VzLmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `ChildReferences$Changes ChildReferences$Context.changes()` of un-annotated interface `org.modeshape.jcr.cache.ChildReferences$Context`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":99,"column":-1,"procedure":"org.modeshape.jcr.cache.document.BucketedChildReferences.getChild(org.modeshape.jcr.value.Name,int,org.modeshape.jcr.cache.ChildReferences$Context):org.modeshape.jcr.cache.ChildReference","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":99,"column_number":-1,"description":"Call to un-annotated interface method ChildReferences$Changes ChildReferences$Context.changes()"}],"key":"BucketedChildReferences.java|getChild|INTERFACE_NOT_THREAD_SAFE","hash":"2198d24d23305bab5eb7bc0d809543b6","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAFUAAAAEAAAAHQAAABSgsABjAP+SCUtzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL2NhY2hlL2RvY3VtZW50L0J1Y2tldGVkQ2hpbGRSZWZlcmVuY2VzLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `ChildReference BucketedChildReferences.getChild(Name,int,ChildReferences$Context)` indirectly reads without synchronization from container `this.rangeBucketsById` via call to `get`. Potentially races with write in method `BucketedChildReferences.getChildCount(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":98,"column":-1,"procedure":"org.modeshape.jcr.cache.document.BucketedChildReferences.getChild(org.modeshape.jcr.value.Name,int,org.modeshape.jcr.cache.ChildReferences$Context):org.modeshape.jcr.cache.ChildReference","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":98,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":98,"column_number":-1,"description":"call to BucketedChildReferences$Bucket BucketedChildReferences.bucketFor(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":269,"column_number":-1,"description":"call to BucketedChildReferences$Bucket BucketedChildReferences.loadBucket(BucketId)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":273,"column_number":-1,"description":"Read of container `this.rangeBucketsById` via call to `get`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":88,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":88,"column_number":-1,"description":"call to BucketedChildReferences$Bucket BucketedChildReferences.bucketFor(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":269,"column_number":-1,"description":"call to BucketedChildReferences$Bucket BucketedChildReferences.loadBucket(BucketId)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":284,"column_number":-1,"description":"Write to container `this.rangeBucketsById` via call to `put`"}],"key":"BucketedChildReferences.java|getChild|THREAD_SAFETY_VIOLATION","hash":"33859485e4754214a0a2b89f5abe0267","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAF8AAAAGAAAAJAAAABugsAEBEQD/kglLc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9CdWNrZXRlZENoaWxkUmVmZXJlbmNlcy5qYXZhoLABARwA/wQEQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `ChildReference ChildReferences.getChild(Name,int,ChildReferences$Context)` of un-annotated interface `org.modeshape.jcr.cache.ChildReferences`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":105,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionChildReferences.getChild(org.modeshape.jcr.value.Name,int,org.modeshape.jcr.cache.ChildReferences$Context):org.modeshape.jcr.cache.ChildReference","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionChildReferences.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionChildReferences.java","line_number":105,"column_number":-1,"description":"Call to un-annotated interface method ChildReference ChildReferences.getChild(Name,int,ChildReferences$Context)"}],"key":"SessionChildReferences.java|getChild|INTERFACE_NOT_THREAD_SAFE","hash":"659b31e0ef40bdd299222b487f3618e8","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAFQAAAAEAAAAHQAAABSgsABpAP+SCUpzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL2NhY2hlL2RvY3VtZW50L1Nlc3Npb25DaGlsZFJlZmVyZW5jZXMuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `int BucketedChildReferences.getChildCount(Name)` indirectly reads without synchronization from container `this.rangeBucketsById` via call to `get`. Potentially races with write in method `BucketedChildReferences.getChildCount(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":88,"column":-1,"procedure":"org.modeshape.jcr.cache.document.BucketedChildReferences.getChildCount(org.modeshape.jcr.value.Name):int","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":88,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":88,"column_number":-1,"description":"call to BucketedChildReferences$Bucket BucketedChildReferences.bucketFor(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":269,"column_number":-1,"description":"call to BucketedChildReferences$Bucket BucketedChildReferences.loadBucket(BucketId)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":273,"column_number":-1,"description":"Read of container `this.rangeBucketsById` via call to `get`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":88,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":88,"column_number":-1,"description":"call to BucketedChildReferences$Bucket BucketedChildReferences.bucketFor(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":269,"column_number":-1,"description":"call to BucketedChildReferences$Bucket BucketedChildReferences.loadBucket(BucketId)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":284,"column_number":-1,"description":"Write to container `this.rangeBucketsById` via call to `put`"}],"key":"BucketedChildReferences.java|getChildCount|THREAD_SAFETY_VIOLATION","hash":"2db245ea666c8a100f0dcd546489e366","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAF8AAAAGAAAAJAAAABugsAEBEQD/kglLc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9CdWNrZXRlZENoaWxkUmVmZXJlbmNlcy5qYXZhoLABARwA/wQEQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Iterator ChildReferences.iterator(Name)` of un-annotated interface `org.modeshape.jcr.cache.ChildReferences`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":70,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionChildReferences.getChildCount(org.modeshape.jcr.value.Name):int","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionChildReferences.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionChildReferences.java","line_number":70,"column_number":-1,"description":"Call to un-annotated interface method Iterator ChildReferences.iterator(Name)"}],"key":"SessionChildReferences.java|getChildCount|INTERFACE_NOT_THREAD_SAFE","hash":"56b34b2051e15250eb5814934bb0f024","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAFQAAAAEAAAAHQAAABSgsABGAP+SCUpzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL2NhY2hlL2RvY3VtZW50L1Nlc3Npb25DaGlsZFJlZmVyZW5jZXMuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Collection Multimap.values()` of un-annotated interface `org.modeshape.common.collection.Multimap`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":45,"column":-1,"procedure":"org.modeshape.jcr.JcrNodeType.getChildNodeDefinitions():javax.jcr.nodetype.NodeDefinition[]","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrNodeType.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":45,"column_number":-1,"description":"call to org.modeshape.jcr.JcrNodeDefinition[] JcrNodeType.getChildNodeDefinitions()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":452,"column_number":-1,"description":"call to Collection DefinitionCache.allChildNodeDefinitions()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/DefinitionCache.java","line_number":210,"column_number":-1,"description":"Call to un-annotated interface method Collection Multimap.values()"}],"key":"JcrNodeType.java|getChildNodeDefinitions|INTERFACE_NOT_THREAD_SAFE","hash":"5dcb55b70a437f7b997c897144a80f7e","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEA0gD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9EZWZpbml0aW9uQ2FjaGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Collection Multimap.values()` of un-annotated interface `org.modeshape.common.collection.Multimap`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":452,"column":-1,"procedure":"org.modeshape.jcr.JcrNodeType.getChildNodeDefinitions():org.modeshape.jcr.JcrNodeDefinition[]","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrNodeType.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":452,"column_number":-1,"description":"call to Collection DefinitionCache.allChildNodeDefinitions()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/DefinitionCache.java","line_number":210,"column_number":-1,"description":"Call to un-annotated interface method Collection Multimap.values()"}],"key":"JcrNodeType.java|getChildNodeDefinitions|INTERFACE_NOT_THREAD_SAFE","hash":"5dcb55b70a437f7b997c897144a80f7e","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEA0gD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9EZWZpbml0aW9uQ2FjaGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `ChildReferences LazyCachedNode.getChildReferences(NodeCache)` indirectly mutates container `keysWithName` via call to `add` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":460,"column":-1,"procedure":"org.modeshape.jcr.cache.document.LazyCachedNode.getChildReferences(org.modeshape.jcr.cache.NodeCache):org.modeshape.jcr.cache.ChildReferences","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":460,"column_number":-1,"description":"call to ChildReferences DocumentTranslator.getChildReferences(WorkspaceCache,Document)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/DocumentTranslator.java","line_number":887,"column_number":-1,"description":"call to ChildReferences ImmutableChildReferences.create(DocumentTranslator,Document,String,boolean)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/ImmutableChildReferences.java","line_number":53,"column_number":-1,"description":"call to ImmutableChildReferences$Medium.<init>(DocumentTranslator,Document,String,boolean)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/ImmutableChildReferences.java","line_number":249,"column_number":-1,"description":"Write to container `keysWithName` via call to `add`"}],"key":"LazyCachedNode.java|getChildReferences|THREAD_SAFETY_VIOLATION","hash":"b64dc48363b5da8848ac99a4426081fe","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFcAAAAEAAAAHgAAABSgsAEA+QD/kglMc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9JbW11dGFibGVDaGlsZFJlZmVyZW5jZXMuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `NodeCache NodeCache.unwrap()` of un-annotated interface `org.modeshape.jcr.cache.NodeCache`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":459,"column":-1,"procedure":"org.modeshape.jcr.cache.document.LazyCachedNode.getChildReferences(org.modeshape.jcr.cache.NodeCache):org.modeshape.jcr.cache.ChildReferences","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":459,"column_number":-1,"description":"call to WorkspaceCache LazyCachedNode.workspaceCache(NodeCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":105,"column_number":-1,"description":"Call to un-annotated interface method NodeCache NodeCache.unwrap()"}],"key":"LazyCachedNode.java|getChildReferences|INTERFACE_NOT_THREAD_SAFE","hash":"58cb0728fcbd986d5f97f49918a8a86e","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEwAAAAEAAAAGwAAABOgsABpAP+SCUJzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL2NhY2hlL2RvY3VtZW50L0xhenlDYWNoZWROb2RlLmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `SchematicEntry DocumentStore.get(String)` of un-annotated interface `org.modeshape.jcr.cache.document.DocumentStore`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":1120,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.getChildReferences(org.modeshape.jcr.cache.NodeCache):org.modeshape.jcr.cache.ChildReferences","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1120,"column_number":-1,"description":"call to boolean SessionNode.allowsSNS(NodeCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1136,"column_number":-1,"description":"call to Name SessionNode.getPrimaryType(NodeCache)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":495,"column_number":-1,"description":"call to Property SessionNode.getProperty(Name,NodeCache)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":740,"column_number":-1,"description":"call to CachedNode SessionNode.nodeInWorkspace(AbstractSessionCache)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":309,"column_number":-1,"description":"call to CachedNode WorkspaceCache.getNode(NodeKey)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":243,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(NodeKey)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":207,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(String)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":188,"column_number":-1,"description":"Call to un-annotated interface method SchematicEntry DocumentStore.get(String)"}],"key":"SessionNode.java|getChildReferences|INTERFACE_NOT_THREAD_SAFE","hash":"30f066a3f577d5bd9d06e91d79b53b67","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEAvAD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xb3Jrc3BhY2VDYWNoZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `int MongodbBinaryStore.getChunkSize()` reads without synchronization from `this.chunkSize`. Potentially races with write in method `MongodbBinaryStore.setChunkSize(...)`.\n Reporting because a superclass `class org.modeshape.jcr.value.binary.AbstractBinaryStore` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":185,"column":-1,"procedure":"org.modeshape.jcr.value.binary.MongodbBinaryStore.getChunkSize():int","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":185,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":185,"column_number":-1,"description":"access to `this.chunkSize`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":194,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":194,"column_number":-1,"description":"access to `this.chunkSize`"}],"key":"MongodbBinaryStore.java|getChunkSize|THREAD_SAFETY_VIOLATION","hash":"582bebaca47e153cf59ed897e0a0297a","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAJ0AAAAIAAAAOAAAACagsAEAuQD/kglEc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvTW9uZ29kYkJpbmFyeVN0b3JlLmphdmGgsAEAwgD/kglEc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvTW9uZ29kYkJpbmFyeVN0b3JlLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `Connector Connectors$Snapshot.getConnectorWithSourceKey(String)` reads without synchronization from container `this.sourceKeyToConnectorMap` via call to `get`. Potentially races with write in method `Connectors$Snapshot.shutdownConnectors()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":767,"column":-1,"procedure":"org.modeshape.jcr.Connectors$Snapshot.getConnectorWithSourceKey(java.lang.String):org.modeshape.jcr.spi.federation.Connector","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/Connectors.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/Connectors.java","line_number":767,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/Connectors.java","line_number":767,"column_number":-1,"description":"Read of container `this.sourceKeyToConnectorMap` via call to `get`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/Connectors.java","line_number":725,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/Connectors.java","line_number":725,"column_number":-1,"description":"Write to container `this.sourceKeyToConnectorMap` via call to `clear`"}],"key":"Connectors.java|getConnectorWithSourceKey|THREAD_SAFETY_VIOLATION","hash":"f277252ebc45beb0bbc3e174b44140d3","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAHMAAAAIAAAALAAAACCgsAEC/wD/kgkvc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9Db25uZWN0b3JzLmphdmGgsAEC1QD/kgkvc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9Db25uZWN0b3JzLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `Collection Connectors$Snapshot.getConnectors()` reads without synchronization from container `this.sourceKeyToConnectorMap` via call to `values`. Potentially races with write in method `Connectors$Snapshot.shutdownConnectors()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":787,"column":-1,"procedure":"org.modeshape.jcr.Connectors$Snapshot.getConnectors():java.util.Collection","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/Connectors.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/Connectors.java","line_number":787,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/Connectors.java","line_number":787,"column_number":-1,"description":"Read of container `this.sourceKeyToConnectorMap` via call to `values`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/Connectors.java","line_number":725,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/Connectors.java","line_number":725,"column_number":-1,"description":"Write to container `this.sourceKeyToConnectorMap` via call to `clear`"}],"key":"Connectors.java|getConnectors|THREAD_SAFETY_VIOLATION","hash":"089ce67782c2c7c4755709eb8164d6d9","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAHMAAAAIAAAALAAAACCgsAEDEwD/kgkvc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9Db25uZWN0b3JzLmphdmGgsAEC1QD/kgkvc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9Db25uZWN0b3JzLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `VersionHistory JcrVersionNode.getContainingHistory()` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":33,"column":-1,"procedure":"org.modeshape.jcr.JcrVersionNode.getContainingHistory():javax.jcr.version.VersionHistory","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","line_number":33,"column_number":-1,"description":"call to JcrVersionHistoryNode JcrVersionNode.getContainingHistory()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","line_number":54,"column_number":-1,"description":"call to JcrVersionHistoryNode JcrVersionNode.getParent()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","line_number":49,"column_number":-1,"description":"call to AbstractJcrNode JcrSystemNode.getParent()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to AbstractJcrNode JcrNode.getParent()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrNode.java","line_number":68,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"JcrVersionNode.java|getContainingHistory|THREAD_SAFETY_VIOLATION","hash":"d1b577da9fa4302949b09b24d0e6bcf2","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `JcrVersionHistoryNode JcrVersionNode.getContainingHistory()` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":54,"column":-1,"procedure":"org.modeshape.jcr.JcrVersionNode.getContainingHistory():org.modeshape.jcr.JcrVersionHistoryNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","line_number":54,"column_number":-1,"description":"call to JcrVersionHistoryNode JcrVersionNode.getParent()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","line_number":49,"column_number":-1,"description":"call to AbstractJcrNode JcrSystemNode.getParent()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to AbstractJcrNode JcrNode.getParent()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrNode.java","line_number":68,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"JcrVersionNode.java|getContainingHistory|THREAD_SAFETY_VIOLATION","hash":"b31577966550a24f0f69ab1f386373d5","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `String AbstractJcrNode.getCorrespondingNodePath(String)` indirectly writes to field `key.identifier` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":3025,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.getCorrespondingNodePath(java.lang.String):java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3025,"column_number":-1,"description":"call to Path AbstractJcrNode.correspondingNodePath(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3047,"column_number":-1,"description":"call to String NodeKey.getIdentifier()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":180,"column_number":-1,"description":"access to `key.identifier`"}],"key":"AbstractJcrNode.java|getCorrespondingNodePath|THREAD_SAFETY_VIOLATION","hash":"fb05161daacfa0ad28fdaf1a8fdf8f7f","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEAtAD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `String JcrSystemNode.getCorrespondingNodePath(String)` indirectly writes to field `key.identifier` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.getCorrespondingNodePath(java.lang.String):java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to String AbstractJcrNode.getCorrespondingNodePath(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3025,"column_number":-1,"description":"call to Path AbstractJcrNode.correspondingNodePath(String)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3047,"column_number":-1,"description":"call to String NodeKey.getIdentifier()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":180,"column_number":-1,"description":"access to `key.identifier`"}],"key":"JcrSystemNode.java|getCorrespondingNodePath|THREAD_SAFETY_VIOLATION","hash":"4aee6164ea1e802e6d6a128bcb8dc1ad","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEAtAD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Calendar JcrVersionNode.getCreated()` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":59,"column":-1,"procedure":"org.modeshape.jcr.JcrVersionNode.getCreated():java.util.Calendar","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","line_number":59,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrVersionNode.java|getCreated|THREAD_SAFETY_VIOLATION","hash":"486c13bcd3f1b266d297df7a7de084de","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String Name.getString(NamespaceRegistry)` of un-annotated interface `org.modeshape.jcr.value.Name`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":493,"column":-1,"procedure":"org.modeshape.jcr.JcrNodeType.getDeclaredSubtypes():javax.jcr.nodetype.NodeTypeIterator","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrNodeType.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":493,"column_number":-1,"description":"call to Collection NodeTypes.declaredSubtypesFor(JcrNodeType)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1961,"column_number":-1,"description":"call to String JcrNodeType.getName()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":499,"column_number":-1,"description":"Call to un-annotated interface method String Name.getString(NamespaceRegistry)"}],"key":"JcrNodeType.java|getDeclaredSubtypes|INTERFACE_NOT_THREAD_SAFE","hash":"ddb70a0a2482ad748ebea1e7f2f591ab","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAADsAAAAEAAAAFwAAABGgsAEB8wD/kgkwc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JOb2RlVHlwZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String Name.getString(NamespaceRegistry)` of un-annotated interface `org.modeshape.jcr.value.Name`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":479,"column":-1,"procedure":"org.modeshape.jcr.JcrNodeType.getDeclaredSupertypeNames():java.lang.String[]","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrNodeType.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":479,"column_number":-1,"description":"call to String JcrNodeType.getName()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":499,"column_number":-1,"description":"Call to un-annotated interface method String Name.getString(NamespaceRegistry)"}],"key":"JcrNodeType.java|getDeclaredSupertypeNames|INTERFACE_NOT_THREAD_SAFE","hash":"bb944b122a7d1c725cd4da527c0737a8","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAADsAAAAEAAAAFwAAABGgsAEB8wD/kgkwc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JOb2RlVHlwZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `boolean NodeTypes$ReusableNodeDefinitionSet.appliesTo(NodeTypes,Name,Set)` of un-annotated interface `org.modeshape.jcr.NodeTypes$ReusableNodeDefinitionSet`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":2835,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.getDefinition():javax.jcr.nodetype.NodeDefinition","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2835,"column_number":-1,"description":"call to NodeDefinition AbstractJcrNode.nodeDefinition()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2907,"column_number":-1,"description":"call to NodeTypes$NodeDefinitionSet NodeTypes.findChildNodeDefinitions(Name,Set)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":2375,"column_number":-1,"description":"Call to un-annotated interface method boolean NodeTypes$ReusableNodeDefinitionSet.appliesTo(NodeTypes,Name,Set)"}],"key":"AbstractJcrNode.java|getDefinition|INTERFACE_NOT_THREAD_SAFE","hash":"9c1b54c50f88a5c6b458ce90909261d3","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAADkAAAAEAAAAFgAAABCgsAEJRwD/kgkuc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9Ob2RlVHlwZXMuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String JcrItemDefinition.getName()` of un-annotated interface `org.modeshape.jcr.JcrItemDefinition`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.AbstractJcrNode` is annotated `@ThreadSafe`.","severity":"WARNING","line":27,"column":-1,"procedure":"org.modeshape.jcr.JcrRootNode.getDefinition():javax.jcr.nodetype.NodeDefinition","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrRootNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRootNode.java","line_number":27,"column_number":-1,"description":"call to JcrNodeDefinition JcrRootNode.getDefinition()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrRootNode.java","line_number":50,"column_number":-1,"description":"call to JcrNodeDefinition JcrNodeTypeManager.getRootNodeDefinition()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrNodeTypeManager.java","line_number":205,"column_number":-1,"description":"Call to un-annotated interface method String JcrItemDefinition.getName()"}],"key":"JcrRootNode.java|getDefinition|INTERFACE_NOT_THREAD_SAFE","hash":"db936057b34c94526667633c39e232fc","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEIAAAAEAAAAGAAAABGgsAEAzQD/kgk3c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JOb2RlVHlwZU1hbmFnZXIuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String JcrItemDefinition.getName()` of un-annotated interface `org.modeshape.jcr.JcrItemDefinition`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.AbstractJcrNode` is annotated `@ThreadSafe`.","severity":"WARNING","line":50,"column":-1,"procedure":"org.modeshape.jcr.JcrRootNode.getDefinition():org.modeshape.jcr.JcrNodeDefinition","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrRootNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRootNode.java","line_number":50,"column_number":-1,"description":"call to JcrNodeDefinition JcrNodeTypeManager.getRootNodeDefinition()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrNodeTypeManager.java","line_number":205,"column_number":-1,"description":"Call to un-annotated interface method String JcrItemDefinition.getName()"}],"key":"JcrRootNode.java|getDefinition|INTERFACE_NOT_THREAD_SAFE","hash":"db936057b34c94526667633c39e232fc","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEIAAAAEAAAAGAAAABGgsAEAzQD/kgk3c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JOb2RlVHlwZU1hbmFnZXIuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `boolean NodeTypes$ReusableNodeDefinitionSet.appliesTo(NodeTypes,Name,Set)` of un-annotated interface `org.modeshape.jcr.NodeTypes$ReusableNodeDefinitionSet`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`.","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.getDefinition():javax.jcr.nodetype.NodeDefinition","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to NodeDefinition AbstractJcrNode.getDefinition()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2835,"column_number":-1,"description":"call to NodeDefinition AbstractJcrNode.nodeDefinition()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2907,"column_number":-1,"description":"call to NodeTypes$NodeDefinitionSet NodeTypes.findChildNodeDefinitions(Name,Set)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":2375,"column_number":-1,"description":"Call to un-annotated interface method boolean NodeTypes$ReusableNodeDefinitionSet.appliesTo(NodeTypes,Name,Set)"}],"key":"JcrSystemNode.java|getDefinition|INTERFACE_NOT_THREAD_SAFE","hash":"72ddb151808a34cb43a2ca74020210b7","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAADkAAAAEAAAAFgAAABCgsAEJRwD/kgkuc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9Ob2RlVHlwZXMuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `int Path.size()` of un-annotated interface `org.modeshape.jcr.value.Path`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":123,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrItem.getDepth():int","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrItem.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrItem.java","line_number":123,"column_number":-1,"description":"Call to un-annotated interface method int Path.size()"}],"key":"AbstractJcrItem.java|getDepth|INTERFACE_NOT_THREAD_SAFE","hash":"dbaaf9e90d67143b76176236bb9a26a0","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD4AAAAEAAAAGAAAABGgsAB7AP+SCTRzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL0Fic3RyYWN0SmNySXRlbS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `int Path.size()` of un-annotated interface `org.modeshape.jcr.value.Path`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`.","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.getDepth():int","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to int AbstractJcrItem.getDepth()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrItem.java","line_number":123,"column_number":-1,"description":"Call to un-annotated interface method int Path.size()"}],"key":"JcrSystemNode.java|getDepth|INTERFACE_NOT_THREAD_SAFE","hash":"25512ee96316b9ad9175d1a0a3bc2eda","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD4AAAAEAAAAGAAAABGgsAB7AP+SCTRzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL0Fic3RyYWN0SmNySXRlbS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `SchematicEntry DocumentStore.get(String)` of un-annotated interface `org.modeshape.jcr.cache.document.DocumentStore`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":338,"column":-1,"procedure":"org.modeshape.jcr.cache.document.LazyCachedNode.getDepth(org.modeshape.jcr.cache.NodeCache):int","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":338,"column_number":-1,"description":"call to CachedNode WorkspaceCache.getNode(NodeKey)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":243,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(NodeKey)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":207,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(String)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":188,"column_number":-1,"description":"Call to un-annotated interface method SchematicEntry DocumentStore.get(String)"}],"key":"LazyCachedNode.java|getDepth|INTERFACE_NOT_THREAD_SAFE","hash":"aa1ef405c7d238379043b352eeb4393f","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEAvAD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xb3Jrc3BhY2VDYWNoZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `int LazyCachedNode.getDepth(NodeCache)` indirectly writes to field `this.key.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":332,"column":-1,"procedure":"org.modeshape.jcr.cache.document.LazyCachedNode.getDepth(org.modeshape.jcr.cache.NodeCache):int","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":332,"column_number":-1,"description":"call to CachedNode LazyCachedNode.parent(WorkspaceCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":165,"column_number":-1,"description":"call to NodeKey LazyCachedNode.getParentKey(NodeCache)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":124,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `this.key.workspaceKey`"}],"key":"LazyCachedNode.java|getDepth|THREAD_SAFETY_VIOLATION","hash":"c68fd8a0de948997fe13a8bd94158a87","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `SchematicEntry DocumentStore.get(String)` of un-annotated interface `org.modeshape.jcr.cache.document.DocumentStore`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":443,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.getDepth(org.modeshape.jcr.cache.NodeCache):int","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":443,"column_number":-1,"description":"call to CachedNode SessionNode.parent(AbstractSessionCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":337,"column_number":-1,"description":"call to CachedNode AbstractSessionCache.getNode(NodeKey)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/AbstractSessionCache.java","line_number":249,"column_number":-1,"description":"call to CachedNode WorkspaceCache.getNode(NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":243,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":207,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(String)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":188,"column_number":-1,"description":"Call to un-annotated interface method SchematicEntry DocumentStore.get(String)"}],"key":"SessionNode.java|getDepth|INTERFACE_NOT_THREAD_SAFE","hash":"1408715a905a8179d422f2860e06d595","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEAvAD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xb3Jrc3BhY2VDYWNoZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `String JcrRepository.getDescriptor(String)` indirectly reads without synchronization from container `this.descriptors` via call to `get`. Potentially races with write in method `JcrRepository.apply(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":565,"column":-1,"procedure":"org.modeshape.jcr.JcrRepository.getDescriptor(java.lang.String):java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrRepository.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":565,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":565,"column_number":-1,"description":"call to boolean JcrRepository.isSingleValueDescriptor(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":601,"column_number":-1,"description":"Read of container `this.descriptors` via call to `get`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":369,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":369,"column_number":-1,"description":"call to void JcrRepository.refreshWorkspaces()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":909,"column_number":-1,"description":"Write to container `this.descriptors` via call to `put`"}],"key":"JcrRepository.java|getDescriptor|THREAD_SAFETY_VIOLATION","hash":"bff9307a0911a9ff6e62fa5fb599ae76","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAHkAAAAIAAAALgAAACKgsAECWQD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JSZXBvc2l0b3J5LmphdmGgsAEDjQD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JSZXBvc2l0b3J5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `java.lang.String[] JcrRepository.getDescriptorKeys()` reads without synchronization from container `this.descriptors` via call to `size`. Potentially races with write in method `JcrRepository.apply(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":611,"column":-1,"procedure":"org.modeshape.jcr.JcrRepository.getDescriptorKeys():java.lang.String[]","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrRepository.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":611,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":611,"column_number":-1,"description":"Read of container `this.descriptors` via call to `size`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":369,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":369,"column_number":-1,"description":"call to void JcrRepository.refreshWorkspaces()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":909,"column_number":-1,"description":"Write to container `this.descriptors` via call to `put`"}],"key":"JcrRepository.java|getDescriptorKeys|THREAD_SAFETY_VIOLATION","hash":"6e42e3acccd1d747b3e292f6db713a43","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAHkAAAAIAAAALgAAACKgsAECYwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JSZXBvc2l0b3J5LmphdmGgsAEDjQD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JSZXBvc2l0b3J5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `Value JcrRepository.getDescriptorValue(String)` indirectly reads without synchronization from container `this.descriptors` via call to `get`. Potentially races with write in method `JcrRepository.apply(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":145,"column":-1,"procedure":"org.modeshape.jcr.JcrRepository.getDescriptorValue(java.lang.String):javax.jcr.Value","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrRepository.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":145,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":145,"column_number":-1,"description":"call to JcrValue JcrRepository.getDescriptorValue(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":578,"column_number":-1,"description":"call to boolean JcrRepository.isSingleValueDescriptor(String)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":601,"column_number":-1,"description":"Read of container `this.descriptors` via call to `get`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":369,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":369,"column_number":-1,"description":"call to void JcrRepository.refreshWorkspaces()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":909,"column_number":-1,"description":"Write to container `this.descriptors` via call to `put`"}],"key":"JcrRepository.java|getDescriptorValue|THREAD_SAFETY_VIOLATION","hash":"d4c165d9578ce33e64ac2917f3b115b6","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAHkAAAAIAAAALgAAACKgsAECWQD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JSZXBvc2l0b3J5LmphdmGgsAEDjQD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JSZXBvc2l0b3J5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `JcrValue JcrRepository.getDescriptorValue(String)` indirectly reads without synchronization from container `this.descriptors` via call to `get`. Potentially races with write in method `JcrRepository.apply(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":578,"column":-1,"procedure":"org.modeshape.jcr.JcrRepository.getDescriptorValue(java.lang.String):org.modeshape.jcr.JcrValue","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrRepository.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":578,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":578,"column_number":-1,"description":"call to boolean JcrRepository.isSingleValueDescriptor(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":601,"column_number":-1,"description":"Read of container `this.descriptors` via call to `get`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":369,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":369,"column_number":-1,"description":"call to void JcrRepository.refreshWorkspaces()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":909,"column_number":-1,"description":"Write to container `this.descriptors` via call to `put`"}],"key":"JcrRepository.java|getDescriptorValue|THREAD_SAFETY_VIOLATION","hash":"99a0166b69d4ffe0b4495dc7badc3bf4","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAHkAAAAIAAAALgAAACKgsAECWQD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JSZXBvc2l0b3J5LmphdmGgsAEDjQD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JSZXBvc2l0b3J5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `javax.jcr.Value[] JcrRepository.getDescriptorValues(String)` indirectly reads without synchronization from container `this.descriptors` via call to `get`. Potentially races with write in method `JcrRepository.apply(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":145,"column":-1,"procedure":"org.modeshape.jcr.JcrRepository.getDescriptorValues(java.lang.String):javax.jcr.Value[]","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrRepository.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":145,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":145,"column_number":-1,"description":"call to org.modeshape.jcr.JcrValue[] JcrRepository.getDescriptorValues(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":584,"column_number":-1,"description":"Read of container `this.descriptors` via call to `get`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":369,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":369,"column_number":-1,"description":"call to void JcrRepository.refreshWorkspaces()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":909,"column_number":-1,"description":"Write to container `this.descriptors` via call to `put`"}],"key":"JcrRepository.java|getDescriptorValues|THREAD_SAFETY_VIOLATION","hash":"a63c83509ffedf8c1c14c3b99dc7312f","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAHkAAAAIAAAALgAAACKgsAECSAD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JSZXBvc2l0b3J5LmphdmGgsAEDjQD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JSZXBvc2l0b3J5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `org.modeshape.jcr.JcrValue[] JcrRepository.getDescriptorValues(String)` reads without synchronization from container `this.descriptors` via call to `get`. Potentially races with write in method `JcrRepository.apply(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":584,"column":-1,"procedure":"org.modeshape.jcr.JcrRepository.getDescriptorValues(java.lang.String):org.modeshape.jcr.JcrValue[]","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrRepository.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":584,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":584,"column_number":-1,"description":"Read of container `this.descriptors` via call to `get`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":369,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":369,"column_number":-1,"description":"call to void JcrRepository.refreshWorkspaces()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":909,"column_number":-1,"description":"Write to container `this.descriptors` via call to `put`"}],"key":"JcrRepository.java|getDescriptorValues|THREAD_SAFETY_VIOLATION","hash":"2f0fb17682a052d23f2fad3fa955bfb4","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAHkAAAAIAAAALgAAACKgsAECSAD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JSZXBvc2l0b3J5LmphdmGgsAEDjQD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JSZXBvc2l0b3J5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `SchematicEntry DocumentStore.get(String)` of un-annotated interface `org.modeshape.jcr.cache.document.DocumentStore`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":1380,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.getEtag(org.modeshape.jcr.cache.SessionCache):java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1380,"column_number":-1,"description":"call to Iterator SessionNode.getProperties(NodeCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":778,"column_number":-1,"description":"call to CachedNode SessionNode.nodeInWorkspace(AbstractSessionCache)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":309,"column_number":-1,"description":"call to CachedNode WorkspaceCache.getNode(NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":243,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":207,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(String)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":188,"column_number":-1,"description":"Call to un-annotated interface method SchematicEntry DocumentStore.get(String)"}],"key":"SessionNode.java|getEtag|INTERFACE_NOT_THREAD_SAFE","hash":"cfe948cb294992f9dfab9a524267a67c","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEAvAD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xb3Jrc3BhY2VDYWNoZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String ChangeJournal.journalId()` of un-annotated interface `org.modeshape.jcr.journal.ChangeJournal`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":227,"column":-1,"procedure":"org.modeshape.jcr.JcrObservationManager.getEventJournal():javax.jcr.observation.EventJournal","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrObservationManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrObservationManager.java","line_number":227,"column_number":-1,"description":"call to String JcrRepository.journalId()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":517,"column_number":-1,"description":"call to String JcrRepository$RunningState.journalId()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1449,"column_number":-1,"description":"Call to un-annotated interface method String ChangeJournal.journalId()"}],"key":"JcrObservationManager.java|getEventJournal|INTERFACE_NOT_THREAD_SAFE","hash":"b18496d9d64d7ff4bd65de6b3dcb4b45","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEFqQD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JSZXBvc2l0b3J5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String ChangeJournal.journalId()` of un-annotated interface `org.modeshape.jcr.journal.ChangeJournal`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":246,"column":-1,"procedure":"org.modeshape.jcr.JcrObservationManager.getEventJournal(int,java.lang.String,boolean,java.lang.String[],java.lang.String[]):javax.jcr.observation.EventJournal","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrObservationManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrObservationManager.java","line_number":246,"column_number":-1,"description":"call to String JcrRepository.journalId()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":517,"column_number":-1,"description":"call to String JcrRepository$RunningState.journalId()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1449,"column_number":-1,"description":"Call to un-annotated interface method String ChangeJournal.journalId()"}],"key":"JcrObservationManager.java|getEventJournal|INTERFACE_NOT_THREAD_SAFE","hash":"9baa08fcfe428fe015ac7eb93e0c4ce7","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEFqQD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JSZXBvc2l0b3J5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `String CassandraBinaryStore.getExtractedText(BinaryValue)` indirectly reads without synchronization from `this.session`. Potentially races with write in method `CassandraBinaryStore.start()`.\n Reporting because a superclass `class org.modeshape.jcr.value.binary.AbstractBinaryStore` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":108,"column":-1,"procedure":"org.modeshape.jcr.value.binary.CassandraBinaryStore.getExtractedText(org.modeshape.jcr.value.BinaryValue):java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/CassandraBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/CassandraBinaryStore.java","line_number":108,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/CassandraBinaryStore.java","line_number":108,"column_number":-1,"description":"call to void CassandraBinaryStore.checkContentExists(BinaryValue)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/CassandraBinaryStore.java","line_number":80,"column_number":-1,"description":"call to boolean CassandraBinaryStore.contentExists(BinaryKey,boolean)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/binary/CassandraBinaryStore.java","line_number":303,"column_number":-1,"description":"access to `this.session`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/CassandraBinaryStore.java","line_number":262,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/CassandraBinaryStore.java","line_number":262,"column_number":-1,"description":"access to `this.session`"}],"key":"CassandraBinaryStore.java|getExtractedText|THREAD_SAFETY_VIOLATION","hash":"009c43c69ccf30fcab3064a06fd22b59","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAKEAAAAIAAAAOAAAACagsAEBLwD/kglGc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvQ2Fzc2FuZHJhQmluYXJ5U3RvcmUuamF2YaCwAQEGAP+SCUZzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2JpbmFyeS9DYXNzYW5kcmFCaW5hcnlTdG9yZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `String DatabaseBinaryStore.getExtractedText(BinaryValue)` indirectly reads without synchronization from `this.dataSource`. Potentially races with write in method `DatabaseBinaryStore.start()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":286,"column":-1,"procedure":"org.modeshape.jcr.value.binary.DatabaseBinaryStore.getExtractedText(org.modeshape.jcr.value.BinaryValue):java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":286,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":286,"column_number":-1,"description":"call to Object DatabaseBinaryStore.dbCall(DatabaseBinaryStore$DBCallable)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":357,"column_number":-1,"description":"call to Connection DatabaseBinaryStore.newConnection()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":328,"column_number":-1,"description":"access to `this.dataSource`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":146,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":146,"column_number":-1,"description":"call to void DatabaseBinaryStore.lookupDataSource()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":338,"column_number":-1,"description":"access to `this.dataSource`"}],"key":"DatabaseBinaryStore.java|getExtractedText|THREAD_SAFETY_VIOLATION","hash":"aac1f0e77dc93fd25c3b7821f7e28951","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAJ8AAAAIAAAAOAAAACagsAEBSAD/kglFc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvRGF0YWJhc2VCaW5hcnlTdG9yZS5qYXZhoLABAVIA/5IJRXNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvdmFsdWUvYmluYXJ5L0RhdGFiYXNlQmluYXJ5U3RvcmUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `BinaryKey BinaryValue.getKey()` of un-annotated interface `org.modeshape.jcr.value.BinaryValue`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":539,"column":-1,"procedure":"org.modeshape.jcr.value.binary.FileSystemBinaryStore.getExtractedText(org.modeshape.jcr.value.BinaryValue):java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":539,"column_number":-1,"description":"call to boolean FileSystemBinaryStore.binaryValueExists(BinaryValue)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":609,"column_number":-1,"description":"Call to un-annotated interface method BinaryKey BinaryValue.getKey()"}],"key":"FileSystemBinaryStore.java|getExtractedText|INTERFACE_NOT_THREAD_SAFE","hash":"a1470e21b52112fc66cf360e6461ccea","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAFIAAAAEAAAAHAAAABOgsAECYQD/kglHc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvRmlsZVN5c3RlbUJpbmFyeVN0b3JlLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `String MongodbBinaryStore.getExtractedText(BinaryValue)` reads without synchronization from `this.db`. Potentially races with write in method `MongodbBinaryStore.start()`.\n Reporting because a superclass `class org.modeshape.jcr.value.binary.AbstractBinaryStore` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":302,"column":-1,"procedure":"org.modeshape.jcr.value.binary.MongodbBinaryStore.getExtractedText(org.modeshape.jcr.value.BinaryValue):java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":302,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":302,"column_number":-1,"description":"access to `this.db`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":346,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":346,"column_number":-1,"description":"call to void MongodbBinaryStore.initMongoDatabase()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":367,"column_number":-1,"description":"access to `this.db`"}],"key":"MongodbBinaryStore.java|getExtractedText|THREAD_SAFETY_VIOLATION","hash":"73c54f796fa7a31b5122be5bc59a2953","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAJ0AAAAIAAAAOAAAACagsAEBLgD/kglEc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvTW9uZ29kYkJpbmFyeVN0b3JlLmphdmGgsAEBbwD/kglEc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvTW9uZ29kYkJpbmFyeVN0b3JlLmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Object DBObject.get(String)` of un-annotated interface `com.mongodb.DBObject`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.binary.AbstractBinaryStore` is annotated `@ThreadSafe`.","severity":"WARNING","line":306,"column":-1,"procedure":"org.modeshape.jcr.value.binary.MongodbBinaryStore.getExtractedText(org.modeshape.jcr.value.BinaryValue):java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":306,"column_number":-1,"description":"call to Object MongodbBinaryStore.getAttribute(DBCollection,String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":407,"column_number":-1,"description":"Call to un-annotated interface method Object DBObject.get(String)"}],"key":"MongodbBinaryStore.java|getExtractedText|INTERFACE_NOT_THREAD_SAFE","hash":"4c46913e2df5e996ebaa941309749f54","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE8AAAAEAAAAHAAAABOgsAEBlwD/kglEc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvTW9uZ29kYkJpbmFyeVN0b3JlLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `String InfinispanBinaryStore.getExtractedText(BinaryValue)` reads without synchronization from `this.metadataCache`. Potentially races with write in method `InfinispanBinaryStore.start()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":522,"column":-1,"procedure":"org.modeshape.jcr.value.binary.infinispan.InfinispanBinaryStore.getExtractedText(org.modeshape.jcr.value.BinaryValue):java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":522,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":522,"column_number":-1,"description":"access to `this.metadataCache`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":179,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":179,"column_number":-1,"description":"access to `this.metadataCache`"}],"key":"InfinispanBinaryStore.java|getExtractedText|THREAD_SAFETY_VIOLATION","hash":"6c1638f498be4e47d44412ecd1f9491c","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAALkAAAAIAAAAPgAAACqgsAECCgD/kglSc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvaW5maW5pc3Bhbi9JbmZpbmlzcGFuQmluYXJ5U3RvcmUuamF2YaCwAQCzAP+SCVJzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2JpbmFyeS9pbmZpbmlzcGFuL0luZmluaXNwYW5CaW5hcnlTdG9yZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `String InfinispanBinaryStore.getExtractedText(BinaryValue)` reads without synchronization from `this.blobCache`. Potentially races with write in method `InfinispanBinaryStore.start()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":532,"column":-1,"procedure":"org.modeshape.jcr.value.binary.infinispan.InfinispanBinaryStore.getExtractedText(org.modeshape.jcr.value.BinaryValue):java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":532,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":532,"column_number":-1,"description":"access to `this.blobCache`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":180,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":180,"column_number":-1,"description":"access to `this.blobCache`"}],"key":"InfinispanBinaryStore.java|getExtractedText|THREAD_SAFETY_VIOLATION","hash":"f99dcca82fcc58684313dff0da25f716","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAALkAAAAIAAAAPgAAACqgsAECFAD/kglSc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvaW5maW5pc3Bhbi9JbmZpbmlzcGFuQmluYXJ5U3RvcmUuamF2YaCwAQC0AP+SCVJzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2JpbmFyeS9pbmZpbmlzcGFuL0luZmluaXNwYW5CaW5hcnlTdG9yZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `BinaryKey BinaryValue.getKey()` of un-annotated interface `org.modeshape.jcr.value.BinaryValue`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":520,"column":-1,"procedure":"org.modeshape.jcr.value.binary.infinispan.InfinispanBinaryStore.getExtractedText(org.modeshape.jcr.value.BinaryValue):java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":520,"column_number":-1,"description":"Call to un-annotated interface method BinaryKey BinaryValue.getKey()"}],"key":"InfinispanBinaryStore.java|getExtractedText|INTERFACE_NOT_THREAD_SAFE","hash":"1a6d3cd73b6387ce736d4c59b2fb450b","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAF0AAAAEAAAAHwAAABWgsAECCAD/kglSc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvaW5maW5pc3Bhbi9JbmZpbmlzcGFuQmluYXJ5U3RvcmUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `FederationManager JcrWorkspace.getFederationManager()` indirectly reads without synchronization from `this.federationManager`. Potentially races with write in method `JcrWorkspace.getFederationManager()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":955,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.getFederationManager():org.modeshape.jcr.api.federation.FederationManager","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":955,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":955,"column_number":-1,"description":"call to ModeShapeFederationManager JcrWorkspace.federationManager()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":959,"column_number":-1,"description":"access to `this.federationManager`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":955,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":955,"column_number":-1,"description":"call to ModeShapeFederationManager JcrWorkspace.federationManager()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":964,"column_number":-1,"description":"access to `this.federationManager`"}],"key":"JcrWorkspace.java|getFederationManager|THREAD_SAFETY_VIOLATION","hash":"aeb4c83da0df201c084aa1e0b61e4a5a","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAGAAAAHgAAABigsAEDvwD/kgkxc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JXb3Jrc3BhY2UuamF2YaCwAQPEAP8EBEA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Node JcrVersionNode.getFrozenNode()` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":33,"column":-1,"procedure":"org.modeshape.jcr.JcrVersionNode.getFrozenNode():javax.jcr.Node","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","line_number":33,"column_number":-1,"description":"call to AbstractJcrNode JcrVersionNode.getFrozenNode()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","line_number":72,"column_number":-1,"description":"call to AbstractJcrNode AbstractJcrNode.childNode(Name,AbstractJcrNode$Type)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":690,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"JcrVersionNode.java|getFrozenNode|THREAD_SAFETY_VIOLATION","hash":"c6747706ae6a6f09026b14ed30eb8e5a","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrNode JcrVersionNode.getFrozenNode()` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":72,"column":-1,"procedure":"org.modeshape.jcr.JcrVersionNode.getFrozenNode():org.modeshape.jcr.AbstractJcrNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","line_number":72,"column_number":-1,"description":"call to AbstractJcrNode AbstractJcrNode.childNode(Name,AbstractJcrNode$Type)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":690,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"JcrVersionNode.java|getFrozenNode|THREAD_SAFETY_VIOLATION","hash":"6bed3ef0c82ebba474893395e37b9def","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `NodeKey SessionCache.getRootKey()` of un-annotated interface `org.modeshape.jcr.cache.SessionCache`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":275,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.getIdentifier():java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":275,"column_number":-1,"description":"call to String JcrSession.nodeIdentifier(NodeKey)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1969,"column_number":-1,"description":"Call to un-annotated interface method NodeKey SessionCache.getRootKey()"}],"key":"AbstractJcrNode.java|getIdentifier|INTERFACE_NOT_THREAD_SAFE","hash":"cc10ca733fb2c7c03c8c581c0a933441","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAADoAAAAEAAAAFgAAABCgsAEHsQD/kgkvc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JTZXNzaW9uLmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `boolean NodeTypes$ReusableNodeDefinitionSet.appliesTo(NodeTypes,Name,Set)` of un-annotated interface `org.modeshape.jcr.NodeTypes$ReusableNodeDefinitionSet`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":713,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.getImportContentHandler(java.lang.String,int):org.xml.sax.ContentHandler","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":713,"column_number":-1,"description":"call to boolean AbstractJcrNode.isCheckedOut()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3222,"column_number":-1,"description":"call to NodeDefinition AbstractJcrNode.getDefinition()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2835,"column_number":-1,"description":"call to NodeDefinition AbstractJcrNode.nodeDefinition()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2907,"column_number":-1,"description":"call to NodeTypes$NodeDefinitionSet NodeTypes.findChildNodeDefinitions(Name,Set)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":2375,"column_number":-1,"description":"Call to un-annotated interface method boolean NodeTypes$ReusableNodeDefinitionSet.appliesTo(NodeTypes,Name,Set)"}],"key":"JcrWorkspace.java|getImportContentHandler|INTERFACE_NOT_THREAD_SAFE","hash":"8140ecfcf4ed0d7abd4609b872662bd9","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAADkAAAAEAAAAFgAAABCgsAEJRwD/kgkuc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9Ob2RlVHlwZXMuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `ContentHandler JcrWorkspace.getImportContentHandler(String,int)` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":712,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.getImportContentHandler(java.lang.String,int):org.xml.sax.ContentHandler","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":712,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.getNode(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":844,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.getNode(String,boolean)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":861,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(Path)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":677,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,Path)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":659,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"JcrWorkspace.java|getImportContentHandler|THREAD_SAFETY_VIOLATION","hash":"55232f6596ab7cac58c729db0413cfcc","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `int Path$Segment.getIndex()` of un-annotated interface `org.modeshape.jcr.value.Path$Segment`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":2142,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.getIndex():int","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2142,"column_number":-1,"description":"Call to un-annotated interface method int Path$Segment.getIndex()"}],"key":"AbstractJcrNode.java|getIndex|INTERFACE_NOT_THREAD_SAFE","hash":"7da0c9b9e17e19296fd2f1deb974f62c","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEIXgD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `int Path$Segment.getIndex()` of un-annotated interface `org.modeshape.jcr.value.Path$Segment`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":56,"column":-1,"procedure":"org.modeshape.jcr.JcrNode.getIndex():int","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNode.java","line_number":56,"column_number":-1,"description":"Call to un-annotated interface method int Path$Segment.getIndex()"}],"key":"JcrNode.java|getIndex|INTERFACE_NOT_THREAD_SAFE","hash":"0803af2f565d812f277f6ad0d4edd520","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAADUAAAAEAAAAFgAAABCgsHgA/5IJLHNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvSmNyTm9kZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `int Path$Segment.getIndex()` of un-annotated interface `org.modeshape.jcr.value.Path$Segment`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`.","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.getIndex():int","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to int JcrNode.getIndex()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrNode.java","line_number":56,"column_number":-1,"description":"Call to un-annotated interface method int Path$Segment.getIndex()"}],"key":"JcrSystemNode.java|getIndex|INTERFACE_NOT_THREAD_SAFE","hash":"24d423adb53b3d1e79e7e74d8e936c1c","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAADUAAAAEAAAAFgAAABCgsHgA/5IJLHNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvSmNyTm9kZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `Index IndexProvider.getIndex(String,String)` reads without synchronization from container `this.providedIndexesByWorkspaceNameByIndexName` via call to `get`. Potentially races with write in method `IndexProvider.notify(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":511,"column":-1,"procedure":"org.modeshape.jcr.spi.index.provider.IndexProvider.getIndex(java.lang.String,java.lang.String):org.modeshape.jcr.spi.index.Index","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/spi/index/provider/IndexProvider.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/spi/index/provider/IndexProvider.java","line_number":511,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/spi/index/provider/IndexProvider.java","line_number":511,"column_number":-1,"description":"Read of container `this.providedIndexesByWorkspaceNameByIndexName` via call to `get`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/spi/index/provider/IndexProvider.java","line_number":958,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/spi/index/provider/IndexProvider.java","line_number":958,"column_number":-1,"description":"call to void IndexProvider.addProvidedIndex(IndexProvider$AtomicIndex)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/spi/index/provider/IndexProvider.java","line_number":1056,"column_number":-1,"description":"Write to container `this.providedIndexesByWorkspaceNameByIndexName` via call to `put`"}],"key":"IndexProvider.java|getIndex|THREAD_SAFETY_VIOLATION","hash":"7f634e3dcb21c365b6dbe6e0cac2ea5d","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAJ8AAAAIAAAAOAAAACagsAEB/wD/kglFc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9zcGkvaW5kZXgvcHJvdmlkZXIvSW5kZXhQcm92aWRlci5qYXZhoLABBCAA/5IJRXNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3Ivc3BpL2luZGV4L3Byb3ZpZGVyL0luZGV4UHJvdmlkZXIuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `void IndexProvider$ManagedIndexOperation.apply(String,ManagedIndex,IndexDefinition)` of un-annotated interface `org.modeshape.jcr.spi.index.provider.IndexProvider$ManagedIndexOperation`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":392,"column":-1,"procedure":"org.modeshape.jcr.RepositoryIndexManager.getIndexNames(java.lang.String,java.lang.String,org.modeshape.jcr.api.index.IndexManager$IndexStatus):java.util.List","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":392,"column_number":-1,"description":"call to void IndexProvider.onEachIndexInWorkspace(String,IndexProvider$ManagedIndexOperation)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/spi/index/provider/IndexProvider.java","line_number":618,"column_number":-1,"description":"Call to un-annotated interface method void IndexProvider$ManagedIndexOperation.apply(String,ManagedIndex,IndexDefinition)"}],"key":"RepositoryIndexManager.java|getIndexNames|INTERFACE_NOT_THREAD_SAFE","hash":"685bf843d5ce8b48b89ba9b7db68363c","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAFAAAAAEAAAAHAAAABOgsAECagD/kglFc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9zcGkvaW5kZXgvcHJvdmlkZXIvSW5kZXhQcm92aWRlci5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `IndexManager$IndexStatus ManagedIndex.getStatus()` of un-annotated interface `org.modeshape.jcr.spi.index.provider.ManagedIndex`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":356,"column":-1,"procedure":"org.modeshape.jcr.RepositoryIndexManager.getIndexStatus(java.lang.String,java.lang.String,java.lang.String):org.modeshape.jcr.api.index.IndexManager$IndexStatus","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":356,"column_number":-1,"description":"Call to un-annotated interface method IndexManager$IndexStatus ManagedIndex.getStatus()"}],"key":"RepositoryIndexManager.java|getIndexStatus|INTERFACE_NOT_THREAD_SAFE","hash":"2ab13974768521c1b201971cead5feff","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEYAAAAEAAAAGQAAABKgsAEBZAD/kgk7c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9SZXBvc2l0b3J5SW5kZXhNYW5hZ2VyLmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `boolean IndexWriter.canBeSkipped()` of un-annotated interface `org.modeshape.jcr.spi.index.IndexWriter`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":295,"column":-1,"procedure":"org.modeshape.jcr.RepositoryIndexManager.getIndexWriterForProviders(java.util.Set):org.modeshape.jcr.spi.index.IndexWriter","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":295,"column_number":-1,"description":"call to IndexWriter CompositeIndexWriter.create(Iterable)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/CompositeIndexWriter.java","line_number":39,"column_number":-1,"description":"Call to un-annotated interface method boolean IndexWriter.canBeSkipped()"}],"key":"RepositoryIndexManager.java|getIndexWriterForProviders|INTERFACE_NOT_THREAD_SAFE","hash":"bb31a8b52e1e06884a1f20ce39a770ee","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEgAAAAEAAAAGgAAABKgsGcA/5IJP3NyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvcXVlcnkvQ29tcG9zaXRlSW5kZXhXcml0ZXIuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `Iterable IndexProvider.getIndexes(String)` reads without synchronization from container `this.providedIndexesByIndexNameByWorkspaceName` via call to `get`. Potentially races with write in method `IndexProvider.notify(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":553,"column":-1,"procedure":"org.modeshape.jcr.spi.index.provider.IndexProvider.getIndexes(java.lang.String):java.lang.Iterable","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/spi/index/provider/IndexProvider.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/spi/index/provider/IndexProvider.java","line_number":553,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/spi/index/provider/IndexProvider.java","line_number":553,"column_number":-1,"description":"Read of container `this.providedIndexesByIndexNameByWorkspaceName` via call to `get`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/spi/index/provider/IndexProvider.java","line_number":958,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/spi/index/provider/IndexProvider.java","line_number":958,"column_number":-1,"description":"call to void IndexProvider.addProvidedIndex(IndexProvider$AtomicIndex)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/spi/index/provider/IndexProvider.java","line_number":1064,"column_number":-1,"description":"Write to container `this.providedIndexesByIndexNameByWorkspaceName` via call to `put`"}],"key":"IndexProvider.java|getIndexes|THREAD_SAFETY_VIOLATION","hash":"e5f8eba96576422265ef3243b06752bb","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAJ8AAAAIAAAAOAAAACagsAECKQD/kglFc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9zcGkvaW5kZXgvcHJvdmlkZXIvSW5kZXhQcm92aWRlci5qYXZhoLABBCgA/5IJRXNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3Ivc3BpL2luZGV4L3Byb3ZpZGVyL0luZGV4UHJvdmlkZXIuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `void IndexProvider$ManagedIndexOperation.apply(String,ManagedIndex,IndexDefinition)` of un-annotated interface `org.modeshape.jcr.spi.index.provider.IndexProvider$ManagedIndexOperation`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":370,"column":-1,"procedure":"org.modeshape.jcr.RepositoryIndexManager.getIndexes(java.lang.String,java.lang.String,org.modeshape.jcr.api.index.IndexManager$IndexStatus):java.util.List","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":370,"column_number":-1,"description":"call to void IndexProvider.onEachIndexInWorkspace(String,IndexProvider$ManagedIndexOperation)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/spi/index/provider/IndexProvider.java","line_number":618,"column_number":-1,"description":"Call to un-annotated interface method void IndexProvider$ManagedIndexOperation.apply(String,ManagedIndex,IndexDefinition)"}],"key":"RepositoryIndexManager.java|getIndexes|INTERFACE_NOT_THREAD_SAFE","hash":"a23b0312c31485c3f3985091565d0dae","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAFAAAAAEAAAAHAAAABOgsAECagD/kglFc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9zcGkvaW5kZXgvcHJvdmlkZXIvSW5kZXhQcm92aWRlci5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `InputStream CassandraBinaryStore.getInputStream(BinaryKey)` reads without synchronization from `this.session`. Potentially races with write in method `CassandraBinaryStore.start()`.\n Reporting because a superclass `class org.modeshape.jcr.value.binary.AbstractBinaryStore` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":171,"column":-1,"procedure":"org.modeshape.jcr.value.binary.CassandraBinaryStore.getInputStream(org.modeshape.jcr.value.BinaryKey):java.io.InputStream","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/CassandraBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/CassandraBinaryStore.java","line_number":171,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/CassandraBinaryStore.java","line_number":171,"column_number":-1,"description":"access to `this.session`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/CassandraBinaryStore.java","line_number":262,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/CassandraBinaryStore.java","line_number":262,"column_number":-1,"description":"access to `this.session`"}],"key":"CassandraBinaryStore.java|getInputStream|THREAD_SAFETY_VIOLATION","hash":"37ac449afbd547cf1e28473017076231","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAKEAAAAIAAAAOAAAACagsAEAqwD/kglGc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvQ2Fzc2FuZHJhQmluYXJ5U3RvcmUuamF2YaCwAQEGAP+SCUZzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2JpbmFyeS9DYXNzYW5kcmFCaW5hcnlTdG9yZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `InputStream DatabaseBinaryStore.getInputStream(BinaryKey)` indirectly reads without synchronization from `this.dataSource`. Potentially races with write in method `DatabaseBinaryStore.start()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":209,"column":-1,"procedure":"org.modeshape.jcr.value.binary.DatabaseBinaryStore.getInputStream(org.modeshape.jcr.value.BinaryKey):java.io.InputStream","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":209,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":209,"column_number":-1,"description":"call to Connection DatabaseBinaryStore.newConnection()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":328,"column_number":-1,"description":"access to `this.dataSource`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":146,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":146,"column_number":-1,"description":"call to void DatabaseBinaryStore.lookupDataSource()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":338,"column_number":-1,"description":"access to `this.dataSource`"}],"key":"DatabaseBinaryStore.java|getInputStream|THREAD_SAFETY_VIOLATION","hash":"5318d6979d673f1826ed9991fc600852","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAJ8AAAAIAAAAOAAAACagsAEBSAD/kglFc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvRGF0YWJhc2VCaW5hcnlTdG9yZS5qYXZhoLABAVIA/5IJRXNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvdmFsdWUvYmluYXJ5L0RhdGFiYXNlQmluYXJ5U3RvcmUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `InputStream DatabaseBinaryStore.getInputStream(BinaryKey)` reads without synchronization from `this.database`. Potentially races with write in method `DatabaseBinaryStore.start()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":211,"column":-1,"procedure":"org.modeshape.jcr.value.binary.DatabaseBinaryStore.getInputStream(org.modeshape.jcr.value.BinaryKey):java.io.InputStream","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":211,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":211,"column_number":-1,"description":"access to `this.database`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":151,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":151,"column_number":-1,"description":"call to Database DatabaseBinaryStore.database()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":158,"column_number":-1,"description":"access to `this.database`"}],"key":"DatabaseBinaryStore.java|getInputStream|THREAD_SAFETY_VIOLATION","hash":"0bcd614e81df3f70efb70c8c098ddf18","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAJ8AAAAIAAAAOAAAACagsAEA0wD/kglFc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvRGF0YWJhc2VCaW5hcnlTdG9yZS5qYXZhoLABAJ4A/5IJRXNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvdmFsdWUvYmluYXJ5L0RhdGFiYXNlQmluYXJ5U3RvcmUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `InputStream MongodbBinaryStore.getInputStream(BinaryKey)` reads without synchronization from `this.db`. Potentially races with write in method `MongodbBinaryStore.start()`.\n Reporting because a superclass `class org.modeshape.jcr.value.binary.AbstractBinaryStore` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":230,"column":-1,"procedure":"org.modeshape.jcr.value.binary.MongodbBinaryStore.getInputStream(org.modeshape.jcr.value.BinaryKey):java.io.InputStream","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":230,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":230,"column_number":-1,"description":"access to `this.db`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":346,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":346,"column_number":-1,"description":"call to void MongodbBinaryStore.initMongoDatabase()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":367,"column_number":-1,"description":"access to `this.db`"}],"key":"MongodbBinaryStore.java|getInputStream|THREAD_SAFETY_VIOLATION","hash":"709c7e9db5093095d306586d5936e41c","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAJ0AAAAIAAAAOAAAACagsAEA5gD/kglEc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvTW9uZ29kYkJpbmFyeVN0b3JlLmphdmGgsAEBbwD/kglEc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvTW9uZ29kYkJpbmFyeVN0b3JlLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `InputStream InfinispanBinaryStore.getInputStream(BinaryKey)` reads without synchronization from `this.metadataCache`. Potentially races with write in method `InfinispanBinaryStore.start()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":283,"column":-1,"procedure":"org.modeshape.jcr.value.binary.infinispan.InfinispanBinaryStore.getInputStream(org.modeshape.jcr.value.BinaryKey):java.io.InputStream","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":283,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":283,"column_number":-1,"description":"access to `this.metadataCache`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":179,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":179,"column_number":-1,"description":"access to `this.metadataCache`"}],"key":"InfinispanBinaryStore.java|getInputStream|THREAD_SAFETY_VIOLATION","hash":"9ec2ec5370e1a8e7deb43ca8a515ecd3","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAALkAAAAIAAAAPgAAACqgsAEBGwD/kglSc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvaW5maW5pc3Bhbi9JbmZpbmlzcGFuQmluYXJ5U3RvcmUuamF2YaCwAQCzAP+SCVJzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2JpbmFyeS9pbmZpbmlzcGFuL0luZmluaXNwYW5CaW5hcnlTdG9yZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `InputStream InfinispanBinaryStore.getInputStream(BinaryKey)` reads without synchronization from `this.blobCache`. Potentially races with write in method `InfinispanBinaryStore.start()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":291,"column":-1,"procedure":"org.modeshape.jcr.value.binary.infinispan.InfinispanBinaryStore.getInputStream(org.modeshape.jcr.value.BinaryKey):java.io.InputStream","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":291,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":291,"column_number":-1,"description":"access to `this.blobCache`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":180,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":180,"column_number":-1,"description":"access to `this.blobCache`"}],"key":"InfinispanBinaryStore.java|getInputStream|THREAD_SAFETY_VIOLATION","hash":"e1dce9c3d6a4b79768004db49b207d80","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAALkAAAAIAAAAPgAAACqgsAEBIwD/kglSc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvaW5maW5pc3Bhbi9JbmZpbmlzcGFuQmluYXJ5U3RvcmUuamF2YaCwAQC0AP+SCVJzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2JpbmFyeS9pbmZpbmlzcGFuL0luZmluaXNwYW5CaW5hcnlTdG9yZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String Cache.getName()` of un-annotated interface `org.infinispan.Cache`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":286,"column":-1,"procedure":"org.modeshape.jcr.value.binary.infinispan.InfinispanBinaryStore.getInputStream(org.modeshape.jcr.value.BinaryKey):java.io.InputStream","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":286,"column_number":-1,"description":"Call to un-annotated interface method String Cache.getName()"}],"key":"InfinispanBinaryStore.java|getInputStream|INTERFACE_NOT_THREAD_SAFE","hash":"55f4f023cf1de6302953b5d30198850f","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAF0AAAAEAAAAHwAAABWgsAEBHgD/kglSc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvaW5maW5pc3Bhbi9JbmZpbmlzcGFuQmluYXJ5U3RvcmUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String QueryParser.getLanguage()` of un-annotated interface `org.modeshape.jcr.query.parse.QueryParser`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":142,"column":-1,"procedure":"org.modeshape.jcr.query.parse.QueryParsers.getLanguages():java.util.Set","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/query/parse/QueryParsers.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/parse/QueryParsers.java","line_number":142,"column_number":-1,"description":"Call to un-annotated interface method String QueryParser.getLanguage()"}],"key":"QueryParsers.java|getLanguages|INTERFACE_NOT_THREAD_SAFE","hash":"5fc68f947f4da07059e07a723b4d089f","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEgAAAAEAAAAGgAAABKgsAEAjgD/kgk9c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9xdWVyeS9wYXJzZS9RdWVyeVBhcnNlcnMuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Version JcrVersionNode.getLinearPredecessor()` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":33,"column":-1,"procedure":"org.modeshape.jcr.JcrVersionNode.getLinearPredecessor():javax.jcr.version.Version","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","line_number":33,"column_number":-1,"description":"call to JcrVersionNode JcrVersionNode.getLinearPredecessor()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","line_number":156,"column_number":-1,"description":"call to JcrVersionNode JcrVersionNode.getFirstNodeForProperty(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","line_number":113,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrVersionNode.java|getLinearPredecessor|THREAD_SAFETY_VIOLATION","hash":"f62bae3254ee0f8874a2636d5ee89159","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `JcrVersionNode JcrVersionNode.getLinearPredecessor()` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":156,"column":-1,"procedure":"org.modeshape.jcr.JcrVersionNode.getLinearPredecessor():org.modeshape.jcr.JcrVersionNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","line_number":156,"column_number":-1,"description":"call to JcrVersionNode JcrVersionNode.getFirstNodeForProperty(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","line_number":113,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrVersionNode.java|getLinearPredecessor|THREAD_SAFETY_VIOLATION","hash":"f64c8a9c645868617cb3bb9bf8250f9b","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Version JcrVersionNode.getLinearSuccessor()` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":33,"column":-1,"procedure":"org.modeshape.jcr.JcrVersionNode.getLinearSuccessor():javax.jcr.version.Version","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","line_number":33,"column_number":-1,"description":"call to JcrVersionNode JcrVersionNode.getLinearSuccessor()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","line_number":161,"column_number":-1,"description":"call to JcrVersionNode JcrVersionNode.getFirstNodeForProperty(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","line_number":113,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrVersionNode.java|getLinearSuccessor|THREAD_SAFETY_VIOLATION","hash":"4cf3e41f231bfcd89cf1dd6338fb3f2b","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `JcrVersionNode JcrVersionNode.getLinearSuccessor()` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":161,"column":-1,"procedure":"org.modeshape.jcr.JcrVersionNode.getLinearSuccessor():org.modeshape.jcr.JcrVersionNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","line_number":161,"column_number":-1,"description":"call to JcrVersionNode JcrVersionNode.getFirstNodeForProperty(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","line_number":113,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrVersionNode.java|getLinearSuccessor|THREAD_SAFETY_VIOLATION","hash":"7d8ec4a4370b314da9f323e025407030","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String Name.getLocalName()` of un-annotated interface `org.modeshape.jcr.value.Name`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":295,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.getLocalName():java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":295,"column_number":-1,"description":"Call to un-annotated interface method String Name.getLocalName()"}],"key":"AbstractJcrNode.java|getLocalName|INTERFACE_NOT_THREAD_SAFE","hash":"736bf0e3064dbd15a585fd9ba098bf62","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEBJwD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String Name.getLocalName()` of un-annotated interface `org.modeshape.jcr.value.Name`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":584,"column":-1,"procedure":"org.modeshape.jcr.JcrNodeType.getLocalName():java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrNodeType.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":584,"column_number":-1,"description":"Call to un-annotated interface method String Name.getLocalName()"}],"key":"JcrNodeType.java|getLocalName|INTERFACE_NOT_THREAD_SAFE","hash":"1e90cc84327273be8dc22176d2d5fd24","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAADsAAAAEAAAAFwAAABGgsAECSAD/kgkwc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JOb2RlVHlwZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String Name.getLocalName()` of un-annotated interface `org.modeshape.jcr.value.Name`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`.","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.getLocalName():java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to String AbstractJcrNode.getLocalName()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":295,"column_number":-1,"description":"Call to un-annotated interface method String Name.getLocalName()"}],"key":"JcrSystemNode.java|getLocalName|INTERFACE_NOT_THREAD_SAFE","hash":"1003f3b5a0fad32dd4c3decf4282735e","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEBJwD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Lock AbstractJcrNode.getLock()` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":3317,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.getLock():javax.jcr.lock.Lock","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3317,"column_number":-1,"description":"call to Lock JcrLockManager.getLock(AbstractJcrNode)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrLockManager.java","line_number":172,"column_number":-1,"description":"call to Lock RepositoryLockManager$ModeShapeLock.lockFor(JcrSession)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","line_number":661,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"AbstractJcrNode.java|getLock|THREAD_SAFETY_VIOLATION","hash":"c600b70b39ae2bb33b4068c75b812fb8","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Lock JcrLockManager.getLock(String)` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":165,"column":-1,"procedure":"org.modeshape.jcr.JcrLockManager.getLock(java.lang.String):javax.jcr.lock.Lock","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrLockManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrLockManager.java","line_number":165,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(Path)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":677,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,Path)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":659,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"JcrLockManager.java|getLock|THREAD_SAFETY_VIOLATION","hash":"dad61bd7ee67378c703de916e1b11e65","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `SchematicEntry DocumentStore.get(String)` of un-annotated interface `org.modeshape.jcr.cache.document.DocumentStore`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":171,"column":-1,"procedure":"org.modeshape.jcr.JcrLockManager.getLock(org.modeshape.jcr.AbstractJcrNode):javax.jcr.lock.Lock","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrLockManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrLockManager.java","line_number":171,"column_number":-1,"description":"call to RepositoryLockManager$ModeShapeLock JcrLockManager.getLowestLockAlongPath(AbstractJcrNode)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrLockManager.java","line_number":205,"column_number":-1,"description":"call to CachedNode WorkspaceCache.getNode(NodeKey)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":243,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":207,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(String)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":188,"column_number":-1,"description":"Call to un-annotated interface method SchematicEntry DocumentStore.get(String)"}],"key":"JcrLockManager.java|getLock|INTERFACE_NOT_THREAD_SAFE","hash":"3c6d9583a297c850dc1dcc90a4399f32","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEAvAD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xb3Jrc3BhY2VDYWNoZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Lock JcrLockManager.getLock(AbstractJcrNode)` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":172,"column":-1,"procedure":"org.modeshape.jcr.JcrLockManager.getLock(org.modeshape.jcr.AbstractJcrNode):javax.jcr.lock.Lock","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrLockManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrLockManager.java","line_number":172,"column_number":-1,"description":"call to Lock RepositoryLockManager$ModeShapeLock.lockFor(JcrSession)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","line_number":661,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"JcrLockManager.java|getLock|THREAD_SAFETY_VIOLATION","hash":"4fced51f308fde6fc5d774028c260e99","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Lock AbstractJcrNode.getLockIfExists()` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":3322,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.getLockIfExists():javax.jcr.lock.Lock","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3322,"column_number":-1,"description":"call to Lock JcrLockManager.getLockIfExists(AbstractJcrNode)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrLockManager.java","line_number":178,"column_number":-1,"description":"call to Lock RepositoryLockManager$ModeShapeLock.lockFor(JcrSession)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","line_number":661,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"AbstractJcrNode.java|getLockIfExists|THREAD_SAFETY_VIOLATION","hash":"05602684f0d424894c194ffd7c08c676","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `SchematicEntry DocumentStore.get(String)` of un-annotated interface `org.modeshape.jcr.cache.document.DocumentStore`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":177,"column":-1,"procedure":"org.modeshape.jcr.JcrLockManager.getLockIfExists(org.modeshape.jcr.AbstractJcrNode):javax.jcr.lock.Lock","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrLockManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrLockManager.java","line_number":177,"column_number":-1,"description":"call to RepositoryLockManager$ModeShapeLock JcrLockManager.getLowestLockAlongPath(AbstractJcrNode)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrLockManager.java","line_number":205,"column_number":-1,"description":"call to CachedNode WorkspaceCache.getNode(NodeKey)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":243,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":207,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(String)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":188,"column_number":-1,"description":"Call to un-annotated interface method SchematicEntry DocumentStore.get(String)"}],"key":"JcrLockManager.java|getLockIfExists|INTERFACE_NOT_THREAD_SAFE","hash":"d93d9ed5a8160752c9ee4346bea316ac","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEAvAD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xb3Jrc3BhY2VDYWNoZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Lock JcrLockManager.getLockIfExists(AbstractJcrNode)` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":178,"column":-1,"procedure":"org.modeshape.jcr.JcrLockManager.getLockIfExists(org.modeshape.jcr.AbstractJcrNode):javax.jcr.lock.Lock","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrLockManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrLockManager.java","line_number":178,"column_number":-1,"description":"call to Lock RepositoryLockManager$ModeShapeLock.lockFor(JcrSession)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","line_number":661,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"JcrLockManager.java|getLockIfExists|THREAD_SAFETY_VIOLATION","hash":"9663d4e41b13172fe7cdb1924f262530","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `LockManager JcrWorkspace.getLockManager()` indirectly reads without synchronization from `this.lockManager`. Potentially races with write in method `JcrWorkspace.lockManager()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":72,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.getLockManager():javax.jcr.lock.LockManager","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":72,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":72,"column_number":-1,"description":"call to JcrLockManager JcrWorkspace.getLockManager()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":570,"column_number":-1,"description":"call to JcrLockManager JcrWorkspace.lockManager()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":574,"column_number":-1,"description":"access to `this.lockManager`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":577,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":577,"column_number":-1,"description":"access to `this.lockManager`"}],"key":"JcrWorkspace.java|getLockManager|THREAD_SAFETY_VIOLATION","hash":"0a9a6839de4f955a89c2a03e674bd6a4","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAHcAAAAIAAAALgAAACKgsAECPgD/kgkxc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JXb3Jrc3BhY2UuamF2YaCwAQJBAP+SCTFzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL0pjcldvcmtzcGFjZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `JcrLockManager JcrWorkspace.getLockManager()` indirectly reads without synchronization from `this.lockManager`. Potentially races with write in method `JcrWorkspace.lockManager()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":570,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.getLockManager():org.modeshape.jcr.JcrLockManager","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":570,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":570,"column_number":-1,"description":"call to JcrLockManager JcrWorkspace.lockManager()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":574,"column_number":-1,"description":"access to `this.lockManager`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":577,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":577,"column_number":-1,"description":"access to `this.lockManager`"}],"key":"JcrWorkspace.java|getLockManager|THREAD_SAFETY_VIOLATION","hash":"f03da9ba86dd23694b1b53cfc3c5e52b","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAHcAAAAIAAAALgAAACKgsAECPgD/kgkxc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JXb3Jrc3BhY2UuamF2YaCwAQJBAP+SCTFzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL0pjcldvcmtzcGFjZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `SchematicEntry DocumentStore.get(String)` of un-annotated interface `org.modeshape.jcr.cache.document.DocumentStore`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":205,"column":-1,"procedure":"org.modeshape.jcr.JcrLockManager.getLowestLockAlongPath(org.modeshape.jcr.AbstractJcrNode):org.modeshape.jcr.RepositoryLockManager$ModeShapeLock","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrLockManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrLockManager.java","line_number":205,"column_number":-1,"description":"call to CachedNode WorkspaceCache.getNode(NodeKey)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":243,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(NodeKey)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":207,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(String)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":188,"column_number":-1,"description":"Call to un-annotated interface method SchematicEntry DocumentStore.get(String)"}],"key":"JcrLockManager.java|getLowestLockAlongPath|INTERFACE_NOT_THREAD_SAFE","hash":"59f5ee954e2935de623ae8f5a90a38e4","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEAvAD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xb3Jrc3BhY2VDYWNoZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `ManagedIndex IndexProvider.getManagedIndex(String,String)` reads without synchronization from container `this.providedIndexesByWorkspaceNameByIndexName` via call to `get`. Potentially races with write in method `IndexProvider.notify(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":526,"column":-1,"procedure":"org.modeshape.jcr.spi.index.provider.IndexProvider.getManagedIndex(java.lang.String,java.lang.String):org.modeshape.jcr.spi.index.provider.ManagedIndex","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/spi/index/provider/IndexProvider.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/spi/index/provider/IndexProvider.java","line_number":526,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/spi/index/provider/IndexProvider.java","line_number":526,"column_number":-1,"description":"Read of container `this.providedIndexesByWorkspaceNameByIndexName` via call to `get`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/spi/index/provider/IndexProvider.java","line_number":958,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/spi/index/provider/IndexProvider.java","line_number":958,"column_number":-1,"description":"call to void IndexProvider.addProvidedIndex(IndexProvider$AtomicIndex)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/spi/index/provider/IndexProvider.java","line_number":1056,"column_number":-1,"description":"Write to container `this.providedIndexesByWorkspaceNameByIndexName` via call to `put`"}],"key":"IndexProvider.java|getManagedIndex|THREAD_SAFETY_VIOLATION","hash":"e01eff16257ef43f764e02f3fb35c029","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAJ8AAAAIAAAAOAAAACagsAECDgD/kglFc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9zcGkvaW5kZXgvcHJvdmlkZXIvSW5kZXhQcm92aWRlci5qYXZhoLABBCAA/5IJRXNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3Ivc3BpL2luZGV4L3Byb3ZpZGVyL0luZGV4UHJvdmlkZXIuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String MimeTypeDetector.mimeTypeOf(String,Binary)` of un-annotated interface `org.modeshape.jcr.mimetype.MimeTypeDetector`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":166,"column":-1,"procedure":"org.modeshape.jcr.value.binary.AbstractBinaryStore.getMimeType(org.modeshape.jcr.value.BinaryValue,java.lang.String):java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/AbstractBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/AbstractBinaryStore.java","line_number":166,"column_number":-1,"description":"Call to un-annotated interface method String MimeTypeDetector.mimeTypeOf(String,Binary)"}],"key":"AbstractBinaryStore.java|getMimeType|INTERFACE_NOT_THREAD_SAFE","hash":"13c4cdc65a2df2d189ba05dd7194beaa","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAFAAAAAEAAAAHAAAABOgsAEApgD/kglFc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvQWJzdHJhY3RCaW5hcnlTdG9yZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `BinaryKey BinaryValue.getKey()` of un-annotated interface `org.modeshape.jcr.value.BinaryValue`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.binary.BinaryStore` is annotated `@ThreadSafe`.","severity":"WARNING","line":354,"column":-1,"procedure":"org.modeshape.jcr.value.binary.CompositeBinaryStore.getMimeType(org.modeshape.jcr.value.BinaryValue,java.lang.String):java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/CompositeBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/CompositeBinaryStore.java","line_number":354,"column_number":-1,"description":"Call to un-annotated interface method BinaryKey BinaryValue.getKey()"}],"key":"CompositeBinaryStore.java|getMimeType|INTERFACE_NOT_THREAD_SAFE","hash":"b39aba465ce839ff2504b33b693512a2","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAFEAAAAEAAAAHAAAABOgsAEBYgD/kglGc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvQ29tcG9zaXRlQmluYXJ5U3RvcmUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `javax.jcr.nodetype.NodeType[] AbstractJcrNode.getMixinNodeTypes()` indirectly writes to field `nodeType.key.sourceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":2298,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.getMixinNodeTypes():javax.jcr.nodetype.NodeType[]","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2298,"column_number":-1,"description":"call to JcrNodeType JcrNodeTypeManager.getNodeType(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrNodeTypeManager.java","line_number":148,"column_number":-1,"description":"call to JcrNodeType JcrNodeType.with(ExecutionContext,JcrSession)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":640,"column_number":-1,"description":"call to JcrNodeType.<init>(NodeKey,ExecutionContext,JcrSession,RepositoryNodeTypeManager,Name,List,Name,Collection,Collection,boolean,boolean,boolean,boolean)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":178,"column_number":-1,"description":"call to NodeKey NodeKey.withId(String)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":229,"column_number":-1,"description":"call to String NodeKey.getSourceKey()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":154,"column_number":-1,"description":"access to `nodeType.key.sourceKey`"}],"key":"AbstractJcrNode.java|getMixinNodeTypes|THREAD_SAFETY_VIOLATION","hash":"c94c3247df1f306e6e87ca8caed8785d","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEAmgD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Set CachedNode.getMixinTypes(NodeCache)` of un-annotated interface `org.modeshape.jcr.cache.CachedNode`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":2297,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.getMixinNodeTypes():javax.jcr.nodetype.NodeType[]","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2297,"column_number":-1,"description":"Call to un-annotated interface method Set CachedNode.getMixinTypes(NodeCache)"}],"key":"AbstractJcrNode.java|getMixinNodeTypes|INTERFACE_NOT_THREAD_SAFE","hash":"5259781fd50e784cf40254308fc1c93f","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEI+QD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `javax.jcr.nodetype.NodeType[] JcrSystemNode.getMixinNodeTypes()` indirectly writes to field `nodeType.key.sourceKey` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.getMixinNodeTypes():javax.jcr.nodetype.NodeType[]","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to javax.jcr.nodetype.NodeType[] AbstractJcrNode.getMixinNodeTypes()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2298,"column_number":-1,"description":"call to JcrNodeType JcrNodeTypeManager.getNodeType(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrNodeTypeManager.java","line_number":148,"column_number":-1,"description":"call to JcrNodeType JcrNodeType.with(ExecutionContext,JcrSession)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":640,"column_number":-1,"description":"call to JcrNodeType.<init>(NodeKey,ExecutionContext,JcrSession,RepositoryNodeTypeManager,Name,List,Name,Collection,Collection,boolean,boolean,boolean,boolean)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":178,"column_number":-1,"description":"call to NodeKey NodeKey.withId(String)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":229,"column_number":-1,"description":"call to String NodeKey.getSourceKey()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":154,"column_number":-1,"description":"access to `nodeType.key.sourceKey`"}],"key":"JcrSystemNode.java|getMixinNodeTypes|THREAD_SAFETY_VIOLATION","hash":"cf2f50efac9f17c7ab50a14520d688a6","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEAmgD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Set CachedNode.getMixinTypes(NodeCache)` of un-annotated interface `org.modeshape.jcr.cache.CachedNode`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":2312,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.getMixinTypeNames():java.util.Set","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2312,"column_number":-1,"description":"Call to un-annotated interface method Set CachedNode.getMixinTypes(NodeCache)"}],"key":"AbstractJcrNode.java|getMixinTypeNames|INTERFACE_NOT_THREAD_SAFE","hash":"b107a32407e9198459b4242f31f54d18","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEJCAD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Object Property.getFirstValue()` of un-annotated interface `org.modeshape.jcr.value.Property`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":360,"column":-1,"procedure":"org.modeshape.jcr.cache.document.LazyCachedNode.getMixinTypes(org.modeshape.jcr.cache.NodeCache):java.util.Set","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":360,"column_number":-1,"description":"Call to un-annotated interface method Object Property.getFirstValue()"}],"key":"LazyCachedNode.java|getMixinTypes|INTERFACE_NOT_THREAD_SAFE","hash":"912d0757898179a7a8508af4a38c6e0a","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEBaAD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9MYXp5Q2FjaGVkTm9kZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Set LazyCachedNode.getMixinTypes(NodeCache)` indirectly mutates container `props` via call to `put` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":355,"column":-1,"procedure":"org.modeshape.jcr.cache.document.LazyCachedNode.getMixinTypes(org.modeshape.jcr.cache.NodeCache):java.util.Set","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":355,"column_number":-1,"description":"call to Property LazyCachedNode.getProperty(Name,NodeCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":406,"column_number":-1,"description":"Write to container `props` via call to `put`"}],"key":"LazyCachedNode.java|getMixinTypes|THREAD_SAFETY_VIOLATION","hash":"6387619f9ed425d9c74f60f3e12974fa","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEBlgD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9MYXp5Q2FjaGVkTm9kZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `SchematicEntry DocumentStore.get(String)` of un-annotated interface `org.modeshape.jcr.cache.document.DocumentStore`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":508,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.getMixinTypes(org.modeshape.jcr.cache.NodeCache):java.util.Set","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":508,"column_number":-1,"description":"call to Property SessionNode.getProperty(Name,NodeCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":740,"column_number":-1,"description":"call to CachedNode SessionNode.nodeInWorkspace(AbstractSessionCache)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":309,"column_number":-1,"description":"call to CachedNode WorkspaceCache.getNode(NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":243,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":207,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(String)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":188,"column_number":-1,"description":"Call to un-annotated interface method SchematicEntry DocumentStore.get(String)"}],"key":"SessionNode.java|getMixinTypes|INTERFACE_NOT_THREAD_SAFE","hash":"bb358aa3356a88b9f50f6afecd914149","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEAvAD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xb3Jrc3BhY2VDYWNoZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Name Path$Segment.getName()` of un-annotated interface `org.modeshape.jcr.value.Path$Segment`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":61,"column":-1,"procedure":"org.modeshape.jcr.JcrNode.getName():java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNode.java","line_number":61,"column_number":-1,"description":"Call to un-annotated interface method Name Path$Segment.getName()"}],"key":"JcrNode.java|getName|INTERFACE_NOT_THREAD_SAFE","hash":"860c83ceec4ddac443bae20eb28993bd","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAADUAAAAEAAAAFgAAABCgsH0A/5IJLHNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvSmNyTm9kZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String Name.getString(NamespaceRegistry)` of un-annotated interface `org.modeshape.jcr.value.Name`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":499,"column":-1,"procedure":"org.modeshape.jcr.JcrNodeType.getName():java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrNodeType.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":499,"column_number":-1,"description":"Call to un-annotated interface method String Name.getString(NamespaceRegistry)"}],"key":"JcrNodeType.java|getName|INTERFACE_NOT_THREAD_SAFE","hash":"808f16b138bd07cdf67599ba2cad01b7","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAADsAAAAEAAAAFwAAABGgsAEB8wD/kgkwc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JOb2RlVHlwZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Name Path$Segment.getName()` of un-annotated interface `org.modeshape.jcr.value.Path$Segment`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`.","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.getName():java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to String JcrNode.getName()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrNode.java","line_number":61,"column_number":-1,"description":"Call to un-annotated interface method Name Path$Segment.getName()"}],"key":"JcrSystemNode.java|getName|INTERFACE_NOT_THREAD_SAFE","hash":"c099af0f81ec38205bf72f10c40ef427","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAADUAAAAEAAAAFgAAABCgsH0A/5IJLHNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvSmNyTm9kZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Name LazyCachedNode.getName(NodeCache)` indirectly writes to field `this.key.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":274,"column":-1,"procedure":"org.modeshape.jcr.cache.document.LazyCachedNode.getName(org.modeshape.jcr.cache.NodeCache):org.modeshape.jcr.value.Name","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":274,"column_number":-1,"description":"call to ChildReference LazyCachedNode.parentReferenceToSelf(WorkspaceCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":204,"column_number":-1,"description":"call to CachedNode LazyCachedNode.parent(WorkspaceCache)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":165,"column_number":-1,"description":"call to NodeKey LazyCachedNode.getParentKey(NodeCache)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":124,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `this.key.workspaceKey`"}],"key":"LazyCachedNode.java|getName|THREAD_SAFETY_VIOLATION","hash":"171619ef69abe0e3ebd098923ad11530","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `SchematicEntry DocumentStore.get(String)` of un-annotated interface `org.modeshape.jcr.cache.document.DocumentStore`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":408,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.getName(org.modeshape.jcr.cache.NodeCache):org.modeshape.jcr.value.Name","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":408,"column_number":-1,"description":"call to Path$Segment SessionNode.getSegment(NodeCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":414,"column_number":-1,"description":"call to CachedNode SessionNode.parent(AbstractSessionCache)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":337,"column_number":-1,"description":"call to CachedNode AbstractSessionCache.getNode(NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/AbstractSessionCache.java","line_number":249,"column_number":-1,"description":"call to CachedNode WorkspaceCache.getNode(NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":243,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(NodeKey)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":207,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(String)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":188,"column_number":-1,"description":"Call to un-annotated interface method SchematicEntry DocumentStore.get(String)"}],"key":"SessionNode.java|getName|INTERFACE_NOT_THREAD_SAFE","hash":"7afcccea566f3f212121edb26723464d","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEAvAD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xb3Jrc3BhY2VDYWNoZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `NamespaceRegistry JcrWorkspace.getNamespaceRegistry()` reads without synchronization from `this.workspaceRegistry`. Potentially races with write in method `JcrWorkspace.getNamespaceRegistry()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":602,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.getNamespaceRegistry():javax.jcr.NamespaceRegistry","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":602,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":602,"column_number":-1,"description":"access to `this.workspaceRegistry`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":606,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":606,"column_number":-1,"description":"access to `this.workspaceRegistry`"}],"key":"JcrWorkspace.java|getNamespaceRegistry|THREAD_SAFETY_VIOLATION","hash":"e0f88c39661e209803c9766bcdab381a","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAGAAAAHgAAABigsAECWgD/kgkxc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JXb3Jrc3BhY2UuamF2YaCwAQJeAP8EBEA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `NamespaceRegistry NamespaceRegistry$Holder.getNamespaceRegistry()` of un-annotated interface `org.modeshape.jcr.value.NamespaceRegistry$Holder`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactory` is annotated `@ThreadSafe`.","severity":"WARNING","line":331,"column":-1,"procedure":"org.modeshape.jcr.value.basic.NameValueFactory.getNamespaceRegistry():org.modeshape.jcr.value.NamespaceRegistry","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/NameValueFactory.java","line_number":331,"column_number":-1,"description":"Call to un-annotated interface method NamespaceRegistry NamespaceRegistry$Holder.getNamespaceRegistry()"}],"key":"NameValueFactory.java|getNamespaceRegistry|INTERFACE_NOT_THREAD_SAFE","hash":"1a596146e38afc6f2b266aa8be5d6f95","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEwAAAAEAAAAGwAAABOgsAEBSwD/kglBc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iYXNpYy9OYW1lVmFsdWVGYWN0b3J5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Name CachedNode.getName(NodeCache)` of un-annotated interface `org.modeshape.jcr.cache.CachedNode`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":300,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.getNamespaceURI():java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":300,"column_number":-1,"description":"call to Name AbstractJcrNode.name()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":243,"column_number":-1,"description":"Call to un-annotated interface method Name CachedNode.getName(NodeCache)"}],"key":"AbstractJcrNode.java|getNamespaceURI|INTERFACE_NOT_THREAD_SAFE","hash":"1c6389bb5e3987d59a8d8637e15535cf","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEA8wD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String Name.getNamespaceUri()` of un-annotated interface `org.modeshape.jcr.value.Name`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":589,"column":-1,"procedure":"org.modeshape.jcr.JcrNodeType.getNamespaceURI():java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrNodeType.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":589,"column_number":-1,"description":"Call to un-annotated interface method String Name.getNamespaceUri()"}],"key":"JcrNodeType.java|getNamespaceURI|INTERFACE_NOT_THREAD_SAFE","hash":"96368d96886150e6c47b8a37bd5b4dea","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAADsAAAAEAAAAFwAAABGgsAECTQD/kgkwc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JOb2RlVHlwZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Name CachedNode.getName(NodeCache)` of un-annotated interface `org.modeshape.jcr.cache.CachedNode`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`.","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.getNamespaceURI():java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to String AbstractJcrNode.getNamespaceURI()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":300,"column_number":-1,"description":"call to Name AbstractJcrNode.name()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":243,"column_number":-1,"description":"Call to un-annotated interface method Name CachedNode.getName(NodeCache)"}],"key":"JcrSystemNode.java|getNamespaceURI|INTERFACE_NOT_THREAD_SAFE","hash":"a9f657d2965dcf6a4acf43a5ace31c0b","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEA8wD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Node AbstractJcrNode.getNode(String)` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":101,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.getNode(java.lang.String):javax.jcr.Node","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":101,"column_number":-1,"description":"call to AbstractJcrNode AbstractJcrNode.getNode(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":796,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,Path)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":659,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"AbstractJcrNode.java|getNode|THREAD_SAFETY_VIOLATION","hash":"c9835552f2df1bfd51f9cf7e80518d95","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `ChildReference ChildReferences.getChild(Path$Segment)` of un-annotated interface `org.modeshape.jcr.cache.ChildReferences`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":807,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.getNode(java.lang.String):org.modeshape.jcr.AbstractJcrNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":807,"column_number":-1,"description":"Call to un-annotated interface method ChildReference ChildReferences.getChild(Path$Segment)"}],"key":"AbstractJcrNode.java|getNode|INTERFACE_NOT_THREAD_SAFE","hash":"a541bed0b4c63250cbc45cb24cbf4068","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEDJwD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrNode AbstractJcrNode.getNode(String)` indirectly mutates container `ace.privileges` via call to `addAll` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":770,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.getNode(java.lang.String):org.modeshape.jcr.AbstractJcrNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":770,"column_number":-1,"description":"call to void JcrSession.checkPermission(AbstractJcrItem,java.lang.String[])"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1535,"column_number":-1,"description":"call to void JcrSession.checkPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1567,"column_number":-1,"description":"call to boolean JcrSession.hasPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1375,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPermission(Path,java.lang.String[])"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":322,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPrivileges(String,javax.jcr.security.Privilege[])"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":109,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.getApplicableACL(String)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":114,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.findAccessList(String,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":289,"column_number":-1,"description":"call to boolean JcrAccessControlList.addAccessControlEntry(Principal,javax.jcr.security.Privilege[])"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/security/acl/JcrAccessControlList.java","line_number":113,"column_number":-1,"description":"call to boolean AccessControlEntryImpl.addIfNotPresent(javax.jcr.security.Privilege[])"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/security/acl/AccessControlEntryImpl.java","line_number":103,"column_number":-1,"description":"Write to container `ace.privileges` via call to `addAll`"}],"key":"AbstractJcrNode.java|getNode|THREAD_SAFETY_VIOLATION","hash":"821c5949dcfe45ed85672b3f60a1769d","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFIAAAAEAAAAHQAAABSgsABnAP+SCUhzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3NlY3VyaXR5L2FjbC9BY2Nlc3NDb250cm9sRW50cnlJbXBsLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrNode AbstractJcrNode.getNode(String)` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":796,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.getNode(java.lang.String):org.modeshape.jcr.AbstractJcrNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":796,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,Path)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":659,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"AbstractJcrNode.java|getNode|THREAD_SAFETY_VIOLATION","hash":"a9b3fa28502d5e91ca6e8988f953be38","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrNode JcrSystemNode.getNode(String)` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.getNode(java.lang.String):org.modeshape.jcr.AbstractJcrNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to AbstractJcrNode AbstractJcrNode.getNode(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":796,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,Path)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":659,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"JcrSystemNode.java|getNode|THREAD_SAFETY_VIOLATION","hash":"6c83616bd65c47eaecfd048984c8e4ac","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `SchematicEntry DocumentStore.get(String)` of un-annotated interface `org.modeshape.jcr.cache.document.DocumentStore`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":182,"column":-1,"procedure":"org.modeshape.jcr.cache.document.WritableSessionCache.getNode(org.modeshape.jcr.cache.NodeKey):org.modeshape.jcr.cache.CachedNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":182,"column_number":-1,"description":"call to CachedNode AbstractSessionCache.getNode(NodeKey)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/AbstractSessionCache.java","line_number":249,"column_number":-1,"description":"call to CachedNode WorkspaceCache.getNode(NodeKey)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":243,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":207,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(String)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":188,"column_number":-1,"description":"Call to un-annotated interface method SchematicEntry DocumentStore.get(String)"}],"key":"WritableSessionCache.java|getNode|INTERFACE_NOT_THREAD_SAFE","hash":"4a4f71fde14409aba16fce10dcf1e620","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEAvAD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xb3Jrc3BhY2VDYWNoZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `CachedNode WritableSessionCache.getNode(NodeKey)` reads with synchronization from `this.changedNodes`. Potentially races with unsynchronized write in method `WritableSessionCache.clearState()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":174,"column":-1,"procedure":"org.modeshape.jcr.cache.document.WritableSessionCache.getNode(org.modeshape.jcr.cache.NodeKey):org.modeshape.jcr.cache.CachedNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":174,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":174,"column_number":-1,"description":"access to `this.changedNodes`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":573,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":573,"column_number":-1,"description":"access to `this.changedNodes`"}],"key":"WritableSessionCache.java|getNode|THREAD_SAFETY_VIOLATION","hash":"f6d984917ced8f3c8884529b35aa8d31","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAKUAAAAIAAAAOgAAACigsAEArgD/kglIc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xcml0YWJsZVNlc3Npb25DYWNoZS5qYXZhoLABAj0A/5IJSHNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvY2FjaGUvZG9jdW1lbnQvV3JpdGFibGVTZXNzaW9uQ2FjaGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrNode AbstractJcrNode.getNode(Name)` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":830,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.getNode(org.modeshape.jcr.value.Name):org.modeshape.jcr.AbstractJcrNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":830,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"AbstractJcrNode.java|getNode|THREAD_SAFETY_VIOLATION","hash":"60a10c18d108d457fadf28888dc3dcc3","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `ChildReference ChildReferences.getChild(Name)` of un-annotated interface `org.modeshape.jcr.cache.ChildReferences`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":825,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.getNode(org.modeshape.jcr.value.Name):org.modeshape.jcr.AbstractJcrNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":825,"column_number":-1,"description":"Call to un-annotated interface method ChildReference ChildReferences.getChild(Name)"}],"key":"AbstractJcrNode.java|getNode|INTERFACE_NOT_THREAD_SAFE","hash":"786f27b312551f9b944583a2f52e6787","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEDOQD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrNode AbstractJcrNode.getNodeIfExists(Name)` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":836,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.getNodeIfExists(org.modeshape.jcr.value.Name):org.modeshape.jcr.AbstractJcrNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":836,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"AbstractJcrNode.java|getNodeIfExists|THREAD_SAFETY_VIOLATION","hash":"7b59387cbfe11a6a68d47f6bc6064bac","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `ChildReference ChildReferences.getChild(Name)` of un-annotated interface `org.modeshape.jcr.cache.ChildReferences`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":835,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.getNodeIfExists(org.modeshape.jcr.value.Name):org.modeshape.jcr.AbstractJcrNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":835,"column_number":-1,"description":"Call to un-annotated interface method ChildReference ChildReferences.getChild(Name)"}],"key":"AbstractJcrNode.java|getNodeIfExists|INTERFACE_NOT_THREAD_SAFE","hash":"bddfa5347655607eaa939fd9aceb18a0","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEDQwD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `NodeTypeManager JcrWorkspace.getNodeTypeManager()` indirectly reads without synchronization from `this.nodeTypeManager`. Potentially races with write in method `JcrWorkspace.getNodeTypeManager()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":72,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.getNodeTypeManager():javax.jcr.nodetype.NodeTypeManager","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":72,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":72,"column_number":-1,"description":"call to JcrNodeTypeManager JcrWorkspace.getNodeTypeManager()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":624,"column_number":-1,"description":"call to JcrNodeTypeManager JcrWorkspace.nodeTypeManager()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":628,"column_number":-1,"description":"access to `this.nodeTypeManager`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":624,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":624,"column_number":-1,"description":"call to JcrNodeTypeManager JcrWorkspace.nodeTypeManager()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":632,"column_number":-1,"description":"access to `this.nodeTypeManager`"}],"key":"JcrWorkspace.java|getNodeTypeManager|THREAD_SAFETY_VIOLATION","hash":"d26a62d3a2233ad0696571403836dfb9","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAHcAAAAIAAAALgAAACKgsAECdAD/kgkxc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JXb3Jrc3BhY2UuamF2YaCwAQJ4AP+SCTFzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL0pjcldvcmtzcGFjZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `JcrNodeTypeManager JcrWorkspace.getNodeTypeManager()` indirectly reads without synchronization from `this.nodeTypeManager`. Potentially races with write in method `JcrWorkspace.getNodeTypeManager()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":624,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.getNodeTypeManager():org.modeshape.jcr.JcrNodeTypeManager","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":624,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":624,"column_number":-1,"description":"call to JcrNodeTypeManager JcrWorkspace.nodeTypeManager()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":628,"column_number":-1,"description":"access to `this.nodeTypeManager`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":624,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":624,"column_number":-1,"description":"call to JcrNodeTypeManager JcrWorkspace.nodeTypeManager()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":632,"column_number":-1,"description":"access to `this.nodeTypeManager`"}],"key":"JcrWorkspace.java|getNodeTypeManager|THREAD_SAFETY_VIOLATION","hash":"08a31d9f700d859cf90baeeef9890ed9","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAGAAAAHgAAABigsAECdAD/kgkxc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JXb3Jrc3BhY2UuamF2YaCwAQJ4AP8EBEA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `NodeTypeManager JcrWorkspace.getNodeTypeManager()` indirectly reads without synchronization from `this.nodeTypeManager`. Potentially races with write in method `JcrWorkspace.getNodeTypeManager()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":72,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.getNodeTypeManager():org.modeshape.jcr.api.nodetype.NodeTypeManager","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":72,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":72,"column_number":-1,"description":"call to JcrNodeTypeManager JcrWorkspace.getNodeTypeManager()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":624,"column_number":-1,"description":"call to JcrNodeTypeManager JcrWorkspace.nodeTypeManager()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":628,"column_number":-1,"description":"access to `this.nodeTypeManager`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":624,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":624,"column_number":-1,"description":"call to JcrNodeTypeManager JcrWorkspace.nodeTypeManager()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":632,"column_number":-1,"description":"access to `this.nodeTypeManager`"}],"key":"JcrWorkspace.java|getNodeTypeManager|THREAD_SAFETY_VIOLATION","hash":"d26a62d3a2233ad0696571403836dfb9","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAHcAAAAIAAAALgAAACKgsAECdAD/kgkxc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JXb3Jrc3BhY2UuamF2YaCwAQJ4AP+SCTFzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL0pjcldvcmtzcGFjZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `ChildReferences CachedNode.getChildReferences(NodeCache)` of un-annotated interface `org.modeshape.jcr.cache.CachedNode`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":842,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.getNodes():javax.jcr.NodeIterator","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":842,"column_number":-1,"description":"Call to un-annotated interface method ChildReferences CachedNode.getChildReferences(NodeCache)"}],"key":"AbstractJcrNode.java|getNodes|INTERFACE_NOT_THREAD_SAFE","hash":"d3c5f980d9dfeb6ef8387331487f7440","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEDSgD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `ChildReferences CachedNode.getChildReferences(NodeCache)` of un-annotated interface `org.modeshape.jcr.cache.CachedNode`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`.","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.getNodes():javax.jcr.NodeIterator","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to NodeIterator AbstractJcrNode.getNodes()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":842,"column_number":-1,"description":"Call to un-annotated interface method ChildReferences CachedNode.getChildReferences(NodeCache)"}],"key":"JcrSystemNode.java|getNodes|INTERFACE_NOT_THREAD_SAFE","hash":"e019966085254716016a70449e653cf2","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEDSgD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `ChildReferences CachedNode.getChildReferences(NodeCache)` of un-annotated interface `org.modeshape.jcr.cache.CachedNode`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":883,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.getNodes(java.lang.String[]):javax.jcr.NodeIterator","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":883,"column_number":-1,"description":"Call to un-annotated interface method ChildReferences CachedNode.getChildReferences(NodeCache)"}],"key":"AbstractJcrNode.java|getNodes|INTERFACE_NOT_THREAD_SAFE","hash":"3da65e4d6431fcd4e41f154f93fc508e","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEDcwD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `ChildReferences CachedNode.getChildReferences(NodeCache)` of un-annotated interface `org.modeshape.jcr.cache.CachedNode`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`.","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.getNodes(java.lang.String[]):javax.jcr.NodeIterator","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to NodeIterator AbstractJcrNode.getNodes(java.lang.String[])"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":883,"column_number":-1,"description":"Call to un-annotated interface method ChildReferences CachedNode.getChildReferences(NodeCache)"}],"key":"JcrSystemNode.java|getNodes|INTERFACE_NOT_THREAD_SAFE","hash":"aa2748968a54f101ca23cc39eba22cd6","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEDcwD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `ChildReferences CachedNode.getChildReferences(NodeCache)` of un-annotated interface `org.modeshape.jcr.cache.CachedNode`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":861,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.getNodes(java.lang.String):javax.jcr.NodeIterator","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":861,"column_number":-1,"description":"call to NodeIterator AbstractJcrNode.getNodes()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":842,"column_number":-1,"description":"Call to un-annotated interface method ChildReferences CachedNode.getChildReferences(NodeCache)"}],"key":"AbstractJcrNode.java|getNodes|INTERFACE_NOT_THREAD_SAFE","hash":"3da65e4d6431fcd4e41f154f93fc508e","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEDSgD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `ChildReferences CachedNode.getChildReferences(NodeCache)` of un-annotated interface `org.modeshape.jcr.cache.CachedNode`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`.","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.getNodes(java.lang.String):javax.jcr.NodeIterator","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to NodeIterator AbstractJcrNode.getNodes(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":861,"column_number":-1,"description":"call to NodeIterator AbstractJcrNode.getNodes()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":842,"column_number":-1,"description":"Call to un-annotated interface method ChildReferences CachedNode.getChildReferences(NodeCache)"}],"key":"JcrSystemNode.java|getNodes|INTERFACE_NOT_THREAD_SAFE","hash":"aa2748968a54f101ca23cc39eba22cd6","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEDSgD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `ChildReferences CachedNode.getChildReferences(NodeCache)` of un-annotated interface `org.modeshape.jcr.cache.CachedNode`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":851,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.getNodesInternal():javax.jcr.NodeIterator","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":851,"column_number":-1,"description":"Call to un-annotated interface method ChildReferences CachedNode.getChildReferences(NodeCache)"}],"key":"AbstractJcrNode.java|getNodesInternal|INTERFACE_NOT_THREAD_SAFE","hash":"0abf63516dfca79f7ecb4450c4793c47","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEDUwD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `ChildReferences CachedNode.getChildReferences(NodeCache)` of un-annotated interface `org.modeshape.jcr.cache.CachedNode`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":900,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.getNodesInternal(java.lang.String[]):javax.jcr.NodeIterator","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":900,"column_number":-1,"description":"Call to un-annotated interface method ChildReferences CachedNode.getChildReferences(NodeCache)"}],"key":"AbstractJcrNode.java|getNodesInternal|INTERFACE_NOT_THREAD_SAFE","hash":"7bd4c6485b4ad77233d10d1184b779af","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEDhAD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `ChildReferences CachedNode.getChildReferences(NodeCache)` of un-annotated interface `org.modeshape.jcr.cache.CachedNode`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":869,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.getNodesInternal(java.lang.String):javax.jcr.NodeIterator","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":869,"column_number":-1,"description":"call to NodeIterator AbstractJcrNode.getNodesInternal()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":851,"column_number":-1,"description":"Call to un-annotated interface method ChildReferences CachedNode.getChildReferences(NodeCache)"}],"key":"AbstractJcrNode.java|getNodesInternal|INTERFACE_NOT_THREAD_SAFE","hash":"7bd4c6485b4ad77233d10d1184b779af","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEDUwD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `ObservationManager JcrWorkspace.getObservationManager()` indirectly reads without synchronization from `this.observationManager`. Potentially races with write in method `JcrWorkspace.getObservationManager()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":644,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.getObservationManager():javax.jcr.observation.ObservationManager","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":644,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":644,"column_number":-1,"description":"call to JcrObservationManager JcrWorkspace.observationManager()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":648,"column_number":-1,"description":"access to `this.observationManager`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":644,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":644,"column_number":-1,"description":"call to JcrObservationManager JcrWorkspace.observationManager()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":652,"column_number":-1,"description":"access to `this.observationManager`"}],"key":"JcrWorkspace.java|getObservationManager|THREAD_SAFETY_VIOLATION","hash":"87a36f457b8c5a73f9e3cfb5f4095210","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAGAAAAHgAAABigsAECiAD/kgkxc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JXb3Jrc3BhY2UuamF2YaCwAQKMAP8EBEA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Node JcrNode.getParent()` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":36,"column":-1,"procedure":"org.modeshape.jcr.JcrNode.getParent():javax.jcr.Node","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNode.java","line_number":36,"column_number":-1,"description":"call to AbstractJcrNode JcrNode.getParent()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrNode.java","line_number":68,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"JcrNode.java|getParent|THREAD_SAFETY_VIOLATION","hash":"9393b8adf7e1c3a3b887a3808c2d31e6","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `CachedNode SessionCache.getNode(NodeKey)` of un-annotated interface `org.modeshape.jcr.cache.SessionCache`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":67,"column":-1,"procedure":"org.modeshape.jcr.JcrNode.getParent():org.modeshape.jcr.AbstractJcrNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNode.java","line_number":67,"column_number":-1,"description":"call to CachedNode AbstractJcrNode.node()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":201,"column_number":-1,"description":"Call to un-annotated interface method CachedNode SessionCache.getNode(NodeKey)"}],"key":"JcrNode.java|getParent|INTERFACE_NOT_THREAD_SAFE","hash":"c47f4e3049cfe5f3f6ad13f0c185e2d6","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEAyQD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrNode JcrNode.getParent()` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":68,"column":-1,"procedure":"org.modeshape.jcr.JcrNode.getParent():org.modeshape.jcr.AbstractJcrNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNode.java","line_number":68,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"JcrNode.java|getParent|THREAD_SAFETY_VIOLATION","hash":"553af2b0dee9322d641e26f7e2642a72","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Node JcrSharedNode.getParent()` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":45,"column":-1,"procedure":"org.modeshape.jcr.JcrSharedNode.getParent():javax.jcr.Node","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSharedNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSharedNode.java","line_number":45,"column_number":-1,"description":"call to AbstractJcrNode JcrSharedNode.getParent()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSharedNode.java","line_number":73,"column_number":-1,"description":"call to AbstractJcrNode JcrSharedNode.parent()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSharedNode.java","line_number":77,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"JcrSharedNode.java|getParent|THREAD_SAFETY_VIOLATION","hash":"44a9d38a887c3b0069fd12a13408e7fb","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrNode JcrSharedNode.getParent()` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":73,"column":-1,"procedure":"org.modeshape.jcr.JcrSharedNode.getParent():org.modeshape.jcr.AbstractJcrNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSharedNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSharedNode.java","line_number":73,"column_number":-1,"description":"call to AbstractJcrNode JcrSharedNode.parent()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSharedNode.java","line_number":77,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"JcrSharedNode.java|getParent|THREAD_SAFETY_VIOLATION","hash":"2af69b14c940e58c40b9cc86eb445692","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrNode JcrSystemNode.getParent()` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.getParent():org.modeshape.jcr.AbstractJcrNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to AbstractJcrNode JcrNode.getParent()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrNode.java","line_number":68,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"JcrSystemNode.java|getParent|THREAD_SAFETY_VIOLATION","hash":"a1378534d552c6011e1f4567e39a1440","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Node JcrVersionNode.getParent()` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":33,"column":-1,"procedure":"org.modeshape.jcr.JcrVersionNode.getParent():javax.jcr.Node","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","line_number":33,"column_number":-1,"description":"call to JcrVersionHistoryNode JcrVersionNode.getParent()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","line_number":49,"column_number":-1,"description":"call to AbstractJcrNode JcrSystemNode.getParent()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to AbstractJcrNode JcrNode.getParent()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrNode.java","line_number":68,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"JcrVersionNode.java|getParent|THREAD_SAFETY_VIOLATION","hash":"aab75ddc1d7ddfb9aef0334e61c7c860","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrNode JcrVersionNode.getParent()` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":33,"column":-1,"procedure":"org.modeshape.jcr.JcrVersionNode.getParent():org.modeshape.jcr.AbstractJcrNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","line_number":33,"column_number":-1,"description":"call to JcrVersionHistoryNode JcrVersionNode.getParent()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","line_number":49,"column_number":-1,"description":"call to AbstractJcrNode JcrSystemNode.getParent()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to AbstractJcrNode JcrNode.getParent()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrNode.java","line_number":68,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"JcrVersionNode.java|getParent|THREAD_SAFETY_VIOLATION","hash":"3bbec796806ab947c3f9aebd69137173","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `JcrVersionHistoryNode JcrVersionNode.getParent()` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":49,"column":-1,"procedure":"org.modeshape.jcr.JcrVersionNode.getParent():org.modeshape.jcr.JcrVersionHistoryNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","line_number":49,"column_number":-1,"description":"call to AbstractJcrNode JcrSystemNode.getParent()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to AbstractJcrNode JcrNode.getParent()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrNode.java","line_number":68,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"JcrVersionNode.java|getParent|THREAD_SAFETY_VIOLATION","hash":"8432801c9e40afcba602ef93d3881f0f","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `NodeKey LazyCachedNode.getParentKey(NodeCache)` indirectly writes to field `this.key.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":124,"column":-1,"procedure":"org.modeshape.jcr.cache.document.LazyCachedNode.getParentKey(org.modeshape.jcr.cache.NodeCache):org.modeshape.jcr.cache.NodeKey","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":124,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `this.key.workspaceKey`"}],"key":"LazyCachedNode.java|getParentKey|THREAD_SAFETY_VIOLATION","hash":"9ffbbf0fdbecc616d24cba134f513dab","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `NodeCache NodeCache.unwrap()` of un-annotated interface `org.modeshape.jcr.cache.NodeCache`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":123,"column":-1,"procedure":"org.modeshape.jcr.cache.document.LazyCachedNode.getParentKey(org.modeshape.jcr.cache.NodeCache):org.modeshape.jcr.cache.NodeKey","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":123,"column_number":-1,"description":"call to WorkspaceCache LazyCachedNode.workspaceCache(NodeCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":105,"column_number":-1,"description":"Call to un-annotated interface method NodeCache NodeCache.unwrap()"}],"key":"LazyCachedNode.java|getParentKey|INTERFACE_NOT_THREAD_SAFE","hash":"835f8adc495d608e0b58acab347b3370","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEwAAAAEAAAAGwAAABOgsABpAP+SCUJzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL2NhY2hlL2RvY3VtZW50L0xhenlDYWNoZWROb2RlLmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `SchematicEntry DocumentStore.get(String)` of un-annotated interface `org.modeshape.jcr.cache.document.DocumentStore`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":317,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.getParentKey(org.modeshape.jcr.cache.NodeCache):org.modeshape.jcr.cache.NodeKey","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":317,"column_number":-1,"description":"call to CachedNode SessionNode.nodeInWorkspace(AbstractSessionCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":309,"column_number":-1,"description":"call to CachedNode WorkspaceCache.getNode(NodeKey)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":243,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":207,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(String)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":188,"column_number":-1,"description":"Call to un-annotated interface method SchematicEntry DocumentStore.get(String)"}],"key":"SessionNode.java|getParentKey|INTERFACE_NOT_THREAD_SAFE","hash":"7b522459bc1de7b78ef933e17e3805f2","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEAvAD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xb3Jrc3BhY2VDYWNoZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `NodeKey LazyCachedNode.getParentKeyInAnyWorkspace(NodeCache)` indirectly writes to field `this.key.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":132,"column":-1,"procedure":"org.modeshape.jcr.cache.document.LazyCachedNode.getParentKeyInAnyWorkspace(org.modeshape.jcr.cache.NodeCache):org.modeshape.jcr.cache.NodeKey","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":132,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `this.key.workspaceKey`"}],"key":"LazyCachedNode.java|getParentKeyInAnyWorkspace|THREAD_SAFETY_VIOLATION","hash":"00cc574e878ef71d82612d66d3364138","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `NodeCache NodeCache.unwrap()` of un-annotated interface `org.modeshape.jcr.cache.NodeCache`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":131,"column":-1,"procedure":"org.modeshape.jcr.cache.document.LazyCachedNode.getParentKeyInAnyWorkspace(org.modeshape.jcr.cache.NodeCache):org.modeshape.jcr.cache.NodeKey","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":131,"column_number":-1,"description":"call to WorkspaceCache LazyCachedNode.workspaceCache(NodeCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":105,"column_number":-1,"description":"Call to un-annotated interface method NodeCache NodeCache.unwrap()"}],"key":"LazyCachedNode.java|getParentKeyInAnyWorkspace|INTERFACE_NOT_THREAD_SAFE","hash":"af3b76163fa2b1d1bb6afea44ffe178e","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEwAAAAEAAAAGwAAABOgsABpAP+SCUJzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL2NhY2hlL2RvY3VtZW50L0xhenlDYWNoZWROb2RlLmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `SchematicEntry DocumentStore.get(String)` of un-annotated interface `org.modeshape.jcr.cache.document.DocumentStore`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":327,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.getParentKeyInAnyWorkspace(org.modeshape.jcr.cache.NodeCache):org.modeshape.jcr.cache.NodeKey","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":327,"column_number":-1,"description":"call to CachedNode SessionNode.nodeInWorkspace(AbstractSessionCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":309,"column_number":-1,"description":"call to CachedNode WorkspaceCache.getNode(NodeKey)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":243,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":207,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(String)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":188,"column_number":-1,"description":"Call to un-annotated interface method SchematicEntry DocumentStore.get(String)"}],"key":"SessionNode.java|getParentKeyInAnyWorkspace|INTERFACE_NOT_THREAD_SAFE","hash":"606ba813cd6ca5f2fbf60e39bd2980de","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEAvAD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xb3Jrc3BhY2VDYWNoZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `CachedNode SessionCache.getNode(NodeKey)` of un-annotated interface `org.modeshape.jcr.cache.SessionCache`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":74,"column":-1,"procedure":"org.modeshape.jcr.JcrNode.getPath():java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNode.java","line_number":74,"column_number":-1,"description":"call to Path AbstractJcrNode.path()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":226,"column_number":-1,"description":"call to CachedNode AbstractJcrNode.node()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":201,"column_number":-1,"description":"Call to un-annotated interface method CachedNode SessionCache.getNode(NodeKey)"}],"key":"JcrNode.java|getPath|INTERFACE_NOT_THREAD_SAFE","hash":"cf0e5dcdd864f8288e7e4806dbb67e05","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEAyQD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `CachedNode SessionCache.getNode(NodeKey)` of un-annotated interface `org.modeshape.jcr.cache.SessionCache`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`.","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.getPath():java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to String JcrNode.getPath()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrNode.java","line_number":74,"column_number":-1,"description":"call to Path AbstractJcrNode.path()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":226,"column_number":-1,"description":"call to CachedNode AbstractJcrNode.node()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":201,"column_number":-1,"description":"Call to un-annotated interface method CachedNode SessionCache.getNode(NodeKey)"}],"key":"JcrSystemNode.java|getPath|INTERFACE_NOT_THREAD_SAFE","hash":"1ef844b372d4cb655a1325815c3ad05c","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEAyQD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `ChildReference LazyCachedNode$ParentReferenceToSelf.childReferenceInParent()` of un-annotated interface `org.modeshape.jcr.cache.document.LazyCachedNode$ParentReferenceToSelf`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":302,"column":-1,"procedure":"org.modeshape.jcr.cache.document.LazyCachedNode.getPath(org.modeshape.jcr.cache.NodeCache):org.modeshape.jcr.value.Path","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":302,"column_number":-1,"description":"call to Path$Segment LazyCachedNode.getSegment(WorkspaceCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":293,"column_number":-1,"description":"call to ChildReference LazyCachedNode.parentReferenceToSelf(WorkspaceCache)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":207,"column_number":-1,"description":"Call to un-annotated interface method ChildReference LazyCachedNode$ParentReferenceToSelf.childReferenceInParent()"}],"key":"LazyCachedNode.java|getPath|INTERFACE_NOT_THREAD_SAFE","hash":"a025205c4ed553d56ef030fe51bbbc60","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEAzwD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9MYXp5Q2FjaGVkTm9kZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Path LazyCachedNode.getPath(NodeCache)` indirectly writes to field `this.key.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":299,"column":-1,"procedure":"org.modeshape.jcr.cache.document.LazyCachedNode.getPath(org.modeshape.jcr.cache.NodeCache):org.modeshape.jcr.value.Path","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":299,"column_number":-1,"description":"call to CachedNode LazyCachedNode.parent(WorkspaceCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":165,"column_number":-1,"description":"call to NodeKey LazyCachedNode.getParentKey(NodeCache)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":124,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `this.key.workspaceKey`"}],"key":"LazyCachedNode.java|getPath|THREAD_SAFETY_VIOLATION","hash":"eca7645b391f0c39e8ab41044ef4a2f3","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `SchematicEntry DocumentStore.get(String)` of un-annotated interface `org.modeshape.jcr.cache.document.DocumentStore`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":460,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.getPath(org.modeshape.jcr.cache.NodeCache):org.modeshape.jcr.value.Path","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":460,"column_number":-1,"description":"call to CachedNode SessionNode.parent(AbstractSessionCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":337,"column_number":-1,"description":"call to CachedNode AbstractSessionCache.getNode(NodeKey)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/AbstractSessionCache.java","line_number":249,"column_number":-1,"description":"call to CachedNode WorkspaceCache.getNode(NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":243,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":207,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(String)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":188,"column_number":-1,"description":"Call to un-annotated interface method SchematicEntry DocumentStore.get(String)"}],"key":"SessionNode.java|getPath|INTERFACE_NOT_THREAD_SAFE","hash":"f7a371a2c7f690dc159e30c57106331a","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEAvAD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xb3Jrc3BhY2VDYWNoZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Path LazyCachedNode.getPath(PathCache)` indirectly writes to field `this.key.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":316,"column":-1,"procedure":"org.modeshape.jcr.cache.document.LazyCachedNode.getPath(org.modeshape.jcr.cache.PathCache):org.modeshape.jcr.value.Path","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":316,"column_number":-1,"description":"call to CachedNode LazyCachedNode.parent(WorkspaceCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":165,"column_number":-1,"description":"call to NodeKey LazyCachedNode.getParentKey(NodeCache)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":124,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `this.key.workspaceKey`"}],"key":"LazyCachedNode.java|getPath|THREAD_SAFETY_VIOLATION","hash":"9b18c5450c383444a4b56942f1f5b363","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `ChildReference LazyCachedNode$ParentReferenceToSelf.childReferenceInParent()` of un-annotated interface `org.modeshape.jcr.cache.document.LazyCachedNode$ParentReferenceToSelf`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":319,"column":-1,"procedure":"org.modeshape.jcr.cache.document.LazyCachedNode.getPath(org.modeshape.jcr.cache.PathCache):org.modeshape.jcr.value.Path","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":319,"column_number":-1,"description":"call to Path$Segment LazyCachedNode.getSegment(WorkspaceCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":293,"column_number":-1,"description":"call to ChildReference LazyCachedNode.parentReferenceToSelf(WorkspaceCache)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":207,"column_number":-1,"description":"Call to un-annotated interface method ChildReference LazyCachedNode$ParentReferenceToSelf.childReferenceInParent()"}],"key":"LazyCachedNode.java|getPath|INTERFACE_NOT_THREAD_SAFE","hash":"a025205c4ed553d56ef030fe51bbbc60","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEAzwD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9MYXp5Q2FjaGVkTm9kZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Path LazyCachedNode.getPath(PathCache)` indirectly mutates container `pathCache.paths` via call to `put` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":318,"column":-1,"procedure":"org.modeshape.jcr.cache.document.LazyCachedNode.getPath(org.modeshape.jcr.cache.PathCache):org.modeshape.jcr.value.Path","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":318,"column_number":-1,"description":"call to Path PathCache.getPath(CachedNode)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/PathCache.java","line_number":42,"column_number":-1,"description":"Write to container `pathCache.paths` via call to `put`"}],"key":"LazyCachedNode.java|getPath|THREAD_SAFETY_VIOLATION","hash":"e27d2a3aef18888f28e1cdd191b1a868","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAGAAAABGgsGoA/5IJNHNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvY2FjaGUvUGF0aENhY2hlLmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `SchematicEntry DocumentStore.get(String)` of un-annotated interface `org.modeshape.jcr.cache.document.DocumentStore`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":478,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.getPath(org.modeshape.jcr.cache.PathCache):org.modeshape.jcr.value.Path","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":478,"column_number":-1,"description":"call to CachedNode SessionNode.parent(AbstractSessionCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":337,"column_number":-1,"description":"call to CachedNode AbstractSessionCache.getNode(NodeKey)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/AbstractSessionCache.java","line_number":249,"column_number":-1,"description":"call to CachedNode WorkspaceCache.getNode(NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":243,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":207,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(String)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":188,"column_number":-1,"description":"Call to un-annotated interface method SchematicEntry DocumentStore.get(String)"}],"key":"SessionNode.java|getPath|INTERFACE_NOT_THREAD_SAFE","hash":"f7a371a2c7f690dc159e30c57106331a","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEAvAD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xb3Jrc3BhY2VDYWNoZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Path SessionNode.getPath(PathCache)` indirectly mutates container `pathCache.paths` via call to `put` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":480,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.getPath(org.modeshape.jcr.cache.PathCache):org.modeshape.jcr.value.Path","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":480,"column_number":-1,"description":"call to Path PathCache.getPath(CachedNode)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/PathCache.java","line_number":42,"column_number":-1,"description":"Write to container `pathCache.paths` via call to `put`"}],"key":"SessionNode.java|getPath|THREAD_SAFETY_VIOLATION","hash":"0f2ec77473aaa983ce04e6c2c35007e1","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAGAAAABGgsGoA/5IJNHNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvY2FjaGUvUGF0aENhY2hlLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Map LazyCachedNode.getPermissions(NodeCache)` indirectly mutates container `keysWithName` via call to `add` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":498,"column":-1,"procedure":"org.modeshape.jcr.cache.document.LazyCachedNode.getPermissions(org.modeshape.jcr.cache.NodeCache):java.util.Map","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":498,"column_number":-1,"description":"call to boolean LazyCachedNode.hasACL(NodeCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":491,"column_number":-1,"description":"call to ChildReferences LazyCachedNode.getChildReferences(NodeCache)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":460,"column_number":-1,"description":"call to ChildReferences DocumentTranslator.getChildReferences(WorkspaceCache,Document)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/DocumentTranslator.java","line_number":887,"column_number":-1,"description":"call to ChildReferences ImmutableChildReferences.create(DocumentTranslator,Document,String,boolean)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/ImmutableChildReferences.java","line_number":53,"column_number":-1,"description":"call to ImmutableChildReferences$Medium.<init>(DocumentTranslator,Document,String,boolean)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/document/ImmutableChildReferences.java","line_number":249,"column_number":-1,"description":"Write to container `keysWithName` via call to `add`"}],"key":"LazyCachedNode.java|getPermissions|THREAD_SAFETY_VIOLATION","hash":"6d34e51b74d221d82054bdd82adac3b4","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFcAAAAEAAAAHgAAABSgsAEA+QD/kglMc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9JbW11dGFibGVDaGlsZFJlZmVyZW5jZXMuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `ChildReferences CachedNode.getChildReferences(NodeCache)` of un-annotated interface `org.modeshape.jcr.cache.CachedNode`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":508,"column":-1,"procedure":"org.modeshape.jcr.cache.document.LazyCachedNode.getPermissions(org.modeshape.jcr.cache.NodeCache):java.util.Map","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":508,"column_number":-1,"description":"Call to un-annotated interface method ChildReferences CachedNode.getChildReferences(NodeCache)"}],"key":"LazyCachedNode.java|getPermissions|INTERFACE_NOT_THREAD_SAFE","hash":"cb1f5fde04239c25c9f96647a193f94a","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEB/AD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9MYXp5Q2FjaGVkTm9kZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `SchematicEntry DocumentStore.get(String)` of un-annotated interface `org.modeshape.jcr.cache.document.DocumentStore`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":1488,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.getPermissions(org.modeshape.jcr.cache.NodeCache):java.util.Map","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1488,"column_number":-1,"description":"call to boolean SessionNode.hasACL(NodeCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1483,"column_number":-1,"description":"call to ChildReferences SessionNode.getChildReferences(NodeCache)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1120,"column_number":-1,"description":"call to boolean SessionNode.allowsSNS(NodeCache)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1136,"column_number":-1,"description":"call to Name SessionNode.getPrimaryType(NodeCache)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":495,"column_number":-1,"description":"call to Property SessionNode.getProperty(Name,NodeCache)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":740,"column_number":-1,"description":"call to CachedNode SessionNode.nodeInWorkspace(AbstractSessionCache)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":309,"column_number":-1,"description":"call to CachedNode WorkspaceCache.getNode(NodeKey)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":243,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(NodeKey)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":207,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(String)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":188,"column_number":-1,"description":"Call to un-annotated interface method SchematicEntry DocumentStore.get(String)"}],"key":"SessionNode.java|getPermissions|INTERFACE_NOT_THREAD_SAFE","hash":"572e9e80b7967a703fd624120d01b8b8","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEAvAD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xb3Jrc3BhY2VDYWNoZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `javax.jcr.version.Version[] JcrVersionNode.getPredecessors()` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":77,"column":-1,"procedure":"org.modeshape.jcr.JcrVersionNode.getPredecessors():javax.jcr.version.Version[]","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","line_number":77,"column_number":-1,"description":"call to javax.jcr.version.Version[] JcrVersionNode.getNodesForProperty(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","line_number":97,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrVersionNode.java|getPredecessors|THREAD_SAFETY_VIOLATION","hash":"21aea87ecd23c458bea448fea54b3552","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Item AbstractJcrNode.getPrimaryItem()` indirectly writes to field `nodeType.key.sourceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":2104,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.getPrimaryItem():javax.jcr.Item","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2104,"column_number":-1,"description":"call to JcrNodeType AbstractJcrNode.getPrimaryNodeType()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2278,"column_number":-1,"description":"call to JcrNodeType JcrNodeTypeManager.getNodeType(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrNodeTypeManager.java","line_number":148,"column_number":-1,"description":"call to JcrNodeType JcrNodeType.with(ExecutionContext,JcrSession)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":640,"column_number":-1,"description":"call to JcrNodeType.<init>(NodeKey,ExecutionContext,JcrSession,RepositoryNodeTypeManager,Name,List,Name,Collection,Collection,boolean,boolean,boolean,boolean)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":178,"column_number":-1,"description":"call to NodeKey NodeKey.withId(String)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":229,"column_number":-1,"description":"call to String NodeKey.getSourceKey()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":154,"column_number":-1,"description":"access to `nodeType.key.sourceKey`"}],"key":"AbstractJcrNode.java|getPrimaryItem|THREAD_SAFETY_VIOLATION","hash":"ffefe6482a2d450dfc420d91ff507aef","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEAmgD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Item AbstractJcrNode.getPrimaryItem()` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":2114,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.getPrimaryItem():javax.jcr.Item","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2114,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,Path)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":659,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"AbstractJcrNode.java|getPrimaryItem|THREAD_SAFETY_VIOLATION","hash":"689accf19ed7dc98d3e8bcc50906ad13","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String Name.getString(NamespaceRegistry)` of un-annotated interface `org.modeshape.jcr.value.Name`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":2105,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.getPrimaryItem():javax.jcr.Item","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2105,"column_number":-1,"description":"call to String JcrNodeType.getPrimaryItemName()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":529,"column_number":-1,"description":"Call to un-annotated interface method String Name.getString(NamespaceRegistry)"}],"key":"AbstractJcrNode.java|getPrimaryItem|INTERFACE_NOT_THREAD_SAFE","hash":"8bca0459fa30eb94ac753785ecd821a6","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAADsAAAAEAAAAFwAAABGgsAECEQD/kgkwc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JOb2RlVHlwZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Item JcrSystemNode.getPrimaryItem()` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.getPrimaryItem():javax.jcr.Item","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to Item AbstractJcrNode.getPrimaryItem()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2114,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,Path)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":659,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"JcrSystemNode.java|getPrimaryItem|THREAD_SAFETY_VIOLATION","hash":"c669a93c0fc501b1fd1a8728dc3bc712","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String Name.getString(NamespaceRegistry)` of un-annotated interface `org.modeshape.jcr.value.Name`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":529,"column":-1,"procedure":"org.modeshape.jcr.JcrNodeType.getPrimaryItemName():java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrNodeType.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":529,"column_number":-1,"description":"Call to un-annotated interface method String Name.getString(NamespaceRegistry)"}],"key":"JcrNodeType.java|getPrimaryItemName|INTERFACE_NOT_THREAD_SAFE","hash":"db55386abbee9c67297216097a1e68a4","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAADsAAAAEAAAAFwAAABGgsAECEQD/kgkwc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JOb2RlVHlwZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `NodeType AbstractJcrNode.getPrimaryNodeType()` indirectly writes to field `nodeType.key.sourceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":101,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.getPrimaryNodeType():javax.jcr.nodetype.NodeType","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":101,"column_number":-1,"description":"call to JcrNodeType AbstractJcrNode.getPrimaryNodeType()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2278,"column_number":-1,"description":"call to JcrNodeType JcrNodeTypeManager.getNodeType(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrNodeTypeManager.java","line_number":148,"column_number":-1,"description":"call to JcrNodeType JcrNodeType.with(ExecutionContext,JcrSession)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":640,"column_number":-1,"description":"call to JcrNodeType.<init>(NodeKey,ExecutionContext,JcrSession,RepositoryNodeTypeManager,Name,List,Name,Collection,Collection,boolean,boolean,boolean,boolean)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":178,"column_number":-1,"description":"call to NodeKey NodeKey.withId(String)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":229,"column_number":-1,"description":"call to String NodeKey.getSourceKey()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":154,"column_number":-1,"description":"access to `nodeType.key.sourceKey`"}],"key":"AbstractJcrNode.java|getPrimaryNodeType|THREAD_SAFETY_VIOLATION","hash":"8ae662852eb72c5deda1fc7fbf7313d0","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEAmgD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `JcrNodeType AbstractJcrNode.getPrimaryNodeType()` indirectly writes to field `nodeType.key.sourceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":2278,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.getPrimaryNodeType():org.modeshape.jcr.JcrNodeType","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2278,"column_number":-1,"description":"call to JcrNodeType JcrNodeTypeManager.getNodeType(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrNodeTypeManager.java","line_number":148,"column_number":-1,"description":"call to JcrNodeType JcrNodeType.with(ExecutionContext,JcrSession)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":640,"column_number":-1,"description":"call to JcrNodeType.<init>(NodeKey,ExecutionContext,JcrSession,RepositoryNodeTypeManager,Name,List,Name,Collection,Collection,boolean,boolean,boolean,boolean)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":178,"column_number":-1,"description":"call to NodeKey NodeKey.withId(String)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":229,"column_number":-1,"description":"call to String NodeKey.getSourceKey()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":154,"column_number":-1,"description":"access to `nodeType.key.sourceKey`"}],"key":"AbstractJcrNode.java|getPrimaryNodeType|THREAD_SAFETY_VIOLATION","hash":"7a3e67ee358ef1d8cfdd2391545ea1af","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEAmgD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `JcrNodeType JcrSystemNode.getPrimaryNodeType()` indirectly writes to field `nodeType.key.sourceKey` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.getPrimaryNodeType():org.modeshape.jcr.JcrNodeType","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to JcrNodeType AbstractJcrNode.getPrimaryNodeType()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2278,"column_number":-1,"description":"call to JcrNodeType JcrNodeTypeManager.getNodeType(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrNodeTypeManager.java","line_number":148,"column_number":-1,"description":"call to JcrNodeType JcrNodeType.with(ExecutionContext,JcrSession)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":640,"column_number":-1,"description":"call to JcrNodeType.<init>(NodeKey,ExecutionContext,JcrSession,RepositoryNodeTypeManager,Name,List,Name,Collection,Collection,boolean,boolean,boolean,boolean)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":178,"column_number":-1,"description":"call to NodeKey NodeKey.withId(String)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":229,"column_number":-1,"description":"call to String NodeKey.getSourceKey()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":154,"column_number":-1,"description":"access to `nodeType.key.sourceKey`"}],"key":"JcrSystemNode.java|getPrimaryNodeType|THREAD_SAFETY_VIOLATION","hash":"9392b4edcccb300912bc93182ee9b997","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEAmgD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Name LazyCachedNode.getPrimaryType(NodeCache)` indirectly mutates container `props` via call to `put` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":347,"column":-1,"procedure":"org.modeshape.jcr.cache.document.LazyCachedNode.getPrimaryType(org.modeshape.jcr.cache.NodeCache):org.modeshape.jcr.value.Name","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":347,"column_number":-1,"description":"call to Property LazyCachedNode.getProperty(Name,NodeCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":406,"column_number":-1,"description":"Write to container `props` via call to `put`"}],"key":"LazyCachedNode.java|getPrimaryType|THREAD_SAFETY_VIOLATION","hash":"21f6ade47fa50278c5c876d01853d5ec","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEBlgD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9MYXp5Q2FjaGVkTm9kZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Object Property.getFirstValue()` of un-annotated interface `org.modeshape.jcr.value.Property`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":350,"column":-1,"procedure":"org.modeshape.jcr.cache.document.LazyCachedNode.getPrimaryType(org.modeshape.jcr.cache.NodeCache):org.modeshape.jcr.value.Name","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":350,"column_number":-1,"description":"Call to un-annotated interface method Object Property.getFirstValue()"}],"key":"LazyCachedNode.java|getPrimaryType|INTERFACE_NOT_THREAD_SAFE","hash":"52ac25c5568f42b6af1cb6547418f6ee","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEBXgD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9MYXp5Q2FjaGVkTm9kZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `SchematicEntry DocumentStore.get(String)` of un-annotated interface `org.modeshape.jcr.cache.document.DocumentStore`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":495,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.getPrimaryType(org.modeshape.jcr.cache.NodeCache):org.modeshape.jcr.value.Name","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":495,"column_number":-1,"description":"call to Property SessionNode.getProperty(Name,NodeCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":740,"column_number":-1,"description":"call to CachedNode SessionNode.nodeInWorkspace(AbstractSessionCache)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":309,"column_number":-1,"description":"call to CachedNode WorkspaceCache.getNode(NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":243,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":207,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(String)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":188,"column_number":-1,"description":"Call to un-annotated interface method SchematicEntry DocumentStore.get(String)"}],"key":"SessionNode.java|getPrimaryType|INTERFACE_NOT_THREAD_SAFE","hash":"abeb4421f8282ebfa259de1712afebae","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEAvAD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xb3Jrc3BhY2VDYWNoZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `CachedNode SessionCache.getNode(NodeKey)` of un-annotated interface `org.modeshape.jcr.cache.SessionCache`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":2289,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.getPrimaryTypeName():org.modeshape.jcr.value.Name","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2289,"column_number":-1,"description":"call to CachedNode AbstractJcrNode.node()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":201,"column_number":-1,"description":"Call to un-annotated interface method CachedNode SessionCache.getNode(NodeKey)"}],"key":"AbstractJcrNode.java|getPrimaryTypeName|INTERFACE_NOT_THREAD_SAFE","hash":"17d3caa5e04be434b4dce3aeaaf1cfc5","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEAyQD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `CachedNode SessionCache.getNode(NodeKey)` of un-annotated interface `org.modeshape.jcr.cache.SessionCache`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":2072,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.getProperties():javax.jcr.PropertyIterator","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2072,"column_number":-1,"description":"call to CachedNode AbstractJcrNode.node()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":201,"column_number":-1,"description":"Call to un-annotated interface method CachedNode SessionCache.getNode(NodeKey)"}],"key":"AbstractJcrNode.java|getProperties|INTERFACE_NOT_THREAD_SAFE","hash":"d17e5474f206544384062d03b4b7ae8e","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEAyQD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `PropertyIterator AbstractJcrNode.getProperties()` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":2073,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.getProperties():javax.jcr.PropertyIterator","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2073,"column_number":-1,"description":"call to Collection AbstractJcrNode.findJcrProperties(Iterator)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2058,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|getProperties|THREAD_SAFETY_VIOLATION","hash":"98fac42f8e87db794d6fe996b91e9c7a","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `PropertyIterator JcrSystemNode.getProperties()` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.getProperties():javax.jcr.PropertyIterator","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to PropertyIterator AbstractJcrNode.getProperties()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2073,"column_number":-1,"description":"call to Collection AbstractJcrNode.findJcrProperties(Iterator)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2058,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrSystemNode.java|getProperties|THREAD_SAFETY_VIOLATION","hash":"60b27722450a23a9cba2a59938b7084a","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `CachedNode SessionCache.getNode(NodeKey)` of un-annotated interface `org.modeshape.jcr.cache.SessionCache`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":2096,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.getProperties(java.lang.String[]):javax.jcr.PropertyIterator","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2096,"column_number":-1,"description":"call to CachedNode AbstractJcrNode.node()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":201,"column_number":-1,"description":"Call to un-annotated interface method CachedNode SessionCache.getNode(NodeKey)"}],"key":"AbstractJcrNode.java|getProperties|INTERFACE_NOT_THREAD_SAFE","hash":"8fec1322645f98f45be307604d71e86f","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEAyQD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `PropertyIterator AbstractJcrNode.getProperties(java.lang.String[])` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":2097,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.getProperties(java.lang.String[]):javax.jcr.PropertyIterator","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2097,"column_number":-1,"description":"call to Collection AbstractJcrNode.findJcrProperties(Iterator)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2058,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|getProperties|THREAD_SAFETY_VIOLATION","hash":"09f05fcbfae45882437b4bf1f613a988","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `PropertyIterator AbstractJcrNode.getProperties(java.lang.String[])` indirectly reads without synchronization from `definition.checker`. Potentially races with write in method `AbstractJcrNode.setProperty(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":2092,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.getProperties(java.lang.String[]):javax.jcr.PropertyIterator","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2092,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2092,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":295,"column_number":-1,"description":"access to `definition.checker`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1586,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1586,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(Name,JcrValue,boolean,boolean,boolean,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1703,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|getProperties|THREAD_SAFETY_VIOLATION","hash":"54790b7301beb5d6c86eb681941466ad","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAIkAAAAIAAAAMgAAACSgsAEBJwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YaCwAQErAP+SCTpzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL0pjclByb3BlcnR5RGVmaW5pdGlvbi5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `PropertyIterator JcrSystemNode.getProperties(java.lang.String[])` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.getProperties(java.lang.String[]):javax.jcr.PropertyIterator","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to PropertyIterator AbstractJcrNode.getProperties(java.lang.String[])"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2097,"column_number":-1,"description":"call to Collection AbstractJcrNode.findJcrProperties(Iterator)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2058,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrSystemNode.java|getProperties|THREAD_SAFETY_VIOLATION","hash":"9bd75a38c0ea67151e129451094f2287","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `PropertyIterator AbstractJcrNode.getProperties(String)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":2079,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.getProperties(java.lang.String):javax.jcr.PropertyIterator","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2079,"column_number":-1,"description":"call to PropertyIterator AbstractJcrNode.getProperties()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2073,"column_number":-1,"description":"call to Collection AbstractJcrNode.findJcrProperties(Iterator)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2058,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|getProperties|THREAD_SAFETY_VIOLATION","hash":"9ef10b3a894f04fc6aa9fbbfe6ad416e","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Object Property.getFirstValue()` of un-annotated interface `org.modeshape.jcr.value.Property`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":2080,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.getProperties(java.lang.String):javax.jcr.PropertyIterator","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2080,"column_number":-1,"description":"call to PropertyIterator AbstractJcrNode.getProperties(java.lang.String[])"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2092,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":507,"column_number":-1,"description":"Call to un-annotated interface method Object Property.getFirstValue()"}],"key":"AbstractJcrNode.java|getProperties|INTERFACE_NOT_THREAD_SAFE","hash":"5c7b79af741c98463d0c24cc59022ab0","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEB+wD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `PropertyIterator JcrSystemNode.getProperties(String)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.getProperties(java.lang.String):javax.jcr.PropertyIterator","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to PropertyIterator AbstractJcrNode.getProperties(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2079,"column_number":-1,"description":"call to PropertyIterator AbstractJcrNode.getProperties()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2073,"column_number":-1,"description":"call to Collection AbstractJcrNode.findJcrProperties(Iterator)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2058,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrSystemNode.java|getProperties|THREAD_SAFETY_VIOLATION","hash":"363e38cf0f7f1a9ae6290f50752248b1","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Iterable Document.fields()` of un-annotated interface `org.infinispan.schematic.document.Document`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":447,"column":-1,"procedure":"org.modeshape.jcr.cache.document.LazyCachedNode.getProperties(java.util.Collection,org.modeshape.jcr.cache.NodeCache):java.util.Iterator","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":447,"column_number":-1,"description":"call to Iterator LazyCachedNode.getProperties(NodeCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":436,"column_number":-1,"description":"call to void DocumentTranslator.getProperties(Document,Map)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/DocumentTranslator.java","line_number":238,"column_number":-1,"description":"Call to un-annotated interface method Iterable Document.fields()"}],"key":"LazyCachedNode.java|getProperties|INTERFACE_NOT_THREAD_SAFE","hash":"f640d1f1b91e12d2f27d4eb78dc73ae5","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAFEAAAAEAAAAHAAAABOgsAEA7gD/kglGc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Eb2N1bWVudFRyYW5zbGF0b3IuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `SchematicEntry DocumentStore.get(String)` of un-annotated interface `org.modeshape.jcr.cache.document.DocumentStore`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":804,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.getProperties(java.util.Collection,org.modeshape.jcr.cache.NodeCache):java.util.Iterator","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":804,"column_number":-1,"description":"call to Iterator SessionNode.getProperties(NodeCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":778,"column_number":-1,"description":"call to CachedNode SessionNode.nodeInWorkspace(AbstractSessionCache)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":309,"column_number":-1,"description":"call to CachedNode WorkspaceCache.getNode(NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":243,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":207,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(String)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":188,"column_number":-1,"description":"Call to un-annotated interface method SchematicEntry DocumentStore.get(String)"}],"key":"SessionNode.java|getProperties|INTERFACE_NOT_THREAD_SAFE","hash":"9b2e601f9462336be3fc40622410c55a","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEAvAD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xb3Jrc3BhY2VDYWNoZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Iterable Document.fields()` of un-annotated interface `org.infinispan.schematic.document.Document`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":436,"column":-1,"procedure":"org.modeshape.jcr.cache.document.LazyCachedNode.getProperties(org.modeshape.jcr.cache.NodeCache):java.util.Iterator","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":436,"column_number":-1,"description":"call to void DocumentTranslator.getProperties(Document,Map)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/DocumentTranslator.java","line_number":238,"column_number":-1,"description":"Call to un-annotated interface method Iterable Document.fields()"}],"key":"LazyCachedNode.java|getProperties|INTERFACE_NOT_THREAD_SAFE","hash":"f640d1f1b91e12d2f27d4eb78dc73ae5","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAFEAAAAEAAAAHAAAABOgsAEA7gD/kglGc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Eb2N1bWVudFRyYW5zbGF0b3IuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `SchematicEntry DocumentStore.get(String)` of un-annotated interface `org.modeshape.jcr.cache.document.DocumentStore`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":778,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.getProperties(org.modeshape.jcr.cache.NodeCache):java.util.Iterator","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":778,"column_number":-1,"description":"call to CachedNode SessionNode.nodeInWorkspace(AbstractSessionCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":309,"column_number":-1,"description":"call to CachedNode WorkspaceCache.getNode(NodeKey)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":243,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":207,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(String)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":188,"column_number":-1,"description":"Call to un-annotated interface method SchematicEntry DocumentStore.get(String)"}],"key":"SessionNode.java|getProperties|INTERFACE_NOT_THREAD_SAFE","hash":"9b2e601f9462336be3fc40622410c55a","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEAvAD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xb3Jrc3BhY2VDYWNoZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Iterable Document.fields()` of un-annotated interface `org.infinispan.schematic.document.Document`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":416,"column":-1,"procedure":"org.modeshape.jcr.cache.document.LazyCachedNode.getPropertiesByName(org.modeshape.jcr.cache.NodeCache):org.modeshape.jcr.cache.CachedNode$Properties","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":416,"column_number":-1,"description":"call to void DocumentTranslator.getProperties(Document,Map)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/DocumentTranslator.java","line_number":238,"column_number":-1,"description":"Call to un-annotated interface method Iterable Document.fields()"}],"key":"LazyCachedNode.java|getPropertiesByName|INTERFACE_NOT_THREAD_SAFE","hash":"84044058eccd2aa94cee6a161d8907e9","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAFEAAAAEAAAAHAAAABOgsAEA7gD/kglGc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Eb2N1bWVudFRyYW5zbGF0b3IuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `SchematicEntry DocumentStore.get(String)` of un-annotated interface `org.modeshape.jcr.cache.document.DocumentStore`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":751,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.getPropertiesByName(org.modeshape.jcr.cache.NodeCache):org.modeshape.jcr.cache.CachedNode$Properties","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":751,"column_number":-1,"description":"call to CachedNode SessionNode.nodeInWorkspace(AbstractSessionCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":309,"column_number":-1,"description":"call to CachedNode WorkspaceCache.getNode(NodeKey)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":243,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":207,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(String)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":188,"column_number":-1,"description":"Call to un-annotated interface method SchematicEntry DocumentStore.get(String)"}],"key":"SessionNode.java|getPropertiesByName|INTERFACE_NOT_THREAD_SAFE","hash":"53ae6b3cb2e322d831bde03d40eafb1c","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEAvAD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xb3Jrc3BhY2VDYWNoZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Property AbstractJcrNode.getProperty(String)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":101,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.getProperty(java.lang.String):javax.jcr.Property","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":101,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":336,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|getProperty|THREAD_SAFETY_VIOLATION","hash":"5945ed06c643c2d638a73921ba65b5e1","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Path$Segment Path.getLastSegment()` of un-annotated interface `org.modeshape.jcr.value.Path`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":331,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.getProperty(java.lang.String):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":331,"column_number":-1,"description":"Call to un-annotated interface method Path$Segment Path.getLastSegment()"}],"key":"AbstractJcrNode.java|getProperty|INTERFACE_NOT_THREAD_SAFE","hash":"4a36f77970ce10bb4cbfd1beef0ca7f2","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEBSwD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrProperty AbstractJcrNode.getProperty(String)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":336,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.getProperty(java.lang.String):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":336,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|getProperty|THREAD_SAFETY_VIOLATION","hash":"7eb3842e56b37fc88f68734249ecbcaf","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrProperty AbstractJcrNode.getProperty(String)` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":320,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.getProperty(java.lang.String):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":320,"column_number":-1,"description":"call to AbstractJcrItem JcrSession.findItem(NodeKey,Path)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":682,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"AbstractJcrNode.java|getProperty|THREAD_SAFETY_VIOLATION","hash":"14ac92fac1d2c3361b2b792c1fb015ef","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrProperty JcrSystemNode.getProperty(String)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.getProperty(java.lang.String):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":336,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrSystemNode.java|getProperty|THREAD_SAFETY_VIOLATION","hash":"615764b7c07c39941af5273049d5eabf","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Set CachedNode.getMixinTypes(NodeCache)` of un-annotated interface `org.modeshape.jcr.cache.CachedNode`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":358,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.getProperty(org.modeshape.jcr.value.Name):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":358,"column_number":-1,"description":"Call to un-annotated interface method Set CachedNode.getMixinTypes(NodeCache)"}],"key":"AbstractJcrNode.java|getProperty|INTERFACE_NOT_THREAD_SAFE","hash":"144555bff9a8d9c4f4c8af38513936b8","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEBZgD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrProperty AbstractJcrNode.getProperty(Name)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":359,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.getProperty(org.modeshape.jcr.value.Name):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|getProperty|THREAD_SAFETY_VIOLATION","hash":"714c2bfbf0a9f9888c63757e6c520a05","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Property LazyCachedNode.getProperty(Name,NodeCache)` mutates container `props` via call to `put` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":406,"column":-1,"procedure":"org.modeshape.jcr.cache.document.LazyCachedNode.getProperty(org.modeshape.jcr.value.Name,org.modeshape.jcr.cache.NodeCache):org.modeshape.jcr.value.Property","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":406,"column_number":-1,"description":"Write to container `props` via call to `put`"}],"key":"LazyCachedNode.java|getProperty|THREAD_SAFETY_VIOLATION","hash":"b26b59f5ba494e7a607afc6d471ac721","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEBlgD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9MYXp5Q2FjaGVkTm9kZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `Property LazyCachedNode.getProperty(Name,NodeCache)` reads without synchronization from container `props` via call to `get`. Potentially races with write in method `LazyCachedNode.getProperty(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":401,"column":-1,"procedure":"org.modeshape.jcr.cache.document.LazyCachedNode.getProperty(org.modeshape.jcr.value.Name,org.modeshape.jcr.cache.NodeCache):org.modeshape.jcr.value.Property","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":401,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":401,"column_number":-1,"description":"Read of container `props` via call to `get`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":406,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":406,"column_number":-1,"description":"Write to container `props` via call to `put`"}],"key":"LazyCachedNode.java|getProperty|THREAD_SAFETY_VIOLATION","hash":"b15333017d9301401a8d404592c52ded","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFYAAAAGAAAAIgAAABqgsAEBkQD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9MYXp5Q2FjaGVkTm9kZS5qYXZhoLABAZYA/wQEQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Object Document.get(String)` of un-annotated interface `org.infinispan.schematic.document.Document`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":404,"column":-1,"procedure":"org.modeshape.jcr.cache.document.LazyCachedNode.getProperty(org.modeshape.jcr.value.Name,org.modeshape.jcr.cache.NodeCache):org.modeshape.jcr.value.Property","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":404,"column_number":-1,"description":"call to Property DocumentTranslator.getProperty(Document,Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/DocumentTranslator.java","line_number":336,"column_number":-1,"description":"Call to un-annotated interface method Object Document.get(String)"}],"key":"LazyCachedNode.java|getProperty|INTERFACE_NOT_THREAD_SAFE","hash":"e86ed2bd3b57a08957a258698b9cd0e1","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAFEAAAAEAAAAHAAAABOgsAEBUAD/kglGc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Eb2N1bWVudFRyYW5zbGF0b3IuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `SchematicEntry DocumentStore.get(String)` of un-annotated interface `org.modeshape.jcr.cache.document.DocumentStore`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":740,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.getProperty(org.modeshape.jcr.value.Name,org.modeshape.jcr.cache.NodeCache):org.modeshape.jcr.value.Property","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":740,"column_number":-1,"description":"call to CachedNode SessionNode.nodeInWorkspace(AbstractSessionCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":309,"column_number":-1,"description":"call to CachedNode WorkspaceCache.getNode(NodeKey)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":243,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":207,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(String)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":188,"column_number":-1,"description":"Call to un-annotated interface method SchematicEntry DocumentStore.get(String)"}],"key":"SessionNode.java|getProperty|INTERFACE_NOT_THREAD_SAFE","hash":"8987bc156363237e245aec180e037cc9","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEAvAD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xb3Jrc3BhY2VDYWNoZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Iterable Document.fields()` of un-annotated interface `org.infinispan.schematic.document.Document`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":375,"column":-1,"procedure":"org.modeshape.jcr.cache.document.LazyCachedNode.getPropertyCount(org.modeshape.jcr.cache.NodeCache):int","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":375,"column_number":-1,"description":"call to int DocumentTranslator.countProperties(Document)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/DocumentTranslator.java","line_number":264,"column_number":-1,"description":"Call to un-annotated interface method Iterable Document.fields()"}],"key":"LazyCachedNode.java|getPropertyCount|INTERFACE_NOT_THREAD_SAFE","hash":"742c73582a90a9f702058c78fc7616c6","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAFEAAAAEAAAAHAAAABOgsAEBCAD/kglGc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Eb2N1bWVudFRyYW5zbGF0b3IuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `SchematicEntry DocumentStore.get(String)` of un-annotated interface `org.modeshape.jcr.cache.document.DocumentStore`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":708,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.getPropertyCount(org.modeshape.jcr.cache.NodeCache):int","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":708,"column_number":-1,"description":"call to CachedNode SessionNode.nodeInWorkspace(AbstractSessionCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":309,"column_number":-1,"description":"call to CachedNode WorkspaceCache.getNode(NodeKey)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":243,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":207,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(String)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":188,"column_number":-1,"description":"Call to un-annotated interface method SchematicEntry DocumentStore.get(String)"}],"key":"SessionNode.java|getPropertyCount|INTERFACE_NOT_THREAD_SAFE","hash":"afe38186dd435422de23f7baa3bb1fbe","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEAvAD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xb3Jrc3BhY2VDYWNoZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Collection Multimap.values()` of un-annotated interface `org.modeshape.common.collection.Multimap`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":45,"column":-1,"procedure":"org.modeshape.jcr.JcrNodeType.getPropertyDefinitions():javax.jcr.nodetype.PropertyDefinition[]","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrNodeType.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":45,"column_number":-1,"description":"call to org.modeshape.jcr.JcrPropertyDefinition[] JcrNodeType.getPropertyDefinitions()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":459,"column_number":-1,"description":"call to Collection DefinitionCache.allPropertyDefinitions()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/DefinitionCache.java","line_number":181,"column_number":-1,"description":"Call to un-annotated interface method Collection Multimap.values()"}],"key":"JcrNodeType.java|getPropertyDefinitions|INTERFACE_NOT_THREAD_SAFE","hash":"543568d7ac78309f84562ed865e43370","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEAtQD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9EZWZpbml0aW9uQ2FjaGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Collection Multimap.values()` of un-annotated interface `org.modeshape.common.collection.Multimap`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":459,"column":-1,"procedure":"org.modeshape.jcr.JcrNodeType.getPropertyDefinitions():org.modeshape.jcr.JcrPropertyDefinition[]","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrNodeType.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":459,"column_number":-1,"description":"call to Collection DefinitionCache.allPropertyDefinitions()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/DefinitionCache.java","line_number":181,"column_number":-1,"description":"Call to un-annotated interface method Collection Multimap.values()"}],"key":"JcrNodeType.java|getPropertyDefinitions|INTERFACE_NOT_THREAD_SAFE","hash":"543568d7ac78309f84562ed865e43370","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEAtQD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9EZWZpbml0aW9uQ2FjaGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `QueryManager JcrWorkspace.getQueryManager()` indirectly reads without synchronization from `this.queryManager`. Potentially races with write in method `JcrWorkspace.getQueryManager()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":72,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.getQueryManager():javax.jcr.query.QueryManager","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":72,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":72,"column_number":-1,"description":"call to JcrQueryManager JcrWorkspace.getQueryManager()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":588,"column_number":-1,"description":"access to `this.queryManager`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":72,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":72,"column_number":-1,"description":"call to JcrQueryManager JcrWorkspace.getQueryManager()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":591,"column_number":-1,"description":"access to `this.queryManager`"}],"key":"JcrWorkspace.java|getQueryManager|THREAD_SAFETY_VIOLATION","hash":"391c971cde35abe14d9dc22ddf41f470","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAHcAAAAIAAAALgAAACKgsAECTAD/kgkxc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JXb3Jrc3BhY2UuamF2YaCwAQJPAP+SCTFzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL0pjcldvcmtzcGFjZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `JcrQueryManager JcrWorkspace.getQueryManager()` reads without synchronization from `this.queryManager`. Potentially races with write in method `JcrWorkspace.getQueryManager()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":588,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.getQueryManager():org.modeshape.jcr.JcrQueryManager","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":588,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":588,"column_number":-1,"description":"access to `this.queryManager`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":72,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":72,"column_number":-1,"description":"call to JcrQueryManager JcrWorkspace.getQueryManager()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":591,"column_number":-1,"description":"access to `this.queryManager`"}],"key":"JcrWorkspace.java|getQueryManager|THREAD_SAFETY_VIOLATION","hash":"dbdc460d4d6e49f342805d76adf8088e","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAHcAAAAIAAAALgAAACKgsAECTAD/kgkxc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JXb3Jrc3BhY2UuamF2YaCwAQJPAP+SCTFzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL0pjcldvcmtzcGFjZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `QueryManager JcrWorkspace.getQueryManager()` indirectly reads without synchronization from `this.queryManager`. Potentially races with write in method `JcrWorkspace.getQueryManager()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":72,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.getQueryManager():org.modeshape.jcr.api.query.QueryManager","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":72,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":72,"column_number":-1,"description":"call to JcrQueryManager JcrWorkspace.getQueryManager()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":588,"column_number":-1,"description":"access to `this.queryManager`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":72,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":72,"column_number":-1,"description":"call to JcrQueryManager JcrWorkspace.getQueryManager()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":591,"column_number":-1,"description":"access to `this.queryManager`"}],"key":"JcrWorkspace.java|getQueryManager|THREAD_SAFETY_VIOLATION","hash":"391c971cde35abe14d9dc22ddf41f470","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAGAAAAHgAAABigsAECTAD/kgkxc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JXb3Jrc3BhY2UuamF2YaCwAQJPAP8EBEA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `PropertyDefinition Property.getDefinition()` of un-annotated interface `javax.jcr.Property`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":2147,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.getReferences():javax.jcr.PropertyIterator","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2147,"column_number":-1,"description":"call to PropertyIterator AbstractJcrNode.getReferences(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2153,"column_number":-1,"description":"call to PropertyIterator AbstractJcrNode.propertiesOnOtherNodesReferencingThis(String,int)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2203,"column_number":-1,"description":"Call to un-annotated interface method PropertyDefinition Property.getDefinition()"}],"key":"AbstractJcrNode.java|getReferences|INTERFACE_NOT_THREAD_SAFE","hash":"c5e44b90b0fa79efb5a130002902c44f","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEImwD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `PropertyDefinition Property.getDefinition()` of un-annotated interface `javax.jcr.Property`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":2153,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.getReferences(java.lang.String):javax.jcr.PropertyIterator","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2153,"column_number":-1,"description":"call to PropertyIterator AbstractJcrNode.propertiesOnOtherNodesReferencingThis(String,int)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2203,"column_number":-1,"description":"Call to un-annotated interface method PropertyDefinition Property.getDefinition()"}],"key":"AbstractJcrNode.java|getReferences|INTERFACE_NOT_THREAD_SAFE","hash":"463823bdb2ed58644c8c554a2413412f","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEImwD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Document Document.getDocument(String)` of un-annotated interface `org.infinispan.schematic.document.Document`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":477,"column":-1,"procedure":"org.modeshape.jcr.cache.document.LazyCachedNode.getReferrerCounts(org.modeshape.jcr.cache.NodeCache):org.modeshape.jcr.cache.ReferrerCounts","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":477,"column_number":-1,"description":"call to Map DocumentTranslator.getReferrerCounts(Document,CachedNode$ReferenceType)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/DocumentTranslator.java","line_number":1010,"column_number":-1,"description":"Call to un-annotated interface method Document Document.getDocument(String)"}],"key":"LazyCachedNode.java|getReferrerCounts|INTERFACE_NOT_THREAD_SAFE","hash":"7e14a9e3c1f1e9d4a49ac93484725425","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAFEAAAAEAAAAHAAAABOgsAED8gD/kglGc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Eb2N1bWVudFRyYW5zbGF0b3IuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `SchematicEntry DocumentStore.get(String)` of un-annotated interface `org.modeshape.jcr.cache.document.DocumentStore`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":653,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.getReferrerCounts(org.modeshape.jcr.cache.NodeCache):org.modeshape.jcr.cache.ReferrerCounts","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":653,"column_number":-1,"description":"call to CachedNode SessionNode.nodeInWorkspace(AbstractSessionCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":309,"column_number":-1,"description":"call to CachedNode WorkspaceCache.getNode(NodeKey)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":243,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":207,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(String)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":188,"column_number":-1,"description":"Call to un-annotated interface method SchematicEntry DocumentStore.get(String)"}],"key":"SessionNode.java|getReferrerCounts|INTERFACE_NOT_THREAD_SAFE","hash":"841cd1ce7e9709b6e6f5ad29c2ff65a0","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEAvAD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xb3Jrc3BhY2VDYWNoZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Document Document.getDocument(String)` of un-annotated interface `org.infinispan.schematic.document.Document`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":470,"column":-1,"procedure":"org.modeshape.jcr.cache.document.LazyCachedNode.getReferrers(org.modeshape.jcr.cache.NodeCache,org.modeshape.jcr.cache.CachedNode$ReferenceType):java.util.Set","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":470,"column_number":-1,"description":"call to Set DocumentTranslator.getReferrers(Document,CachedNode$ReferenceType)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/DocumentTranslator.java","line_number":981,"column_number":-1,"description":"Call to un-annotated interface method Document Document.getDocument(String)"}],"key":"LazyCachedNode.java|getReferrers|INTERFACE_NOT_THREAD_SAFE","hash":"a009ac49430bbc0433816fa0bbef3a7b","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAFEAAAAEAAAAHAAAABOgsAED1QD/kglGc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Eb2N1bWVudFRyYW5zbGF0b3IuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `SchematicEntry DocumentStore.get(String)` of un-annotated interface `org.modeshape.jcr.cache.document.DocumentStore`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":633,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.getReferrers(org.modeshape.jcr.cache.NodeCache,org.modeshape.jcr.cache.CachedNode$ReferenceType):java.util.Set","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":633,"column_number":-1,"description":"call to CachedNode SessionNode.nodeInWorkspace(AbstractSessionCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":309,"column_number":-1,"description":"call to CachedNode WorkspaceCache.getNode(NodeKey)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":243,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":207,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(String)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":188,"column_number":-1,"description":"Call to un-annotated interface method SchematicEntry DocumentStore.get(String)"}],"key":"SessionNode.java|getReferrers|INTERFACE_NOT_THREAD_SAFE","hash":"f2a38f177a8d349bb885435e54f67675","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEAvAD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xb3Jrc3BhY2VDYWNoZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `EventListenerIterator JcrObservationManager.getRegisteredEventListeners()` indirectly reads without synchronization from `this.session.context`. Potentially races with write in method `JcrObservationManager.setUserData(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":180,"column":-1,"procedure":"org.modeshape.jcr.JcrObservationManager.getRegisteredEventListeners():javax.jcr.observation.EventListenerIterator","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrObservationManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrObservationManager.java","line_number":180,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrObservationManager.java","line_number":180,"column_number":-1,"description":"call to void JcrObservationManager.checkSession()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrObservationManager.java","line_number":175,"column_number":-1,"description":"call to void JcrSession.checkLive()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":327,"column_number":-1,"description":"call to String JcrSession.sessionId()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":313,"column_number":-1,"description":"access to `this.session.context`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrObservationManager.java","line_number":213,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrObservationManager.java","line_number":213,"column_number":-1,"description":"call to void JcrSession.addContextData(String,String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":434,"column_number":-1,"description":"access to `this.session.context`"}],"key":"JcrObservationManager.java|getRegisteredEventListeners|THREAD_SAFETY_VIOLATION","hash":"adefb59bde2f1036873532a12ba881ea","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAHMAAAAIAAAALAAAACCgsAEBOQD/kgkvc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JTZXNzaW9uLmphdmGgsAEBsgD/kgkvc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JTZXNzaW9uLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `JcrRepositoryManager JcrWorkspace.getRepositoryManager()` indirectly reads without synchronization from `this.repositoryManager`. Potentially races with write in method `JcrWorkspace.getRepositoryManager()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":682,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.getRepositoryManager():org.modeshape.jcr.JcrRepositoryManager","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":682,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":682,"column_number":-1,"description":"call to JcrRepositoryManager JcrWorkspace.repositoryManager()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":686,"column_number":-1,"description":"access to `this.repositoryManager`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":72,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":72,"column_number":-1,"description":"call to JcrRepositoryManager JcrWorkspace.getRepositoryManager()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":682,"column_number":-1,"description":"call to JcrRepositoryManager JcrWorkspace.repositoryManager()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":689,"column_number":-1,"description":"access to `this.repositoryManager`"}],"key":"JcrWorkspace.java|getRepositoryManager|THREAD_SAFETY_VIOLATION","hash":"ee3164b77c6086c3d3aa03ccc58b08cc","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAHcAAAAIAAAALgAAACKgsAECrgD/kgkxc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JXb3Jrc3BhY2UuamF2YaCwAQKxAP+SCTFzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL0pjcldvcmtzcGFjZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `RepositoryManager JcrWorkspace.getRepositoryManager()` indirectly reads without synchronization from `this.repositoryManager`. Potentially races with write in method `JcrWorkspace.getRepositoryManager()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":72,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.getRepositoryManager():org.modeshape.jcr.api.RepositoryManager","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":72,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":72,"column_number":-1,"description":"call to JcrRepositoryManager JcrWorkspace.getRepositoryManager()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":682,"column_number":-1,"description":"call to JcrRepositoryManager JcrWorkspace.repositoryManager()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":686,"column_number":-1,"description":"access to `this.repositoryManager`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":72,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":72,"column_number":-1,"description":"call to JcrRepositoryManager JcrWorkspace.getRepositoryManager()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":682,"column_number":-1,"description":"call to JcrRepositoryManager JcrWorkspace.repositoryManager()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":689,"column_number":-1,"description":"access to `this.repositoryManager`"}],"key":"JcrWorkspace.java|getRepositoryManager|THREAD_SAFETY_VIOLATION","hash":"6bd0015677e7da546840489c94ddde70","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAGAAAAHgAAABigsAECrgD/kgkxc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JXb3Jrc3BhY2UuamF2YaCwAQKxAP8EBEA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `JcrRepositoryMonitor JcrRepositoryManager.getRepositoryMonitor()` indirectly reads without synchronization from `this.monitor`. Potentially races with write in method `JcrRepositoryManager.repositoryMonitor()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":53,"column":-1,"procedure":"org.modeshape.jcr.JcrRepositoryManager.getRepositoryMonitor():org.modeshape.jcr.JcrRepositoryMonitor","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrRepositoryManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRepositoryManager.java","line_number":53,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRepositoryManager.java","line_number":53,"column_number":-1,"description":"call to JcrRepositoryMonitor JcrRepositoryManager.repositoryMonitor()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrRepositoryManager.java","line_number":57,"column_number":-1,"description":"access to `this.monitor`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRepositoryManager.java","line_number":60,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRepositoryManager.java","line_number":60,"column_number":-1,"description":"access to `this.monitor`"}],"key":"JcrRepositoryManager.java|getRepositoryMonitor|THREAD_SAFETY_VIOLATION","hash":"757064cdb695294823ec065debe2da69","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEkAAAAGAAAAIAAAABmgsHkA/5IJOXNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvSmNyUmVwb3NpdG9yeU1hbmFnZXIuamF2YaCwfAD/BARA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `RepositoryMonitor JcrRepositoryManager.getRepositoryMonitor()` indirectly reads without synchronization from `this.monitor`. Potentially races with write in method `JcrRepositoryManager.repositoryMonitor()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":28,"column":-1,"procedure":"org.modeshape.jcr.JcrRepositoryManager.getRepositoryMonitor():org.modeshape.jcr.api.monitor.RepositoryMonitor","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrRepositoryManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRepositoryManager.java","line_number":28,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRepositoryManager.java","line_number":28,"column_number":-1,"description":"call to JcrRepositoryMonitor JcrRepositoryManager.getRepositoryMonitor()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrRepositoryManager.java","line_number":53,"column_number":-1,"description":"call to JcrRepositoryMonitor JcrRepositoryManager.repositoryMonitor()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepositoryManager.java","line_number":57,"column_number":-1,"description":"access to `this.monitor`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRepositoryManager.java","line_number":60,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRepositoryManager.java","line_number":60,"column_number":-1,"description":"access to `this.monitor`"}],"key":"JcrRepositoryManager.java|getRepositoryMonitor|THREAD_SAFETY_VIOLATION","hash":"22666b4efba4d82ad37a33f8e222bfd1","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEkAAAAGAAAAIAAAABmgsHkA/5IJOXNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvSmNyUmVwb3NpdG9yeU1hbmFnZXIuamF2YaCwfAD/BARA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String NamedRepository.getName()` of un-annotated interface `org.modeshape.jcr.api.NamedRepository`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":104,"column":-1,"procedure":"org.modeshape.jcr.JcrRepositoriesContainer.getRepositoryNames(java.util.Map):java.util.Set","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrRepositoriesContainer.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRepositoriesContainer.java","line_number":104,"column_number":-1,"description":"call to Set JcrRepositoriesContainer$JNDIRepositoryLookup.repositoryNames(Map,String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrRepositoriesContainer.java","line_number":344,"column_number":-1,"description":"Call to un-annotated interface method String NamedRepository.getName()"}],"key":"JcrRepositoriesContainer.java|getRepositoryNames|INTERFACE_NOT_THREAD_SAFE","hash":"1850897d9db221f2e7f7dbb223f2751b","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEgAAAAEAAAAGgAAABKgsAEBWAD/kgk9c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JSZXBvc2l0b3JpZXNDb250YWluZXIuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `NodeTypeSchemata RepositoryNodeTypeManager.getRepositorySchemata()` indirectly writes to field `mutableTable.extraColumns` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":289,"column":-1,"procedure":"org.modeshape.jcr.RepositoryNodeTypeManager.getRepositorySchemata():org.modeshape.jcr.NodeTypeSchemata","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/RepositoryNodeTypeManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryNodeTypeManager.java","line_number":289,"column_number":-1,"description":"call to NodeTypeSchemata.<init>(ExecutionContext,NodeTypes,boolean,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/NodeTypeSchemata.java","line_number":130,"column_number":-1,"description":"call to Schemata ImmutableSchemata$Builder.build()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/validate/ImmutableSchemata.java","line_number":438,"column_number":-1,"description":"call to void ImmutableSchemata$MutableTable.setExtraColumns(boolean)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/validate/ImmutableSchemata.java","line_number":631,"column_number":-1,"description":"access to `mutableTable.extraColumns`"}],"key":"RepositoryNodeTypeManager.java|getRepositorySchemata|THREAD_SAFETY_VIOLATION","hash":"5f1f06d470df493645b09b1cdc7a98e9","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFAAAAAEAAAAHAAAABOgsAECdwD/kglFc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9xdWVyeS92YWxpZGF0ZS9JbW11dGFibGVTY2hlbWF0YS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Version JcrVersionHistoryNode.getRootVersion()` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":55,"column":-1,"procedure":"org.modeshape.jcr.JcrVersionHistoryNode.getRootVersion():javax.jcr.version.Version","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":55,"column_number":-1,"description":"call to JcrVersionNode JcrVersionHistoryNode.getRootVersion()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":87,"column_number":-1,"description":"call to AbstractJcrNode AbstractJcrNode.childNode(Name,AbstractJcrNode$Type)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":690,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"JcrVersionHistoryNode.java|getRootVersion|THREAD_SAFETY_VIOLATION","hash":"63a1ced08641d8a9328b8ad9d80aa7cd","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `JcrVersionNode JcrVersionHistoryNode.getRootVersion()` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":87,"column":-1,"procedure":"org.modeshape.jcr.JcrVersionHistoryNode.getRootVersion():org.modeshape.jcr.JcrVersionNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":87,"column_number":-1,"description":"call to AbstractJcrNode AbstractJcrNode.childNode(Name,AbstractJcrNode$Type)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":690,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"JcrVersionHistoryNode.java|getRootVersion|THREAD_SAFETY_VIOLATION","hash":"6e11ca2b7719bf4435dadef08b23a5a8","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Path$Segment LazyCachedNode.getSegment(NodeCache)` indirectly writes to field `this.key.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":279,"column":-1,"procedure":"org.modeshape.jcr.cache.document.LazyCachedNode.getSegment(org.modeshape.jcr.cache.NodeCache):org.modeshape.jcr.value.Path$Segment","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":279,"column_number":-1,"description":"call to ChildReference LazyCachedNode.parentReferenceToSelf(WorkspaceCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":204,"column_number":-1,"description":"call to CachedNode LazyCachedNode.parent(WorkspaceCache)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":165,"column_number":-1,"description":"call to NodeKey LazyCachedNode.getParentKey(NodeCache)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":124,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `this.key.workspaceKey`"}],"key":"LazyCachedNode.java|getSegment|THREAD_SAFETY_VIOLATION","hash":"e7a4b1bd425f1627e8824ba87060f7e8","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `SchematicEntry DocumentStore.get(String)` of un-annotated interface `org.modeshape.jcr.cache.document.DocumentStore`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":414,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.getSegment(org.modeshape.jcr.cache.NodeCache):org.modeshape.jcr.value.Path$Segment","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":414,"column_number":-1,"description":"call to CachedNode SessionNode.parent(AbstractSessionCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":337,"column_number":-1,"description":"call to CachedNode AbstractSessionCache.getNode(NodeKey)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/AbstractSessionCache.java","line_number":249,"column_number":-1,"description":"call to CachedNode WorkspaceCache.getNode(NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":243,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":207,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(String)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":188,"column_number":-1,"description":"Call to un-annotated interface method SchematicEntry DocumentStore.get(String)"}],"key":"SessionNode.java|getSegment|INTERFACE_NOT_THREAD_SAFE","hash":"948eb33d1f9bfcb2550f5e9480deeb10","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEAvAD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xb3Jrc3BhY2VDYWNoZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `ChildReference ChildReferences.getChild(NodeKey)` of un-annotated interface `org.modeshape.jcr.cache.ChildReferences`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":429,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.getSegment(org.modeshape.jcr.cache.NodeCache,org.modeshape.jcr.cache.CachedNode):org.modeshape.jcr.value.Path$Segment","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":429,"column_number":-1,"description":"Call to un-annotated interface method ChildReference ChildReferences.getChild(NodeKey)"}],"key":"SessionNode.java|getSegment|INTERFACE_NOT_THREAD_SAFE","hash":"f316e70201656967ed2605fe167049d4","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEoAAAAEAAAAGgAAABKgsAEBrQD/kgk/c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9TZXNzaW9uTm9kZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Path$Segment LazyCachedNode.getSegment(WorkspaceCache)` indirectly writes to field `this.key.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":293,"column":-1,"procedure":"org.modeshape.jcr.cache.document.LazyCachedNode.getSegment(org.modeshape.jcr.cache.document.WorkspaceCache):org.modeshape.jcr.value.Path$Segment","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":293,"column_number":-1,"description":"call to ChildReference LazyCachedNode.parentReferenceToSelf(WorkspaceCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":204,"column_number":-1,"description":"call to CachedNode LazyCachedNode.parent(WorkspaceCache)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":165,"column_number":-1,"description":"call to NodeKey LazyCachedNode.getParentKey(NodeCache)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":124,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `this.key.workspaceKey`"}],"key":"LazyCachedNode.java|getSegment|THREAD_SAFETY_VIOLATION","hash":"041066b0c9a5440323c1969bcb92f310","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Set CachedNode.getMixinTypes(NodeCache)` of un-annotated interface `org.modeshape.jcr.cache.CachedNode`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":3053,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.getSharedSet():javax.jcr.NodeIterator","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3053,"column_number":-1,"description":"call to boolean AbstractJcrNode.isShareable()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":558,"column_number":-1,"description":"call to boolean AbstractJcrNode.isNodeType(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2339,"column_number":-1,"description":"Call to un-annotated interface method Set CachedNode.getMixinTypes(NodeCache)"}],"key":"AbstractJcrNode.java|getSharedSet|INTERFACE_NOT_THREAD_SAFE","hash":"d997041f5b0cf10a0a7bc01e0e81a7dc","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEJIwD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `NodeIterator AbstractJcrNode.getSharedSet()` indirectly writes to field `parentKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":3055,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.getSharedSet():javax.jcr.NodeIterator","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3055,"column_number":-1,"description":"call to NodeIterator JcrSharedNodeCache$SharedSet.getSharedNodes()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSharedNodeCache.java","line_number":243,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `parentKey.workspaceKey`"}],"key":"AbstractJcrNode.java|getSharedSet|THREAD_SAFETY_VIOLATION","hash":"bb064b43595f4432cb107934b670aade","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `NodeIterator JcrSystemNode.getSharedSet()` indirectly writes to field `parentKey.workspaceKey` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.getSharedSet():javax.jcr.NodeIterator","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to NodeIterator AbstractJcrNode.getSharedSet()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3055,"column_number":-1,"description":"call to NodeIterator JcrSharedNodeCache$SharedSet.getSharedNodes()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSharedNodeCache.java","line_number":243,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `parentKey.workspaceKey`"}],"key":"JcrSystemNode.java|getSharedSet|THREAD_SAFETY_VIOLATION","hash":"829e32a837a79830f1d71587de9ce2b7","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `String Connectors$Snapshot.getSourceNameAtKey(String)` reads without synchronization from container `this.sourceKeyToConnectorMap` via call to `get`. Potentially races with write in method `Connectors$Snapshot.shutdownConnectors()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":777,"column":-1,"procedure":"org.modeshape.jcr.Connectors$Snapshot.getSourceNameAtKey(java.lang.String):java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/Connectors.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/Connectors.java","line_number":777,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/Connectors.java","line_number":777,"column_number":-1,"description":"Read of container `this.sourceKeyToConnectorMap` via call to `get`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/Connectors.java","line_number":725,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/Connectors.java","line_number":725,"column_number":-1,"description":"Write to container `this.sourceKeyToConnectorMap` via call to `clear`"}],"key":"Connectors.java|getSourceNameAtKey|THREAD_SAFETY_VIOLATION","hash":"4d7c9c2382dcbb173a7e0ea378e92567","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAHMAAAAIAAAALAAAACCgsAEDCQD/kgkvc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9Db25uZWN0b3JzLmphdmGgsAEC1QD/kgkvc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9Db25uZWN0b3JzLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `String CassandraBinaryStore.getStoredMimeType(BinaryValue)` indirectly reads without synchronization from `this.session`. Potentially races with write in method `CassandraBinaryStore.start()`.\n Reporting because a superclass `class org.modeshape.jcr.value.binary.AbstractBinaryStore` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":65,"column":-1,"procedure":"org.modeshape.jcr.value.binary.CassandraBinaryStore.getStoredMimeType(org.modeshape.jcr.value.BinaryValue):java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/CassandraBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/CassandraBinaryStore.java","line_number":65,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/CassandraBinaryStore.java","line_number":65,"column_number":-1,"description":"call to void CassandraBinaryStore.checkContentExists(BinaryValue)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/CassandraBinaryStore.java","line_number":80,"column_number":-1,"description":"call to boolean CassandraBinaryStore.contentExists(BinaryKey,boolean)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/binary/CassandraBinaryStore.java","line_number":303,"column_number":-1,"description":"access to `this.session`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/CassandraBinaryStore.java","line_number":262,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/CassandraBinaryStore.java","line_number":262,"column_number":-1,"description":"access to `this.session`"}],"key":"CassandraBinaryStore.java|getStoredMimeType|THREAD_SAFETY_VIOLATION","hash":"a4a9af4c3ffac5cb2e96560edb8a17f4","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAKEAAAAIAAAAOAAAACagsAEBLwD/kglGc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvQ2Fzc2FuZHJhQmluYXJ5U3RvcmUuamF2YaCwAQEGAP+SCUZzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2JpbmFyeS9DYXNzYW5kcmFCaW5hcnlTdG9yZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `String DatabaseBinaryStore.getStoredMimeType(BinaryValue)` indirectly reads without synchronization from `this.dataSource`. Potentially races with write in method `DatabaseBinaryStore.start()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":260,"column":-1,"procedure":"org.modeshape.jcr.value.binary.DatabaseBinaryStore.getStoredMimeType(org.modeshape.jcr.value.BinaryValue):java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":260,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":260,"column_number":-1,"description":"call to Object DatabaseBinaryStore.dbCall(DatabaseBinaryStore$DBCallable)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":357,"column_number":-1,"description":"call to Connection DatabaseBinaryStore.newConnection()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":328,"column_number":-1,"description":"access to `this.dataSource`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":146,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":146,"column_number":-1,"description":"call to void DatabaseBinaryStore.lookupDataSource()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":338,"column_number":-1,"description":"access to `this.dataSource`"}],"key":"DatabaseBinaryStore.java|getStoredMimeType|THREAD_SAFETY_VIOLATION","hash":"d4bb90fdbb15bc087724ffa8702f9c0a","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAJ8AAAAIAAAAOAAAACagsAEBSAD/kglFc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvRGF0YWJhc2VCaW5hcnlTdG9yZS5qYXZhoLABAVIA/5IJRXNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvdmFsdWUvYmluYXJ5L0RhdGFiYXNlQmluYXJ5U3RvcmUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `BinaryKey BinaryValue.getKey()` of un-annotated interface `org.modeshape.jcr.value.BinaryValue`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":591,"column":-1,"procedure":"org.modeshape.jcr.value.binary.FileSystemBinaryStore.getStoredMimeType(org.modeshape.jcr.value.BinaryValue):java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":591,"column_number":-1,"description":"call to boolean FileSystemBinaryStore.binaryValueExists(BinaryValue)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":609,"column_number":-1,"description":"Call to un-annotated interface method BinaryKey BinaryValue.getKey()"}],"key":"FileSystemBinaryStore.java|getStoredMimeType|INTERFACE_NOT_THREAD_SAFE","hash":"b8cdf3b810a8781886de5e62679ba327","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAFIAAAAEAAAAHAAAABOgsAECYQD/kglHc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvRmlsZVN5c3RlbUJpbmFyeVN0b3JlLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `String MongodbBinaryStore.getStoredMimeType(BinaryValue)` reads without synchronization from `this.db`. Potentially races with write in method `MongodbBinaryStore.start()`.\n Reporting because a superclass `class org.modeshape.jcr.value.binary.AbstractBinaryStore` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":283,"column":-1,"procedure":"org.modeshape.jcr.value.binary.MongodbBinaryStore.getStoredMimeType(org.modeshape.jcr.value.BinaryValue):java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":283,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":283,"column_number":-1,"description":"access to `this.db`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":346,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":346,"column_number":-1,"description":"call to void MongodbBinaryStore.initMongoDatabase()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":367,"column_number":-1,"description":"access to `this.db`"}],"key":"MongodbBinaryStore.java|getStoredMimeType|THREAD_SAFETY_VIOLATION","hash":"e659c0c1aec9426785d3289e59bf4b13","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAJ0AAAAIAAAAOAAAACagsAEBGwD/kglEc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvTW9uZ29kYkJpbmFyeVN0b3JlLmphdmGgsAEBbwD/kglEc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvTW9uZ29kYkJpbmFyeVN0b3JlLmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Object DBObject.get(String)` of un-annotated interface `com.mongodb.DBObject`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.binary.AbstractBinaryStore` is annotated `@ThreadSafe`.","severity":"WARNING","line":287,"column":-1,"procedure":"org.modeshape.jcr.value.binary.MongodbBinaryStore.getStoredMimeType(org.modeshape.jcr.value.BinaryValue):java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":287,"column_number":-1,"description":"call to Object MongodbBinaryStore.getAttribute(DBCollection,String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":407,"column_number":-1,"description":"Call to un-annotated interface method Object DBObject.get(String)"}],"key":"MongodbBinaryStore.java|getStoredMimeType|INTERFACE_NOT_THREAD_SAFE","hash":"feb20a4f10907c3fdb583de919f3c4bd","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE8AAAAEAAAAHAAAABOgsAEBlwD/kglEc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvTW9uZ29kYkJpbmFyeVN0b3JlLmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `BinaryKey BinaryValue.getKey()` of un-annotated interface `org.modeshape.jcr.value.BinaryValue`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":487,"column":-1,"procedure":"org.modeshape.jcr.value.binary.infinispan.InfinispanBinaryStore.getStoredMimeType(org.modeshape.jcr.value.BinaryValue):java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":487,"column_number":-1,"description":"Call to un-annotated interface method BinaryKey BinaryValue.getKey()"}],"key":"InfinispanBinaryStore.java|getStoredMimeType|INTERFACE_NOT_THREAD_SAFE","hash":"f63253ca991676920d7f7e4bb625484a","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAF0AAAAEAAAAHwAAABWgsAEB5wD/kglSc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvaW5maW5pc3Bhbi9JbmZpbmlzcGFuQmluYXJ5U3RvcmUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `String InfinispanBinaryStore.getStoredMimeType(BinaryValue)` reads without synchronization from `this.metadataCache`. Potentially races with write in method `InfinispanBinaryStore.start()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":488,"column":-1,"procedure":"org.modeshape.jcr.value.binary.infinispan.InfinispanBinaryStore.getStoredMimeType(org.modeshape.jcr.value.BinaryValue):java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":488,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":488,"column_number":-1,"description":"access to `this.metadataCache`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":179,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":179,"column_number":-1,"description":"access to `this.metadataCache`"}],"key":"InfinispanBinaryStore.java|getStoredMimeType|THREAD_SAFETY_VIOLATION","hash":"a9427c0e2a19bad69ed47b16c8fd0eed","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAALkAAAAIAAAAPgAAACqgsAEB6AD/kglSc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvaW5maW5pc3Bhbi9JbmZpbmlzcGFuQmluYXJ5U3RvcmUuamF2YaCwAQCzAP+SCVJzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2JpbmFyeS9pbmZpbmlzcGFuL0luZmluaXNwYW5CaW5hcnlTdG9yZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String Name.getString(NamespaceRegistry)` of un-annotated interface `org.modeshape.jcr.value.Name`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":1700,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.getString(org.modeshape.jcr.value.NamespaceRegistry):java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1700,"column_number":-1,"description":"Call to un-annotated interface method String Name.getString(NamespaceRegistry)"}],"key":"SessionNode.java|getString|INTERFACE_NOT_THREAD_SAFE","hash":"35b4bd00c39c5fd29603d25ba28700e5","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEoAAAAEAAAAGgAAABKgsAEGpAD/kgk/c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9TZXNzaW9uTm9kZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `javax.jcr.version.Version[] JcrVersionNode.getSuccessors()` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":91,"column":-1,"procedure":"org.modeshape.jcr.JcrVersionNode.getSuccessors():javax.jcr.version.Version[]","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","line_number":91,"column_number":-1,"description":"call to javax.jcr.version.Version[] JcrVersionNode.getNodesForProperty(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","line_number":97,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrVersionNode.java|getSuccessors|THREAD_SAFETY_VIOLATION","hash":"2eff82bb08def9c22d99df6f37023fbc","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `String AbstractBinaryStore.getText(BinaryValue)` indirectly writes to field `binary.mimeType` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":129,"column":-1,"procedure":"org.modeshape.jcr.value.binary.AbstractBinaryStore.getText(org.modeshape.jcr.value.BinaryValue):java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/AbstractBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/AbstractBinaryStore.java","line_number":129,"column_number":-1,"description":"call to String TextExtractors.extract(InMemoryBinaryValue,TextExtractor$Context)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/TextExtractors.java","line_number":85,"column_number":-1,"description":"call to String InMemoryBinaryValue.getMimeType()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/binary/InMemoryBinaryValue.java","line_number":70,"column_number":-1,"description":"access to `binary.mimeType`"}],"key":"AbstractBinaryStore.java|getText|THREAD_SAFETY_VIOLATION","hash":"c5609d97b7d155ec8761d03311cc84bf","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAE8AAAAEAAAAHAAAABOgsABGAP+SCUVzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2JpbmFyeS9Jbk1lbW9yeUJpbmFyeVZhbHVlLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `String AbstractBinaryStore.getText(BinaryValue)` indirectly mutates container `this.extractors.extractionResults` via call to `add` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":137,"column":-1,"procedure":"org.modeshape.jcr.value.binary.AbstractBinaryStore.getText(org.modeshape.jcr.value.BinaryValue):java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/AbstractBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/AbstractBinaryStore.java","line_number":137,"column_number":-1,"description":"call to CountDownLatch TextExtractors.extract(AbstractBinaryStore,BinaryValue,TextExtractor$Context)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/TextExtractors.java","line_number":115,"column_number":-1,"description":"Write to container `this.extractors.extractionResults` via call to `add`"}],"key":"AbstractBinaryStore.java|getText|THREAD_SAFETY_VIOLATION","hash":"326d249d6fcd5f70825a49bce8d7d155","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsABzAP+SCTNzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL1RleHRFeHRyYWN0b3JzLmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `BinaryKey BinaryValue.getKey()` of un-annotated interface `org.modeshape.jcr.value.BinaryValue`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":134,"column":-1,"procedure":"org.modeshape.jcr.value.binary.AbstractBinaryStore.getText(org.modeshape.jcr.value.BinaryValue):java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/AbstractBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/AbstractBinaryStore.java","line_number":134,"column_number":-1,"description":"Call to un-annotated interface method BinaryKey BinaryValue.getKey()"}],"key":"AbstractBinaryStore.java|getText|INTERFACE_NOT_THREAD_SAFE","hash":"aa89d59b670109238bcccbaa999ab400","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAFAAAAAEAAAAHAAAABOgsAEAhgD/kglFc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvQWJzdHJhY3RCaW5hcnlTdG9yZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `BinaryKey BinaryValue.getKey()` of un-annotated interface `org.modeshape.jcr.value.BinaryValue`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.binary.BinaryStore` is annotated `@ThreadSafe`.","severity":"WARNING","line":319,"column":-1,"procedure":"org.modeshape.jcr.value.binary.CompositeBinaryStore.getText(org.modeshape.jcr.value.BinaryValue):java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/CompositeBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/CompositeBinaryStore.java","line_number":319,"column_number":-1,"description":"Call to un-annotated interface method BinaryKey BinaryValue.getKey()"}],"key":"CompositeBinaryStore.java|getText|INTERFACE_NOT_THREAD_SAFE","hash":"98454570517897676d54cea98b42f07a","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAFEAAAAEAAAAHAAAABOgsAEBPwD/kglGc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvQ29tcG9zaXRlQmluYXJ5U3RvcmUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `String CompositeBinaryStore.getText(BinaryValue)` indirectly writes to field `binary.mimeType` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.value.binary.BinaryStore` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":308,"column":-1,"procedure":"org.modeshape.jcr.value.binary.CompositeBinaryStore.getText(org.modeshape.jcr.value.BinaryValue):java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/CompositeBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/CompositeBinaryStore.java","line_number":308,"column_number":-1,"description":"call to String TextExtractors.extract(InMemoryBinaryValue,TextExtractor$Context)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/TextExtractors.java","line_number":85,"column_number":-1,"description":"call to String InMemoryBinaryValue.getMimeType()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/binary/InMemoryBinaryValue.java","line_number":70,"column_number":-1,"description":"access to `binary.mimeType`"}],"key":"CompositeBinaryStore.java|getText|THREAD_SAFETY_VIOLATION","hash":"13c1d8109afad418541f9c6fe8667455","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAE8AAAAEAAAAHAAAABOgsABGAP+SCUVzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2JpbmFyeS9Jbk1lbW9yeUJpbmFyeVZhbHVlLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `DateTime RecordingChanges.getTimestamp()` reads without synchronization from `this.timestamp`. Potentially races with write in method `RecordingChanges.freeze(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":329,"column":-1,"procedure":"org.modeshape.jcr.cache.change.RecordingChanges.getTimestamp():org.modeshape.jcr.api.value.DateTime","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/change/RecordingChanges.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/change/RecordingChanges.java","line_number":329,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/change/RecordingChanges.java","line_number":329,"column_number":-1,"description":"access to `this.timestamp`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/change/RecordingChanges.java","line_number":309,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/change/RecordingChanges.java","line_number":309,"column_number":-1,"description":"access to `this.timestamp`"}],"key":"RecordingChanges.java|getTimestamp|THREAD_SAFETY_VIOLATION","hash":"5a8b74f48b935a3512684def6ef857ce","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAJkAAAAIAAAANgAAACagsAEBSQD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9jaGFuZ2UvUmVjb3JkaW5nQ2hhbmdlcy5qYXZhoLABATUA/5IJQnNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvY2FjaGUvY2hhbmdlL1JlY29yZGluZ0NoYW5nZXMuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Set CachedNode.getMixinTypes(NodeCache)` of un-annotated interface `org.modeshape.jcr.cache.CachedNode`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":2134,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.getUUID():java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2134,"column_number":-1,"description":"call to boolean AbstractJcrNode.isReferenceable()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":546,"column_number":-1,"description":"Call to un-annotated interface method Set CachedNode.getMixinTypes(NodeCache)"}],"key":"AbstractJcrNode.java|getUUID|INTERFACE_NOT_THREAD_SAFE","hash":"947dacc9ceb7d46d1f0989a0030d3684","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAECIgD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `Map RecordingChanges.getUserData()` reads without synchronization from `this.userData`. Potentially races with write in method `RecordingChanges.freeze(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":334,"column":-1,"procedure":"org.modeshape.jcr.cache.change.RecordingChanges.getUserData():java.util.Map","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/change/RecordingChanges.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/change/RecordingChanges.java","line_number":334,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/change/RecordingChanges.java","line_number":334,"column_number":-1,"description":"access to `this.userData`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/change/RecordingChanges.java","line_number":307,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/change/RecordingChanges.java","line_number":307,"column_number":-1,"description":"access to `this.userData`"}],"key":"RecordingChanges.java|getUserData|THREAD_SAFETY_VIOLATION","hash":"df8e4473c4947b478a1d59edb80c4181","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAJkAAAAIAAAANgAAACagsAEBTgD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9jaGFuZ2UvUmVjb3JkaW5nQ2hhbmdlcy5qYXZhoLABATMA/5IJQnNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvY2FjaGUvY2hhbmdlL1JlY29yZGluZ0NoYW5nZXMuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `String RecordingChanges.getUserId()` reads without synchronization from `this.userId`. Potentially races with write in method `RecordingChanges.freeze(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":339,"column":-1,"procedure":"org.modeshape.jcr.cache.change.RecordingChanges.getUserId():java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/change/RecordingChanges.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/change/RecordingChanges.java","line_number":339,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/change/RecordingChanges.java","line_number":339,"column_number":-1,"description":"access to `this.userId`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/change/RecordingChanges.java","line_number":305,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/change/RecordingChanges.java","line_number":305,"column_number":-1,"description":"access to `this.userId`"}],"key":"RecordingChanges.java|getUserId|THREAD_SAFETY_VIOLATION","hash":"e433ec4177d66b67f9929ad5e87ef8d7","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAJkAAAAIAAAANgAAACagsAEBUwD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9jaGFuZ2UvUmVjb3JkaW5nQ2hhbmdlcy5qYXZhoLABATEA/5IJQnNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvY2FjaGUvY2hhbmdlL1JlY29yZGluZ0NoYW5nZXMuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Collection Multimap.get(Object)` of un-annotated interface `org.modeshape.common.collection.Multimap`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.ValueFactories` is annotated `@ThreadSafe`.","severity":"WARNING","line":821,"column":-1,"procedure":"org.modeshape.jcr.ExecutionContext$ContextFactories.getValueFactory(java.lang.Object):org.modeshape.jcr.value.ValueFactory","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/ExecutionContext.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/ExecutionContext.java","line_number":821,"column_number":-1,"description":"call to PropertyType PropertyType.discoverType(Object)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/PropertyType.java","line_number":280,"column_number":-1,"description":"call to PropertyType PropertyType.discoverType(Class)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/PropertyType.java","line_number":318,"column_number":-1,"description":"Call to un-annotated interface method Collection Multimap.get(Object)"}],"key":"ExecutionContext.java|getValueFactory|INTERFACE_NOT_THREAD_SAFE","hash":"d897f918885d8f43c9013d40939d5189","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEIAAAAEAAAAGAAAABGgsAEBPgD/kgk3c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9Qcm9wZXJ0eVR5cGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Collection Multimap.get(Object)` of un-annotated interface `org.modeshape.common.collection.Multimap`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":85,"column":-1,"procedure":"org.modeshape.jcr.value.basic.AbstractValueFactories.getValueFactory(java.lang.Object):org.modeshape.jcr.value.ValueFactory","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/basic/AbstractValueFactories.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/basic/AbstractValueFactories.java","line_number":85,"column_number":-1,"description":"call to PropertyType PropertyType.discoverType(Object)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/PropertyType.java","line_number":280,"column_number":-1,"description":"call to PropertyType PropertyType.discoverType(Class)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/PropertyType.java","line_number":318,"column_number":-1,"description":"Call to un-annotated interface method Collection Multimap.get(Object)"}],"key":"AbstractValueFactories.java|getValueFactory|INTERFACE_NOT_THREAD_SAFE","hash":"929fea9e53542f3ba3bfdcc6e2eb93e4","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEIAAAAEAAAAGAAAABGgsAEBPgD/kgk3c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9Qcm9wZXJ0eVR5cGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Version JcrVersionHistoryNode.getVersion(String)` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":55,"column":-1,"procedure":"org.modeshape.jcr.JcrVersionHistoryNode.getVersion(java.lang.String):javax.jcr.version.Version","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":55,"column_number":-1,"description":"call to JcrVersionNode JcrVersionHistoryNode.getVersion(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":93,"column_number":-1,"description":"call to AbstractJcrNode JcrSystemNode.getNode(String)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to AbstractJcrNode AbstractJcrNode.getNode(String)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":796,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,Path)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":659,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"JcrVersionHistoryNode.java|getVersion|THREAD_SAFETY_VIOLATION","hash":"f5da27c9d43c028e77e46e670f10b445","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `JcrVersionNode JcrVersionHistoryNode.getVersion(String)` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":93,"column":-1,"procedure":"org.modeshape.jcr.JcrVersionHistoryNode.getVersion(java.lang.String):org.modeshape.jcr.JcrVersionNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":93,"column_number":-1,"description":"call to AbstractJcrNode JcrSystemNode.getNode(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to AbstractJcrNode AbstractJcrNode.getNode(String)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":796,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,Path)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":659,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"JcrVersionHistoryNode.java|getVersion|THREAD_SAFETY_VIOLATION","hash":"d40c55bd181b5d96d147c453ee4a1157","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Version JcrVersionHistoryNode.getVersionByLabel(String)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":55,"column":-1,"procedure":"org.modeshape.jcr.JcrVersionHistoryNode.getVersionByLabel(java.lang.String):javax.jcr.version.Version","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":55,"column_number":-1,"description":"call to JcrVersionNode JcrVersionHistoryNode.getVersionByLabel(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":102,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrVersionHistoryNode.java|getVersionByLabel|THREAD_SAFETY_VIOLATION","hash":"8e8b1db25db813398c3e7f26f777a3b6","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `JcrVersionNode JcrVersionHistoryNode.getVersionByLabel(String)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":102,"column":-1,"procedure":"org.modeshape.jcr.JcrVersionHistoryNode.getVersionByLabel(java.lang.String):org.modeshape.jcr.JcrVersionNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":102,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrVersionHistoryNode.java|getVersionByLabel|THREAD_SAFETY_VIOLATION","hash":"1570bc74029f331c0cbc6860e71cc18c","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String Path.getString(NamespaceRegistry)` of un-annotated interface `org.modeshape.jcr.value.Path`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":104,"column":-1,"procedure":"org.modeshape.jcr.JcrVersionHistoryNode.getVersionByLabel(java.lang.String):org.modeshape.jcr.JcrVersionNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":104,"column_number":-1,"description":"call to String JcrSystemNode.getPath()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to String JcrNode.getPath()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrNode.java","line_number":74,"column_number":-1,"description":"Call to un-annotated interface method String Path.getString(NamespaceRegistry)"}],"key":"JcrVersionHistoryNode.java|getVersionByLabel|INTERFACE_NOT_THREAD_SAFE","hash":"070ce0b8bd3c8d31a58d8a782967b8c0","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAADYAAAAEAAAAFgAAABCgsABKAP+SCSxzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL0pjck5vZGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `VersionHistory AbstractJcrNode.getVersionHistory()` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":101,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.getVersionHistory():javax.jcr.version.VersionHistory","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":101,"column_number":-1,"description":"call to JcrVersionHistoryNode AbstractJcrNode.getVersionHistory()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3285,"column_number":-1,"description":"call to JcrVersionHistoryNode JcrVersionManager.getVersionHistory(AbstractJcrNode)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":241,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":527,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"AbstractJcrNode.java|getVersionHistory|THREAD_SAFETY_VIOLATION","hash":"24cdd25f7d843d29d96340a4ca8ed8c0","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `JcrVersionHistoryNode AbstractJcrNode.getVersionHistory()` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":3285,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.getVersionHistory():org.modeshape.jcr.JcrVersionHistoryNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3285,"column_number":-1,"description":"call to JcrVersionHistoryNode JcrVersionManager.getVersionHistory(AbstractJcrNode)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":241,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":527,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"AbstractJcrNode.java|getVersionHistory|THREAD_SAFETY_VIOLATION","hash":"f5c684d3588a4eb6b556f61f11ab007b","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `JcrVersionHistoryNode JcrSystemNode.getVersionHistory()` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.getVersionHistory():org.modeshape.jcr.JcrVersionHistoryNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to JcrVersionHistoryNode AbstractJcrNode.getVersionHistory()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3285,"column_number":-1,"description":"call to JcrVersionHistoryNode JcrVersionManager.getVersionHistory(AbstractJcrNode)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":241,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":527,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"JcrSystemNode.java|getVersionHistory|THREAD_SAFETY_VIOLATION","hash":"dc8985199839418133eaa9dff3d75fe2","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `java.lang.String[] JcrVersionHistoryNode.getVersionLabels()` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":118,"column":-1,"procedure":"org.modeshape.jcr.JcrVersionHistoryNode.getVersionLabels():java.lang.String[]","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":118,"column_number":-1,"description":"call to PropertyIterator AbstractJcrNode.getProperties()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2073,"column_number":-1,"description":"call to Collection AbstractJcrNode.findJcrProperties(Iterator)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2058,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrVersionHistoryNode.java|getVersionLabels|THREAD_SAFETY_VIOLATION","hash":"bb90ef2633927c1c85e9581a662c3349","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String Property.getName()` of un-annotated interface `javax.jcr.Property`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":122,"column":-1,"procedure":"org.modeshape.jcr.JcrVersionHistoryNode.getVersionLabels():java.lang.String[]","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":122,"column_number":-1,"description":"Call to un-annotated interface method String Property.getName()"}],"key":"JcrVersionHistoryNode.java|getVersionLabels|INTERFACE_NOT_THREAD_SAFE","hash":"cb912a752522b8bd628c4e46d4c523be","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEQAAAAEAAAAGQAAABKgsAB6AP+SCTpzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL0pjclZlcnNpb25IaXN0b3J5Tm9kZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `java.lang.String[] JcrVersionHistoryNode.getVersionLabels(Version)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":157,"column":-1,"procedure":"org.modeshape.jcr.JcrVersionHistoryNode.getVersionLabels(javax.jcr.version.Version):java.lang.String[]","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":157,"column_number":-1,"description":"call to Set JcrVersionHistoryNode.versionLabelsFor(Version)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":142,"column_number":-1,"description":"call to PropertyIterator AbstractJcrNode.getProperties()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2073,"column_number":-1,"description":"call to Collection AbstractJcrNode.findJcrProperties(Iterator)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2058,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrVersionHistoryNode.java|getVersionLabels|THREAD_SAFETY_VIOLATION","hash":"5bda2c1cd2e97a2bb1fd047e23e94f45","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `VersionManager JcrWorkspace.getVersionManager()` indirectly reads without synchronization from `this.versionManager`. Potentially races with write in method `JcrWorkspace.versionManager()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":72,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.getVersionManager():javax.jcr.version.VersionManager","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":72,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":72,"column_number":-1,"description":"call to JcrVersionManager JcrWorkspace.getVersionManager()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":664,"column_number":-1,"description":"call to JcrVersionManager JcrWorkspace.versionManager()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":668,"column_number":-1,"description":"access to `this.versionManager`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":671,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":671,"column_number":-1,"description":"access to `this.versionManager`"}],"key":"JcrWorkspace.java|getVersionManager|THREAD_SAFETY_VIOLATION","hash":"650c45bf426d6cab19180bc185b95114","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAHcAAAAIAAAALgAAACKgsAECnAD/kgkxc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JXb3Jrc3BhY2UuamF2YaCwAQKfAP+SCTFzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL0pjcldvcmtzcGFjZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `JcrVersionManager JcrWorkspace.getVersionManager()` indirectly reads without synchronization from `this.versionManager`. Potentially races with write in method `JcrWorkspace.versionManager()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":664,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.getVersionManager():org.modeshape.jcr.JcrVersionManager","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":664,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":664,"column_number":-1,"description":"call to JcrVersionManager JcrWorkspace.versionManager()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":668,"column_number":-1,"description":"access to `this.versionManager`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":671,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":671,"column_number":-1,"description":"access to `this.versionManager`"}],"key":"JcrWorkspace.java|getVersionManager|THREAD_SAFETY_VIOLATION","hash":"37dc42c74b319f388974df875b094976","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAHcAAAAIAAAALgAAACKgsAECnAD/kgkxc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JXb3Jrc3BhY2UuamF2YaCwAQKfAP+SCTFzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL0pjcldvcmtzcGFjZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `String JcrVersionHistoryNode.getVersionableIdentifier()` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":384,"column":-1,"procedure":"org.modeshape.jcr.JcrVersionHistoryNode.getVersionableIdentifier():java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":384,"column_number":-1,"description":"call to String JcrVersionHistoryNode.getVersionableUUID()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":163,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrVersionHistoryNode.java|getVersionableIdentifier|THREAD_SAFETY_VIOLATION","hash":"66008d001a0976d8415a83461c298497","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `String JcrVersionHistoryNode.getVersionableUUID()` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":163,"column":-1,"procedure":"org.modeshape.jcr.JcrVersionHistoryNode.getVersionableUUID():java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":163,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrVersionHistoryNode.java|getVersionableUUID|THREAD_SAFETY_VIOLATION","hash":"8d3f681d3d4963ab0f6fcd5685725e19","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `PropertyDefinition Property.getDefinition()` of un-annotated interface `javax.jcr.Property`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":2158,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.getWeakReferences():javax.jcr.PropertyIterator","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2158,"column_number":-1,"description":"call to PropertyIterator AbstractJcrNode.getWeakReferences(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2164,"column_number":-1,"description":"call to PropertyIterator AbstractJcrNode.propertiesOnOtherNodesReferencingThis(String,int)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2203,"column_number":-1,"description":"Call to un-annotated interface method PropertyDefinition Property.getDefinition()"}],"key":"AbstractJcrNode.java|getWeakReferences|INTERFACE_NOT_THREAD_SAFE","hash":"81ab4898f9d671b4d982abccf44728e6","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEImwD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `PropertyDefinition Property.getDefinition()` of un-annotated interface `javax.jcr.Property`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`.","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.getWeakReferences():javax.jcr.PropertyIterator","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to PropertyIterator AbstractJcrNode.getWeakReferences()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2158,"column_number":-1,"description":"call to PropertyIterator AbstractJcrNode.getWeakReferences(String)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2164,"column_number":-1,"description":"call to PropertyIterator AbstractJcrNode.propertiesOnOtherNodesReferencingThis(String,int)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2203,"column_number":-1,"description":"Call to un-annotated interface method PropertyDefinition Property.getDefinition()"}],"key":"JcrSystemNode.java|getWeakReferences|INTERFACE_NOT_THREAD_SAFE","hash":"c21a7aa6e8d950d7fa39a4ecae51cedc","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEImwD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `PropertyDefinition Property.getDefinition()` of un-annotated interface `javax.jcr.Property`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":2164,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.getWeakReferences(java.lang.String):javax.jcr.PropertyIterator","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2164,"column_number":-1,"description":"call to PropertyIterator AbstractJcrNode.propertiesOnOtherNodesReferencingThis(String,int)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2203,"column_number":-1,"description":"Call to un-annotated interface method PropertyDefinition Property.getDefinition()"}],"key":"AbstractJcrNode.java|getWeakReferences|INTERFACE_NOT_THREAD_SAFE","hash":"06d49057d9dc0a0434a26cd7b9a470b0","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEImwD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `PropertyDefinition Property.getDefinition()` of un-annotated interface `javax.jcr.Property`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`.","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.getWeakReferences(java.lang.String):javax.jcr.PropertyIterator","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to PropertyIterator AbstractJcrNode.getWeakReferences(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2164,"column_number":-1,"description":"call to PropertyIterator AbstractJcrNode.propertiesOnOtherNodesReferencingThis(String,int)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2203,"column_number":-1,"description":"Call to un-annotated interface method PropertyDefinition Property.getDefinition()"}],"key":"JcrSystemNode.java|getWeakReferences|INTERFACE_NOT_THREAD_SAFE","hash":"9061e5e199f6c1b15642c4b0eefb40f7","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEImwD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `boolean LazyCachedNode.hasACL(NodeCache)` indirectly mutates container `keysWithName` via call to `add` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":491,"column":-1,"procedure":"org.modeshape.jcr.cache.document.LazyCachedNode.hasACL(org.modeshape.jcr.cache.NodeCache):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":491,"column_number":-1,"description":"call to ChildReferences LazyCachedNode.getChildReferences(NodeCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":460,"column_number":-1,"description":"call to ChildReferences DocumentTranslator.getChildReferences(WorkspaceCache,Document)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/DocumentTranslator.java","line_number":887,"column_number":-1,"description":"call to ChildReferences ImmutableChildReferences.create(DocumentTranslator,Document,String,boolean)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/ImmutableChildReferences.java","line_number":53,"column_number":-1,"description":"call to ImmutableChildReferences$Medium.<init>(DocumentTranslator,Document,String,boolean)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/ImmutableChildReferences.java","line_number":249,"column_number":-1,"description":"Write to container `keysWithName` via call to `add`"}],"key":"LazyCachedNode.java|hasACL|THREAD_SAFETY_VIOLATION","hash":"0a51cdfcdeee7579faa1d8b731d3df4e","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFcAAAAEAAAAHgAAABSgsAEA+QD/kglMc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9JbW11dGFibGVDaGlsZFJlZmVyZW5jZXMuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `SchematicEntry DocumentStore.get(String)` of un-annotated interface `org.modeshape.jcr.cache.document.DocumentStore`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":1483,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.hasACL(org.modeshape.jcr.cache.NodeCache):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1483,"column_number":-1,"description":"call to ChildReferences SessionNode.getChildReferences(NodeCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1120,"column_number":-1,"description":"call to boolean SessionNode.allowsSNS(NodeCache)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1136,"column_number":-1,"description":"call to Name SessionNode.getPrimaryType(NodeCache)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":495,"column_number":-1,"description":"call to Property SessionNode.getProperty(Name,NodeCache)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":740,"column_number":-1,"description":"call to CachedNode SessionNode.nodeInWorkspace(AbstractSessionCache)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":309,"column_number":-1,"description":"call to CachedNode WorkspaceCache.getNode(NodeKey)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":243,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(NodeKey)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":207,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(String)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":188,"column_number":-1,"description":"Call to un-annotated interface method SchematicEntry DocumentStore.get(String)"}],"key":"SessionNode.java|hasACL|INTERFACE_NOT_THREAD_SAFE","hash":"7c4b0f35b830dfd16992a94a5ffa230a","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEAvAD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xb3Jrc3BhY2VDYWNoZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `boolean BucketedChildReferences.hasChild(NodeKey)` indirectly reads without synchronization from container `this.rangeBucketsById` via call to `get`. Potentially races with write in method `BucketedChildReferences.getChildCount(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":125,"column":-1,"procedure":"org.modeshape.jcr.cache.document.BucketedChildReferences.hasChild(org.modeshape.jcr.cache.NodeKey):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":125,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":125,"column_number":-1,"description":"call to ChildReference BucketedChildReferences.getChild(NodeKey)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":130,"column_number":-1,"description":"call to ChildReference BucketedChildReferences.getChild(NodeKey,ChildReferences$Context)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":138,"column_number":-1,"description":"call to BucketedChildReferences$Bucket BucketedChildReferences.loadBucket(BucketId)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":273,"column_number":-1,"description":"Read of container `this.rangeBucketsById` via call to `get`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":88,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":88,"column_number":-1,"description":"call to BucketedChildReferences$Bucket BucketedChildReferences.bucketFor(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":269,"column_number":-1,"description":"call to BucketedChildReferences$Bucket BucketedChildReferences.loadBucket(BucketId)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":284,"column_number":-1,"description":"Write to container `this.rangeBucketsById` via call to `put`"}],"key":"BucketedChildReferences.java|hasChild|THREAD_SAFETY_VIOLATION","hash":"7fc227449b3a05724b982f5c08ef0efd","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAF8AAAAGAAAAJAAAABugsAEBEQD/kglLc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9CdWNrZXRlZENoaWxkUmVmZXJlbmNlcy5qYXZhoLABARwA/wQEQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `boolean ChildReferences.hasChild(NodeKey)` of un-annotated interface `org.modeshape.jcr.cache.ChildReferences`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":131,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionChildReferences.hasChild(org.modeshape.jcr.cache.NodeKey):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionChildReferences.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionChildReferences.java","line_number":131,"column_number":-1,"description":"Call to un-annotated interface method boolean ChildReferences.hasChild(NodeKey)"}],"key":"SessionChildReferences.java|hasChild|INTERFACE_NOT_THREAD_SAFE","hash":"1f99f4d75ae41e054e7f3d00b80dac60","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAFUAAAAEAAAAHQAAABSgsAEAgwD/kglKc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9TZXNzaW9uQ2hpbGRSZWZlcmVuY2VzLmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `boolean Multimap.isEmpty()` of un-annotated interface `org.modeshape.common.collection.Multimap`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":208,"column":-1,"procedure":"org.modeshape.jcr.JcrNodeType.hasChildNodeDefinitions():boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrNodeType.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":208,"column_number":-1,"description":"call to boolean DefinitionCache.anyChildNodeDefinitions()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/DefinitionCache.java","line_number":214,"column_number":-1,"description":"Call to un-annotated interface method boolean Multimap.isEmpty()"}],"key":"JcrNodeType.java|hasChildNodeDefinitions|INTERFACE_NOT_THREAD_SAFE","hash":"6cfb1787dad4ae67f9ce8326f546b648","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEA1gD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9EZWZpbml0aW9uQ2FjaGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `boolean Connectors$Snapshot.hasConnectors()` reads without synchronization from container `this.sourceKeyToConnectorMap` via call to `isEmpty`. Potentially races with write in method `Connectors$Snapshot.shutdownConnectors()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":756,"column":-1,"procedure":"org.modeshape.jcr.Connectors$Snapshot.hasConnectors():boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/Connectors.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/Connectors.java","line_number":756,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/Connectors.java","line_number":756,"column_number":-1,"description":"Read of container `this.sourceKeyToConnectorMap` via call to `isEmpty`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/Connectors.java","line_number":725,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/Connectors.java","line_number":725,"column_number":-1,"description":"Write to container `this.sourceKeyToConnectorMap` via call to `clear`"}],"key":"Connectors.java|hasConnectors|THREAD_SAFETY_VIOLATION","hash":"c2e08e5b9423be0beb85ec454994294c","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAHMAAAAIAAAALAAAACCgsAEC9AD/kgkvc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9Db25uZWN0b3JzLmphdmGgsAEC1QD/kgkvc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9Db25uZWN0b3JzLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `boolean AbstractJcrNode.hasNode(String)` indirectly reads without synchronization from `this.session.rootNode.key.workspaceKey`. Potentially races with write in method `AbstractJcrNode.addNode(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":734,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.hasNode(java.lang.String):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":734,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":734,"column_number":-1,"description":"call to boolean JcrSession.hasPermission(String,String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1594,"column_number":-1,"description":"call to boolean JcrSession.hasPermissionOnExternalPath(JcrSession$PathSupplier,java.lang.String[])"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1444,"column_number":-1,"description":"call to boolean Connectors.isReadonlyPath(Path,JcrSession)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/Connectors.java","line_number":636,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(Path)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":674,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.getNodeByIdentifier(String)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":790,"column_number":-1,"description":"call to NodeKey NodeKey.withId(String)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":229,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":165,"column_number":-1,"description":"access to `this.session.rootNode.key.workspaceKey`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":977,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":977,"column_number":-1,"description":"call to AbstractJcrNode AbstractJcrNode.addNode(String,String,NodeKey,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1045,"column_number":-1,"description":"call to AbstractJcrItem JcrSession.findItem(AbstractJcrNode,Path)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":699,"column_number":-1,"description":"call to AbstractJcrItem JcrSession.getItem(Path)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":880,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(Path)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":674,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.getNodeByIdentifier(String)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":790,"column_number":-1,"description":"call to NodeKey NodeKey.withId(String)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":229,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `this.session.rootNode.key.workspaceKey`"}],"key":"AbstractJcrNode.java|hasNode|THREAD_SAFETY_VIOLATION","hash":"bd73c25bceec6ec67ac2417d2fe3ec9a","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAHkAAAAIAAAALgAAACKgsAEApQD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Set CachedNode.getAdditionalParentKeys(NodeCache)` of un-annotated interface `org.modeshape.jcr.cache.CachedNode`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":740,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.hasNode(java.lang.String):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":740,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,Path)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":659,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":602,"column_number":-1,"description":"call to AbstractJcrNode JcrSharedNodeCache$SharedSet.getSharedNode(CachedNode,NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSharedNodeCache.java","line_number":164,"column_number":-1,"description":"Call to un-annotated interface method Set CachedNode.getAdditionalParentKeys(NodeCache)"}],"key":"AbstractJcrNode.java|hasNode|INTERFACE_NOT_THREAD_SAFE","hash":"3e95a6d8304be158e9825028493e8e87","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEIAAAAEAAAAGAAAABGgsAEApAD/kgk3c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JTaGFyZWROb2RlQ2FjaGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `boolean AbstractJcrNode.hasNode(String)` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":757,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.hasNode(java.lang.String):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":757,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"AbstractJcrNode.java|hasNode|THREAD_SAFETY_VIOLATION","hash":"f6f8b1e64320f2409c1ef1b48be53aa3","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `boolean AbstractJcrNode.hasNode(String)` indirectly reads without synchronization from `nodeKey.workspaceKey`. Potentially races with write in method `AbstractJcrNode.addNode(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":720,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.hasNode(java.lang.String):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":720,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":720,"column_number":-1,"description":"call to boolean JcrSession.hasPermission(String,String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1594,"column_number":-1,"description":"call to boolean JcrSession.hasPermissionOnExternalPath(JcrSession$PathSupplier,java.lang.String[])"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1444,"column_number":-1,"description":"call to boolean Connectors.isReadonlyPath(Path,JcrSession)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/Connectors.java","line_number":636,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(Path)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":674,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.getNodeByIdentifier(String)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":778,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":165,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":977,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":977,"column_number":-1,"description":"call to AbstractJcrNode AbstractJcrNode.addNode(String,String,NodeKey,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1045,"column_number":-1,"description":"call to AbstractJcrItem JcrSession.findItem(AbstractJcrNode,Path)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":699,"column_number":-1,"description":"call to AbstractJcrItem JcrSession.getItem(Path)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":880,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(Path)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":677,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,Path)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":659,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"AbstractJcrNode.java|hasNode|THREAD_SAFETY_VIOLATION","hash":"bcf461651a455b9be6d0a8b2a1a12f84","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAHkAAAAIAAAALgAAACKgsAEApQD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `boolean JcrSystemNode.hasNode(String)` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.hasNode(java.lang.String):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to boolean AbstractJcrNode.hasNode(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":757,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"JcrSystemNode.java|hasNode|THREAD_SAFETY_VIOLATION","hash":"a7444cec7603b92533b21b00ffe137ce","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `ChildReferences CachedNode.getChildReferences(NodeCache)` of un-annotated interface `org.modeshape.jcr.cache.CachedNode`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":2266,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.hasNodes():boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2266,"column_number":-1,"description":"call to NodeIterator AbstractJcrNode.getNodes()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":842,"column_number":-1,"description":"Call to un-annotated interface method ChildReferences CachedNode.getChildReferences(NodeCache)"}],"key":"AbstractJcrNode.java|hasNodes|INTERFACE_NOT_THREAD_SAFE","hash":"72e201d2a4ef3aa070db0be3c5c9c46e","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEDSgD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `ChildReferences CachedNode.getChildReferences(NodeCache)` of un-annotated interface `org.modeshape.jcr.cache.CachedNode`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`.","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.hasNodes():boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to boolean AbstractJcrNode.hasNodes()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2266,"column_number":-1,"description":"call to NodeIterator AbstractJcrNode.getNodes()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":842,"column_number":-1,"description":"Call to un-annotated interface method ChildReferences CachedNode.getChildReferences(NodeCache)"}],"key":"JcrSystemNode.java|hasNodes|INTERFACE_NOT_THREAD_SAFE","hash":"88308b3bd2205289326210461972b4f9","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEDSgD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `CachedNode SessionCache.getNode(NodeKey)` of un-annotated interface `org.modeshape.jcr.cache.SessionCache`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":2272,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.hasProperties():boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2272,"column_number":-1,"description":"call to CachedNode AbstractJcrNode.node()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":201,"column_number":-1,"description":"Call to un-annotated interface method CachedNode SessionCache.getNode(NodeKey)"}],"key":"AbstractJcrNode.java|hasProperties|INTERFACE_NOT_THREAD_SAFE","hash":"59ddd60fc4667ebd2ae195877bf3f6c5","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEAyQD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `CachedNode SessionCache.getNode(NodeKey)` of un-annotated interface `org.modeshape.jcr.cache.SessionCache`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`.","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.hasProperties():boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to boolean AbstractJcrNode.hasProperties()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2272,"column_number":-1,"description":"call to CachedNode AbstractJcrNode.node()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":201,"column_number":-1,"description":"Call to un-annotated interface method CachedNode SessionCache.getNode(NodeKey)"}],"key":"JcrSystemNode.java|hasProperties|INTERFACE_NOT_THREAD_SAFE","hash":"f77c66c2f325c49e990ae1d37c75b67a","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEAyQD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Iterable Document.fields()` of un-annotated interface `org.infinispan.schematic.document.Document`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":384,"column":-1,"procedure":"org.modeshape.jcr.cache.document.LazyCachedNode.hasProperties(org.modeshape.jcr.cache.NodeCache):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":384,"column_number":-1,"description":"call to boolean DocumentTranslator.hasProperties(Document)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/DocumentTranslator.java","line_number":284,"column_number":-1,"description":"Call to un-annotated interface method Iterable Document.fields()"}],"key":"LazyCachedNode.java|hasProperties|INTERFACE_NOT_THREAD_SAFE","hash":"835bced790722236db1407f92efaf6fb","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAFEAAAAEAAAAHAAAABOgsAEBHAD/kglGc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Eb2N1bWVudFRyYW5zbGF0b3IuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `SchematicEntry DocumentStore.get(String)` of un-annotated interface `org.modeshape.jcr.cache.document.DocumentStore`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":717,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.hasProperties(org.modeshape.jcr.cache.NodeCache):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":717,"column_number":-1,"description":"call to CachedNode SessionNode.nodeInWorkspace(AbstractSessionCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":309,"column_number":-1,"description":"call to CachedNode WorkspaceCache.getNode(NodeKey)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":243,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":207,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(String)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":188,"column_number":-1,"description":"Call to un-annotated interface method SchematicEntry DocumentStore.get(String)"}],"key":"SessionNode.java|hasProperties|INTERFACE_NOT_THREAD_SAFE","hash":"862bdff7c9cbd7b995970ae03193bcf4","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEAvAD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xb3Jrc3BhY2VDYWNoZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `boolean AbstractJcrNode.hasProperty(String)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":2248,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.hasProperty(java.lang.String):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2248,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":336,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|hasProperty|THREAD_SAFETY_VIOLATION","hash":"bdedf5482554ac4ac18f0392b65184e3","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `boolean JcrSystemNode.hasProperty(String)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.hasProperty(java.lang.String):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to boolean AbstractJcrNode.hasProperty(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2248,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(String)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":336,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrSystemNode.java|hasProperty|THREAD_SAFETY_VIOLATION","hash":"2cd8cf9915d20e6c15583ecd960ca62b","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `CachedNode SessionCache.getNode(NodeKey)` of un-annotated interface `org.modeshape.jcr.cache.SessionCache`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":530,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.hasProperty(org.modeshape.jcr.value.Name):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":530,"column_number":-1,"description":"call to CachedNode AbstractJcrNode.node()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":201,"column_number":-1,"description":"Call to un-annotated interface method CachedNode SessionCache.getNode(NodeKey)"}],"key":"AbstractJcrNode.java|hasProperty|INTERFACE_NOT_THREAD_SAFE","hash":"aae70c9ba7ab13ff7b23d0804a054894","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEAyQD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Object Document.get(String)` of un-annotated interface `org.infinispan.schematic.document.Document`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":394,"column":-1,"procedure":"org.modeshape.jcr.cache.document.LazyCachedNode.hasProperty(org.modeshape.jcr.value.Name,org.modeshape.jcr.cache.NodeCache):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":394,"column_number":-1,"description":"call to boolean DocumentTranslator.hasProperty(Document,Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/DocumentTranslator.java","line_number":312,"column_number":-1,"description":"Call to un-annotated interface method Object Document.get(String)"}],"key":"LazyCachedNode.java|hasProperty|INTERFACE_NOT_THREAD_SAFE","hash":"0d9f30f1ab7d1b9542b88a7e7c9e7c75","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAFEAAAAEAAAAHAAAABOgsAEBOAD/kglGc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Eb2N1bWVudFRyYW5zbGF0b3IuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `SchematicEntry DocumentStore.get(String)` of un-annotated interface `org.modeshape.jcr.cache.document.DocumentStore`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":728,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.hasProperty(org.modeshape.jcr.value.Name,org.modeshape.jcr.cache.NodeCache):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":728,"column_number":-1,"description":"call to CachedNode SessionNode.nodeInWorkspace(AbstractSessionCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":309,"column_number":-1,"description":"call to CachedNode WorkspaceCache.getNode(NodeKey)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":243,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":207,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(String)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":188,"column_number":-1,"description":"Call to un-annotated interface method SchematicEntry DocumentStore.get(String)"}],"key":"SessionNode.java|hasProperty|INTERFACE_NOT_THREAD_SAFE","hash":"b36c0b7607964ef0904f2e67eeda64c7","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEAvAD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xb3Jrc3BhY2VDYWNoZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `boolean Multimap.isEmpty()` of un-annotated interface `org.modeshape.common.collection.Multimap`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":226,"column":-1,"procedure":"org.modeshape.jcr.JcrNodeType.hasPropertyDefinitions():boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrNodeType.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":226,"column_number":-1,"description":"call to boolean DefinitionCache.anyPropertyDefinitions()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/DefinitionCache.java","line_number":185,"column_number":-1,"description":"Call to un-annotated interface method boolean Multimap.isEmpty()"}],"key":"JcrNodeType.java|hasPropertyDefinitions|INTERFACE_NOT_THREAD_SAFE","hash":"1db703bb2aa8162b8cdce58d2e97948c","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEAuQD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9EZWZpbml0aW9uQ2FjaGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `boolean JcrVersionHistoryNode.hasVersionLabel(String)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":168,"column":-1,"procedure":"org.modeshape.jcr.JcrVersionHistoryNode.hasVersionLabel(java.lang.String):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":168,"column_number":-1,"description":"call to boolean AbstractJcrNode.hasProperty(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2248,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(String)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":336,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrVersionHistoryNode.java|hasVersionLabel|THREAD_SAFETY_VIOLATION","hash":"f0bac92bc1d9cf0dc74326490e8f1a43","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `boolean JcrVersionHistoryNode.hasVersionLabel(Version,String)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":174,"column":-1,"procedure":"org.modeshape.jcr.JcrVersionHistoryNode.hasVersionLabel(javax.jcr.version.Version,java.lang.String):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":174,"column_number":-1,"description":"call to Set JcrVersionHistoryNode.versionLabelsFor(Version)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":142,"column_number":-1,"description":"call to PropertyIterator AbstractJcrNode.getProperties()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2073,"column_number":-1,"description":"call to Collection AbstractJcrNode.findJcrProperties(Iterator)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2058,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrVersionHistoryNode.java|hasVersionLabel|THREAD_SAFETY_VIOLATION","hash":"1422047896cd327b9901527363c37122","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `boolean JcrLockManager.holdsLock(String)` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":216,"column":-1,"procedure":"org.modeshape.jcr.JcrLockManager.holdsLock(java.lang.String):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrLockManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrLockManager.java","line_number":216,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(Path)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":677,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,Path)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":659,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"JcrLockManager.java|holdsLock|THREAD_SAFETY_VIOLATION","hash":"ef435b74bfc9aca68557ee2cd6b84373","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `NodeKey SessionCache.getRootKey()` of un-annotated interface `org.modeshape.jcr.cache.SessionCache`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":285,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.identifierPath():java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":285,"column_number":-1,"description":"call to String AbstractJcrNode.getIdentifier()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":275,"column_number":-1,"description":"call to String JcrSession.nodeIdentifier(NodeKey)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1969,"column_number":-1,"description":"Call to un-annotated interface method NodeKey SessionCache.getRootKey()"}],"key":"AbstractJcrNode.java|identifierPath|INTERFACE_NOT_THREAD_SAFE","hash":"ea9f32ee7a85aa577e78bba6fd814950","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAADoAAAAEAAAAFgAAABCgsAEHsQD/kgkvc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JTZXNzaW9uLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void RepositoryIndexManager.importIndexDefinitions()` indirectly reads with synchronization from container `byProvider` via call to `get`. Potentially races with unsynchronized write in method `RepositoryIndexManager.registerIndexes(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":220,"column":-1,"procedure":"org.modeshape.jcr.RepositoryIndexManager.importIndexDefinitions():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":220,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":220,"column_number":-1,"description":"call to void RepositoryIndexManager.registerIndexes(org.modeshape.jcr.api.index.IndexDefinition[],boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":529,"column_number":-1,"description":"call to RepositoryIndexes RepositoryIndexManager.readIndexDefinitions()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":817,"column_number":-1,"description":"call to RepositoryIndexManager$Indexes.<init>(ExecutionContext,Collection,NodeTypes)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":878,"column_number":-1,"description":"Read of container `byProvider` via call to `get`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":529,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":529,"column_number":-1,"description":"call to RepositoryIndexes RepositoryIndexManager.readIndexDefinitions()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":817,"column_number":-1,"description":"call to RepositoryIndexManager$Indexes.<init>(ExecutionContext,Collection,NodeTypes)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":881,"column_number":-1,"description":"Write to container `byProvider` via call to `put`"}],"key":"RepositoryIndexManager.java|importIndexDefinitions|THREAD_SAFETY_VIOLATION","hash":"965c3bb434c4a1454c64b7a8c798f53d","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAIsAAAAIAAAAMgAAACSgsAEDbgD/kgk7c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9SZXBvc2l0b3J5SW5kZXhNYW5hZ2VyLmphdmGgsAEDcQD/kgk7c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9SZXBvc2l0b3J5SW5kZXhNYW5hZ2VyLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void JcrWorkspace.importXML(String,InputStream,int)` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":736,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.importXML(java.lang.String,java.io.InputStream,int):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":736,"column_number":-1,"description":"call to ContentHandler JcrWorkspace.getImportContentHandler(String,int)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":712,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.getNode(String)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":844,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.getNode(String,boolean)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":861,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(Path)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":677,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,Path)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":659,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"JcrWorkspace.java|importXML|THREAD_SAFETY_VIOLATION","hash":"8d2a4107fb13c396da8b5f2aec35f6cc","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `void XMLReader.parse(InputSource)` of un-annotated interface `org.xml.sax.XMLReader`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":737,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.importXML(java.lang.String,java.io.InputStream,int):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":737,"column_number":-1,"description":"Call to un-annotated interface method void XMLReader.parse(InputSource)"}],"key":"JcrWorkspace.java|importXML|INTERFACE_NOT_THREAD_SAFE","hash":"33a902f1f1d7ada20db3094956b2022d","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAADwAAAAEAAAAFwAAABGgsAEC4QD/kgkxc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JXb3Jrc3BhY2UuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void ClusteringService$ForkedClusteringService.init()` mutates container `existingForksForChannel` via call to `add` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.clustering.ClusteringService` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":564,"column":-1,"procedure":"org.modeshape.jcr.clustering.ClusteringService$ForkedClusteringService.init():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","line_number":564,"column_number":-1,"description":"Write to container `existingForksForChannel` via call to `add`"}],"key":"ClusteringService.java|init|THREAD_SAFETY_VIOLATION","hash":"0d67d5b13b88e06b943ff8afac17758b","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEwAAAAEAAAAGwAAABOgsAECNAD/kglBc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jbHVzdGVyaW5nL0NsdXN0ZXJpbmdTZXJ2aWNlLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void ClusteringService$ForkedClusteringService.init()` reads without synchronization from container `clustering.ClusteringService$ForkedClusteringService.FORK_STACKS_BY_CHANNEL_NAME` via call to `get`. Potentially races with write in method `ClusteringService$ForkedClusteringService.shutdown()`.\n Reporting because a superclass `class org.modeshape.jcr.clustering.ClusteringService` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":559,"column":-1,"procedure":"org.modeshape.jcr.clustering.ClusteringService$ForkedClusteringService.init():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","line_number":559,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","line_number":559,"column_number":-1,"description":"Read of container `clustering.ClusteringService$ForkedClusteringService.FORK_STACKS_BY_CHANNEL_NAME` via call to `get`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","line_number":580,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","line_number":580,"column_number":-1,"description":"Write to container `clustering.ClusteringService$ForkedClusteringService.FORK_STACKS_BY_CHANNEL_NAME` via call to `remove`"}],"key":"ClusteringService.java|init|THREAD_SAFETY_VIOLATION","hash":"9bdfaa245e2fc7d33f0a2d930cd96afd","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAJcAAAAIAAAANgAAACagsAECLwD/kglBc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jbHVzdGVyaW5nL0NsdXN0ZXJpbmdTZXJ2aWNlLmphdmGgsAECRAD/kglBc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jbHVzdGVyaW5nL0NsdXN0ZXJpbmdTZXJ2aWNlLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void ClusteringService$ForkedClusteringService.init()` writes to field `this.channel` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.clustering.ClusteringService` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":541,"column":-1,"procedure":"org.modeshape.jcr.clustering.ClusteringService$ForkedClusteringService.init():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","line_number":541,"column_number":-1,"description":"access to `this.channel`"}],"key":"ClusteringService.java|init|THREAD_SAFETY_VIOLATION","hash":"d119c22ba57828a84fda2504ebb76d62","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEwAAAAEAAAAGwAAABOgsAECHQD/kglBc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jbHVzdGVyaW5nL0NsdXN0ZXJpbmdTZXJ2aWNlLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void ClusteringService$ForkedClusteringService.init()` reads without synchronization from `this.channel`. Potentially races with write in method `ClusteringService$ForkedClusteringService.shutdown()`.\n Reporting because a superclass `class org.modeshape.jcr.clustering.ClusteringService` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":544,"column":-1,"procedure":"org.modeshape.jcr.clustering.ClusteringService$ForkedClusteringService.init():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","line_number":544,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","line_number":544,"column_number":-1,"description":"access to `this.channel`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","line_number":574,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","line_number":574,"column_number":-1,"description":"call to boolean ClusteringService.shutdown()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","line_number":177,"column_number":-1,"description":"access to `this.channel`"}],"key":"ClusteringService.java|init|THREAD_SAFETY_VIOLATION","hash":"96678ec967d4bea6eba63d36ba4549b1","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAJcAAAAIAAAANgAAACagsAECIAD/kglBc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jbHVzdGVyaW5nL0NsdXN0ZXJpbmdTZXJ2aWNlLmphdmGgsAEAsQD/kglBc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jbHVzdGVyaW5nL0NsdXN0ZXJpbmdTZXJ2aWNlLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void ClusteringService$ForkedClusteringService.init()` mutates container `clustering.ClusteringService$ForkedClusteringService.FORK_STACKS_BY_CHANNEL_NAME` via call to `put` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.clustering.ClusteringService` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":562,"column":-1,"procedure":"org.modeshape.jcr.clustering.ClusteringService$ForkedClusteringService.init():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","line_number":562,"column_number":-1,"description":"Write to container `clustering.ClusteringService$ForkedClusteringService.FORK_STACKS_BY_CHANNEL_NAME` via call to `put`"}],"key":"ClusteringService.java|init|THREAD_SAFETY_VIOLATION","hash":"8e44456446a5bf7aba79829db1fbf0b3","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEwAAAAEAAAAGwAAABOgsAECMgD/kglBc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jbHVzdGVyaW5nL0NsdXN0ZXJpbmdTZXJ2aWNlLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void ClusteringService$StandaloneClusteringService.init()` writes to field `this.channel` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.clustering.ClusteringService` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":458,"column":-1,"procedure":"org.modeshape.jcr.clustering.ClusteringService$StandaloneClusteringService.init():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","line_number":458,"column_number":-1,"description":"access to `this.channel`"}],"key":"ClusteringService.java|init|THREAD_SAFETY_VIOLATION","hash":"9321778263c39f18aa184d8253cc1f9c","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEwAAAAEAAAAGwAAABOgsAEBygD/kglBc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jbHVzdGVyaW5nL0NsdXN0ZXJpbmdTZXJ2aWNlLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void ClusteringService$StandaloneClusteringService.init()` reads without synchronization from `this.channel`. Potentially races with write in method `ClusteringService$StandaloneClusteringService.init()`.\n Reporting because a superclass `class org.modeshape.jcr.clustering.ClusteringService` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":460,"column":-1,"procedure":"org.modeshape.jcr.clustering.ClusteringService$StandaloneClusteringService.init():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","line_number":460,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","line_number":460,"column_number":-1,"description":"access to `this.channel`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","line_number":458,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","line_number":458,"column_number":-1,"description":"access to `this.channel`"}],"key":"ClusteringService.java|init|THREAD_SAFETY_VIOLATION","hash":"44fcc542bfb9f0e1b44c1ce81fa84625","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFUAAAAGAAAAIgAAABqgsAEBzAD/kglBc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jbHVzdGVyaW5nL0NsdXN0ZXJpbmdTZXJ2aWNlLmphdmGgsAEBygD/BARA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void ClusteringService$StandaloneClusteringService.init()` writes to field `this.lockService` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.clustering.ClusteringService` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":469,"column":-1,"procedure":"org.modeshape.jcr.clustering.ClusteringService$StandaloneClusteringService.init():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","line_number":469,"column_number":-1,"description":"access to `this.lockService`"}],"key":"ClusteringService.java|init|THREAD_SAFETY_VIOLATION","hash":"bb8eff75316e6d720e779bf0aee8108e","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEwAAAAEAAAAGwAAABOgsAEB1QD/kglBc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jbHVzdGVyaW5nL0NsdXN0ZXJpbmdTZXJ2aWNlLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void ContentDetector.initDetector(ClassLoader)` reads without synchronization from `this.detector`. Potentially races with write in method `ContentDetector.initDetector(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":59,"column":-1,"procedure":"org.modeshape.jcr.mimetype.ContentDetector.initDetector(java.lang.ClassLoader):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/mimetype/ContentDetector.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/mimetype/ContentDetector.java","line_number":59,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/mimetype/ContentDetector.java","line_number":59,"column_number":-1,"description":"access to `this.detector`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/mimetype/ContentDetector.java","line_number":57,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/mimetype/ContentDetector.java","line_number":57,"column_number":-1,"description":"access to `this.detector`"}],"key":"ContentDetector.java|initDetector|THREAD_SAFETY_VIOLATION","hash":"3e500dfd37c8fa47ad389c092c6be400","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAE0AAAAGAAAAIQAAABmgsHsA/5IJPXNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvbWltZXR5cGUvQ29udGVudERldGVjdG9yLmphdmGgsHkA/wQEQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void ContentDetector.initDetector(ClassLoader)` writes to field `this.detector` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":57,"column":-1,"procedure":"org.modeshape.jcr.mimetype.ContentDetector.initDetector(java.lang.ClassLoader):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/mimetype/ContentDetector.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/mimetype/ContentDetector.java","line_number":57,"column_number":-1,"description":"access to `this.detector`"}],"key":"ContentDetector.java|initDetector|THREAD_SAFETY_VIOLATION","hash":"28ce2b3d2c08d0d1bec821c451cde0f3","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEYAAAAEAAAAGgAAABKgsHkA/5IJPXNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvbWltZXR5cGUvQ29udGVudERldGVjdG9yLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void NameOnlyDetector.initDetector(ClassLoader)` writes to field `this.detector` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":54,"column":-1,"procedure":"org.modeshape.jcr.mimetype.NameOnlyDetector.initDetector(java.lang.ClassLoader):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/mimetype/NameOnlyDetector.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/mimetype/NameOnlyDetector.java","line_number":54,"column_number":-1,"description":"access to `this.detector`"}],"key":"NameOnlyDetector.java|initDetector|THREAD_SAFETY_VIOLATION","hash":"3b5ec06bad962a7fec0655a06f3a8dd6","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEcAAAAEAAAAGgAAABKgsHYA/5IJPnNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvbWltZXR5cGUvTmFtZU9ubHlEZXRlY3Rvci5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void Connectors.initialize()` indirectly reads with synchronization from `nodeKey.workspaceKey`. Potentially races with unsynchronized write in method `Connectors.isReadonlyPath(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":118,"column":-1,"procedure":"org.modeshape.jcr.Connectors.initialize():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/Connectors.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/Connectors.java","line_number":118,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/Connectors.java","line_number":118,"column_number":-1,"description":"call to void Connectors.createPreconfiguredProjections()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/Connectors.java","line_number":148,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.getNode(String)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":844,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.getNode(String,boolean)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":861,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(Path)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":674,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.getNodeByIdentifier(String)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":778,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":165,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/Connectors.java","line_number":636,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/Connectors.java","line_number":636,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(Path)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":677,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,Path)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":659,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"Connectors.java|initialize|THREAD_SAFETY_VIOLATION","hash":"63aafb9e71d845f034f116008bfc757a","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAHkAAAAIAAAALgAAACKgsAEApQD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `RepositoryIndexManager$ScanningTasks RepositoryIndexManager.initialize()` indirectly reads with synchronization from container `byProvider` via call to `get`. Potentially races with unsynchronized write in method `RepositoryIndexManager.registerIndexes(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":172,"column":-1,"procedure":"org.modeshape.jcr.RepositoryIndexManager.initialize():org.modeshape.jcr.RepositoryIndexManager$ScanningTasks","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":172,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":172,"column_number":-1,"description":"call to RepositoryIndexes RepositoryIndexManager.readIndexDefinitions()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":817,"column_number":-1,"description":"call to RepositoryIndexManager$Indexes.<init>(ExecutionContext,Collection,NodeTypes)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":878,"column_number":-1,"description":"Read of container `byProvider` via call to `get`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":529,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":529,"column_number":-1,"description":"call to RepositoryIndexes RepositoryIndexManager.readIndexDefinitions()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":817,"column_number":-1,"description":"call to RepositoryIndexManager$Indexes.<init>(ExecutionContext,Collection,NodeTypes)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":881,"column_number":-1,"description":"Write to container `byProvider` via call to `put`"}],"key":"RepositoryIndexManager.java|initialize|THREAD_SAFETY_VIOLATION","hash":"8c3cc2991b39baaae0bda760bdfc873c","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAIsAAAAIAAAAMgAAACSgsAEDbgD/kgk7c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9SZXBvc2l0b3J5SW5kZXhNYW5hZ2VyLmphdmGgsAEDcQD/kgk7c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9SZXBvc2l0b3J5SW5kZXhNYW5hZ2VyLmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `LocalDocumentStore DocumentStore.localStore()` of un-annotated interface `org.modeshape.jcr.cache.document.DocumentStore`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":494,"column":-1,"procedure":"org.modeshape.jcr.Connectors.initializeConnector(org.modeshape.jcr.spi.federation.Connector,javax.jcr.NamespaceRegistry,org.modeshape.jcr.api.nodetype.NodeTypeManager):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/Connectors.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/Connectors.java","line_number":494,"column_number":-1,"description":"Call to un-annotated interface method LocalDocumentStore DocumentStore.localStore()"}],"key":"Connectors.java|initializeConnector|INTERFACE_NOT_THREAD_SAFE","hash":"c409b41d565ac65aa01bd53b9dd4d2e2","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAADoAAAAEAAAAFgAAABCgsAEB7gD/kgkvc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9Db25uZWN0b3JzLmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Iterable Document.fields()` of un-annotated interface `org.infinispan.schematic.document.Document`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":448,"column":-1,"procedure":"org.modeshape.jcr.Connectors.instantiateConnector(org.modeshape.jcr.RepositoryConfiguration$Component):org.modeshape.jcr.spi.federation.Connector","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/Connectors.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/Connectors.java","line_number":448,"column_number":-1,"description":"call to Object RepositoryConfiguration$Component.createInstance(ClassLoader)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryConfiguration.java","line_number":2776,"column_number":-1,"description":"call to Object RepositoryConfiguration$Component.createGenericComponent(ClassLoader)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/RepositoryConfiguration.java","line_number":2788,"column_number":-1,"description":"call to void RepositoryConfiguration$Component.setTypeFields(Object,Document)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/RepositoryConfiguration.java","line_number":2819,"column_number":-1,"description":"Call to un-annotated interface method Iterable Document.fields()"}],"key":"Connectors.java|instantiateConnector|INTERFACE_NOT_THREAD_SAFE","hash":"030bd5d68788cb96bce5e13aacfb22a6","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEcAAAAEAAAAGgAAABKgsAELAwD/kgk8c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9SZXBvc2l0b3J5Q29uZmlndXJhdGlvbi5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `void MutableCachedNode.addInternalProperty(String,Object)` of un-annotated interface `org.modeshape.jcr.cache.MutableCachedNode`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":477,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.internalClone(java.lang.String,java.lang.String,java.lang.String,boolean,boolean):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":477,"column_number":-1,"description":"call to AbstractJcrNode AbstractJcrNode.addChildNode(Name,Name,NodeKey,boolean,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1195,"column_number":-1,"description":"Call to un-annotated interface method void MutableCachedNode.addInternalProperty(String,Object)"}],"key":"JcrWorkspace.java|internalClone|INTERFACE_NOT_THREAD_SAFE","hash":"1f4e1bdbd3b8971599fcb5bdb24bdfba","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEEqwD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void JcrWorkspace.internalClone(String,String,String,boolean,boolean)` indirectly writes to field `sourceKey.sourceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":381,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.internalClone(java.lang.String,java.lang.String,java.lang.String,boolean,boolean):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":381,"column_number":-1,"description":"call to void JcrWorkspace.validateCloneForExternalNodes(boolean,JcrSession,AbstractJcrNode,AbstractJcrNode)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":504,"column_number":-1,"description":"call to String NodeKey.getSourceKey()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":154,"column_number":-1,"description":"access to `sourceKey.sourceKey`"}],"key":"JcrWorkspace.java|internalClone|THREAD_SAFETY_VIOLATION","hash":"d2d0c6edd0088bd090830fef77c4b041","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEAmgD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void JcrWorkspace.internalClone(String,String,String,boolean,boolean)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":482,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.internalClone(java.lang.String,java.lang.String,java.lang.String,boolean,boolean):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":482,"column_number":-1,"description":"call to void JcrWorkspace.deepClone(JcrSession,NodeKey,JcrSession,NodeKey)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":841,"column_number":-1,"description":"call to JcrVersionNode AbstractJcrNode.getBaseVersion()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3294,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrWorkspace.java|internalClone|THREAD_SAFETY_VIOLATION","hash":"8b3b4a9a4effe856a658d29e2ef55d0e","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void JcrWorkspace.internalClone(String,String,String,boolean,boolean)` indirectly writes to field `srcKey.sourceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":430,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.internalClone(java.lang.String,java.lang.String,java.lang.String,boolean,boolean):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":430,"column_number":-1,"description":"call to String NodeKey.getSourceKey()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":154,"column_number":-1,"description":"access to `srcKey.sourceKey`"}],"key":"JcrWorkspace.java|internalClone|THREAD_SAFETY_VIOLATION","hash":"2471846c8c20bb558b1b2dfbe8536b09","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEAmgD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void JcrWorkspace.internalClone(String,String,String,boolean,boolean)` indirectly writes to field `parentKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":349,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.internalClone(java.lang.String,java.lang.String,java.lang.String,boolean,boolean):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":349,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(Path)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":677,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,Path)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":662,"column_number":-1,"description":"call to AbstractJcrNode JcrSharedNodeCache$SharedSet.getSharedNodeAtOrBelow(Path)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSharedNodeCache.java","line_number":190,"column_number":-1,"description":"call to NodeIterator JcrSharedNodeCache$SharedSet.getSharedNodes()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSharedNodeCache.java","line_number":243,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `parentKey.workspaceKey`"}],"key":"JcrWorkspace.java|internalClone|THREAD_SAFETY_VIOLATION","hash":"27d7be8d670e8ae9b24ff5dbf72347aa","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void JcrWorkspace.internalClone(String,String,String,boolean,boolean)` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":376,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.internalClone(java.lang.String,java.lang.String,java.lang.String,boolean,boolean):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":376,"column_number":-1,"description":"call to Lock JcrLockManager.getLockIfExists(AbstractJcrNode)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrLockManager.java","line_number":178,"column_number":-1,"description":"call to Lock RepositoryLockManager$ModeShapeLock.lockFor(JcrSession)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","line_number":661,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"JcrWorkspace.java|internalClone|THREAD_SAFETY_VIOLATION","hash":"7c958dda4504a7f001e7109e89f3398d","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void JcrWorkspace.internalClone(String,String,String,boolean,boolean)` indirectly writes to field `sourceKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":416,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.internalClone(java.lang.String,java.lang.String,java.lang.String,boolean,boolean):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":416,"column_number":-1,"description":"call to Set JcrWorkspace.filterNodeKeysForClone(Set,SessionCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":521,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `sourceKey.workspaceKey`"}],"key":"JcrWorkspace.java|internalClone|THREAD_SAFETY_VIOLATION","hash":"83e622d689c8ef8264935817a750b894","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void JcrWorkspace.internalClone(String,String,String,boolean,boolean)` indirectly reads without synchronization from `nodeKey.workspaceKey`. Potentially races with write in method `JcrWorkspace.deleteWorkspace(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":310,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.internalClone(java.lang.String,java.lang.String,java.lang.String,boolean,boolean):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":310,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":310,"column_number":-1,"description":"call to void JcrWorkspace.move(String,String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":554,"column_number":-1,"description":"call to void JcrSession.move(String,String)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1028,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(Path)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":674,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.getNodeByIdentifier(String)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":778,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":165,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":867,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":867,"column_number":-1,"description":"call to void AbstractJcrNode.remove()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3445,"column_number":-1,"description":"call to void AbstractJcrNode.removeShare()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3149,"column_number":-1,"description":"call to void AbstractJcrNode.internalRemove(boolean)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3170,"column_number":-1,"description":"call to void AbstractJcrNode.checkForLock()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":635,"column_number":-1,"description":"call to Lock AbstractJcrNode.getLockIfExists()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3322,"column_number":-1,"description":"call to Lock JcrLockManager.getLockIfExists(AbstractJcrNode)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrLockManager.java","line_number":178,"column_number":-1,"description":"call to Lock RepositoryLockManager$ModeShapeLock.lockFor(JcrSession)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","line_number":661,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":11,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"JcrWorkspace.java|internalClone|THREAD_SAFETY_VIOLATION","hash":"8c2771d8466f913152ebd1c7c83ffaf1","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAHkAAAAIAAAALgAAACKgsAEApQD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void JcrWorkspace.internalClone(String,String,String,boolean,boolean)` indirectly mutates container `ace.privileges` via call to `addAll` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":305,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.internalClone(java.lang.String,java.lang.String,java.lang.String,boolean,boolean):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":305,"column_number":-1,"description":"call to void JcrWorkspace.validateCrossWorkspaceAction(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":533,"column_number":-1,"description":"call to void JcrSession.checkWorkspacePermission(String,java.lang.String[])"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1582,"column_number":-1,"description":"call to void JcrSession.checkPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1567,"column_number":-1,"description":"call to boolean JcrSession.hasPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1375,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPermission(Path,java.lang.String[])"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":322,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPrivileges(String,javax.jcr.security.Privilege[])"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":109,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.getApplicableACL(String)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":114,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.findAccessList(String,boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":289,"column_number":-1,"description":"call to boolean JcrAccessControlList.addAccessControlEntry(Principal,javax.jcr.security.Privilege[])"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/security/acl/JcrAccessControlList.java","line_number":113,"column_number":-1,"description":"call to boolean AccessControlEntryImpl.addIfNotPresent(javax.jcr.security.Privilege[])"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/security/acl/AccessControlEntryImpl.java","line_number":103,"column_number":-1,"description":"Write to container `ace.privileges` via call to `addAll`"}],"key":"JcrWorkspace.java|internalClone|THREAD_SAFETY_VIOLATION","hash":"071d87c24ef2416c2298df3169036704","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFIAAAAEAAAAHQAAABSgsABnAP+SCUhzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3NlY3VyaXR5L2FjbC9BY2Nlc3NDb250cm9sRW50cnlJbXBsLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void AbstractJcrNode.internalRemove(boolean)` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":3170,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.internalRemove(boolean):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3170,"column_number":-1,"description":"call to void AbstractJcrNode.checkForLock()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":635,"column_number":-1,"description":"call to Lock AbstractJcrNode.getLockIfExists()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3322,"column_number":-1,"description":"call to Lock JcrLockManager.getLockIfExists(AbstractJcrNode)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrLockManager.java","line_number":178,"column_number":-1,"description":"call to Lock RepositoryLockManager$ModeShapeLock.lockFor(JcrSession)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","line_number":661,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"AbstractJcrNode.java|internalRemove|THREAD_SAFETY_VIOLATION","hash":"ac4a87896e5da2b018ba99a1fe3262cb","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void AbstractJcrNode.internalRemove(boolean)` indirectly mutates container `ace.privileges` via call to `addAll` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":3171,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.internalRemove(boolean):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3171,"column_number":-1,"description":"call to void JcrSession.checkPermission(AbstractJcrItem,java.lang.String[])"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1535,"column_number":-1,"description":"call to void JcrSession.checkPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1567,"column_number":-1,"description":"call to boolean JcrSession.hasPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1375,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPermission(Path,java.lang.String[])"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":322,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPrivileges(String,javax.jcr.security.Privilege[])"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":109,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.getApplicableACL(String)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":114,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.findAccessList(String,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":289,"column_number":-1,"description":"call to boolean JcrAccessControlList.addAccessControlEntry(Principal,javax.jcr.security.Privilege[])"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/security/acl/JcrAccessControlList.java","line_number":113,"column_number":-1,"description":"call to boolean AccessControlEntryImpl.addIfNotPresent(javax.jcr.security.Privilege[])"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/security/acl/AccessControlEntryImpl.java","line_number":103,"column_number":-1,"description":"Write to container `ace.privileges` via call to `addAll`"}],"key":"AbstractJcrNode.java|internalRemove|THREAD_SAFETY_VIOLATION","hash":"ca9e70c4cef1df7c2381b9067ad2c4bb","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFIAAAAEAAAAHQAAABSgsABnAP+SCUhzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3NlY3VyaXR5L2FjbC9BY2Nlc3NDb250cm9sRW50cnlJbXBsLmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `boolean NodeTypes$ReusableNodeDefinitionSet.appliesTo(NodeTypes,Name,Set)` of un-annotated interface `org.modeshape.jcr.NodeTypes$ReusableNodeDefinitionSet`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":3179,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.internalRemove(boolean):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3179,"column_number":-1,"description":"call to boolean AbstractJcrNode.isCheckedOut()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3222,"column_number":-1,"description":"call to NodeDefinition AbstractJcrNode.getDefinition()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2835,"column_number":-1,"description":"call to NodeDefinition AbstractJcrNode.nodeDefinition()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2907,"column_number":-1,"description":"call to NodeTypes$NodeDefinitionSet NodeTypes.findChildNodeDefinitions(Name,Set)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":2375,"column_number":-1,"description":"Call to un-annotated interface method boolean NodeTypes$ReusableNodeDefinitionSet.appliesTo(NodeTypes,Name,Set)"}],"key":"AbstractJcrNode.java|internalRemove|INTERFACE_NOT_THREAD_SAFE","hash":"35d0aa84ac5d3a1e077a61e5cddad2d4","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAADkAAAAEAAAAFgAAABCgsAEJRwD/kgkuc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9Ob2RlVHlwZXMuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Path$Segment Path.getLastSegment()` of un-annotated interface `org.modeshape.jcr.value.Path`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":157,"column":-1,"procedure":"org.modeshape.jcr.cache.document.LazyCachedNode.isAtOrBelow(org.modeshape.jcr.cache.NodeCache,org.modeshape.jcr.value.Path):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":157,"column_number":-1,"description":"Call to un-annotated interface method Path$Segment Path.getLastSegment()"}],"key":"LazyCachedNode.java|isAtOrBelow|INTERFACE_NOT_THREAD_SAFE","hash":"1b33666dbdaf2c306793dede5a6020ec","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEAnQD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9MYXp5Q2FjaGVkTm9kZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `boolean LazyCachedNode.isAtOrBelow(NodeCache,Path)` indirectly writes to field `this.key.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":148,"column":-1,"procedure":"org.modeshape.jcr.cache.document.LazyCachedNode.isAtOrBelow(org.modeshape.jcr.cache.NodeCache,org.modeshape.jcr.value.Path):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":148,"column_number":-1,"description":"call to Path LazyCachedNode.getPath(NodeCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":299,"column_number":-1,"description":"call to CachedNode LazyCachedNode.parent(WorkspaceCache)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":165,"column_number":-1,"description":"call to NodeKey LazyCachedNode.getParentKey(NodeCache)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":124,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `this.key.workspaceKey`"}],"key":"LazyCachedNode.java|isAtOrBelow|THREAD_SAFETY_VIOLATION","hash":"2c410fe7a24ecf205fbd7fba5cdb2d70","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `SchematicEntry DocumentStore.get(String)` of un-annotated interface `org.modeshape.jcr.cache.document.DocumentStore`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":381,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.isAtOrBelow(org.modeshape.jcr.cache.NodeCache,org.modeshape.jcr.value.Path):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":381,"column_number":-1,"description":"call to Path SessionNode.getPath(NodeCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":466,"column_number":-1,"description":"call to CachedNode WorkspaceCache.getNode(NodeKey)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":243,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":207,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(String)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":188,"column_number":-1,"description":"Call to un-annotated interface method SchematicEntry DocumentStore.get(String)"}],"key":"SessionNode.java|isAtOrBelow|INTERFACE_NOT_THREAD_SAFE","hash":"169423cbb61d7b3f2b1c96b3e8f8c374","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEAvAD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xb3Jrc3BhY2VDYWNoZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `boolean NodeTypes$ReusableNodeDefinitionSet.appliesTo(NodeTypes,Name,Set)` of un-annotated interface `org.modeshape.jcr.NodeTypes$ReusableNodeDefinitionSet`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":3222,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.isCheckedOut():boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3222,"column_number":-1,"description":"call to NodeDefinition AbstractJcrNode.getDefinition()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2835,"column_number":-1,"description":"call to NodeDefinition AbstractJcrNode.nodeDefinition()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2907,"column_number":-1,"description":"call to NodeTypes$NodeDefinitionSet NodeTypes.findChildNodeDefinitions(Name,Set)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":2375,"column_number":-1,"description":"Call to un-annotated interface method boolean NodeTypes$ReusableNodeDefinitionSet.appliesTo(NodeTypes,Name,Set)"}],"key":"AbstractJcrNode.java|isCheckedOut|INTERFACE_NOT_THREAD_SAFE","hash":"f0628762d347d14afc04b7ca2b154ba5","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAADkAAAAEAAAAFgAAABCgsAEJRwD/kgkuc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9Ob2RlVHlwZXMuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `boolean NodeTypes$ReusableNodeDefinitionSet.appliesTo(NodeTypes,Name,Set)` of un-annotated interface `org.modeshape.jcr.NodeTypes$ReusableNodeDefinitionSet`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`.","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.isCheckedOut():boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to boolean AbstractJcrNode.isCheckedOut()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3222,"column_number":-1,"description":"call to NodeDefinition AbstractJcrNode.getDefinition()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2835,"column_number":-1,"description":"call to NodeDefinition AbstractJcrNode.nodeDefinition()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2907,"column_number":-1,"description":"call to NodeTypes$NodeDefinitionSet NodeTypes.findChildNodeDefinitions(Name,Set)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":2375,"column_number":-1,"description":"Call to un-annotated interface method boolean NodeTypes$ReusableNodeDefinitionSet.appliesTo(NodeTypes,Name,Set)"}],"key":"JcrSystemNode.java|isCheckedOut|INTERFACE_NOT_THREAD_SAFE","hash":"79dc38f4215b53480533dd1747555313","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAADkAAAAEAAAAFgAAABCgsAEJRwD/kgkuc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9Ob2RlVHlwZXMuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `boolean WritableSessionCache.isDestroyed(NodeKey)` reads without synchronization from `this.changedNodes`. Potentially races with write in method `WritableSessionCache.save()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1698,"column":-1,"procedure":"org.modeshape.jcr.cache.document.WritableSessionCache.isDestroyed(org.modeshape.jcr.cache.NodeKey):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":1698,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":1698,"column_number":-1,"description":"access to `this.changedNodes`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":432,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":432,"column_number":-1,"description":"call to void WritableSessionCache.save(SessionCache$PreSave)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":489,"column_number":-1,"description":"call to void WritableSessionCache.clearState()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":573,"column_number":-1,"description":"access to `this.changedNodes`"}],"key":"WritableSessionCache.java|isDestroyed|THREAD_SAFETY_VIOLATION","hash":"03c132c61e36c309371802b05758c771","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAKUAAAAIAAAAOgAAACigsAEGogD/kglIc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xcml0YWJsZVNlc3Npb25DYWNoZS5qYXZhoLABAj0A/5IJSHNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvY2FjaGUvZG9jdW1lbnQvV3JpdGFibGVTZXNzaW9uQ2FjaGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `boolean RecordingChanges.isEmpty()` reads without synchronization from `this.nodeKeys`. Potentially races with write in method `RecordingChanges.setChangedNodes(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":248,"column":-1,"procedure":"org.modeshape.jcr.cache.change.RecordingChanges.isEmpty():boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/change/RecordingChanges.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/change/RecordingChanges.java","line_number":248,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/change/RecordingChanges.java","line_number":248,"column_number":-1,"description":"access to `this.nodeKeys`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/change/RecordingChanges.java","line_number":291,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/change/RecordingChanges.java","line_number":291,"column_number":-1,"description":"access to `this.nodeKeys`"}],"key":"RecordingChanges.java|isEmpty|THREAD_SAFETY_VIOLATION","hash":"feeacd95f71a62d93893e337c40ba4a7","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAJkAAAAIAAAANgAAACagsAEA+AD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9jaGFuZ2UvUmVjb3JkaW5nQ2hhbmdlcy5qYXZhoLABASMA/5IJQnNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvY2FjaGUvY2hhbmdlL1JlY29yZGluZ0NoYW5nZXMuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `boolean JcrVersionNode.isEventualSuccessorOf(JcrVersionNode)` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":145,"column":-1,"procedure":"org.modeshape.jcr.JcrVersionNode.isEventualSuccessorOf(org.modeshape.jcr.JcrVersionNode):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","line_number":145,"column_number":-1,"description":"call to javax.jcr.version.Version[] JcrVersionNode.getSuccessors()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","line_number":91,"column_number":-1,"description":"call to javax.jcr.version.Version[] JcrVersionNode.getNodesForProperty(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","line_number":104,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"JcrVersionNode.java|isEventualSuccessorOf|THREAD_SAFETY_VIOLATION","hash":"2dbabcb4b70c2e3f24f46ad485612374","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `boolean JcrVersionNode.isEventualSuccessorOf(JcrVersionNode)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":141,"column":-1,"procedure":"org.modeshape.jcr.JcrVersionNode.isEventualSuccessorOf(org.modeshape.jcr.JcrVersionNode):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","line_number":141,"column_number":-1,"description":"call to boolean JcrVersionNode.isLinearSuccessorOf(JcrVersionNode)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","line_number":128,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrVersionNode.java|isEventualSuccessorOf|THREAD_SAFETY_VIOLATION","hash":"bb67d98d3fce0c4569c1a3f41180e2a7","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `boolean Document.getBoolean(String,boolean)` of un-annotated interface `org.infinispan.schematic.document.Document`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":485,"column":-1,"procedure":"org.modeshape.jcr.cache.document.LazyCachedNode.isExcludedFromSearch(org.modeshape.jcr.cache.NodeCache):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":485,"column_number":-1,"description":"call to boolean DocumentTranslator.isQueryable(Document)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/DocumentTranslator.java","line_number":1475,"column_number":-1,"description":"Call to un-annotated interface method boolean Document.getBoolean(String,boolean)"}],"key":"LazyCachedNode.java|isExcludedFromSearch|INTERFACE_NOT_THREAD_SAFE","hash":"d7006e964393bf232e537ebd94b2fd8a","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAFEAAAAEAAAAHAAAABOgsAEFwwD/kglGc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Eb2N1bWVudFRyYW5zbGF0b3IuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `SchematicEntry DocumentStore.get(String)` of un-annotated interface `org.modeshape.jcr.cache.document.DocumentStore`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":1472,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.isExcludedFromSearch(org.modeshape.jcr.cache.NodeCache):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1472,"column_number":-1,"description":"call to CachedNode SessionNode.nodeInWorkspace(AbstractSessionCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":309,"column_number":-1,"description":"call to CachedNode WorkspaceCache.getNode(NodeKey)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":243,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":207,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(String)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":188,"column_number":-1,"description":"Call to un-annotated interface method SchematicEntry DocumentStore.get(String)"}],"key":"SessionNode.java|isExcludedFromSearch|INTERFACE_NOT_THREAD_SAFE","hash":"a96bc16b8dc3b07752ee472a5d456fe3","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEAvAD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xb3Jrc3BhY2VDYWNoZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `NodeKey SessionCache.getRootKey()` of un-annotated interface `org.modeshape.jcr.cache.SessionCache`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":266,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.isExternal():boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":266,"column_number":-1,"description":"Call to un-annotated interface method NodeKey SessionCache.getRootKey()"}],"key":"AbstractJcrNode.java|isExternal|INTERFACE_NOT_THREAD_SAFE","hash":"c508424df533d2bbfcc9e52f62beb70d","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEBCgD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `NodeKey NodeCache.getRootKey()` of un-annotated interface `org.modeshape.jcr.cache.NodeCache`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":526,"column":-1,"procedure":"org.modeshape.jcr.cache.document.LazyCachedNode.isExternal(org.modeshape.jcr.cache.NodeCache):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":526,"column_number":-1,"description":"Call to un-annotated interface method NodeKey NodeCache.getRootKey()"}],"key":"LazyCachedNode.java|isExternal|INTERFACE_NOT_THREAD_SAFE","hash":"b58ff4a6af2e614276f0152d1744f12c","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAECDgD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9MYXp5Q2FjaGVkTm9kZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `NodeKey NodeCache.getRootKey()` of un-annotated interface `org.modeshape.jcr.cache.NodeCache`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":1605,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.isExternal(org.modeshape.jcr.cache.NodeCache):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1605,"column_number":-1,"description":"Call to un-annotated interface method NodeKey NodeCache.getRootKey()"}],"key":"SessionNode.java|isExternal|INTERFACE_NOT_THREAD_SAFE","hash":"8a1bd07f895b852880e01bdd6d1e6653","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEoAAAAEAAAAGgAAABKgsAEGRQD/kgk/c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9TZXNzaW9uTm9kZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `NodeKey SessionCache.getRootKey()` of un-annotated interface `org.modeshape.jcr.cache.SessionCache`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":257,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.isForeign():boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":257,"column_number":-1,"description":"call to boolean JcrSession.isForeignKey(NodeKey)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1958,"column_number":-1,"description":"Call to un-annotated interface method NodeKey SessionCache.getRootKey()"}],"key":"AbstractJcrNode.java|isForeign|INTERFACE_NOT_THREAD_SAFE","hash":"f4f791115598f5af78e7d253265262b2","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAADoAAAAEAAAAFgAAABCgsAEHpgD/kgkvc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JTZXNzaW9uLmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `CachedNode SessionCache.getNode(NodeKey)` of un-annotated interface `org.modeshape.jcr.cache.SessionCache`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`.","severity":"WARNING","line":126,"column":-1,"procedure":"org.modeshape.jcr.JcrVersionNode.isLinearSuccessorOf(org.modeshape.jcr.JcrVersionNode):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","line_number":126,"column_number":-1,"description":"call to boolean AbstractJcrNode.hasProperty(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":530,"column_number":-1,"description":"call to CachedNode AbstractJcrNode.node()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":201,"column_number":-1,"description":"Call to un-annotated interface method CachedNode SessionCache.getNode(NodeKey)"}],"key":"JcrVersionNode.java|isLinearSuccessorOf|INTERFACE_NOT_THREAD_SAFE","hash":"58ef47d35ae99b06d519de247f126e97","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEAyQD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `boolean JcrVersionNode.isLinearSuccessorOf(JcrVersionNode)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":128,"column":-1,"procedure":"org.modeshape.jcr.JcrVersionNode.isLinearSuccessorOf(org.modeshape.jcr.JcrVersionNode):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","line_number":128,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrVersionNode.java|isLinearSuccessorOf|THREAD_SAFETY_VIOLATION","hash":"df8c93c035244da906d59c681d61e5e4","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Set CachedNode.getMixinTypes(NodeCache)` of un-annotated interface `org.modeshape.jcr.cache.CachedNode`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":554,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.isLockable():boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":554,"column_number":-1,"description":"call to boolean AbstractJcrNode.isNodeType(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2339,"column_number":-1,"description":"Call to un-annotated interface method Set CachedNode.getMixinTypes(NodeCache)"}],"key":"AbstractJcrNode.java|isLockable|INTERFACE_NOT_THREAD_SAFE","hash":"38cc61b66e31c31bff77cb26a0e12abb","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEJIwD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `SchematicEntry DocumentStore.get(String)` of un-annotated interface `org.modeshape.jcr.cache.document.DocumentStore`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":3342,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.isLocked():boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3342,"column_number":-1,"description":"call to boolean JcrLockManager.isLocked(AbstractJcrNode)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrLockManager.java","line_number":160,"column_number":-1,"description":"call to RepositoryLockManager$ModeShapeLock JcrLockManager.getLowestLockAlongPath(AbstractJcrNode)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrLockManager.java","line_number":205,"column_number":-1,"description":"call to CachedNode WorkspaceCache.getNode(NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":243,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":207,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(String)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":188,"column_number":-1,"description":"Call to un-annotated interface method SchematicEntry DocumentStore.get(String)"}],"key":"AbstractJcrNode.java|isLocked|INTERFACE_NOT_THREAD_SAFE","hash":"038575bdd54a245529d40ca672914270","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEAvAD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xb3Jrc3BhY2VDYWNoZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `SchematicEntry DocumentStore.get(String)` of un-annotated interface `org.modeshape.jcr.cache.document.DocumentStore`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`.","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.isLocked():boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to boolean AbstractJcrNode.isLocked()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3342,"column_number":-1,"description":"call to boolean JcrLockManager.isLocked(AbstractJcrNode)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrLockManager.java","line_number":160,"column_number":-1,"description":"call to RepositoryLockManager$ModeShapeLock JcrLockManager.getLowestLockAlongPath(AbstractJcrNode)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrLockManager.java","line_number":205,"column_number":-1,"description":"call to CachedNode WorkspaceCache.getNode(NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":243,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(NodeKey)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":207,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(String)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":188,"column_number":-1,"description":"Call to un-annotated interface method SchematicEntry DocumentStore.get(String)"}],"key":"JcrSystemNode.java|isLocked|INTERFACE_NOT_THREAD_SAFE","hash":"052927526f88573434d14d867e86ed43","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEAvAD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xb3Jrc3BhY2VDYWNoZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `boolean JcrLockManager.isLocked(String)` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":156,"column":-1,"procedure":"org.modeshape.jcr.JcrLockManager.isLocked(java.lang.String):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrLockManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrLockManager.java","line_number":156,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(Path)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":677,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,Path)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":659,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"JcrLockManager.java|isLocked|THREAD_SAFETY_VIOLATION","hash":"ae2ccd6edb110318d3802f75ec649ad8","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `SchematicEntry DocumentStore.get(String)` of un-annotated interface `org.modeshape.jcr.cache.document.DocumentStore`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":160,"column":-1,"procedure":"org.modeshape.jcr.JcrLockManager.isLocked(org.modeshape.jcr.AbstractJcrNode):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrLockManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrLockManager.java","line_number":160,"column_number":-1,"description":"call to RepositoryLockManager$ModeShapeLock JcrLockManager.getLowestLockAlongPath(AbstractJcrNode)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrLockManager.java","line_number":205,"column_number":-1,"description":"call to CachedNode WorkspaceCache.getNode(NodeKey)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":243,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":207,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(String)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":188,"column_number":-1,"description":"Call to un-annotated interface method SchematicEntry DocumentStore.get(String)"}],"key":"JcrLockManager.java|isLocked|INTERFACE_NOT_THREAD_SAFE","hash":"fb03cded9913be6105006c905a83bbe9","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEAvAD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xb3Jrc3BhY2VDYWNoZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `boolean AbstractJcrNode.isLockedByAnotherSession()` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":643,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.isLockedByAnotherSession():boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":643,"column_number":-1,"description":"call to void AbstractJcrNode.checkForLock()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":635,"column_number":-1,"description":"call to Lock AbstractJcrNode.getLockIfExists()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3322,"column_number":-1,"description":"call to Lock JcrLockManager.getLockIfExists(AbstractJcrNode)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrLockManager.java","line_number":178,"column_number":-1,"description":"call to Lock RepositoryLockManager$ModeShapeLock.lockFor(JcrSession)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","line_number":661,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"AbstractJcrNode.java|isLockedByAnotherSession|THREAD_SAFETY_VIOLATION","hash":"024a2a1d1c2c309024e1786855b90450","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `CachedNode SessionCache.getNode(NodeKey)` of un-annotated interface `org.modeshape.jcr.cache.SessionCache`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":3374,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.isModified():boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3374,"column_number":-1,"description":"call to CachedNode AbstractJcrNode.node()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":201,"column_number":-1,"description":"Call to un-annotated interface method CachedNode SessionCache.getNode(NodeKey)"}],"key":"AbstractJcrNode.java|isModified|INTERFACE_NOT_THREAD_SAFE","hash":"f0aac7fa8666dc98585a149a647870cb","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEAyQD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `CachedNode SessionCache.getNode(NodeKey)` of un-annotated interface `org.modeshape.jcr.cache.SessionCache`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`.","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.isModified():boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to boolean AbstractJcrNode.isModified()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3374,"column_number":-1,"description":"call to CachedNode AbstractJcrNode.node()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":201,"column_number":-1,"description":"Call to un-annotated interface method CachedNode SessionCache.getNode(NodeKey)"}],"key":"JcrSystemNode.java|isModified|INTERFACE_NOT_THREAD_SAFE","hash":"b9bbebb0809b59f60a424be1b991f2d2","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEAyQD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `CachedNode SessionCache.getNode(NodeKey)` of un-annotated interface `org.modeshape.jcr.cache.SessionCache`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":3363,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.isNew():boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3363,"column_number":-1,"description":"call to CachedNode AbstractJcrNode.node()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":201,"column_number":-1,"description":"Call to un-annotated interface method CachedNode SessionCache.getNode(NodeKey)"}],"key":"AbstractJcrNode.java|isNew|INTERFACE_NOT_THREAD_SAFE","hash":"e76a9013b62f2c551638e9f2cdfd39d3","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEAyQD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `CachedNode SessionCache.getNode(NodeKey)` of un-annotated interface `org.modeshape.jcr.cache.SessionCache`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`.","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.isNew():boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to boolean AbstractJcrNode.isNew()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3363,"column_number":-1,"description":"call to CachedNode AbstractJcrNode.node()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":201,"column_number":-1,"description":"Call to un-annotated interface method CachedNode SessionCache.getNode(NodeKey)"}],"key":"JcrSystemNode.java|isNew|INTERFACE_NOT_THREAD_SAFE","hash":"0f06a32d616d0b62d483f7b01934ef0f","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEAyQD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Set CachedNode.getMixinTypes(NodeCache)` of un-annotated interface `org.modeshape.jcr.cache.CachedNode`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":2317,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.isNodeType(java.lang.String):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2317,"column_number":-1,"description":"call to boolean AbstractJcrNode.isNodeType(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2339,"column_number":-1,"description":"Call to un-annotated interface method Set CachedNode.getMixinTypes(NodeCache)"}],"key":"AbstractJcrNode.java|isNodeType|INTERFACE_NOT_THREAD_SAFE","hash":"25dc544cd3a41421355b6236b1325b26","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEJIwD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Set CachedNode.getMixinTypes(NodeCache)` of un-annotated interface `org.modeshape.jcr.cache.CachedNode`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`.","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.isNodeType(java.lang.String):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to boolean AbstractJcrNode.isNodeType(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2317,"column_number":-1,"description":"call to boolean AbstractJcrNode.isNodeType(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2339,"column_number":-1,"description":"Call to un-annotated interface method Set CachedNode.getMixinTypes(NodeCache)"}],"key":"JcrSystemNode.java|isNodeType|INTERFACE_NOT_THREAD_SAFE","hash":"b4819c5559cb657ed1432fa76c7b0f7a","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEJIwD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Set CachedNode.getMixinTypes(NodeCache)` of un-annotated interface `org.modeshape.jcr.cache.CachedNode`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":2339,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.isNodeType(org.modeshape.jcr.value.Name):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2339,"column_number":-1,"description":"Call to un-annotated interface method Set CachedNode.getMixinTypes(NodeCache)"}],"key":"AbstractJcrNode.java|isNodeType|INTERFACE_NOT_THREAD_SAFE","hash":"25dc544cd3a41421355b6236b1325b26","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEJIwD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `boolean RepositoryNodeTypeManager.isNodeTypeInUse(Name)` indirectly writes to field `mutableTable.extraColumns` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":314,"column":-1,"procedure":"org.modeshape.jcr.RepositoryNodeTypeManager.isNodeTypeInUse(org.modeshape.jcr.value.Name):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/RepositoryNodeTypeManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryNodeTypeManager.java","line_number":314,"column_number":-1,"description":"call to NodeTypeSchemata RepositoryNodeTypeManager.getRepositorySchemata()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryNodeTypeManager.java","line_number":289,"column_number":-1,"description":"call to NodeTypeSchemata.<init>(ExecutionContext,NodeTypes,boolean,boolean)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/NodeTypeSchemata.java","line_number":130,"column_number":-1,"description":"call to Schemata ImmutableSchemata$Builder.build()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/validate/ImmutableSchemata.java","line_number":438,"column_number":-1,"description":"call to void ImmutableSchemata$MutableTable.setExtraColumns(boolean)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/query/validate/ImmutableSchemata.java","line_number":631,"column_number":-1,"description":"access to `mutableTable.extraColumns`"}],"key":"RepositoryNodeTypeManager.java|isNodeTypeInUse|THREAD_SAFETY_VIOLATION","hash":"acb3821c253c4e849ce6daf5a1fd89b1","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFAAAAAEAAAAHAAAABOgsAECdwD/kglFc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9xdWVyeS92YWxpZGF0ZS9JbW11dGFibGVTY2hlbWF0YS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `QueryContext QueryEngine.createQueryContext(ExecutionContext,RepositoryCache,Set,Map,Schemata,RepositoryIndexes,NodeTypes,BufferManager,PlanHints,Map)` of un-annotated interface `org.modeshape.jcr.query.QueryEngine`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":323,"column":-1,"procedure":"org.modeshape.jcr.RepositoryNodeTypeManager.isNodeTypeInUse(org.modeshape.jcr.value.Name):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/RepositoryNodeTypeManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryNodeTypeManager.java","line_number":323,"column_number":-1,"description":"call to CancellableQuery RepositoryQueryManager.query(ExecutionContext,RepositoryCache,Set,Map,QueryCommand,Schemata,RepositoryIndexes,NodeTypes,PlanHints,Map)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryQueryManager.java","line_number":177,"column_number":-1,"description":"Call to un-annotated interface method QueryContext QueryEngine.createQueryContext(ExecutionContext,RepositoryCache,Set,Map,Schemata,RepositoryIndexes,NodeTypes,BufferManager,PlanHints,Map)"}],"key":"RepositoryNodeTypeManager.java|isNodeTypeInUse|INTERFACE_NOT_THREAD_SAFE","hash":"00fcaa9dfea013c639777eb3a357cb85","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEYAAAAEAAAAGQAAABKgsAEAsQD/kgk7c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9SZXBvc2l0b3J5UXVlcnlNYW5hZ2VyLmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `SchematicEntry DocumentStore.get(String)` of un-annotated interface `org.modeshape.jcr.cache.document.DocumentStore`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":151,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.isPropertyModified(org.modeshape.jcr.cache.SessionCache,org.modeshape.jcr.value.Name):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":151,"column_number":-1,"description":"call to boolean SessionNode.isPropertyInWorkspaceCache(SessionCache,Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":157,"column_number":-1,"description":"call to CachedNode SessionNode.nodeInWorkspace(AbstractSessionCache)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":309,"column_number":-1,"description":"call to CachedNode WorkspaceCache.getNode(NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":243,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":207,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(String)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":188,"column_number":-1,"description":"Call to un-annotated interface method SchematicEntry DocumentStore.get(String)"}],"key":"SessionNode.java|isPropertyModified|INTERFACE_NOT_THREAD_SAFE","hash":"e30bca3b2a39480c15a866bdea6f8f0a","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEAvAD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xb3Jrc3BhY2VDYWNoZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `SchematicEntry DocumentStore.get(String)` of un-annotated interface `org.modeshape.jcr.cache.document.DocumentStore`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":145,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.isPropertyNew(org.modeshape.jcr.cache.SessionCache,org.modeshape.jcr.value.Name):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":145,"column_number":-1,"description":"call to boolean SessionNode.isPropertyInWorkspaceCache(SessionCache,Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":157,"column_number":-1,"description":"call to CachedNode SessionNode.nodeInWorkspace(AbstractSessionCache)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":309,"column_number":-1,"description":"call to CachedNode WorkspaceCache.getNode(NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":243,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":207,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(String)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":188,"column_number":-1,"description":"Call to un-annotated interface method SchematicEntry DocumentStore.get(String)"}],"key":"SessionNode.java|isPropertyNew|INTERFACE_NOT_THREAD_SAFE","hash":"5c62369b7120d441d6cca53bfad8a735","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEAvAD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xb3Jrc3BhY2VDYWNoZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `boolean Connectors.isReadonlyPath(Path,JcrSession)` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":636,"column":-1,"procedure":"org.modeshape.jcr.Connectors.isReadonlyPath(org.modeshape.jcr.value.Path,org.modeshape.jcr.JcrSession):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/Connectors.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/Connectors.java","line_number":636,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(Path)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":677,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,Path)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":659,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"Connectors.java|isReadonlyPath|THREAD_SAFETY_VIOLATION","hash":"4d9822739b053d090a3f9e9458340965","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Set CachedNode.getMixinTypes(NodeCache)` of un-annotated interface `org.modeshape.jcr.cache.CachedNode`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":546,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.isReferenceable():boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":546,"column_number":-1,"description":"Call to un-annotated interface method Set CachedNode.getMixinTypes(NodeCache)"}],"key":"AbstractJcrNode.java|isReferenceable|INTERFACE_NOT_THREAD_SAFE","hash":"af68db62907c03daaa5851e98c3aeac1","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAECIgD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Repository Session.getRepository()` of un-annotated interface `javax.jcr.Session`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":3392,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.isSame(javax.jcr.Item):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3392,"column_number":-1,"description":"call to boolean AbstractJcrItem.isSameRepository(Item)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrItem.java","line_number":132,"column_number":-1,"description":"Call to un-annotated interface method Repository Session.getRepository()"}],"key":"AbstractJcrNode.java|isSame|INTERFACE_NOT_THREAD_SAFE","hash":"1354901703ad290a4c1e92e7d260679a","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEAhAD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjckl0ZW0uamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Repository Session.getRepository()` of un-annotated interface `javax.jcr.Session`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`.","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.isSame(javax.jcr.Item):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to boolean AbstractJcrNode.isSame(Item)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3392,"column_number":-1,"description":"call to boolean AbstractJcrItem.isSameRepository(Item)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrItem.java","line_number":132,"column_number":-1,"description":"Call to un-annotated interface method Repository Session.getRepository()"}],"key":"JcrSystemNode.java|isSame|INTERFACE_NOT_THREAD_SAFE","hash":"f467e36eaa7e072047adc9a8baa37104","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEAhAD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjckl0ZW0uamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Repository Session.getRepository()` of un-annotated interface `javax.jcr.Session`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":132,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrItem.isSameRepository(javax.jcr.Item):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrItem.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrItem.java","line_number":132,"column_number":-1,"description":"Call to un-annotated interface method Repository Session.getRepository()"}],"key":"AbstractJcrItem.java|isSameRepository|INTERFACE_NOT_THREAD_SAFE","hash":"d52f25fd32d2a763aab06363d07cd35a","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEAhAD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjckl0ZW0uamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Set CachedNode.getMixinTypes(NodeCache)` of un-annotated interface `org.modeshape.jcr.cache.CachedNode`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":558,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.isShareable():boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":558,"column_number":-1,"description":"call to boolean AbstractJcrNode.isNodeType(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2339,"column_number":-1,"description":"Call to un-annotated interface method Set CachedNode.getMixinTypes(NodeCache)"}],"key":"AbstractJcrNode.java|isShareable|INTERFACE_NOT_THREAD_SAFE","hash":"ccf51e0674910a8477c2d4d371a54941","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEJIwD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Set CachedNode.getAdditionalParentKeys(NodeCache)` of un-annotated interface `org.modeshape.jcr.cache.CachedNode`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":82,"column":-1,"procedure":"org.modeshape.jcr.JcrNode.isShared():boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNode.java","line_number":82,"column_number":-1,"description":"call to int JcrSharedNodeCache$SharedSet.getSize()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSharedNodeCache.java","line_number":221,"column_number":-1,"description":"Call to un-annotated interface method Set CachedNode.getAdditionalParentKeys(NodeCache)"}],"key":"JcrNode.java|isShared|INTERFACE_NOT_THREAD_SAFE","hash":"289c413609a38d41a71d2273c307dbdf","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEIAAAAEAAAAGAAAABGgsAEA3QD/kgk3c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JTaGFyZWROb2RlQ2FjaGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `boolean JcrRepository.isSingleValueDescriptor(String)` reads without synchronization from container `this.descriptors` via call to `get`. Potentially races with write in method `JcrRepository.apply(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":601,"column":-1,"procedure":"org.modeshape.jcr.JcrRepository.isSingleValueDescriptor(java.lang.String):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrRepository.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":601,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":601,"column_number":-1,"description":"Read of container `this.descriptors` via call to `get`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":369,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":369,"column_number":-1,"description":"call to void JcrRepository.refreshWorkspaces()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":909,"column_number":-1,"description":"Write to container `this.descriptors` via call to `put`"}],"key":"JcrRepository.java|isSingleValueDescriptor|THREAD_SAFETY_VIOLATION","hash":"826981218644fa5d0c11c4e6d26a0f88","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAHkAAAAIAAAALgAAACKgsAECWQD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JSZXBvc2l0b3J5LmphdmGgsAEDjQD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JSZXBvc2l0b3J5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Iterator ChildReferences.iterator(ChildReferences$Context)` of un-annotated interface `org.modeshape.jcr.cache.ChildReferences`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":211,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionChildReferences.iterator(org.modeshape.jcr.cache.ChildReferences$Context):java.util.Iterator","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionChildReferences.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionChildReferences.java","line_number":211,"column_number":-1,"description":"call to Iterator SessionChildReferences.createIterator(ChildReferences$Context)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionChildReferences.java","line_number":215,"column_number":-1,"description":"Call to un-annotated interface method Iterator ChildReferences.iterator(ChildReferences$Context)"}],"key":"SessionChildReferences.java|iterator|INTERFACE_NOT_THREAD_SAFE","hash":"fed499f019517e455c62d39bb7c7eb7b","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAFUAAAAEAAAAHQAAABSgsAEA1wD/kglKc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9TZXNzaW9uQ2hpbGRSZWZlcmVuY2VzLmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `ChildReferences$Changes ChildReferences$Context.changes()` of un-annotated interface `org.modeshape.jcr.cache.ChildReferences$Context`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":233,"column":-1,"procedure":"org.modeshape.jcr.cache.document.BucketedChildReferences.iterator(org.modeshape.jcr.cache.ChildReferences$Context,java.util.Collection,org.modeshape.jcr.value.NamespaceRegistry):java.util.Iterator","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":233,"column_number":-1,"description":"call to Iterator AbstractChildReferences.iterator(ChildReferences$Context,Collection,NamespaceRegistry)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/AbstractChildReferences.java","line_number":191,"column_number":-1,"description":"call to Iterator AbstractChildReferences.iterator(ChildReferences$Context)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/AbstractChildReferences.java","line_number":83,"column_number":-1,"description":"call to Iterator AbstractChildReferences.contextSensitiveIterator(Iterator,ChildReferences$Context)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/AbstractChildReferences.java","line_number":89,"column_number":-1,"description":"Call to un-annotated interface method ChildReferences$Changes ChildReferences$Context.changes()"}],"key":"BucketedChildReferences.java|iterator|INTERFACE_NOT_THREAD_SAFE","hash":"84340a9e231121be7b483a9416a8835f","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAFUAAAAEAAAAHQAAABSgsABZAP+SCUtzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL2NhY2hlL2RvY3VtZW50L0Fic3RyYWN0Q2hpbGRSZWZlcmVuY2VzLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `Iterator BucketedChildReferences.iterator(Name,ChildReferences$Context)` indirectly reads without synchronization from container `this.rangeBucketsById` via call to `get`. Potentially races with write in method `BucketedChildReferences.getChildCount(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":173,"column":-1,"procedure":"org.modeshape.jcr.cache.document.BucketedChildReferences.iterator(org.modeshape.jcr.value.Name,org.modeshape.jcr.cache.ChildReferences$Context):java.util.Iterator","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":173,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":173,"column_number":-1,"description":"call to ChildReference BucketedChildReferences.getChild(Name,int,ChildReferences$Context)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":98,"column_number":-1,"description":"call to BucketedChildReferences$Bucket BucketedChildReferences.bucketFor(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":269,"column_number":-1,"description":"call to BucketedChildReferences$Bucket BucketedChildReferences.loadBucket(BucketId)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":273,"column_number":-1,"description":"Read of container `this.rangeBucketsById` via call to `get`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":88,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":88,"column_number":-1,"description":"call to BucketedChildReferences$Bucket BucketedChildReferences.bucketFor(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":269,"column_number":-1,"description":"call to BucketedChildReferences$Bucket BucketedChildReferences.loadBucket(BucketId)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":284,"column_number":-1,"description":"Write to container `this.rangeBucketsById` via call to `put`"}],"key":"BucketedChildReferences.java|iterator|THREAD_SAFETY_VIOLATION","hash":"53bae383425818aefa459213ffa22fff","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAF8AAAAGAAAAJAAAABugsAEBEQD/kglLc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9CdWNrZXRlZENoaWxkUmVmZXJlbmNlcy5qYXZhoLABARwA/wQEQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Iterator ChildReferences.iterator(Name,ChildReferences$Context)` of un-annotated interface `org.modeshape.jcr.cache.ChildReferences`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":192,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionChildReferences.iterator(org.modeshape.jcr.value.Name,org.modeshape.jcr.cache.ChildReferences$Context):java.util.Iterator","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionChildReferences.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionChildReferences.java","line_number":192,"column_number":-1,"description":"call to Iterator SessionChildReferences.createIterator(Name,ChildReferences$Context)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionChildReferences.java","line_number":197,"column_number":-1,"description":"Call to un-annotated interface method Iterator ChildReferences.iterator(Name,ChildReferences$Context)"}],"key":"SessionChildReferences.java|iterator|INTERFACE_NOT_THREAD_SAFE","hash":"9e6b606dea2bfe4056a0e459008793e4","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAFUAAAAEAAAAHQAAABSgsAEAxQD/kglKc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9TZXNzaW9uQ2hpbGRSZWZlcmVuY2VzLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `String ClusteredJournal.journalId()` indirectly reads without synchronization from `this.localJournal.journalId`. Potentially races with write in method `ClusteredJournal.start()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":169,"column":-1,"procedure":"org.modeshape.jcr.journal.ClusteredJournal.journalId():java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":169,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":169,"column_number":-1,"description":"call to String LocalJournal.journalId()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","line_number":320,"column_number":-1,"description":"access to `this.localJournal.journalId`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":81,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":81,"column_number":-1,"description":"call to void LocalJournal.start()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","line_number":146,"column_number":-1,"description":"access to `this.localJournal.journalId`"}],"key":"ClusteredJournal.java|journalId|THREAD_SAFETY_VIOLATION","hash":"866940f4ab520f025d574276386cc9bd","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAIcAAAAIAAAAMgAAACSgsAEBQAD/kgk5c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9qb3VybmFsL0xvY2FsSm91cm5hbC5qYXZhoLABAJIA/5IJOXNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3Ivam91cm5hbC9Mb2NhbEpvdXJuYWwuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `String LocalJournal.journalId()` reads without synchronization from `this.journalId`. Potentially races with write in method `LocalJournal.start()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":320,"column":-1,"procedure":"org.modeshape.jcr.journal.LocalJournal.journalId():java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","line_number":320,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","line_number":320,"column_number":-1,"description":"access to `this.journalId`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","line_number":146,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","line_number":146,"column_number":-1,"description":"access to `this.journalId`"}],"key":"LocalJournal.java|journalId|THREAD_SAFETY_VIOLATION","hash":"214e32d8df41c9298b47a5c6bf474f4a","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAIcAAAAIAAAAMgAAACSgsAEBQAD/kgk5c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9qb3VybmFsL0xvY2FsSm91cm5hbC5qYXZhoLABAJIA/5IJOXNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3Ivam91cm5hbC9Mb2NhbEpvdXJuYWwuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `JournalRecord ClusteredJournal.lastRecord()` indirectly reads without synchronization from `this.localJournal.records`. Potentially races with write in method `ClusteredJournal.start()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":147,"column":-1,"procedure":"org.modeshape.jcr.journal.ClusteredJournal.lastRecord():org.modeshape.jcr.journal.JournalRecord","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":147,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":147,"column_number":-1,"description":"call to JournalRecord LocalJournal.lastRecord()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","line_number":227,"column_number":-1,"description":"access to `this.localJournal.records`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":81,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":81,"column_number":-1,"description":"call to void LocalJournal.start()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","line_number":140,"column_number":-1,"description":"access to `this.localJournal.records`"}],"key":"ClusteredJournal.java|lastRecord|THREAD_SAFETY_VIOLATION","hash":"e5935b415435fa27ff24d4d1bec03261","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAIcAAAAIAAAAMgAAACSgsAEA4wD/kgk5c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9qb3VybmFsL0xvY2FsSm91cm5hbC5qYXZhoLABAIwA/5IJOXNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3Ivam91cm5hbC9Mb2NhbEpvdXJuYWwuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `JournalRecord LocalJournal.lastRecord()` reads without synchronization from `this.records`. Potentially races with write in method `LocalJournal.start()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":227,"column":-1,"procedure":"org.modeshape.jcr.journal.LocalJournal.lastRecord():org.modeshape.jcr.journal.JournalRecord","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","line_number":227,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","line_number":227,"column_number":-1,"description":"access to `this.records`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","line_number":140,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","line_number":140,"column_number":-1,"description":"access to `this.records`"}],"key":"LocalJournal.java|lastRecord|THREAD_SAFETY_VIOLATION","hash":"09f464a291b9039efe406d448789c188","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAIcAAAAIAAAAMgAAACSgsAEA4wD/kgk5c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9qb3VybmFsL0xvY2FsSm91cm5hbC5qYXZhoLABAIwA/5IJOXNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3Ivam91cm5hbC9Mb2NhbEpvdXJuYWwuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `SchematicEntry DocumentStore.get(String)` of un-annotated interface `org.modeshape.jcr.cache.document.DocumentStore`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":1364,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.linkChild(org.modeshape.jcr.cache.SessionCache,org.modeshape.jcr.cache.NodeKey,org.modeshape.jcr.value.Name):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1364,"column_number":-1,"description":"call to NodeKey SessionNode.getParentKey(NodeCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":317,"column_number":-1,"description":"call to CachedNode SessionNode.nodeInWorkspace(AbstractSessionCache)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":309,"column_number":-1,"description":"call to CachedNode WorkspaceCache.getNode(NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":243,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":207,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(String)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":188,"column_number":-1,"description":"Call to un-annotated interface method SchematicEntry DocumentStore.get(String)"}],"key":"SessionNode.java|linkChild|INTERFACE_NOT_THREAD_SAFE","hash":"a7cc36c1c83eda912b5ff96cf141da1f","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEAvAD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xb3Jrc3BhY2VDYWNoZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `boolean SessionNode.linkChild(SessionCache,NodeKey,Name)` indirectly reads without synchronization from container `session.changedNodes` via call to `get`. Potentially races with write in method `SessionNode.deepClone(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1360,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.linkChild(org.modeshape.jcr.cache.SessionCache,org.modeshape.jcr.cache.NodeKey,org.modeshape.jcr.value.Name):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1360,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1360,"column_number":-1,"description":"call to void WritableSessionCache.assertInSession(SessionNode)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":152,"column_number":-1,"description":"Read of container `session.changedNodes` via call to `get`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1417,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1417,"column_number":-1,"description":"call to void SessionNode$DeepCopy.execute()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2701,"column_number":-1,"description":"call to void SessionNode$DeepCopy.doPhase2()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2846,"column_number":-1,"description":"call to boolean SessionNode.linkChild(SessionCache,NodeKey,Name)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1363,"column_number":-1,"description":"call to SessionNode WritableSessionCache.mutable(NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":203,"column_number":-1,"description":"Write to container `session.changedNodes` via call to `put`"}],"key":"SessionNode.java|linkChild|THREAD_SAFETY_VIOLATION","hash":"3b20ea0018188da0c659b355c44bc97d","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAKUAAAAIAAAAOgAAACigsAEAmAD/kglIc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xcml0YWJsZVNlc3Npb25DYWNoZS5qYXZhoLABAMsA/5IJSHNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvY2FjaGUvZG9jdW1lbnQvV3JpdGFibGVTZXNzaW9uQ2FjaGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `BucketedChildReferences$Bucket BucketedChildReferences.loadBucket(BucketId)` reads without synchronization from container `this.rangeBucketsById` via call to `get`. Potentially races with write in method `BucketedChildReferences.getChildCount(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":273,"column":-1,"procedure":"org.modeshape.jcr.cache.document.BucketedChildReferences.loadBucket(org.modeshape.jcr.cache.document.BucketId):org.modeshape.jcr.cache.document.BucketedChildReferences$Bucket","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":273,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":273,"column_number":-1,"description":"Read of container `this.rangeBucketsById` via call to `get`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":88,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":88,"column_number":-1,"description":"call to BucketedChildReferences$Bucket BucketedChildReferences.bucketFor(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":269,"column_number":-1,"description":"call to BucketedChildReferences$Bucket BucketedChildReferences.loadBucket(BucketId)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":284,"column_number":-1,"description":"Write to container `this.rangeBucketsById` via call to `put`"}],"key":"BucketedChildReferences.java|loadBucket|THREAD_SAFETY_VIOLATION","hash":"8b43d4791ee492197440a7107de5d74d","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAF8AAAAGAAAAJAAAABugsAEBEQD/kglLc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9CdWNrZXRlZENoaWxkUmVmZXJlbmNlcy5qYXZhoLABARwA/wQEQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Lock AbstractJcrNode.lock(boolean,boolean)` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":3310,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.lock(boolean,boolean):javax.jcr.lock.Lock","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3310,"column_number":-1,"description":"call to Lock JcrLockManager.lock(AbstractJcrNode,boolean,boolean,long,String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrLockManager.java","line_number":277,"column_number":-1,"description":"call to Lock RepositoryLockManager$ModeShapeLock.lockFor(JcrSession)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","line_number":661,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"AbstractJcrNode.java|lock|THREAD_SAFETY_VIOLATION","hash":"f4761accd85beaa0f0df70004e80b4b2","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Lock JcrSystemNode.lock(boolean,boolean)` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.lock(boolean,boolean):javax.jcr.lock.Lock","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to Lock AbstractJcrNode.lock(boolean,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3310,"column_number":-1,"description":"call to Lock JcrLockManager.lock(AbstractJcrNode,boolean,boolean,long,String)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrLockManager.java","line_number":277,"column_number":-1,"description":"call to Lock RepositoryLockManager$ModeShapeLock.lockFor(JcrSession)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","line_number":661,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"JcrSystemNode.java|lock|THREAD_SAFETY_VIOLATION","hash":"996c2b3a6b6388c16023e4e923702605","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Lock JcrLockManager.lock(String,boolean,boolean,long,String)` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":238,"column":-1,"procedure":"org.modeshape.jcr.JcrLockManager.lock(java.lang.String,boolean,boolean,long,java.lang.String):javax.jcr.lock.Lock","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrLockManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrLockManager.java","line_number":238,"column_number":-1,"description":"call to Lock JcrLockManager.lock(AbstractJcrNode,boolean,boolean,long,String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrLockManager.java","line_number":277,"column_number":-1,"description":"call to Lock RepositoryLockManager$ModeShapeLock.lockFor(JcrSession)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","line_number":661,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"JcrLockManager.java|lock|THREAD_SAFETY_VIOLATION","hash":"a77b46d5840157ca23dfa0d2a2ba021b","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `Lock JcrLockManager.lock(String,boolean,boolean,long,String)` indirectly reads without synchronization from `nodeKey.workspaceKey`. Potentially races with write in method `JcrLockManager.getLockIfExists(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":237,"column":-1,"procedure":"org.modeshape.jcr.JcrLockManager.lock(java.lang.String,boolean,boolean,long,java.lang.String):javax.jcr.lock.Lock","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrLockManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrLockManager.java","line_number":237,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrLockManager.java","line_number":237,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(Path)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":674,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.getNodeByIdentifier(String)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":778,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":165,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrLockManager.java","line_number":178,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrLockManager.java","line_number":178,"column_number":-1,"description":"call to Lock RepositoryLockManager$ModeShapeLock.lockFor(JcrSession)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","line_number":661,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"JcrLockManager.java|lock|THREAD_SAFETY_VIOLATION","hash":"9aa11c189074b2f0b03c7a7f61d19ef6","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAHkAAAAIAAAALgAAACKgsAEApQD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `MutableCachedNode MutableCachedNode.createChild(SessionCache,NodeKey,Name,Iterable)` of un-annotated interface `org.modeshape.jcr.cache.MutableCachedNode`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":274,"column":-1,"procedure":"org.modeshape.jcr.JcrLockManager.lock(org.modeshape.jcr.AbstractJcrNode,boolean,boolean,long,java.lang.String):javax.jcr.lock.Lock","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrLockManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrLockManager.java","line_number":274,"column_number":-1,"description":"call to RepositoryLockManager$ModeShapeLock RepositoryLockManager.lock(JcrSession,CachedNode,boolean,boolean,long,String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","line_number":353,"column_number":-1,"description":"call to void SystemContent.storeLock(RepositoryLockManager$ModeShapeLock)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/SystemContent.java","line_number":1096,"column_number":-1,"description":"Call to un-annotated interface method MutableCachedNode MutableCachedNode.createChild(SessionCache,NodeKey,Name,Iterable)"}],"key":"JcrLockManager.java|lock|INTERFACE_NOT_THREAD_SAFE","hash":"859c96a0710f860c27ed8994797ec3b7","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEESAD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9TeXN0ZW1Db250ZW50LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Lock JcrLockManager.lock(AbstractJcrNode,boolean,boolean,long,String)` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":277,"column":-1,"procedure":"org.modeshape.jcr.JcrLockManager.lock(org.modeshape.jcr.AbstractJcrNode,boolean,boolean,long,java.lang.String):javax.jcr.lock.Lock","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrLockManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrLockManager.java","line_number":277,"column_number":-1,"description":"call to Lock RepositoryLockManager$ModeShapeLock.lockFor(JcrSession)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","line_number":661,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"JcrLockManager.java|lock|THREAD_SAFETY_VIOLATION","hash":"8441c44b964c6ae9f0a558b640293ada","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `MutableCachedNode MutableCachedNode.createChild(SessionCache,NodeKey,Name,Iterable)` of un-annotated interface `org.modeshape.jcr.cache.MutableCachedNode`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":353,"column":-1,"procedure":"org.modeshape.jcr.RepositoryLockManager.lock(org.modeshape.jcr.JcrSession,org.modeshape.jcr.cache.CachedNode,boolean,boolean,long,java.lang.String):org.modeshape.jcr.RepositoryLockManager$ModeShapeLock","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","line_number":353,"column_number":-1,"description":"call to void SystemContent.storeLock(RepositoryLockManager$ModeShapeLock)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/SystemContent.java","line_number":1096,"column_number":-1,"description":"Call to un-annotated interface method MutableCachedNode MutableCachedNode.createChild(SessionCache,NodeKey,Name,Iterable)"}],"key":"RepositoryLockManager.java|lock|INTERFACE_NOT_THREAD_SAFE","hash":"84a574db3b9a4ff180948d23871d73c0","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEESAD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9TeXN0ZW1Db250ZW50LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `JcrLockManager JcrWorkspace.lockManager()` reads without synchronization from `this.lockManager`. Potentially races with write in method `JcrWorkspace.lockManager()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":574,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.lockManager():org.modeshape.jcr.JcrLockManager","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":574,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":574,"column_number":-1,"description":"access to `this.lockManager`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":577,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":577,"column_number":-1,"description":"access to `this.lockManager`"}],"key":"JcrWorkspace.java|lockManager|THREAD_SAFETY_VIOLATION","hash":"ccb23ec528d4b21078a24a609dc06473","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAGAAAAHgAAABigsAECPgD/kgkxc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JXb3Jrc3BhY2UuamF2YaCwAQJBAP8EBEA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `NodeKey RepositoryLockManager.lockedNodeKeyFromLockKey(NodeKey)` indirectly writes to field `key.identifier` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":243,"column":-1,"procedure":"org.modeshape.jcr.RepositoryLockManager.lockedNodeKeyFromLockKey(org.modeshape.jcr.cache.NodeKey):org.modeshape.jcr.cache.NodeKey","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","line_number":243,"column_number":-1,"description":"call to String NodeKey.getIdentifier()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":180,"column_number":-1,"description":"access to `key.identifier`"}],"key":"RepositoryLockManager.java|lockedNodeKeyFromLockKey|THREAD_SAFETY_VIOLATION","hash":"2573703a643cc1a2f18354f8d7ddeddd","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEAtAD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String Name.getString(NamespaceRegistry)` of un-annotated interface `org.modeshape.jcr.value.Name`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":404,"column":-1,"procedure":"org.modeshape.jcr.cache.document.WritableSessionCache.logChangesBeingSaved(java.lang.Iterable,java.util.Map,java.lang.Iterable,java.util.Map):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":404,"column_number":-1,"description":"call to String SessionNode.getString(NamespaceRegistry)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1700,"column_number":-1,"description":"Call to un-annotated interface method String Name.getString(NamespaceRegistry)"}],"key":"WritableSessionCache.java|logChangesBeingSaved|INTERFACE_NOT_THREAD_SAFE","hash":"7ef11c7746054a2d7ea4c14450a3bf4b","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEoAAAAEAAAAGgAAABKgsAEGpAD/kgk/c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9TZXNzaW9uTm9kZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void WritableSessionCache.logChangesBeingSaved(Iterable,Map,Iterable,Map)` reads without synchronization from `this.changedNodes`. Potentially races with write in method `WritableSessionCache.save()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":402,"column":-1,"procedure":"org.modeshape.jcr.cache.document.WritableSessionCache.logChangesBeingSaved(java.lang.Iterable,java.util.Map,java.lang.Iterable,java.util.Map):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":402,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":402,"column_number":-1,"description":"access to `this.changedNodes`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":432,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":432,"column_number":-1,"description":"call to void WritableSessionCache.save(SessionCache$PreSave)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":489,"column_number":-1,"description":"call to void WritableSessionCache.clearState()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":573,"column_number":-1,"description":"access to `this.changedNodes`"}],"key":"WritableSessionCache.java|logChangesBeingSaved|THREAD_SAFETY_VIOLATION","hash":"079296699be81f09542f91bf5377949c","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAKUAAAAIAAAAOgAAACigsAEBkgD/kglIc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xcml0YWJsZVNlc3Npb25DYWNoZS5qYXZhoLABAj0A/5IJSHNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvY2FjaGUvZG9jdW1lbnQvV3JpdGFibGVTZXNzaW9uQ2FjaGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String ChangeSet.getProcessKey()` of un-annotated interface `org.modeshape.jcr.cache.change.ChangeSet`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":138,"column":-1,"procedure":"org.modeshape.jcr.bus.ClusteredChangeBus.logReceivedOperation(org.modeshape.jcr.cache.change.ChangeSet):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/bus/ClusteredChangeBus.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/bus/ClusteredChangeBus.java","line_number":138,"column_number":-1,"description":"Call to un-annotated interface method String ChangeSet.getProcessKey()"}],"key":"ClusteredChangeBus.java|logReceivedOperation|INTERFACE_NOT_THREAD_SAFE","hash":"147d3d47bf7a041cf6770190024b7c4d","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEYAAAAEAAAAGQAAABKgsAEAigD/kgk7c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9idXMvQ2x1c3RlcmVkQ2hhbmdlQnVzLmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String ChangeSet.getProcessKey()` of un-annotated interface `org.modeshape.jcr.cache.change.ChangeSet`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":126,"column":-1,"procedure":"org.modeshape.jcr.bus.ClusteredChangeBus.logSendOperation(org.modeshape.jcr.cache.change.ChangeSet):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/bus/ClusteredChangeBus.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/bus/ClusteredChangeBus.java","line_number":126,"column_number":-1,"description":"Call to un-annotated interface method String ChangeSet.getProcessKey()"}],"key":"ClusteredChangeBus.java|logSendOperation|INTERFACE_NOT_THREAD_SAFE","hash":"fe4c88817f9be9c4eba9194292c6c578","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAB+AP+SCTtzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL2J1cy9DbHVzdGVyZWRDaGFuZ2VCdXMuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void CassandraBinaryStore.markAsUnused(Iterable)` reads without synchronization from `this.session`. Potentially races with write in method `CassandraBinaryStore.start()`.\n Reporting because a superclass `class org.modeshape.jcr.value.binary.AbstractBinaryStore` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":199,"column":-1,"procedure":"org.modeshape.jcr.value.binary.CassandraBinaryStore.markAsUnused(java.lang.Iterable):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/CassandraBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/CassandraBinaryStore.java","line_number":199,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/CassandraBinaryStore.java","line_number":199,"column_number":-1,"description":"access to `this.session`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/CassandraBinaryStore.java","line_number":262,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/CassandraBinaryStore.java","line_number":262,"column_number":-1,"description":"access to `this.session`"}],"key":"CassandraBinaryStore.java|markAsUnused|THREAD_SAFETY_VIOLATION","hash":"21b1bfe31ddb70cb33e6fc44cf4c5f59","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAKEAAAAIAAAAOAAAACagsAEAxwD/kglGc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvQ2Fzc2FuZHJhQmluYXJ5U3RvcmUuamF2YaCwAQEGAP+SCUZzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2JpbmFyeS9DYXNzYW5kcmFCaW5hcnlTdG9yZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void DatabaseBinaryStore.markAsUnused(Iterable)` indirectly reads without synchronization from `this.dataSource`. Potentially races with write in method `DatabaseBinaryStore.start()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":236,"column":-1,"procedure":"org.modeshape.jcr.value.binary.DatabaseBinaryStore.markAsUnused(java.lang.Iterable):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":236,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":236,"column_number":-1,"description":"call to Object DatabaseBinaryStore.dbCall(DatabaseBinaryStore$DBCallable)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":357,"column_number":-1,"description":"call to Connection DatabaseBinaryStore.newConnection()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":328,"column_number":-1,"description":"access to `this.dataSource`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":146,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":146,"column_number":-1,"description":"call to void DatabaseBinaryStore.lookupDataSource()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":338,"column_number":-1,"description":"access to `this.dataSource`"}],"key":"DatabaseBinaryStore.java|markAsUnused|THREAD_SAFETY_VIOLATION","hash":"05c43bd3946b1e8ad3908b6d1cef674b","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAJ8AAAAIAAAAOAAAACagsAEBSAD/kglFc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvRGF0YWJhc2VCaW5hcnlTdG9yZS5qYXZhoLABAVIA/5IJRXNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvdmFsdWUvYmluYXJ5L0RhdGFiYXNlQmluYXJ5U3RvcmUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void MongodbBinaryStore.markAsUnused(Iterable)` reads without synchronization from `this.db`. Potentially races with write in method `MongodbBinaryStore.start()`.\n Reporting because a superclass `class org.modeshape.jcr.value.binary.AbstractBinaryStore` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":251,"column":-1,"procedure":"org.modeshape.jcr.value.binary.MongodbBinaryStore.markAsUnused(java.lang.Iterable):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":251,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":251,"column_number":-1,"description":"access to `this.db`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":346,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":346,"column_number":-1,"description":"call to void MongodbBinaryStore.initMongoDatabase()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":367,"column_number":-1,"description":"access to `this.db`"}],"key":"MongodbBinaryStore.java|markAsUnused|THREAD_SAFETY_VIOLATION","hash":"d0b86aa2446ab0e8a52f20467f49ea90","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAJ0AAAAIAAAAOAAAACagsAEA+wD/kglEc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvTW9uZ29kYkJpbmFyeVN0b3JlLmphdmGgsAEBbwD/kglEc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvTW9uZ29kYkJpbmFyeVN0b3JlLmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Object DBObject.get(String)` of un-annotated interface `com.mongodb.DBObject`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.binary.AbstractBinaryStore` is annotated `@ThreadSafe`.","severity":"WARNING","line":253,"column":-1,"procedure":"org.modeshape.jcr.value.binary.MongodbBinaryStore.markAsUnused(java.lang.Iterable):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":253,"column_number":-1,"description":"call to void MongodbBinaryStore.setAttribute(DBCollection,String,Object)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":387,"column_number":-1,"description":"Call to un-annotated interface method Object DBObject.get(String)"}],"key":"MongodbBinaryStore.java|markAsUnused|INTERFACE_NOT_THREAD_SAFE","hash":"d075674113609bff087a3fbb981d052f","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE8AAAAEAAAAHAAAABOgsAEBgwD/kglEc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvTW9uZ29kYkJpbmFyeVN0b3JlLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void InfinispanBinaryStore.markAsUnused(Iterable)` reads with synchronization from `this.metadataCache`. Potentially races with unsynchronized write in method `InfinispanBinaryStore.start()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":324,"column":-1,"procedure":"org.modeshape.jcr.value.binary.infinispan.InfinispanBinaryStore.markAsUnused(java.lang.Iterable):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":324,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":324,"column_number":-1,"description":"access to `this.metadataCache`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":179,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":179,"column_number":-1,"description":"access to `this.metadataCache`"}],"key":"InfinispanBinaryStore.java|markAsUnused|THREAD_SAFETY_VIOLATION","hash":"79fedcc53eff94db45a0d31e2c610077","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAALkAAAAIAAAAPgAAACqgsAEBRAD/kglSc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvaW5maW5pc3Bhbi9JbmZpbmlzcGFuQmluYXJ5U3RvcmUuamF2YaCwAQCzAP+SCVJzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2JpbmFyeS9pbmZpbmlzcGFuL0luZmluaXNwYW5CaW5hcnlTdG9yZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void InfinispanBinaryStore.markAsUnused(Iterable)` reads with synchronization from `this.lockFactory`. Potentially races with unsynchronized write in method `InfinispanBinaryStore.start()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":321,"column":-1,"procedure":"org.modeshape.jcr.value.binary.infinispan.InfinispanBinaryStore.markAsUnused(java.lang.Iterable):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":321,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":321,"column_number":-1,"description":"access to `this.lockFactory`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":181,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":181,"column_number":-1,"description":"access to `this.lockFactory`"}],"key":"InfinispanBinaryStore.java|markAsUnused|THREAD_SAFETY_VIOLATION","hash":"27f10afc9ee6b2e07d6a7125208c959b","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAALkAAAAIAAAAPgAAACqgsAEBQQD/kglSc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvaW5maW5pc3Bhbi9JbmZpbmlzcGFuQmluYXJ5U3RvcmUuamF2YaCwAQC1AP+SCVJzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2JpbmFyeS9pbmZpbmlzcGFuL0luZmluaXNwYW5CaW5hcnlTdG9yZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void CassandraBinaryStore.markAsUsed(Iterable)` reads without synchronization from `this.session`. Potentially races with write in method `CassandraBinaryStore.start()`.\n Reporting because a superclass `class org.modeshape.jcr.value.binary.AbstractBinaryStore` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":190,"column":-1,"procedure":"org.modeshape.jcr.value.binary.CassandraBinaryStore.markAsUsed(java.lang.Iterable):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/CassandraBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/CassandraBinaryStore.java","line_number":190,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/CassandraBinaryStore.java","line_number":190,"column_number":-1,"description":"access to `this.session`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/CassandraBinaryStore.java","line_number":262,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/CassandraBinaryStore.java","line_number":262,"column_number":-1,"description":"access to `this.session`"}],"key":"CassandraBinaryStore.java|markAsUsed|THREAD_SAFETY_VIOLATION","hash":"1761236f6bdda7284be835eeb77f0f6a","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAKEAAAAIAAAAOAAAACagsAEAvgD/kglGc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvQ2Fzc2FuZHJhQmluYXJ5U3RvcmUuamF2YaCwAQEGAP+SCUZzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2JpbmFyeS9DYXNzYW5kcmFCaW5hcnlTdG9yZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void DatabaseBinaryStore.markAsUsed(Iterable)` indirectly reads without synchronization from `this.dataSource`. Potentially races with write in method `DatabaseBinaryStore.start()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":224,"column":-1,"procedure":"org.modeshape.jcr.value.binary.DatabaseBinaryStore.markAsUsed(java.lang.Iterable):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":224,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":224,"column_number":-1,"description":"call to Object DatabaseBinaryStore.dbCall(DatabaseBinaryStore$DBCallable)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":357,"column_number":-1,"description":"call to Connection DatabaseBinaryStore.newConnection()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":328,"column_number":-1,"description":"access to `this.dataSource`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":146,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":146,"column_number":-1,"description":"call to void DatabaseBinaryStore.lookupDataSource()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":338,"column_number":-1,"description":"access to `this.dataSource`"}],"key":"DatabaseBinaryStore.java|markAsUsed|THREAD_SAFETY_VIOLATION","hash":"13459b504305f61fe358973ca0d0c5c1","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAJ8AAAAIAAAAOAAAACagsAEBSAD/kglFc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvRGF0YWJhc2VCaW5hcnlTdG9yZS5qYXZhoLABAVIA/5IJRXNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvdmFsdWUvYmluYXJ5L0RhdGFiYXNlQmluYXJ5U3RvcmUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void MongodbBinaryStore.markAsUsed(Iterable)` reads without synchronization from `this.db`. Potentially races with write in method `MongodbBinaryStore.start()`.\n Reporting because a superclass `class org.modeshape.jcr.value.binary.AbstractBinaryStore` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":239,"column":-1,"procedure":"org.modeshape.jcr.value.binary.MongodbBinaryStore.markAsUsed(java.lang.Iterable):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":239,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":239,"column_number":-1,"description":"access to `this.db`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":346,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":346,"column_number":-1,"description":"call to void MongodbBinaryStore.initMongoDatabase()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":367,"column_number":-1,"description":"access to `this.db`"}],"key":"MongodbBinaryStore.java|markAsUsed|THREAD_SAFETY_VIOLATION","hash":"d300444acff7374226aec39b3b32a770","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAJ0AAAAIAAAAOAAAACagsAEA7wD/kglEc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvTW9uZ29kYkJpbmFyeVN0b3JlLmphdmGgsAEBbwD/kglEc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvTW9uZ29kYkJpbmFyeVN0b3JlLmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Object DBObject.get(String)` of un-annotated interface `com.mongodb.DBObject`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.binary.AbstractBinaryStore` is annotated `@ThreadSafe`.","severity":"WARNING","line":241,"column":-1,"procedure":"org.modeshape.jcr.value.binary.MongodbBinaryStore.markAsUsed(java.lang.Iterable):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":241,"column_number":-1,"description":"call to void MongodbBinaryStore.setAttribute(DBCollection,String,Object)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":387,"column_number":-1,"description":"Call to un-annotated interface method Object DBObject.get(String)"}],"key":"MongodbBinaryStore.java|markAsUsed|INTERFACE_NOT_THREAD_SAFE","hash":"bba487968f85e95c74edadb36fb2106f","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE8AAAAEAAAAHAAAABOgsAEBgwD/kglEc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvTW9uZ29kYkJpbmFyeVN0b3JlLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void InfinispanBinaryStore.markAsUsed(Iterable)` reads with synchronization from `this.lockFactory`. Potentially races with unsynchronized write in method `InfinispanBinaryStore.start()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":297,"column":-1,"procedure":"org.modeshape.jcr.value.binary.infinispan.InfinispanBinaryStore.markAsUsed(java.lang.Iterable):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":297,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":297,"column_number":-1,"description":"access to `this.lockFactory`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":181,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":181,"column_number":-1,"description":"access to `this.lockFactory`"}],"key":"InfinispanBinaryStore.java|markAsUsed|THREAD_SAFETY_VIOLATION","hash":"6c3a5750aa3c8e1d4941f507f08796e2","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAALkAAAAIAAAAPgAAACqgsAEBKQD/kglSc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvaW5maW5pc3Bhbi9JbmZpbmlzcGFuQmluYXJ5U3RvcmUuamF2YaCwAQC1AP+SCVJzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2JpbmFyeS9pbmZpbmlzcGFuL0luZmluaXNwYW5CaW5hcnlTdG9yZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void InfinispanBinaryStore.markAsUsed(Iterable)` reads with synchronization from `this.metadataCache`. Potentially races with unsynchronized write in method `InfinispanBinaryStore.start()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":300,"column":-1,"procedure":"org.modeshape.jcr.value.binary.infinispan.InfinispanBinaryStore.markAsUsed(java.lang.Iterable):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":300,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":300,"column_number":-1,"description":"access to `this.metadataCache`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":179,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":179,"column_number":-1,"description":"access to `this.metadataCache`"}],"key":"InfinispanBinaryStore.java|markAsUsed|THREAD_SAFETY_VIOLATION","hash":"066b02352943b293c63658b0fd145b6c","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAALkAAAAIAAAAPgAAACqgsAEBLAD/kglSc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvaW5maW5pc3Bhbi9JbmZpbmlzcGFuQmluYXJ5U3RvcmUuamF2YaCwAQCzAP+SCVJzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2JpbmFyeS9pbmZpbmlzcGFuL0luZmluaXNwYW5CaW5hcnlTdG9yZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `NodeIterator AbstractJcrNode.merge(String,boolean)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":3016,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.merge(java.lang.String,boolean):javax.jcr.NodeIterator","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3016,"column_number":-1,"description":"call to NodeIterator JcrVersionManager.merge(AbstractJcrNode,String,boolean,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":925,"column_number":-1,"description":"call to void JcrVersionManager$MergeCommand.execute()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":1701,"column_number":-1,"description":"call to void JcrVersionManager$MergeCommand.doMerge(AbstractJcrNode)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":1741,"column_number":-1,"description":"call to void JcrVersionManager$MergeCommand.doUpdate(AbstractJcrNode,AbstractJcrNode)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":1786,"column_number":-1,"description":"call to void JcrVersionManager$MergeCommand.restoreProperties(AbstractJcrNode,AbstractJcrNode)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":1916,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":11,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":12,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|merge|THREAD_SAFETY_VIOLATION","hash":"8a1d99e55a1ac05ecc15077ffc1af7b8","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `boolean NodeTypes$ReusableNodeDefinitionSet.appliesTo(NodeTypes,Name,Set)` of un-annotated interface `org.modeshape.jcr.NodeTypes$ReusableNodeDefinitionSet`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":3015,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.merge(java.lang.String,boolean):javax.jcr.NodeIterator","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3015,"column_number":-1,"description":"call to void AbstractJcrNode.checkNotProtected()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2929,"column_number":-1,"description":"call to NodeDefinition AbstractJcrNode.getDefinition()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2835,"column_number":-1,"description":"call to NodeDefinition AbstractJcrNode.nodeDefinition()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2907,"column_number":-1,"description":"call to NodeTypes$NodeDefinitionSet NodeTypes.findChildNodeDefinitions(Name,Set)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":2375,"column_number":-1,"description":"Call to un-annotated interface method boolean NodeTypes$ReusableNodeDefinitionSet.appliesTo(NodeTypes,Name,Set)"}],"key":"AbstractJcrNode.java|merge|INTERFACE_NOT_THREAD_SAFE","hash":"051ca4b0428d2b3f987a57a2efccab8d","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAADkAAAAEAAAAFgAAABCgsAEJRwD/kgkuc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9Ob2RlVHlwZXMuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `NodeIterator JcrSystemNode.merge(String,boolean)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.merge(java.lang.String,boolean):javax.jcr.NodeIterator","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to NodeIterator AbstractJcrNode.merge(String,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3016,"column_number":-1,"description":"call to NodeIterator JcrVersionManager.merge(AbstractJcrNode,String,boolean,boolean)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":925,"column_number":-1,"description":"call to void JcrVersionManager$MergeCommand.execute()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":1701,"column_number":-1,"description":"call to void JcrVersionManager$MergeCommand.doMerge(AbstractJcrNode)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":1741,"column_number":-1,"description":"call to void JcrVersionManager$MergeCommand.doUpdate(AbstractJcrNode,AbstractJcrNode)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":1786,"column_number":-1,"description":"call to void JcrVersionManager$MergeCommand.restoreProperties(AbstractJcrNode,AbstractJcrNode)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":1916,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":11,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":12,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":13,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrSystemNode.java|merge|THREAD_SAFETY_VIOLATION","hash":"9873c0c850e278608ad9f8f6892b009a","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `InputStream Binary.getStream()` of un-annotated interface `javax.jcr.Binary`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":62,"column":-1,"procedure":"org.modeshape.jcr.mimetype.TikaMimeTypeDetector.mimeTypeOf(java.lang.String,javax.jcr.Binary):java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/mimetype/TikaMimeTypeDetector.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/mimetype/TikaMimeTypeDetector.java","line_number":62,"column_number":-1,"description":"Call to un-annotated interface method InputStream Binary.getStream()"}],"key":"TikaMimeTypeDetector.java|mimeTypeOf|INTERFACE_NOT_THREAD_SAFE","hash":"9b8438cb50a2b4200277a8f89179b0dc","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEsAAAAEAAAAGwAAABOgsH4A/5IJQnNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvbWltZXR5cGUvVGlrYU1pbWVUeXBlRGV0ZWN0b3IuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `void Transactions$Transaction.commit()` of un-annotated interface `org.modeshape.jcr.txn.Transactions$Transaction`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":555,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.move(java.lang.String,java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":555,"column_number":-1,"description":"call to void JcrSession.save()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1172,"column_number":-1,"description":"call to JcrSession$JcrPreSave.<init>(JcrSession,SystemContent,Map,Map,long)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":2066,"column_number":-1,"description":"call to void JcrSession$JcrPreSave.aclMetadataRefresh(long)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":2077,"column_number":-1,"description":"call to void RepositoryCache.setAccessControlEnabled(boolean)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/RepositoryCache.java","line_number":415,"column_number":-1,"description":"call to void RepositoryCache.refreshRepositoryMetadata(boolean)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/RepositoryCache.java","line_number":624,"column_number":-1,"description":"call to Object RepositoryCache.runInTransaction(Callable,int,java.lang.String[])"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/cache/RepositoryCache.java","line_number":517,"column_number":-1,"description":"Call to un-annotated interface method void Transactions$Transaction.commit()"}],"key":"JcrWorkspace.java|move|INTERFACE_NOT_THREAD_SAFE","hash":"d8f235f073bd433d18128ea85dce55f8","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAECBQD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9SZXBvc2l0b3J5Q2FjaGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void JcrWorkspace.move(String,String)` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":554,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.move(java.lang.String,java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":554,"column_number":-1,"description":"call to void JcrSession.move(String,String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1028,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(Path)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":677,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,Path)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":659,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"JcrWorkspace.java|move|THREAD_SAFETY_VIOLATION","hash":"204c1a762e64c94e8b482fc948491e01","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `NodeCache NodeCache.unwrap()` of un-annotated interface `org.modeshape.jcr.cache.NodeCache`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":1232,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.moveChild(org.modeshape.jcr.cache.SessionCache,org.modeshape.jcr.cache.NodeKey,org.modeshape.jcr.cache.MutableCachedNode,org.modeshape.jcr.value.Name):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1232,"column_number":-1,"description":"call to WritableSessionCache SessionNode.writableSession(NodeCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":291,"column_number":-1,"description":"Call to un-annotated interface method NodeCache NodeCache.unwrap()"}],"key":"SessionNode.java|moveChild|INTERFACE_NOT_THREAD_SAFE","hash":"40708439f0c26ab021fd724f1dc2e3de","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEoAAAAEAAAAGgAAABKgsAEBIwD/kgk/c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9TZXNzaW9uTm9kZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void CompositeBinaryStore.moveValue(BinaryKey,String)` indirectly writes to field `this.defaultBinaryStore` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.value.binary.BinaryStore` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":203,"column":-1,"procedure":"org.modeshape.jcr.value.binary.CompositeBinaryStore.moveValue(org.modeshape.jcr.value.BinaryKey,java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/CompositeBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/CompositeBinaryStore.java","line_number":203,"column_number":-1,"description":"call to BinaryKey CompositeBinaryStore.moveValue(BinaryKey,String,String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/CompositeBinaryStore.java","line_number":173,"column_number":-1,"description":"call to BinaryStore CompositeBinaryStore.selectBinaryStore(String)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/binary/CompositeBinaryStore.java","line_number":427,"column_number":-1,"description":"call to BinaryStore CompositeBinaryStore.getDefaultBinaryStore()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/binary/CompositeBinaryStore.java","line_number":438,"column_number":-1,"description":"access to `this.defaultBinaryStore`"}],"key":"CompositeBinaryStore.java|moveValue|THREAD_SAFETY_VIOLATION","hash":"eda3ebd1f95c766c5e7df7039787d946","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFEAAAAEAAAAHAAAABOgsAEBtgD/kglGc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvQ29tcG9zaXRlQmluYXJ5U3RvcmUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `BinaryKey CompositeBinaryStore.moveValue(BinaryKey,String,String)` indirectly writes to field `this.defaultBinaryStore` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.value.binary.BinaryStore` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":173,"column":-1,"procedure":"org.modeshape.jcr.value.binary.CompositeBinaryStore.moveValue(org.modeshape.jcr.value.BinaryKey,java.lang.String,java.lang.String):org.modeshape.jcr.value.BinaryKey","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/CompositeBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/CompositeBinaryStore.java","line_number":173,"column_number":-1,"description":"call to BinaryStore CompositeBinaryStore.selectBinaryStore(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/CompositeBinaryStore.java","line_number":427,"column_number":-1,"description":"call to BinaryStore CompositeBinaryStore.getDefaultBinaryStore()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/binary/CompositeBinaryStore.java","line_number":438,"column_number":-1,"description":"access to `this.defaultBinaryStore`"}],"key":"CompositeBinaryStore.java|moveValue|THREAD_SAFETY_VIOLATION","hash":"c5481e9d7a5fcce737dd051ae2608cee","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFEAAAAEAAAAHAAAABOgsAEBtgD/kglGc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvQ29tcG9zaXRlQmluYXJ5U3RvcmUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `BinaryKey BinaryValue.getKey()` of un-annotated interface `org.modeshape.jcr.value.BinaryValue`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.binary.BinaryStore` is annotated `@ThreadSafe`.","severity":"WARNING","line":188,"column":-1,"procedure":"org.modeshape.jcr.value.binary.CompositeBinaryStore.moveValue(org.modeshape.jcr.value.BinaryKey,java.lang.String,java.lang.String):org.modeshape.jcr.value.BinaryKey","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/CompositeBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/CompositeBinaryStore.java","line_number":188,"column_number":-1,"description":"call to BinaryValue CompositeBinaryStore.storeValue(InputStream,String,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/CompositeBinaryStore.java","line_number":152,"column_number":-1,"description":"Call to un-annotated interface method BinaryKey BinaryValue.getKey()"}],"key":"CompositeBinaryStore.java|moveValue|INTERFACE_NOT_THREAD_SAFE","hash":"f1dad9fcc772e9a80efbe839fe508f8c","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAFEAAAAEAAAAHAAAABOgsAEAmAD/kglGc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvQ29tcG9zaXRlQmluYXJ5U3RvcmUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `MutableCachedNode SessionCache.mutable(NodeKey)` of un-annotated interface `org.modeshape.jcr.cache.SessionCache`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":212,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.mutable():org.modeshape.jcr.cache.MutableCachedNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":212,"column_number":-1,"description":"Call to un-annotated interface method MutableCachedNode SessionCache.mutable(NodeKey)"}],"key":"AbstractJcrNode.java|mutable|INTERFACE_NOT_THREAD_SAFE","hash":"9aa48f8eb92adac87b4255e733726618","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEA1AD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `MutableCachedNode WritableSessionCache.mutable(NodeKey)` indirectly reads with synchronization from `this.changedNodes`. Potentially races with unsynchronized write in method `WritableSessionCache.clearState()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":99,"column":-1,"procedure":"org.modeshape.jcr.cache.document.WritableSessionCache.mutable(org.modeshape.jcr.cache.NodeKey):org.modeshape.jcr.cache.MutableCachedNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":99,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":99,"column_number":-1,"description":"call to SessionNode WritableSessionCache.mutable(NodeKey)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":191,"column_number":-1,"description":"access to `this.changedNodes`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":573,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":573,"column_number":-1,"description":"access to `this.changedNodes`"}],"key":"WritableSessionCache.java|mutable|THREAD_SAFETY_VIOLATION","hash":"2243e51bac52ad790a7e53a0758104af","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAKUAAAAIAAAAOgAAACigsAEAvwD/kglIc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xcml0YWJsZVNlc3Npb25DYWNoZS5qYXZhoLABAj0A/5IJSHNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvY2FjaGUvZG9jdW1lbnQvV3JpdGFibGVTZXNzaW9uQ2FjaGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `SessionNode WritableSessionCache.mutable(NodeKey)` reads with synchronization from `this.changedNodes`. Potentially races with unsynchronized write in method `WritableSessionCache.clearState()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":191,"column":-1,"procedure":"org.modeshape.jcr.cache.document.WritableSessionCache.mutable(org.modeshape.jcr.cache.NodeKey):org.modeshape.jcr.cache.document.SessionNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":191,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":191,"column_number":-1,"description":"access to `this.changedNodes`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":573,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":573,"column_number":-1,"description":"access to `this.changedNodes`"}],"key":"WritableSessionCache.java|mutable|THREAD_SAFETY_VIOLATION","hash":"1f7c9377c38a9b541268571d4ed04cbc","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAKUAAAAIAAAAOgAAACigsAEAvwD/kglIc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xcml0YWJsZVNlc3Npb25DYWNoZS5qYXZhoLABAj0A/5IJSHNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvY2FjaGUvZG9jdW1lbnQvV3JpdGFibGVTZXNzaW9uQ2FjaGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `CachedNode SessionCache.getNode(NodeKey)` of un-annotated interface `org.modeshape.jcr.cache.SessionCache`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":221,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.mutableParent():org.modeshape.jcr.cache.MutableCachedNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":221,"column_number":-1,"description":"call to NodeKey AbstractJcrNode.parentKey()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":216,"column_number":-1,"description":"call to CachedNode AbstractJcrNode.node()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":201,"column_number":-1,"description":"Call to un-annotated interface method CachedNode SessionCache.getNode(NodeKey)"}],"key":"AbstractJcrNode.java|mutableParent|INTERFACE_NOT_THREAD_SAFE","hash":"df76ea8fe309209139f40c94a0a7c103","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEAyQD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Name CachedNode.getName(NodeCache)` of un-annotated interface `org.modeshape.jcr.cache.CachedNode`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":243,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.name():org.modeshape.jcr.value.Name","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":243,"column_number":-1,"description":"Call to un-annotated interface method Name CachedNode.getName(NodeCache)"}],"key":"AbstractJcrNode.java|name|INTERFACE_NOT_THREAD_SAFE","hash":"7ad00c8976ded0f33dfcbe61b0bdebd8","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEA8wD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Name JcrSharedNode.name()` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":97,"column":-1,"procedure":"org.modeshape.jcr.JcrSharedNode.name():org.modeshape.jcr.value.Name","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSharedNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSharedNode.java","line_number":97,"column_number":-1,"description":"call to Path$Segment JcrSharedNode.segment()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSharedNode.java","line_number":102,"column_number":-1,"description":"call to AbstractJcrNode JcrSharedNode.parent()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSharedNode.java","line_number":77,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"JcrSharedNode.java|name|THREAD_SAFETY_VIOLATION","hash":"e340ec138783c970a1bd54542f1fe09b","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `CachedNode SessionCache.getNode(NodeKey)` of un-annotated interface `org.modeshape.jcr.cache.SessionCache`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":201,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.node():org.modeshape.jcr.cache.CachedNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":201,"column_number":-1,"description":"Call to un-annotated interface method CachedNode SessionCache.getNode(NodeKey)"}],"key":"AbstractJcrNode.java|node|INTERFACE_NOT_THREAD_SAFE","hash":"b8f1cac9158c4e871a1b6332b8c24f1d","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEAyQD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `boolean NodeTypes$ReusableNodeDefinitionSet.appliesTo(NodeTypes,Name,Set)` of un-annotated interface `org.modeshape.jcr.NodeTypes$ReusableNodeDefinitionSet`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":2907,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.nodeDefinition():javax.jcr.nodetype.NodeDefinition","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2907,"column_number":-1,"description":"call to NodeTypes$NodeDefinitionSet NodeTypes.findChildNodeDefinitions(Name,Set)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":2375,"column_number":-1,"description":"Call to un-annotated interface method boolean NodeTypes$ReusableNodeDefinitionSet.appliesTo(NodeTypes,Name,Set)"}],"key":"AbstractJcrNode.java|nodeDefinition|INTERFACE_NOT_THREAD_SAFE","hash":"e5e78e4e8f232831b99f1aa7de3c3bad","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAADkAAAAEAAAAFgAAABCgsAEJRwD/kgkuc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9Ob2RlVHlwZXMuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `boolean NodeTypes$ReusableNodeDefinitionSet.appliesTo(NodeTypes,Name,Set)` of un-annotated interface `org.modeshape.jcr.NodeTypes$ReusableNodeDefinitionSet`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":2869,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.nodeDefinitionId():org.modeshape.jcr.NodeDefinitionId","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2869,"column_number":-1,"description":"call to NodeTypes$NodeDefinitionSet NodeTypes.findChildNodeDefinitions(Name,Set)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":2375,"column_number":-1,"description":"Call to un-annotated interface method boolean NodeTypes$ReusableNodeDefinitionSet.appliesTo(NodeTypes,Name,Set)"}],"key":"AbstractJcrNode.java|nodeDefinitionId|INTERFACE_NOT_THREAD_SAFE","hash":"bf5cf8a37954549f88adb32cd025846a","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAADkAAAAEAAAAFgAAABCgsAEJRwD/kgkuc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9Ob2RlVHlwZXMuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `NodeDefinitionId JcrRootNode.nodeDefinitionId()` reads without synchronization from `this.rootNodeDefnId`. Potentially races with write in method `JcrRootNode.nodeDefinitionId()`.\n Reporting because a superclass `class org.modeshape.jcr.AbstractJcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":41,"column":-1,"procedure":"org.modeshape.jcr.JcrRootNode.nodeDefinitionId():org.modeshape.jcr.NodeDefinitionId","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrRootNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRootNode.java","line_number":41,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRootNode.java","line_number":41,"column_number":-1,"description":"access to `this.rootNodeDefnId`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRootNode.java","line_number":43,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRootNode.java","line_number":43,"column_number":-1,"description":"access to `this.rootNodeDefnId`"}],"key":"JcrRootNode.java|nodeDefinitionId|THREAD_SAFETY_VIOLATION","hash":"6298c8c771eed95ee18419f421948d0c","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEAAAAAGAAAAHgAAABigsGkA/5IJMHNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvSmNyUm9vdE5vZGUuamF2YaCwawD/BARA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `NodeDefinitionId JcrRootNode.nodeDefinitionId()` writes to field `this.rootNodeDefnId` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.AbstractJcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":43,"column":-1,"procedure":"org.modeshape.jcr.JcrRootNode.nodeDefinitionId():org.modeshape.jcr.NodeDefinitionId","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrRootNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRootNode.java","line_number":43,"column_number":-1,"description":"access to `this.rootNodeDefnId`"}],"key":"JcrRootNode.java|nodeDefinitionId|THREAD_SAFETY_VIOLATION","hash":"719e843434e3b157c36b680f58cfe5b5","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAADkAAAAEAAAAFwAAABGgsGsA/5IJMHNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvSmNyUm9vdE5vZGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `SchematicEntry DocumentStore.get(String)` of un-annotated interface `org.modeshape.jcr.cache.document.DocumentStore`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":309,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.nodeInWorkspace(org.modeshape.jcr.cache.document.AbstractSessionCache):org.modeshape.jcr.cache.CachedNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":309,"column_number":-1,"description":"call to CachedNode WorkspaceCache.getNode(NodeKey)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":243,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(NodeKey)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":207,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(String)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":188,"column_number":-1,"description":"Call to un-annotated interface method SchematicEntry DocumentStore.get(String)"}],"key":"SessionNode.java|nodeInWorkspace|INTERFACE_NOT_THREAD_SAFE","hash":"68c34f8381a90eccd8008490447cb13b","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEAvAD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xb3Jrc3BhY2VDYWNoZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Path$Segment Path.getLastSegment()` of un-annotated interface `org.modeshape.jcr.value.Path`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":132,"column":-1,"procedure":"org.modeshape.jcr.cache.change.RecordingChanges.nodeRenamed(org.modeshape.jcr.cache.NodeKey,org.modeshape.jcr.value.Path,org.modeshape.jcr.value.Path$Segment,org.modeshape.jcr.value.Name,java.util.Set):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/change/RecordingChanges.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/change/RecordingChanges.java","line_number":132,"column_number":-1,"description":"call to NodeRenamed.<init>(NodeKey,Path,Path$Segment,Name,Set)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/change/NodeRenamed.java","line_number":40,"column_number":-1,"description":"Call to un-annotated interface method Path$Segment Path.getLastSegment()"}],"key":"RecordingChanges.java|nodeRenamed|INTERFACE_NOT_THREAD_SAFE","hash":"5a6e05b37761003507019ce2d4e7356f","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEYAAAAEAAAAGgAAABKgsGgA/5IJPXNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvY2FjaGUvY2hhbmdlL05vZGVSZW5hbWVkLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `JcrNodeTypeManager JcrWorkspace.nodeTypeManager()` reads without synchronization from `this.nodeTypeManager`. Potentially races with write in method `JcrWorkspace.getNodeTypeManager()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":628,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.nodeTypeManager():org.modeshape.jcr.JcrNodeTypeManager","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":628,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":628,"column_number":-1,"description":"access to `this.nodeTypeManager`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":624,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":624,"column_number":-1,"description":"call to JcrNodeTypeManager JcrWorkspace.nodeTypeManager()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":632,"column_number":-1,"description":"access to `this.nodeTypeManager`"}],"key":"JcrWorkspace.java|nodeTypeManager|THREAD_SAFETY_VIOLATION","hash":"0ba416653b3f11d400e78fe82a4099d4","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAHcAAAAIAAAALgAAACKgsAECdAD/kgkxc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JXb3Jrc3BhY2UuamF2YaCwAQJ4AP+SCTFzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL0pjcldvcmtzcGFjZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `NodeTypes RepositoryEnvironment.nodeTypes()` of un-annotated interface `org.modeshape.jcr.cache.RepositoryEnvironment`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":158,"column":-1,"procedure":"org.modeshape.jcr.cache.document.WritableSessionCache.nodeTypes():org.modeshape.jcr.NodeTypes","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":158,"column_number":-1,"description":"Call to un-annotated interface method NodeTypes RepositoryEnvironment.nodeTypes()"}],"key":"WritableSessionCache.java|nodeTypes|INTERFACE_NOT_THREAD_SAFE","hash":"e045586efdd1c8819b6b2e90830a374d","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAFMAAAAEAAAAHQAAABSgsAEAngD/kglIc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xcml0YWJsZVNlc3Npb25DYWNoZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `void IndexProvider$ProvidedIndexOperation.apply(String,IndexProvider$AtomicIndex)` of un-annotated interface `org.modeshape.jcr.spi.index.provider.IndexProvider$ProvidedIndexOperation`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":206,"column":-1,"procedure":"org.modeshape.jcr.RepositoryIndexManager.notify(org.modeshape.jcr.NodeTypes):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":206,"column_number":-1,"description":"call to void IndexProvider.notify(NodeTypes)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/spi/index/provider/IndexProvider.java","line_number":376,"column_number":-1,"description":"call to void IndexProvider.onEachIndex(IndexProvider$ProvidedIndexOperation)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/spi/index/provider/IndexProvider.java","line_number":586,"column_number":-1,"description":"Call to un-annotated interface method void IndexProvider$ProvidedIndexOperation.apply(String,IndexProvider$AtomicIndex)"}],"key":"RepositoryIndexManager.java|notify|INTERFACE_NOT_THREAD_SAFE","hash":"1ea4543b2ddcbb4d1b5c30bf128d8a3f","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAFAAAAAEAAAAHAAAABOgsAECSgD/kglFc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9zcGkvaW5kZXgvcHJvdmlkZXIvSW5kZXhQcm92aWRlci5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Set ChangeSet.changedNodes()` of un-annotated interface `org.modeshape.jcr.cache.change.ChangeSet`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":51,"column":-1,"procedure":"org.modeshape.jcr.BackupObserver.notify(org.modeshape.jcr.cache.change.ChangeSet):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/BackupObserver.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/BackupObserver.java","line_number":51,"column_number":-1,"description":"Call to un-annotated interface method Set ChangeSet.changedNodes()"}],"key":"BackupObserver.java|notify|INTERFACE_NOT_THREAD_SAFE","hash":"10be7a0e6b5ee6ce776028c156ece394","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAADwAAAAEAAAAFwAAABGgsHMA/5IJM3NyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvQmFja3VwT2JzZXJ2ZXIuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `RepositoryIndexManager$ScanningTasks RepositoryIndexManager.notify(ChangeSet)` mutates container `defns` via call to `add` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":600,"column":-1,"procedure":"org.modeshape.jcr.RepositoryIndexManager.notify(org.modeshape.jcr.cache.change.ChangeSet):org.modeshape.jcr.RepositoryIndexManager$ScanningTasks","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":600,"column_number":-1,"description":"Write to container `defns` via call to `add`"}],"key":"RepositoryIndexManager.java|notify|THREAD_SAFETY_VIOLATION","hash":"f74c2c58cf590601c295fc33aaa185b0","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEYAAAAEAAAAGQAAABKgsAECWAD/kgk7c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9SZXBvc2l0b3J5SW5kZXhNYW5hZ2VyLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `RepositoryIndexManager$ScanningTasks RepositoryIndexManager.notify(ChangeSet)` indirectly mutates container `indexes` via call to `add` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":575,"column":-1,"procedure":"org.modeshape.jcr.RepositoryIndexManager.notify(org.modeshape.jcr.cache.change.ChangeSet):org.modeshape.jcr.RepositoryIndexManager$ScanningTasks","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":575,"column_number":-1,"description":"call to RepositoryIndexes RepositoryIndexManager.readIndexDefinitions()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":817,"column_number":-1,"description":"call to RepositoryIndexManager$Indexes.<init>(ExecutionContext,Collection,NodeTypes)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":883,"column_number":-1,"description":"Write to container `indexes` via call to `add`"}],"key":"RepositoryIndexManager.java|notify|THREAD_SAFETY_VIOLATION","hash":"7c119f25238061ce16675e50afff71ad","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEYAAAAEAAAAGQAAABKgsAEDcwD/kgk7c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9SZXBvc2l0b3J5SW5kZXhNYW5hZ2VyLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `RepositoryIndexManager$ScanningTasks RepositoryIndexManager.notify(ChangeSet)` indirectly mutates container `byProviderName` via call to `put` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":646,"column":-1,"procedure":"org.modeshape.jcr.RepositoryIndexManager.notify(org.modeshape.jcr.cache.change.ChangeSet):org.modeshape.jcr.RepositoryIndexManager$ScanningTasks","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":646,"column_number":-1,"description":"call to RepositoryIndexManager$IndexChangeInfo RepositoryIndexManager.changeInfoForProvider(AtomicReference,Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":730,"column_number":-1,"description":"Write to container `byProviderName` via call to `put`"}],"key":"RepositoryIndexManager.java|notify|THREAD_SAFETY_VIOLATION","hash":"31d6e55f55e6a0887cc4df43cd3e1331","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEYAAAAEAAAAGQAAABKgsAEC2gD/kgk7c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9SZXBvc2l0b3J5SW5kZXhNYW5hZ2VyLmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `IndexDefinition$IndexKind IndexDefinition.getKind()` of un-annotated interface `org.modeshape.jcr.api.index.IndexDefinition`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":675,"column":-1,"procedure":"org.modeshape.jcr.RepositoryIndexManager.notify(org.modeshape.jcr.cache.change.ChangeSet):org.modeshape.jcr.RepositoryIndexManager$ScanningTasks","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":675,"column_number":-1,"description":"call to RepositoryIndexes RepositoryIndexManager.readIndexDefinitions()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":816,"column_number":-1,"description":"call to List SystemContent.readAllIndexDefinitions(Set)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/SystemContent.java","line_number":577,"column_number":-1,"description":"call to IndexDefinition RepositoryIndexDefinition.createFrom(IndexDefinition,boolean)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexDefinition.java","line_number":49,"column_number":-1,"description":"Call to un-annotated interface method IndexDefinition$IndexKind IndexDefinition.getKind()"}],"key":"RepositoryIndexManager.java|notify|INTERFACE_NOT_THREAD_SAFE","hash":"d0c313bd6c1792dc74a2c1ed3b5e2705","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEcAAAAEAAAAGgAAABKgsHEA/5IJPnNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvUmVwb3NpdG9yeUluZGV4RGVmaW5pdGlvbi5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void RepositoryLockManager.notify(ChangeSet)` indirectly writes to field `lockKey.identifier` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":510,"column":-1,"procedure":"org.modeshape.jcr.RepositoryLockManager.notify(org.modeshape.jcr.cache.change.ChangeSet):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","line_number":510,"column_number":-1,"description":"call to RepositoryLockManager$ModeShapeLock.<init>(RepositoryLockManager,NodeKey,Map)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","line_number":588,"column_number":-1,"description":"call to NodeKey RepositoryLockManager.lockedNodeKeyFromLockKey(NodeKey)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","line_number":243,"column_number":-1,"description":"call to String NodeKey.getIdentifier()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":180,"column_number":-1,"description":"access to `lockKey.identifier`"}],"key":"RepositoryLockManager.java|notify|THREAD_SAFETY_VIOLATION","hash":"170a3938d3d9a75fe40a07319ff63562","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEAtAD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String ChangeSet.getProcessKey()` of un-annotated interface `org.modeshape.jcr.cache.change.ChangeSet`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":494,"column":-1,"procedure":"org.modeshape.jcr.RepositoryLockManager.notify(org.modeshape.jcr.cache.change.ChangeSet):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","line_number":494,"column_number":-1,"description":"Call to un-annotated interface method String ChangeSet.getProcessKey()"}],"key":"RepositoryLockManager.java|notify|INTERFACE_NOT_THREAD_SAFE","hash":"6a65620a06bfe6b2df4d1b88381a719b","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEB7gD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9SZXBvc2l0b3J5TG9ja01hbmFnZXIuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void RepositoryNodeTypeManager.notify(ChangeSet)` indirectly reads with synchronization from `mutableTable.extraColumns`. Potentially races with unsynchronized write in method `RepositoryNodeTypeManager.getRepositorySchemata()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":724,"column":-1,"procedure":"org.modeshape.jcr.RepositoryNodeTypeManager.notify(org.modeshape.jcr.cache.change.ChangeSet):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/RepositoryNodeTypeManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryNodeTypeManager.java","line_number":724,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryNodeTypeManager.java","line_number":724,"column_number":-1,"description":"call to void RepositoryNodeTypeManager.unregisterNodeType(Collection,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryNodeTypeManager.java","line_number":200,"column_number":-1,"description":"call to boolean RepositoryNodeTypeManager.isNodeTypeInUse(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/RepositoryNodeTypeManager.java","line_number":314,"column_number":-1,"description":"call to NodeTypeSchemata RepositoryNodeTypeManager.getRepositorySchemata()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/RepositoryNodeTypeManager.java","line_number":289,"column_number":-1,"description":"call to NodeTypeSchemata.<init>(ExecutionContext,NodeTypes,boolean,boolean)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/NodeTypeSchemata.java","line_number":130,"column_number":-1,"description":"call to Schemata ImmutableSchemata$Builder.build()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/query/validate/ImmutableSchemata.java","line_number":440,"column_number":-1,"description":"call to Schemata$Table ImmutableSchemata$MutableTable.asImmutable()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/query/validate/ImmutableSchemata.java","line_number":652,"column_number":-1,"description":"access to `mutableTable.extraColumns`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryNodeTypeManager.java","line_number":289,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryNodeTypeManager.java","line_number":289,"column_number":-1,"description":"call to NodeTypeSchemata.<init>(ExecutionContext,NodeTypes,boolean,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/NodeTypeSchemata.java","line_number":130,"column_number":-1,"description":"call to Schemata ImmutableSchemata$Builder.build()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/validate/ImmutableSchemata.java","line_number":438,"column_number":-1,"description":"call to void ImmutableSchemata$MutableTable.setExtraColumns(boolean)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/query/validate/ImmutableSchemata.java","line_number":631,"column_number":-1,"description":"access to `mutableTable.extraColumns`"}],"key":"RepositoryNodeTypeManager.java|notify|THREAD_SAFETY_VIOLATION","hash":"18e151e709db1e11c3d3ce3651465f64","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAJ8AAAAIAAAAOAAAACagsAECjAD/kglFc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9xdWVyeS92YWxpZGF0ZS9JbW11dGFibGVTY2hlbWF0YS5qYXZhoLABAncA/5IJRXNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvcXVlcnkvdmFsaWRhdGUvSW1tdXRhYmxlU2NoZW1hdGEuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Name Path$Segment.getName()` of un-annotated interface `org.modeshape.jcr.value.Path$Segment`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":687,"column":-1,"procedure":"org.modeshape.jcr.RepositoryNodeTypeManager.notify(org.modeshape.jcr.cache.change.ChangeSet):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/RepositoryNodeTypeManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryNodeTypeManager.java","line_number":687,"column_number":-1,"description":"Call to un-annotated interface method Name Path$Segment.getName()"}],"key":"RepositoryNodeTypeManager.java|notify|INTERFACE_NOT_THREAD_SAFE","hash":"6b92d6a22a4c7439f8d4b17c3f71fe09","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEkAAAAEAAAAGgAAABKgsAECrwD/kgk+c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9SZXBvc2l0b3J5Tm9kZVR5cGVNYW5hZ2VyLmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Set ChangeSet.changedNodes()` of un-annotated interface `org.modeshape.jcr.cache.change.ChangeSet`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":381,"column":-1,"procedure":"org.modeshape.jcr.RepositoryStatistics.notify(org.modeshape.jcr.cache.change.ChangeSet):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/RepositoryStatistics.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryStatistics.java","line_number":381,"column_number":-1,"description":"Call to un-annotated interface method Set ChangeSet.changedNodes()"}],"key":"RepositoryStatistics.java|notify|INTERFACE_NOT_THREAD_SAFE","hash":"f38474cfb083198564bc94c3091e1be3","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEQAAAAEAAAAGQAAABKgsAEBfQD/kgk5c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9SZXBvc2l0b3J5U3RhdGlzdGljcy5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String ChangeSet.getProcessKey()` of un-annotated interface `org.modeshape.jcr.cache.change.ChangeSet`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":108,"column":-1,"procedure":"org.modeshape.jcr.bus.ClusteredChangeBus.notify(org.modeshape.jcr.cache.change.ChangeSet):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/bus/ClusteredChangeBus.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/bus/ClusteredChangeBus.java","line_number":108,"column_number":-1,"description":"call to void ClusteredChangeBus.consume(ChangeSet)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/bus/ClusteredChangeBus.java","line_number":72,"column_number":-1,"description":"call to void ClusteredChangeBus.logReceivedOperation(ChangeSet)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/bus/ClusteredChangeBus.java","line_number":138,"column_number":-1,"description":"Call to un-annotated interface method String ChangeSet.getProcessKey()"}],"key":"ClusteredChangeBus.java|notify|INTERFACE_NOT_THREAD_SAFE","hash":"ae763cd7a71a6d6b7ff482107883eb0e","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEYAAAAEAAAAGQAAABKgsAEAigD/kgk7c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9idXMvQ2x1c3RlcmVkQ2hhbmdlQnVzLmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `void ChangeSetListener.notify(ChangeSet)` of un-annotated interface `org.modeshape.jcr.cache.change.ChangeSetListener`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.cache.change.Observable` is annotated `@ThreadSafe`.","severity":"WARNING","line":190,"column":-1,"procedure":"org.modeshape.jcr.bus.RepositoryChangeBus.notify(org.modeshape.jcr.cache.change.ChangeSet):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/bus/RepositoryChangeBus.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/bus/RepositoryChangeBus.java","line_number":190,"column_number":-1,"description":"Call to un-annotated interface method void ChangeSetListener.notify(ChangeSet)"}],"key":"RepositoryChangeBus.java|notify|INTERFACE_NOT_THREAD_SAFE","hash":"4626d78bcb2139dc53ae7099ef626d1e","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEcAAAAEAAAAGgAAABKgsAEAvgD/kgk8c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9idXMvUmVwb3NpdG9yeUNoYW5nZUJ1cy5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String ChangeSet.getWorkspaceName()` of un-annotated interface `org.modeshape.jcr.cache.change.ChangeSet`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":71,"column":-1,"procedure":"org.modeshape.jcr.journal.ClusteredJournal.notify(org.modeshape.jcr.cache.change.ChangeSet):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":71,"column_number":-1,"description":"call to void LocalJournal.notify(ChangeSet)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","line_number":172,"column_number":-1,"description":"Call to un-annotated interface method String ChangeSet.getWorkspaceName()"}],"key":"ClusteredJournal.java|notify|INTERFACE_NOT_THREAD_SAFE","hash":"4bb9f320b8d7d48a94d7a899ede45c0b","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEQAAAAEAAAAGQAAABKgsAEArAD/kgk5c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9qb3VybmFsL0xvY2FsSm91cm5hbC5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String ChangeSet.getWorkspaceName()` of un-annotated interface `org.modeshape.jcr.cache.change.ChangeSet`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":172,"column":-1,"procedure":"org.modeshape.jcr.journal.LocalJournal.notify(org.modeshape.jcr.cache.change.ChangeSet):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","line_number":172,"column_number":-1,"description":"Call to un-annotated interface method String ChangeSet.getWorkspaceName()"}],"key":"LocalJournal.java|notify|INTERFACE_NOT_THREAD_SAFE","hash":"37f2f11ff4cd0d412db8dbf9d829e031","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEQAAAAEAAAAGQAAABKgsAEArAD/kgk5c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9qb3VybmFsL0xvY2FsSm91cm5hbC5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Name Property.getName()` of un-annotated interface `org.modeshape.jcr.value.Property`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":1428,"column":-1,"procedure":"org.modeshape.jcr.spi.index.provider.IndexProvider$AtomicIndex.notify(org.modeshape.jcr.cache.change.ChangeSet):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/spi/index/provider/IndexProvider.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/spi/index/provider/IndexProvider.java","line_number":1428,"column_number":-1,"description":"call to void ChangeSetAdapter.notify(ChangeSet)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/change/ChangeSetAdapter.java","line_number":112,"column_number":-1,"description":"Call to un-annotated interface method Name Property.getName()"}],"key":"IndexProvider.java|notify|INTERFACE_NOT_THREAD_SAFE","hash":"e654d8c889ed1d809c6b8bf36e76bb94","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEwAAAAEAAAAGwAAABOgsABwAP+SCUJzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL2NhY2hlL2NoYW5nZS9DaGFuZ2VTZXRBZGFwdGVyLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `JcrObservationManager JcrWorkspace.observationManager()` reads without synchronization from `this.observationManager`. Potentially races with write in method `JcrWorkspace.getObservationManager()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":648,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.observationManager():org.modeshape.jcr.JcrObservationManager","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":648,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":648,"column_number":-1,"description":"access to `this.observationManager`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":644,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":644,"column_number":-1,"description":"call to JcrObservationManager JcrWorkspace.observationManager()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":652,"column_number":-1,"description":"access to `this.observationManager`"}],"key":"JcrWorkspace.java|observationManager|THREAD_SAFETY_VIOLATION","hash":"240f240520d132529adee8e1bd51b03f","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAHcAAAAIAAAALgAAACKgsAECiAD/kgkxc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JXb3Jrc3BhY2UuamF2YaCwAQKMAP+SCTFzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL0pjcldvcmtzcGFjZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void AbstractJcrNode.orderBefore(String,String)` indirectly writes to field `nodeType.key.sourceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1371,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.orderBefore(java.lang.String,java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1371,"column_number":-1,"description":"call to JcrNodeType AbstractJcrNode.getPrimaryNodeType()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2278,"column_number":-1,"description":"call to JcrNodeType JcrNodeTypeManager.getNodeType(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrNodeTypeManager.java","line_number":148,"column_number":-1,"description":"call to JcrNodeType JcrNodeType.with(ExecutionContext,JcrSession)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":640,"column_number":-1,"description":"call to JcrNodeType.<init>(NodeKey,ExecutionContext,JcrSession,RepositoryNodeTypeManager,Name,List,Name,Collection,Collection,boolean,boolean,boolean,boolean)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":178,"column_number":-1,"description":"call to NodeKey NodeKey.withId(String)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":229,"column_number":-1,"description":"call to String NodeKey.getSourceKey()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":154,"column_number":-1,"description":"access to `nodeType.key.sourceKey`"}],"key":"AbstractJcrNode.java|orderBefore|THREAD_SAFETY_VIOLATION","hash":"b28f038b08584133586c17810f84ab02","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEAmgD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `ChildReference ChildReferences.getChild(Path$Segment)` of un-annotated interface `org.modeshape.jcr.cache.ChildReferences`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":1385,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.orderBefore(java.lang.String,java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1385,"column_number":-1,"description":"Call to un-annotated interface method ChildReference ChildReferences.getChild(Path$Segment)"}],"key":"AbstractJcrNode.java|orderBefore|INTERFACE_NOT_THREAD_SAFE","hash":"9191cd0ab9e52eff51657a05dadf52ce","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEFaQD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void AbstractJcrNode.orderBefore(String,String)` indirectly mutates container `ace.privileges` via call to `addAll` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1381,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.orderBefore(java.lang.String,java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1381,"column_number":-1,"description":"call to void JcrSession.checkPermission(AbstractJcrItem,java.lang.String[])"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1535,"column_number":-1,"description":"call to void JcrSession.checkPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1567,"column_number":-1,"description":"call to boolean JcrSession.hasPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1375,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPermission(Path,java.lang.String[])"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":322,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPrivileges(String,javax.jcr.security.Privilege[])"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":109,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.getApplicableACL(String)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":114,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.findAccessList(String,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":289,"column_number":-1,"description":"call to boolean JcrAccessControlList.addAccessControlEntry(Principal,javax.jcr.security.Privilege[])"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/security/acl/JcrAccessControlList.java","line_number":113,"column_number":-1,"description":"call to boolean AccessControlEntryImpl.addIfNotPresent(javax.jcr.security.Privilege[])"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/security/acl/AccessControlEntryImpl.java","line_number":103,"column_number":-1,"description":"Write to container `ace.privileges` via call to `addAll`"}],"key":"AbstractJcrNode.java|orderBefore|THREAD_SAFETY_VIOLATION","hash":"c33f269a2c827f997678d8e6a36f6295","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFIAAAAEAAAAHQAAABSgsABnAP+SCUhzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3NlY3VyaXR5L2FjbC9BY2Nlc3NDb250cm9sRW50cnlJbXBsLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void JcrSystemNode.orderBefore(String,String)` indirectly writes to field `nodeType.key.sourceKey` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.orderBefore(java.lang.String,java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to void AbstractJcrNode.orderBefore(String,String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1371,"column_number":-1,"description":"call to JcrNodeType AbstractJcrNode.getPrimaryNodeType()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2278,"column_number":-1,"description":"call to JcrNodeType JcrNodeTypeManager.getNodeType(Name)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrNodeTypeManager.java","line_number":148,"column_number":-1,"description":"call to JcrNodeType JcrNodeType.with(ExecutionContext,JcrSession)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":640,"column_number":-1,"description":"call to JcrNodeType.<init>(NodeKey,ExecutionContext,JcrSession,RepositoryNodeTypeManager,Name,List,Name,Collection,Collection,boolean,boolean,boolean,boolean)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":178,"column_number":-1,"description":"call to NodeKey NodeKey.withId(String)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":229,"column_number":-1,"description":"call to String NodeKey.getSourceKey()"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":154,"column_number":-1,"description":"access to `nodeType.key.sourceKey`"}],"key":"JcrSystemNode.java|orderBefore|THREAD_SAFETY_VIOLATION","hash":"123edcf3bdadcfd3ee5979002fcd03fa","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEAmgD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrNode JcrSharedNode.parent()` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":77,"column":-1,"procedure":"org.modeshape.jcr.JcrSharedNode.parent():org.modeshape.jcr.AbstractJcrNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSharedNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSharedNode.java","line_number":77,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"JcrSharedNode.java|parent|THREAD_SAFETY_VIOLATION","hash":"7ef1bf3573abb14d84de15c2a1e96be8","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `SchematicEntry DocumentStore.get(String)` of un-annotated interface `org.modeshape.jcr.cache.document.DocumentStore`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":333,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.parent(org.modeshape.jcr.cache.document.AbstractSessionCache):org.modeshape.jcr.cache.CachedNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":333,"column_number":-1,"description":"call to NodeKey SessionNode.getParentKey(NodeCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":317,"column_number":-1,"description":"call to CachedNode SessionNode.nodeInWorkspace(AbstractSessionCache)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":309,"column_number":-1,"description":"call to CachedNode WorkspaceCache.getNode(NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":243,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":207,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(String)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":188,"column_number":-1,"description":"Call to un-annotated interface method SchematicEntry DocumentStore.get(String)"}],"key":"SessionNode.java|parent|INTERFACE_NOT_THREAD_SAFE","hash":"6ad2d35fa6fcbaffbeb97695cb6678a6","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEAvAD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xb3Jrc3BhY2VDYWNoZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `SchematicEntry DocumentStore.get(String)` of un-annotated interface `org.modeshape.jcr.cache.document.DocumentStore`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":169,"column":-1,"procedure":"org.modeshape.jcr.cache.document.LazyCachedNode.parent(org.modeshape.jcr.cache.document.WorkspaceCache):org.modeshape.jcr.cache.CachedNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":169,"column_number":-1,"description":"call to CachedNode WorkspaceCache.getNode(NodeKey)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":243,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(NodeKey)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":207,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(String)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":188,"column_number":-1,"description":"Call to un-annotated interface method SchematicEntry DocumentStore.get(String)"}],"key":"LazyCachedNode.java|parent|INTERFACE_NOT_THREAD_SAFE","hash":"9a006a972e35c509bc444b0a3e3e30bd","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEAvAD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xb3Jrc3BhY2VDYWNoZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `CachedNode LazyCachedNode.parent(WorkspaceCache)` indirectly writes to field `this.key.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":165,"column":-1,"procedure":"org.modeshape.jcr.cache.document.LazyCachedNode.parent(org.modeshape.jcr.cache.document.WorkspaceCache):org.modeshape.jcr.cache.CachedNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":165,"column_number":-1,"description":"call to NodeKey LazyCachedNode.getParentKey(NodeCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":124,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `this.key.workspaceKey`"}],"key":"LazyCachedNode.java|parent|THREAD_SAFETY_VIOLATION","hash":"47df3e1851d8751b7804aed72ffaa072","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `CachedNode SessionCache.getNode(NodeKey)` of un-annotated interface `org.modeshape.jcr.cache.SessionCache`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":216,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.parentKey():org.modeshape.jcr.cache.NodeKey","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":216,"column_number":-1,"description":"call to CachedNode AbstractJcrNode.node()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":201,"column_number":-1,"description":"Call to un-annotated interface method CachedNode SessionCache.getNode(NodeKey)"}],"key":"AbstractJcrNode.java|parentKey|INTERFACE_NOT_THREAD_SAFE","hash":"a203d32c2ca6db0e1be42370c548899b","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEAyQD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `ChildReference LazyCachedNode.parentReferenceToSelf(WorkspaceCache)` indirectly writes to field `this.key.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":204,"column":-1,"procedure":"org.modeshape.jcr.cache.document.LazyCachedNode.parentReferenceToSelf(org.modeshape.jcr.cache.document.WorkspaceCache):org.modeshape.jcr.cache.ChildReference","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":204,"column_number":-1,"description":"call to CachedNode LazyCachedNode.parent(WorkspaceCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":165,"column_number":-1,"description":"call to NodeKey LazyCachedNode.getParentKey(NodeCache)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":124,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `this.key.workspaceKey`"}],"key":"LazyCachedNode.java|parentReferenceToSelf|THREAD_SAFETY_VIOLATION","hash":"f013ee56028f70a4f2f20caa6f90e2a5","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `ChildReference LazyCachedNode$ParentReferenceToSelf.childReferenceInParent()` of un-annotated interface `org.modeshape.jcr.cache.document.LazyCachedNode$ParentReferenceToSelf`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":207,"column":-1,"procedure":"org.modeshape.jcr.cache.document.LazyCachedNode.parentReferenceToSelf(org.modeshape.jcr.cache.document.WorkspaceCache):org.modeshape.jcr.cache.ChildReference","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":207,"column_number":-1,"description":"Call to un-annotated interface method ChildReference LazyCachedNode$ParentReferenceToSelf.childReferenceInParent()"}],"key":"LazyCachedNode.java|parentReferenceToSelf|INTERFACE_NOT_THREAD_SAFE","hash":"c12562012e6a3ed01e70d11ca2b2bfe5","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEAzwD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9MYXp5Q2FjaGVkTm9kZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `QueryCommand QueryParser.parseQuery(String,TypeSystem)` of un-annotated interface `org.modeshape.jcr.query.parse.QueryParser`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":182,"column":-1,"procedure":"org.modeshape.jcr.query.parse.QueryParsers.parse(org.modeshape.jcr.query.model.TypeSystem,java.lang.String,java.lang.String):org.modeshape.jcr.query.model.QueryCommand","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/query/parse/QueryParsers.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/query/parse/QueryParsers.java","line_number":182,"column_number":-1,"description":"Call to un-annotated interface method QueryCommand QueryParser.parseQuery(String,TypeSystem)"}],"key":"QueryParsers.java|parse|INTERFACE_NOT_THREAD_SAFE","hash":"f36c524df1483183aed38c603778c086","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEgAAAAEAAAAGgAAABKgsAEAtgD/kgk9c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9xdWVyeS9wYXJzZS9RdWVyeVBhcnNlcnMuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `CachedNode SessionCache.getNode(NodeKey)` of un-annotated interface `org.modeshape.jcr.cache.SessionCache`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":226,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.path():org.modeshape.jcr.value.Path","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":226,"column_number":-1,"description":"call to CachedNode AbstractJcrNode.node()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":201,"column_number":-1,"description":"Call to un-annotated interface method CachedNode SessionCache.getNode(NodeKey)"}],"key":"AbstractJcrNode.java|path|INTERFACE_NOT_THREAD_SAFE","hash":"15319dcb432a187d4569ed8881041656","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEAyQD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Path JcrSharedNode.path()` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":87,"column":-1,"procedure":"org.modeshape.jcr.JcrSharedNode.path():org.modeshape.jcr.value.Path","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSharedNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSharedNode.java","line_number":87,"column_number":-1,"description":"call to AbstractJcrNode JcrSharedNode.parent()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSharedNode.java","line_number":77,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"JcrSharedNode.java|path|THREAD_SAFETY_VIOLATION","hash":"68c4e18c62aea0d59d488b40195d1e08","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `ChildReference ChildReferences.getChild(NodeKey)` of un-annotated interface `org.modeshape.jcr.cache.ChildReferences`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":90,"column":-1,"procedure":"org.modeshape.jcr.JcrSharedNode.path():org.modeshape.jcr.value.Path","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSharedNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSharedNode.java","line_number":90,"column_number":-1,"description":"Call to un-annotated interface method ChildReference ChildReferences.getChild(NodeKey)"}],"key":"JcrSharedNode.java|path|INTERFACE_NOT_THREAD_SAFE","hash":"508af456c11101f85d1d2f7539e5d09d","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAADwAAAAEAAAAFwAAABGgsABaAP+SCTJzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL0pjclNoYXJlZE5vZGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `ChangeSet WritableSessionCache.persistChanges(Iterable,WorkspaceCache)` indirectly mutates container `parents` via call to `remove` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1017,"column":-1,"procedure":"org.modeshape.jcr.cache.document.WritableSessionCache.persistChanges(java.lang.Iterable,org.modeshape.jcr.cache.document.WorkspaceCache):org.modeshape.jcr.cache.change.ChangeSet","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":1017,"column_number":-1,"description":"call to void DocumentTranslator.setParents(EditableDocument,NodeKey,NodeKey,SessionNode$ChangedAdditionalParents)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/DocumentTranslator.java","line_number":630,"column_number":-1,"description":"Write to container `parents` via call to `remove`"}],"key":"WritableSessionCache.java|persistChanges|THREAD_SAFETY_VIOLATION","hash":"c41c516110a9d64121b973908999a2b4","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFEAAAAEAAAAHAAAABOgsAECdgD/kglGc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Eb2N1bWVudFRyYW5zbGF0b3IuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `ChangeSet WritableSessionCache.persistChanges(Iterable,WorkspaceCache)` reads with synchronization from `this.replacedNodes`. Potentially races with unsynchronized write in method `WritableSessionCache.clearState()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1325,"column":-1,"procedure":"org.modeshape.jcr.cache.document.WritableSessionCache.persistChanges(java.lang.Iterable,org.modeshape.jcr.cache.document.WorkspaceCache):org.modeshape.jcr.cache.change.ChangeSet","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":1325,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":1325,"column_number":-1,"description":"access to `this.replacedNodes`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":577,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":577,"column_number":-1,"description":"access to `this.replacedNodes`"}],"key":"WritableSessionCache.java|persistChanges|THREAD_SAFETY_VIOLATION","hash":"15b4f755b25adc6bba80dcb2c8944f42","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAKUAAAAIAAAAOgAAACigsAEFLQD/kglIc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xcml0YWJsZVNlc3Npb25DYWNoZS5qYXZhoLABAkEA/5IJSHNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvY2FjaGUvZG9jdW1lbnQvV3JpdGFibGVTZXNzaW9uQ2FjaGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `ChangeSet WritableSessionCache.persistChanges(Iterable,WorkspaceCache)` reads with synchronization from container `this.referrerChangesForRemovedNodes` via call to `get`. Potentially races with unsynchronized write in method `WritableSessionCache.clearState(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":982,"column":-1,"procedure":"org.modeshape.jcr.cache.document.WritableSessionCache.persistChanges(java.lang.Iterable,org.modeshape.jcr.cache.document.WorkspaceCache):org.modeshape.jcr.cache.change.ChangeSet","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":982,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":982,"column_number":-1,"description":"Read of container `this.referrerChangesForRemovedNodes` via call to `get`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":589,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":589,"column_number":-1,"description":"Write to container `this.referrerChangesForRemovedNodes` via call to `remove`"}],"key":"WritableSessionCache.java|persistChanges|THREAD_SAFETY_VIOLATION","hash":"442f3accd02cb6ea8f30437643f1dd39","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAKUAAAAIAAAAOgAAACigsAED1gD/kglIc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xcml0YWJsZVNlc3Npb25DYWNoZS5qYXZhoLABAk0A/5IJSHNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvY2FjaGUvZG9jdW1lbnQvV3JpdGFibGVTZXNzaW9uQ2FjaGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `ChangeSet WritableSessionCache.persistChanges(Iterable,WorkspaceCache)` indirectly mutates container `segments` via call to `add` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1083,"column":-1,"procedure":"org.modeshape.jcr.cache.document.WritableSessionCache.persistChanges(java.lang.Iterable,org.modeshape.jcr.cache.document.WorkspaceCache):org.modeshape.jcr.cache.change.ChangeSet","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":1083,"column_number":-1,"description":"call to void DocumentTranslator.addPropertyValues(EditableDocument,Name,boolean,Collection,Set,Set)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/DocumentTranslator.java","line_number":531,"column_number":-1,"description":"call to Object DocumentTranslator.valueToDocument(Object,Set,Set)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/DocumentTranslator.java","line_number":1176,"column_number":-1,"description":"Write to container `segments` via call to `add`"}],"key":"WritableSessionCache.java|persistChanges|THREAD_SAFETY_VIOLATION","hash":"9ff01e6cd5b890fccacc0000e663aa97","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFEAAAAEAAAAHAAAABOgsAEEmAD/kglGc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Eb2N1bWVudFRyYW5zbGF0b3IuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `ChangeSet WritableSessionCache.persistChanges(Iterable,WorkspaceCache)` indirectly mutates container `array` via call to `remove` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1085,"column":-1,"procedure":"org.modeshape.jcr.cache.document.WritableSessionCache.persistChanges(java.lang.Iterable,org.modeshape.jcr.cache.document.WorkspaceCache):org.modeshape.jcr.cache.change.ChangeSet","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":1085,"column_number":-1,"description":"call to void DocumentTranslator.removePropertyValues(EditableDocument,Name,Collection,Set,Set)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/DocumentTranslator.java","line_number":578,"column_number":-1,"description":"Write to container `array` via call to `remove`"}],"key":"WritableSessionCache.java|persistChanges|THREAD_SAFETY_VIOLATION","hash":"2f1ec65a8ef0ea9798143567c2df7f40","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFEAAAAEAAAAHAAAABOgsAECQgD/kglGc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Eb2N1bWVudFRyYW5zbGF0b3IuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `EditableArray EditableArray.addStringIfAbsent(String)` of un-annotated interface `org.infinispan.schematic.document.EditableArray`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":1064,"column":-1,"procedure":"org.modeshape.jcr.cache.document.WritableSessionCache.persistChanges(java.lang.Iterable,org.modeshape.jcr.cache.document.WorkspaceCache):org.modeshape.jcr.cache.change.ChangeSet","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":1064,"column_number":-1,"description":"call to void DocumentTranslator.setParents(EditableDocument,NodeKey,NodeKey,SessionNode$ChangedAdditionalParents)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/DocumentTranslator.java","line_number":628,"column_number":-1,"description":"Call to un-annotated interface method EditableArray EditableArray.addStringIfAbsent(String)"}],"key":"WritableSessionCache.java|persistChanges|INTERFACE_NOT_THREAD_SAFE","hash":"ebd3db5431d34cd4d5fded6b1eb17c2d","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAFEAAAAEAAAAHAAAABOgsAECdAD/kglGc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Eb2N1bWVudFRyYW5zbGF0b3IuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `ChangeSet WritableSessionCache.persistChanges(Iterable,WorkspaceCache)` reads with synchronization from container `this.changedNodes` via call to `keySet`. Potentially races with unsynchronized write in method `WritableSessionCache.clearState(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1448,"column":-1,"procedure":"org.modeshape.jcr.cache.document.WritableSessionCache.persistChanges(java.lang.Iterable,org.modeshape.jcr.cache.document.WorkspaceCache):org.modeshape.jcr.cache.change.ChangeSet","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":1448,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":1448,"column_number":-1,"description":"Read of container `this.changedNodes` via call to `keySet`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":584,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":584,"column_number":-1,"description":"Write to container `this.changedNodes` via call to `remove`"}],"key":"WritableSessionCache.java|persistChanges|THREAD_SAFETY_VIOLATION","hash":"fe5093ab4766ef79a6844b7108d551ea","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAKUAAAAIAAAAOgAAACigsAEFqAD/kglIc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xcml0YWJsZVNlc3Npb25DYWNoZS5qYXZhoLABAkgA/5IJSHNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvY2FjaGUvZG9jdW1lbnQvV3JpdGFibGVTZXNzaW9uQ2FjaGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `ChangeSet WritableSessionCache.persistChanges(Iterable,WorkspaceCache)` indirectly reads with synchronization from `this.changedNodes`. Potentially races with unsynchronized write in method `WritableSessionCache.clearState()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":962,"column":-1,"procedure":"org.modeshape.jcr.cache.document.WritableSessionCache.persistChanges(java.lang.Iterable,org.modeshape.jcr.cache.document.WorkspaceCache):org.modeshape.jcr.cache.change.ChangeSet","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":962,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":962,"column_number":-1,"description":"call to CachedNode WritableSessionCache.getNode(NodeKey)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":174,"column_number":-1,"description":"access to `this.changedNodes`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":573,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":573,"column_number":-1,"description":"access to `this.changedNodes`"}],"key":"WritableSessionCache.java|persistChanges|THREAD_SAFETY_VIOLATION","hash":"c6a7ede7199d1e0b560920f0f5d71217","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAKUAAAAIAAAAOgAAACigsAEArgD/kglIc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xcml0YWJsZVNlc3Npb25DYWNoZS5qYXZhoLABAj0A/5IJSHNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvY2FjaGUvZG9jdW1lbnQvV3JpdGFibGVTZXNzaW9uQ2FjaGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Object MarshalledEntry.getKey()` of un-annotated interface `org.infinispan.marshall.core.MarshalledEntry`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.infinispan.persistence.spi.AdvancedCacheLoader$CacheLoaderTask` is annotated `@ThreadSafe`.","severity":"WARNING","line":403,"column":-1,"procedure":"org.modeshape.jcr.value.binary.infinispan.InfinispanBinaryStore$2.processEntry(org.infinispan.marshall.core.MarshalledEntry,org.infinispan.persistence.spi.AdvancedCacheLoader$TaskContext):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":403,"column_number":-1,"description":"Call to un-annotated interface method Object MarshalledEntry.getKey()"}],"key":"InfinispanBinaryStore.java|processEntry|INTERFACE_NOT_THREAD_SAFE","hash":"c817143984c2ff60d48a630d0f759be0","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAF0AAAAEAAAAHwAAABWgsAEBkwD/kglSc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvaW5maW5pc3Bhbi9JbmZpbmlzcGFuQmluYXJ5U3RvcmUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Object MarshalledEntry.getKey()` of un-annotated interface `org.infinispan.marshall.core.MarshalledEntry`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.infinispan.persistence.spi.AdvancedCacheLoader$CacheLoaderTask` is annotated `@ThreadSafe`.","severity":"WARNING","line":590,"column":-1,"procedure":"org.modeshape.jcr.value.binary.infinispan.InfinispanBinaryStore$3.processEntry(org.infinispan.marshall.core.MarshalledEntry,org.infinispan.persistence.spi.AdvancedCacheLoader$TaskContext):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":590,"column_number":-1,"description":"Call to un-annotated interface method Object MarshalledEntry.getKey()"}],"key":"InfinispanBinaryStore.java|processEntry|INTERFACE_NOT_THREAD_SAFE","hash":"c817143984c2ff60d48a630d0f759be0","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAF0AAAAEAAAAHwAAABWgsAECTgD/kglSc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvaW5maW5pc3Bhbi9JbmZpbmlzcGFuQmluYXJ5U3RvcmUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `PropertyDefinition Property.getDefinition()` of un-annotated interface `javax.jcr.Property`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":2203,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.propertiesOnOtherNodesReferencingThis(java.lang.String,int):javax.jcr.PropertyIterator","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2203,"column_number":-1,"description":"Call to un-annotated interface method PropertyDefinition Property.getDefinition()"}],"key":"AbstractJcrNode.java|propertiesOnOtherNodesReferencingThis|INTERFACE_NOT_THREAD_SAFE","hash":"55d732f80e3c3c55494399cb5db95226","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEImwD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":458,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.propertyDefinitionFor(org.modeshape.jcr.value.Property,org.modeshape.jcr.value.Name,java.util.Set,org.modeshape.jcr.NodeTypes):org.modeshape.jcr.JcrPropertyDefinition","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|propertyDefinitionFor|THREAD_SAFETY_VIOLATION","hash":"20df5349420cf57a8bfc07af6f17bf72","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Set CachedNode.getMixinTypes(NodeCache)` of un-annotated interface `org.modeshape.jcr.cache.CachedNode`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":472,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.propertyDefinitionFor(org.modeshape.jcr.value.Property,org.modeshape.jcr.value.Name,java.util.Set,org.modeshape.jcr.NodeTypes):org.modeshape.jcr.JcrPropertyDefinition","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":472,"column_number":-1,"description":"Call to un-annotated interface method Set CachedNode.getMixinTypes(NodeCache)"}],"key":"AbstractJcrNode.java|propertyDefinitionFor|INTERFACE_NOT_THREAD_SAFE","hash":"85813178da82516fc713e17398c56e26","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEB2AD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `ChildReference ChildReferences.getChild(Name)` of un-annotated interface `org.modeshape.jcr.cache.ChildReferences`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":816,"column":-1,"procedure":"org.modeshape.jcr.RepositoryIndexManager.readIndexDefinitions():org.modeshape.jcr.RepositoryIndexes","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":816,"column_number":-1,"description":"call to List SystemContent.readAllIndexDefinitions(Set)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/SystemContent.java","line_number":565,"column_number":-1,"description":"call to CachedNode SystemContent.indexesNode()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/SystemContent.java","line_number":202,"column_number":-1,"description":"call to NodeKey SystemContent.indexesKey()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/SystemContent.java","line_number":152,"column_number":-1,"description":"call to CachedNode SystemContent.systemNode()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/SystemContent.java","line_number":190,"column_number":-1,"description":"call to NodeKey SystemContent.systemKey()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/SystemContent.java","line_number":133,"column_number":-1,"description":"Call to un-annotated interface method ChildReference ChildReferences.getChild(Name)"}],"key":"RepositoryIndexManager.java|readIndexDefinitions|INTERFACE_NOT_THREAD_SAFE","hash":"35abab2f0661ae73ba46a2afc79e718f","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEAhQD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9TeXN0ZW1Db250ZW50LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `RepositoryIndexes RepositoryIndexManager.readIndexDefinitions()` indirectly mutates container `indexes` via call to `add` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":817,"column":-1,"procedure":"org.modeshape.jcr.RepositoryIndexManager.readIndexDefinitions():org.modeshape.jcr.RepositoryIndexes","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":817,"column_number":-1,"description":"call to RepositoryIndexManager$Indexes.<init>(ExecutionContext,Collection,NodeTypes)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":883,"column_number":-1,"description":"Write to container `indexes` via call to `add`"}],"key":"RepositoryIndexManager.java|readIndexDefinitions|THREAD_SAFETY_VIOLATION","hash":"225997769611e910208ce779e04a8ebe","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEYAAAAEAAAAGQAAABKgsAEDcwD/kgk7c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9SZXBvc2l0b3J5SW5kZXhNYW5hZ2VyLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `boolean ClusteredJournal.reconciliationCompleted()` reads without synchronization from `this.reconciliationLatch`. Potentially races with write in method `ClusteredJournal.start()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":190,"column":-1,"procedure":"org.modeshape.jcr.journal.ClusteredJournal.reconciliationCompleted():boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":190,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":190,"column_number":-1,"description":"access to `this.reconciliationLatch`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":96,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":96,"column_number":-1,"description":"access to `this.reconciliationLatch`"}],"key":"ClusteredJournal.java|reconciliationCompleted|THREAD_SAFETY_VIOLATION","hash":"34454c61ff8b6447719cf0f37c775952","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAI4AAAAIAAAANAAAACSgsAEAvgD/kgk9c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9qb3VybmFsL0NsdXN0ZXJlZEpvdXJuYWwuamF2YaCwAGAA/5IJPXNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3Ivam91cm5hbC9DbHVzdGVyZWRKb3VybmFsLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `ChangeJournal$Records ClusteredJournal.recordsNewerThan(DateTime,boolean,boolean)` indirectly reads without synchronization from `this.localJournal.records`. Potentially races with write in method `ClusteredJournal.start()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":154,"column":-1,"procedure":"org.modeshape.jcr.journal.ClusteredJournal.recordsNewerThan(org.joda.time.DateTime,boolean,boolean):org.modeshape.jcr.journal.ChangeJournal$Records","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":154,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":154,"column_number":-1,"description":"call to ChangeJournal$Records LocalJournal.recordsNewerThan(DateTime,boolean,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","line_number":247,"column_number":-1,"description":"access to `this.localJournal.records`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":81,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":81,"column_number":-1,"description":"call to void LocalJournal.start()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","line_number":140,"column_number":-1,"description":"access to `this.localJournal.records`"}],"key":"ClusteredJournal.java|recordsNewerThan|THREAD_SAFETY_VIOLATION","hash":"ccb64a1c0ae4ebcec358300f11aa18a6","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAIcAAAAIAAAAMgAAACSgsAEA9wD/kgk5c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9qb3VybmFsL0xvY2FsSm91cm5hbC5qYXZhoLABAIwA/5IJOXNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3Ivam91cm5hbC9Mb2NhbEpvdXJuYWwuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `ChangeJournal$Records LocalJournal.recordsNewerThan(DateTime,boolean,boolean)` reads without synchronization from `this.records`. Potentially races with write in method `LocalJournal.start()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":247,"column":-1,"procedure":"org.modeshape.jcr.journal.LocalJournal.recordsNewerThan(org.joda.time.DateTime,boolean,boolean):org.modeshape.jcr.journal.ChangeJournal$Records","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","line_number":247,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","line_number":247,"column_number":-1,"description":"access to `this.records`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","line_number":140,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","line_number":140,"column_number":-1,"description":"access to `this.records`"}],"key":"LocalJournal.java|recordsNewerThan|THREAD_SAFETY_VIOLATION","hash":"7992644cc97b5b5f1affc538b3c3f0f6","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAIcAAAAIAAAAMgAAACSgsAEA9wD/kgk5c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9qb3VybmFsL0xvY2FsSm91cm5hbC5qYXZhoLABAIwA/5IJOXNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3Ivam91cm5hbC9Mb2NhbEpvdXJuYWwuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `ChangeJournal$Records LocalJournal.recordsNewerThan(DateTime,boolean,boolean)` reads without synchronization from `this.searchTimeDelta`. Potentially races with write in method `LocalJournal.withSearchTimeDelta(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":244,"column":-1,"procedure":"org.modeshape.jcr.journal.LocalJournal.recordsNewerThan(org.joda.time.DateTime,boolean,boolean):org.modeshape.jcr.journal.ChangeJournal$Records","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","line_number":244,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","line_number":244,"column_number":-1,"description":"access to `this.searchTimeDelta`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","line_number":324,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","line_number":324,"column_number":-1,"description":"access to `this.searchTimeDelta`"}],"key":"LocalJournal.java|recordsNewerThan|THREAD_SAFETY_VIOLATION","hash":"15ef7fba35fd84be00e6f9144656f605","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAIcAAAAIAAAAMgAAACSgsAEA9AD/kgk5c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9qb3VybmFsL0xvY2FsSm91cm5hbC5qYXZhoLABAUQA/5IJOXNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3Ivam91cm5hbC9Mb2NhbEpvdXJuYWwuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `long DateTime.getMillisecondsInUtc()` of un-annotated interface `org.modeshape.jcr.api.value.DateTime`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":257,"column":-1,"procedure":"org.modeshape.jcr.journal.LocalJournal.recordsNewerThan(org.joda.time.DateTime,boolean,boolean):org.modeshape.jcr.journal.ChangeJournal$Records","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","line_number":257,"column_number":-1,"description":"call to long JournalRecord.getChangeTimeMillis()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/journal/JournalRecord.java","line_number":110,"column_number":-1,"description":"Call to un-annotated interface method long DateTime.getMillisecondsInUtc()"}],"key":"LocalJournal.java|recordsNewerThan|INTERFACE_NOT_THREAD_SAFE","hash":"e1fe6ade0a7fe6447d701b0ac26f2414","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEQAAAAEAAAAGQAAABKgsABuAP+SCTpzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL2pvdXJuYWwvSm91cm5hbFJlY29yZC5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Set CachedNode.getMixinTypes(NodeCache)` of un-annotated interface `org.modeshape.jcr.cache.CachedNode`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":2232,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.referringNodes(org.modeshape.jcr.cache.CachedNode$ReferenceType):javax.jcr.NodeIterator","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2232,"column_number":-1,"description":"call to boolean AbstractJcrNode.isReferenceable()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":546,"column_number":-1,"description":"Call to un-annotated interface method Set CachedNode.getMixinTypes(NodeCache)"}],"key":"AbstractJcrNode.java|referringNodes|INTERFACE_NOT_THREAD_SAFE","hash":"6cb1c98ff6d471f99b3d97fa17a9f887","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAECIgD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `void SessionCache.clear(CachedNode)` of un-annotated interface `org.modeshape.jcr.cache.SessionCache`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":3421,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.refresh(boolean):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3421,"column_number":-1,"description":"Call to un-annotated interface method void SessionCache.clear(CachedNode)"}],"key":"AbstractJcrNode.java|refresh|INTERFACE_NOT_THREAD_SAFE","hash":"ee240af8a252d9e59c03a7e4b6e00ea6","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAENXQD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `void SessionCache.clear(CachedNode)` of un-annotated interface `org.modeshape.jcr.cache.SessionCache`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`.","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.refresh(boolean):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to void AbstractJcrNode.refresh(boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3421,"column_number":-1,"description":"Call to un-annotated interface method void SessionCache.clear(CachedNode)"}],"key":"JcrSystemNode.java|refresh|INTERFACE_NOT_THREAD_SAFE","hash":"34b2d1d82280f5e3c9408024727ec8ff","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAENXQD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `ChildReference ChildReferences.getChild(Name)` of un-annotated interface `org.modeshape.jcr.cache.ChildReferences`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":123,"column":-1,"procedure":"org.modeshape.jcr.RepositoryLockManager.refreshFromSystem():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","line_number":123,"column_number":-1,"description":"call to CachedNode SystemContent.locksNode()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/SystemContent.java","line_number":206,"column_number":-1,"description":"call to NodeKey SystemContent.locksKey()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/SystemContent.java","line_number":172,"column_number":-1,"description":"call to CachedNode SystemContent.systemNode()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/SystemContent.java","line_number":190,"column_number":-1,"description":"call to NodeKey SystemContent.systemKey()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/SystemContent.java","line_number":133,"column_number":-1,"description":"Call to un-annotated interface method ChildReference ChildReferences.getChild(Name)"}],"key":"RepositoryLockManager.java|refreshFromSystem|INTERFACE_NOT_THREAD_SAFE","hash":"e010a557cdfcb56273bde08850063aa0","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEAhQD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9TeXN0ZW1Db250ZW50LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `boolean SystemNamespaceRegistry.refreshFromSystem()` reads with synchronization from `this.context`. Potentially races with unsynchronized write in method `SystemNamespaceRegistry.setContext(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":73,"column":-1,"procedure":"org.modeshape.jcr.SystemNamespaceRegistry.refreshFromSystem():boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/SystemNamespaceRegistry.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/SystemNamespaceRegistry.java","line_number":73,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/SystemNamespaceRegistry.java","line_number":73,"column_number":-1,"description":"access to `this.context`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/SystemNamespaceRegistry.java","line_number":60,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/SystemNamespaceRegistry.java","line_number":60,"column_number":-1,"description":"access to `this.context`"}],"key":"SystemNamespaceRegistry.java|refreshFromSystem|THREAD_SAFETY_VIOLATION","hash":"b2ed188dc1b24d45b40471c4d0c0b2e6","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAIoAAAAIAAAANAAAACSgsABJAP+SCTxzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL1N5c3RlbU5hbWVzcGFjZVJlZ2lzdHJ5LmphdmGgsHwA/5IJPHNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvU3lzdGVtTmFtZXNwYWNlUmVnaXN0cnkuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `boolean IndexWriter.canBeSkipped()` of un-annotated interface `org.modeshape.jcr.spi.index.IndexWriter`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":233,"column":-1,"procedure":"org.modeshape.jcr.RepositoryIndexManager.refreshIndexWriter():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":233,"column_number":-1,"description":"call to IndexWriter CompositeIndexWriter.create(Iterable)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/query/CompositeIndexWriter.java","line_number":39,"column_number":-1,"description":"Call to un-annotated interface method boolean IndexWriter.canBeSkipped()"}],"key":"RepositoryIndexManager.java|refreshIndexWriter|INTERFACE_NOT_THREAD_SAFE","hash":"aab99381a2c225b1ed3791e2c675cf89","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEgAAAAEAAAAGgAAABKgsGcA/5IJP3NyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvcXVlcnkvQ29tcG9zaXRlSW5kZXhXcml0ZXIuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void JcrRepository.refreshWorkspaces()` mutates container `this.descriptors` via call to `put` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":909,"column":-1,"procedure":"org.modeshape.jcr.JcrRepository.refreshWorkspaces():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrRepository.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":909,"column_number":-1,"description":"<Write on unknown thread>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":909,"column_number":-1,"description":"Write to container `this.descriptors` via call to `put`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":369,"column_number":-1,"description":"<Write on background thread>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":369,"column_number":-1,"description":"call to void JcrRepository.refreshWorkspaces()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":909,"column_number":-1,"description":"Write to container `this.descriptors` via call to `put`"}],"key":"JcrRepository.java|refreshWorkspaces|THREAD_SAFETY_VIOLATION","hash":"6a9a0191a76e61a9f748e1c4cf5f7524","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAHkAAAAIAAAALgAAACKgsAEDjQD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JSZXBvc2l0b3J5LmphdmGgsAEDjQD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JSZXBvc2l0b3J5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void SystemNamespaceRegistry.register(Iterable)` indirectly reads with synchronization from `this.context`. Potentially races with unsynchronized write in method `SystemNamespaceRegistry.setContext(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":153,"column":-1,"procedure":"org.modeshape.jcr.SystemNamespaceRegistry.register(java.lang.Iterable):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/SystemNamespaceRegistry.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/SystemNamespaceRegistry.java","line_number":153,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/SystemNamespaceRegistry.java","line_number":153,"column_number":-1,"description":"call to void SystemNamespaceRegistry.register(Map)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/SystemNamespaceRegistry.java","line_number":169,"column_number":-1,"description":"call to SystemContent SystemNamespaceRegistry.systemContent(boolean)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/SystemNamespaceRegistry.java","line_number":88,"column_number":-1,"description":"access to `this.context`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/SystemNamespaceRegistry.java","line_number":60,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/SystemNamespaceRegistry.java","line_number":60,"column_number":-1,"description":"access to `this.context`"}],"key":"SystemNamespaceRegistry.java|register|THREAD_SAFETY_VIOLATION","hash":"d24505ea63616da2fecb60f1cb250fd9","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAIoAAAAIAAAANAAAACSgsABYAP+SCTxzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL1N5c3RlbU5hbWVzcGFjZVJlZ2lzdHJ5LmphdmGgsHwA/5IJPHNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvU3lzdGVtTmFtZXNwYWNlUmVnaXN0cnkuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `String SystemNamespaceRegistry.register(String,String)` indirectly reads with synchronization from `this.context`. Potentially races with unsynchronized write in method `SystemNamespaceRegistry.setContext(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":195,"column":-1,"procedure":"org.modeshape.jcr.SystemNamespaceRegistry.register(java.lang.String,java.lang.String):java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/SystemNamespaceRegistry.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/SystemNamespaceRegistry.java","line_number":195,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/SystemNamespaceRegistry.java","line_number":195,"column_number":-1,"description":"call to SystemContent SystemNamespaceRegistry.systemContent(boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/SystemNamespaceRegistry.java","line_number":88,"column_number":-1,"description":"access to `this.context`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/SystemNamespaceRegistry.java","line_number":60,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/SystemNamespaceRegistry.java","line_number":60,"column_number":-1,"description":"access to `this.context`"}],"key":"SystemNamespaceRegistry.java|register|THREAD_SAFETY_VIOLATION","hash":"6d96086dfc20c0b2967e48254845051f","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAIoAAAAIAAAANAAAACSgsABYAP+SCTxzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL1N5c3RlbU5hbWVzcGFjZVJlZ2lzdHJ5LmphdmGgsHwA/5IJPHNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvU3lzdGVtTmFtZXNwYWNlUmVnaXN0cnkuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void SystemNamespaceRegistry.register(Map)` indirectly reads with synchronization from `this.context`. Potentially races with unsynchronized write in method `SystemNamespaceRegistry.setContext(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":169,"column":-1,"procedure":"org.modeshape.jcr.SystemNamespaceRegistry.register(java.util.Map):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/SystemNamespaceRegistry.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/SystemNamespaceRegistry.java","line_number":169,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/SystemNamespaceRegistry.java","line_number":169,"column_number":-1,"description":"call to SystemContent SystemNamespaceRegistry.systemContent(boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/SystemNamespaceRegistry.java","line_number":88,"column_number":-1,"description":"access to `this.context`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/SystemNamespaceRegistry.java","line_number":60,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/SystemNamespaceRegistry.java","line_number":60,"column_number":-1,"description":"access to `this.context`"}],"key":"SystemNamespaceRegistry.java|register|THREAD_SAFETY_VIOLATION","hash":"011805e29f425cc47e78f19309dbd2c3","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAIoAAAAIAAAANAAAACSgsABYAP+SCTxzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL1N5c3RlbU5hbWVzcGFjZVJlZ2lzdHJ5LmphdmGgsHwA/5IJPHNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvU3lzdGVtTmFtZXNwYWNlUmVnaXN0cnkuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void RepositoryIndexManager.register(IndexProvider)` indirectly reads with synchronization from container `byProvider` via call to `get`. Potentially races with unsynchronized write in method `RepositoryIndexManager.registerIndexes(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":322,"column":-1,"procedure":"org.modeshape.jcr.RepositoryIndexManager.register(org.modeshape.jcr.spi.index.provider.IndexProvider):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":322,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":322,"column_number":-1,"description":"call to RepositoryIndexes RepositoryIndexManager.readIndexDefinitions()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":817,"column_number":-1,"description":"call to RepositoryIndexManager$Indexes.<init>(ExecutionContext,Collection,NodeTypes)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":878,"column_number":-1,"description":"Read of container `byProvider` via call to `get`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":529,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":529,"column_number":-1,"description":"call to RepositoryIndexes RepositoryIndexManager.readIndexDefinitions()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":817,"column_number":-1,"description":"call to RepositoryIndexManager$Indexes.<init>(ExecutionContext,Collection,NodeTypes)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":881,"column_number":-1,"description":"Write to container `byProvider` via call to `put`"}],"key":"RepositoryIndexManager.java|register|THREAD_SAFETY_VIOLATION","hash":"792a493654f2bc65f7ad04e8cd99416a","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAIsAAAAIAAAAMgAAACSgsAEDbgD/kgk7c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9SZXBvc2l0b3J5SW5kZXhNYW5hZ2VyLmphdmGgsAEDcQD/kgk7c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9SZXBvc2l0b3J5SW5kZXhNYW5hZ2VyLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void RepositoryIndexManager.registerIndex(IndexDefinition,boolean)` indirectly mutates container `indexes` via call to `add` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":436,"column":-1,"procedure":"org.modeshape.jcr.RepositoryIndexManager.registerIndex(org.modeshape.jcr.api.index.IndexDefinition,boolean):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":436,"column_number":-1,"description":"call to void RepositoryIndexManager.registerIndexes(org.modeshape.jcr.api.index.IndexDefinition[],boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":529,"column_number":-1,"description":"call to RepositoryIndexes RepositoryIndexManager.readIndexDefinitions()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":817,"column_number":-1,"description":"call to RepositoryIndexManager$Indexes.<init>(ExecutionContext,Collection,NodeTypes)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":883,"column_number":-1,"description":"Write to container `indexes` via call to `add`"}],"key":"RepositoryIndexManager.java|registerIndex|THREAD_SAFETY_VIOLATION","hash":"132dcf1b891aef5d475e7a4ba60ba5f8","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEYAAAAEAAAAGQAAABKgsAEDcwD/kgk7c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9SZXBvc2l0b3J5SW5kZXhNYW5hZ2VyLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void RepositoryIndexManager.registerIndexes(org.modeshape.jcr.api.index.IndexDefinition[],boolean)` indirectly mutates container `indexes` via call to `add` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":529,"column":-1,"procedure":"org.modeshape.jcr.RepositoryIndexManager.registerIndexes(org.modeshape.jcr.api.index.IndexDefinition[],boolean):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":529,"column_number":-1,"description":"call to RepositoryIndexes RepositoryIndexManager.readIndexDefinitions()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":817,"column_number":-1,"description":"call to RepositoryIndexManager$Indexes.<init>(ExecutionContext,Collection,NodeTypes)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":883,"column_number":-1,"description":"Write to container `indexes` via call to `add`"}],"key":"RepositoryIndexManager.java|registerIndexes|THREAD_SAFETY_VIOLATION","hash":"d6ace392d1649f21066e320a6a29af14","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEYAAAAEAAAAGQAAABKgsAEDcwD/kgk7c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9SZXBvc2l0b3J5SW5kZXhNYW5hZ2VyLmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `void AbstractProblems.addError(I18n,java.lang.Object[])` of un-annotated interface `org.modeshape.common.collection.AbstractProblems`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":490,"column":-1,"procedure":"org.modeshape.jcr.RepositoryIndexManager.registerIndexes(org.modeshape.jcr.api.index.IndexDefinition[],boolean):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":490,"column_number":-1,"description":"Call to un-annotated interface method void AbstractProblems.addError(I18n,java.lang.Object[])"}],"key":"RepositoryIndexManager.java|registerIndexes|INTERFACE_NOT_THREAD_SAFE","hash":"89aeb7cbae7239be3787f1562a029bca","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEYAAAAEAAAAGQAAABKgsAEB6gD/kgk7c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9SZXBvc2l0b3J5SW5kZXhNYW5hZ2VyLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `String JcrNamespaceRegistry.registerNamespace(String)` indirectly reads without synchronization from `this.session.workspace.nodeTypeManager`. Potentially races with write in method `JcrNamespaceRegistry.unregisterNamespace(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":391,"column":-1,"procedure":"org.modeshape.jcr.JcrNamespaceRegistry.registerNamespace(java.lang.String):java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrNamespaceRegistry.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNamespaceRegistry.java","line_number":391,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNamespaceRegistry.java","line_number":391,"column_number":-1,"description":"call to void JcrSession.signalNamespaceChanges(boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":404,"column_number":-1,"description":"call to JcrNodeTypeManager JcrSession.nodeTypeManager()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":384,"column_number":-1,"description":"call to JcrNodeTypeManager JcrWorkspace.nodeTypeManager()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":628,"column_number":-1,"description":"access to `this.session.workspace.nodeTypeManager`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNamespaceRegistry.java","line_number":338,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNamespaceRegistry.java","line_number":338,"column_number":-1,"description":"call to void JcrSession.signalNamespaceChanges(boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":404,"column_number":-1,"description":"call to JcrNodeTypeManager JcrSession.nodeTypeManager()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":384,"column_number":-1,"description":"call to JcrNodeTypeManager JcrWorkspace.nodeTypeManager()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":632,"column_number":-1,"description":"access to `this.session.workspace.nodeTypeManager`"}],"key":"JcrNamespaceRegistry.java|registerNamespace|THREAD_SAFETY_VIOLATION","hash":"853d851fe51bf02d380c6e016090d7d3","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAGAAAAHgAAABigsAECdAD/kgkxc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JXb3Jrc3BhY2UuamF2YaCwAQJ4AP8EBEA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `String JcrNamespaceRegistry.registerNamespace(String)` indirectly mutates container `ace.privileges` via call to `addAll` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":378,"column":-1,"procedure":"org.modeshape.jcr.JcrNamespaceRegistry.registerNamespace(java.lang.String):java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrNamespaceRegistry.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNamespaceRegistry.java","line_number":378,"column_number":-1,"description":"<Write on unknown thread>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNamespaceRegistry.java","line_number":378,"column_number":-1,"description":"call to void JcrSession.checkWorkspacePermission(String,java.lang.String[])"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1582,"column_number":-1,"description":"call to void JcrSession.checkPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1567,"column_number":-1,"description":"call to boolean JcrSession.hasPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1375,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPermission(Path,java.lang.String[])"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":322,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPrivileges(String,javax.jcr.security.Privilege[])"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":109,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.getApplicableACL(String)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":114,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.findAccessList(String,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":289,"column_number":-1,"description":"call to boolean JcrAccessControlList.addAccessControlEntry(Principal,javax.jcr.security.Privilege[])"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/security/acl/JcrAccessControlList.java","line_number":113,"column_number":-1,"description":"call to boolean AccessControlEntryImpl.addIfNotPresent(javax.jcr.security.Privilege[])"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/security/acl/AccessControlEntryImpl.java","line_number":103,"column_number":-1,"description":"Write to container `ace.privileges` via call to `addAll`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNamespaceRegistry.java","line_number":297,"column_number":-1,"description":"<Write on background thread>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNamespaceRegistry.java","line_number":297,"column_number":-1,"description":"call to void JcrSession.checkWorkspacePermission(String,java.lang.String[])"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1582,"column_number":-1,"description":"call to void JcrSession.checkPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1567,"column_number":-1,"description":"call to boolean JcrSession.hasPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1375,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPermission(Path,java.lang.String[])"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":322,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPrivileges(String,javax.jcr.security.Privilege[])"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":109,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.getApplicableACL(String)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":114,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.findAccessList(String,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":289,"column_number":-1,"description":"call to boolean JcrAccessControlList.addAccessControlEntry(Principal,javax.jcr.security.Privilege[])"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/security/acl/JcrAccessControlList.java","line_number":113,"column_number":-1,"description":"call to boolean AccessControlEntryImpl.addIfNotPresent(javax.jcr.security.Privilege[])"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/security/acl/AccessControlEntryImpl.java","line_number":103,"column_number":-1,"description":"Write to container `ace.privileges` via call to `addAll`"}],"key":"JcrNamespaceRegistry.java|registerNamespace|THREAD_SAFETY_VIOLATION","hash":"c82e51d0d395177a12609287b891e3b5","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFUAAAAFAAAAIAAAABegsABnAP+SCUhzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3NlY3VyaXR5L2FjbC9BY2Nlc3NDb250cm9sRW50cnlJbXBsLmphdmGgBARA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void JcrWorkspace.reindex()` indirectly writes to field `childKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":887,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.reindex():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":887,"column_number":-1,"description":"call to void RepositoryQueryManager.reindexContent(JcrWorkspace)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryQueryManager.java","line_number":475,"column_number":-1,"description":"call to void RepositoryQueryManager.reindexContent(JcrWorkspace,Path,int)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/RepositoryQueryManager.java","line_number":513,"column_number":-1,"description":"call to void RepositoryQueryManager.reindexContent(String,NodeCache,CachedNode,int,boolean,IndexWriter)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/RepositoryQueryManager.java","line_number":635,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `childKey.workspaceKey`"}],"key":"JcrWorkspace.java|reindex|THREAD_SAFETY_VIOLATION","hash":"ab5be6bc5f05ffc72d8ce439af3081f8","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void JcrWorkspace.reindex()` indirectly mutates container `ace.privileges` via call to `addAll` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":885,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.reindex():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":885,"column_number":-1,"description":"call to void JcrSession.checkPermission(String,Path,java.lang.String[])"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1559,"column_number":-1,"description":"call to void JcrSession.checkPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1567,"column_number":-1,"description":"call to boolean JcrSession.hasPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1375,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPermission(Path,java.lang.String[])"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":322,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPrivileges(String,javax.jcr.security.Privilege[])"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":109,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.getApplicableACL(String)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":114,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.findAccessList(String,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":289,"column_number":-1,"description":"call to boolean JcrAccessControlList.addAccessControlEntry(Principal,javax.jcr.security.Privilege[])"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/security/acl/JcrAccessControlList.java","line_number":113,"column_number":-1,"description":"call to boolean AccessControlEntryImpl.addIfNotPresent(javax.jcr.security.Privilege[])"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/security/acl/AccessControlEntryImpl.java","line_number":103,"column_number":-1,"description":"Write to container `ace.privileges` via call to `addAll`"}],"key":"JcrWorkspace.java|reindex|THREAD_SAFETY_VIOLATION","hash":"5c80b02a18ad0e0706ffe139a0f20b88","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFIAAAAEAAAAHQAAABSgsABnAP+SCUhzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3NlY3VyaXR5L2FjbC9BY2Nlc3NDb250cm9sRW50cnlJbXBsLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void JcrWorkspace.reindex(String)` indirectly writes to field `childKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":897,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.reindex(java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":897,"column_number":-1,"description":"call to void RepositoryQueryManager.reindexContent(JcrWorkspace,Path,int)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryQueryManager.java","line_number":513,"column_number":-1,"description":"call to void RepositoryQueryManager.reindexContent(String,NodeCache,CachedNode,int,boolean,IndexWriter)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/RepositoryQueryManager.java","line_number":635,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `childKey.workspaceKey`"}],"key":"JcrWorkspace.java|reindex|THREAD_SAFETY_VIOLATION","hash":"3dc81e0efdde713f72722a9ee4ed523d","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void JcrWorkspace.reindex(String)` indirectly mutates container `ace.privileges` via call to `addAll` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":895,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.reindex(java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":895,"column_number":-1,"description":"call to void JcrSession.checkPermission(String,Path,java.lang.String[])"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1559,"column_number":-1,"description":"call to void JcrSession.checkPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1567,"column_number":-1,"description":"call to boolean JcrSession.hasPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1375,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPermission(Path,java.lang.String[])"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":322,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPrivileges(String,javax.jcr.security.Privilege[])"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":109,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.getApplicableACL(String)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":114,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.findAccessList(String,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":289,"column_number":-1,"description":"call to boolean JcrAccessControlList.addAccessControlEntry(Principal,javax.jcr.security.Privilege[])"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/security/acl/JcrAccessControlList.java","line_number":113,"column_number":-1,"description":"call to boolean AccessControlEntryImpl.addIfNotPresent(javax.jcr.security.Privilege[])"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/security/acl/AccessControlEntryImpl.java","line_number":103,"column_number":-1,"description":"Write to container `ace.privileges` via call to `addAll`"}],"key":"JcrWorkspace.java|reindex|THREAD_SAFETY_VIOLATION","hash":"4e31d9857d9c34f1147f7845ad2bdbda","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFIAAAAEAAAAHQAAABSgsABnAP+SCUhzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3NlY3VyaXR5L2FjbC9BY2Nlc3NDb250cm9sRW50cnlJbXBsLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Future JcrWorkspace.reindexAsync()` indirectly mutates container `ace.privileges` via call to `addAll` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":934,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.reindexAsync():java.util.concurrent.Future","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":934,"column_number":-1,"description":"call to void JcrSession.checkPermission(String,Path,java.lang.String[])"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1559,"column_number":-1,"description":"call to void JcrSession.checkPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1567,"column_number":-1,"description":"call to boolean JcrSession.hasPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1375,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPermission(Path,java.lang.String[])"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":322,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPrivileges(String,javax.jcr.security.Privilege[])"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":109,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.getApplicableACL(String)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":114,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.findAccessList(String,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":289,"column_number":-1,"description":"call to boolean JcrAccessControlList.addAccessControlEntry(Principal,javax.jcr.security.Privilege[])"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/security/acl/JcrAccessControlList.java","line_number":113,"column_number":-1,"description":"call to boolean AccessControlEntryImpl.addIfNotPresent(javax.jcr.security.Privilege[])"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/security/acl/AccessControlEntryImpl.java","line_number":103,"column_number":-1,"description":"Write to container `ace.privileges` via call to `addAll`"}],"key":"JcrWorkspace.java|reindexAsync|THREAD_SAFETY_VIOLATION","hash":"ff3edf67e2529350f4136c0200a8464a","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFIAAAAEAAAAHQAAABSgsABnAP+SCUhzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3NlY3VyaXR5L2FjbC9BY2Nlc3NDb250cm9sRW50cnlJbXBsLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Future JcrWorkspace.reindexAsync(String)` indirectly mutates container `ace.privileges` via call to `addAll` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":944,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.reindexAsync(java.lang.String):java.util.concurrent.Future","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":944,"column_number":-1,"description":"call to void JcrSession.checkPermission(String,Path,java.lang.String[])"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1559,"column_number":-1,"description":"call to void JcrSession.checkPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1567,"column_number":-1,"description":"call to boolean JcrSession.hasPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1375,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPermission(Path,java.lang.String[])"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":322,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPrivileges(String,javax.jcr.security.Privilege[])"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":109,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.getApplicableACL(String)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":114,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.findAccessList(String,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":289,"column_number":-1,"description":"call to boolean JcrAccessControlList.addAccessControlEntry(Principal,javax.jcr.security.Privilege[])"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/security/acl/JcrAccessControlList.java","line_number":113,"column_number":-1,"description":"call to boolean AccessControlEntryImpl.addIfNotPresent(javax.jcr.security.Privilege[])"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/security/acl/AccessControlEntryImpl.java","line_number":103,"column_number":-1,"description":"Write to container `ace.privileges` via call to `addAll`"}],"key":"JcrWorkspace.java|reindexAsync|THREAD_SAFETY_VIOLATION","hash":"6a9aa9fa0c67652d1fa483bc12b6c45f","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFIAAAAEAAAAHQAAABSgsABnAP+SCUhzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3NlY3VyaXR5L2FjbC9BY2Nlc3NDb250cm9sRW50cnlJbXBsLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void JcrWorkspace.reindexSince(long)` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":914,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.reindexSince(long):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":914,"column_number":-1,"description":"call to void RepositoryQueryManager.reindexSince(JcrWorkspace,long)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryQueryManager.java","line_number":526,"column_number":-1,"description":"call to void RepositoryQueryManager.reindexSince(WorkspaceCache,IndexWriter,Iterator)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/RepositoryQueryManager.java","line_number":542,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"JcrWorkspace.java|reindexSince|THREAD_SAFETY_VIOLATION","hash":"1299cd3537dbe73ce9cdfbf47cc82671","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void JcrWorkspace.reindexSince(long)` indirectly mutates container `ace.privileges` via call to `addAll` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":906,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.reindexSince(long):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":906,"column_number":-1,"description":"call to void JcrSession.checkPermission(String,Path,java.lang.String[])"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1559,"column_number":-1,"description":"call to void JcrSession.checkPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1567,"column_number":-1,"description":"call to boolean JcrSession.hasPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1375,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPermission(Path,java.lang.String[])"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":322,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPrivileges(String,javax.jcr.security.Privilege[])"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":109,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.getApplicableACL(String)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":114,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.findAccessList(String,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":289,"column_number":-1,"description":"call to boolean JcrAccessControlList.addAccessControlEntry(Principal,javax.jcr.security.Privilege[])"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/security/acl/JcrAccessControlList.java","line_number":113,"column_number":-1,"description":"call to boolean AccessControlEntryImpl.addIfNotPresent(javax.jcr.security.Privilege[])"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/security/acl/AccessControlEntryImpl.java","line_number":103,"column_number":-1,"description":"Write to container `ace.privileges` via call to `addAll`"}],"key":"JcrWorkspace.java|reindexSince|THREAD_SAFETY_VIOLATION","hash":"c896b9c17e7fd021e1ff056ab3fb2240","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFIAAAAEAAAAHQAAABSgsABnAP+SCUhzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3NlY3VyaXR5L2FjbC9BY2Nlc3NDb250cm9sRW50cnlJbXBsLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Future JcrWorkspace.reindexSinceAsync(long)` indirectly mutates container `ace.privileges` via call to `addAll` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":920,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.reindexSinceAsync(long):java.util.concurrent.Future","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":920,"column_number":-1,"description":"call to void JcrSession.checkPermission(String,Path,java.lang.String[])"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1559,"column_number":-1,"description":"call to void JcrSession.checkPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1567,"column_number":-1,"description":"call to boolean JcrSession.hasPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1375,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPermission(Path,java.lang.String[])"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":322,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPrivileges(String,javax.jcr.security.Privilege[])"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":109,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.getApplicableACL(String)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":114,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.findAccessList(String,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":289,"column_number":-1,"description":"call to boolean JcrAccessControlList.addAccessControlEntry(Principal,javax.jcr.security.Privilege[])"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/security/acl/JcrAccessControlList.java","line_number":113,"column_number":-1,"description":"call to boolean AccessControlEntryImpl.addIfNotPresent(javax.jcr.security.Privilege[])"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/security/acl/AccessControlEntryImpl.java","line_number":103,"column_number":-1,"description":"Write to container `ace.privileges` via call to `addAll`"}],"key":"JcrWorkspace.java|reindexSinceAsync|THREAD_SAFETY_VIOLATION","hash":"4720c7ffa1c8a9ec797a7c2b893b29fd","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFIAAAAEAAAAHQAAABSgsABnAP+SCUhzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3NlY3VyaXR5L2FjbC9BY2Nlc3NDb250cm9sRW50cnlJbXBsLmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Iterator ChangeJournal.changedNodesSince(long)` of un-annotated interface `org.modeshape.jcr.journal.ChangeJournal`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":928,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.reindexSinceAsync(long):java.util.concurrent.Future","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":928,"column_number":-1,"description":"call to Future RepositoryQueryManager.reindexSinceAsync(JcrWorkspace,long)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryQueryManager.java","line_number":561,"column_number":-1,"description":"Call to un-annotated interface method Iterator ChangeJournal.changedNodesSince(long)"}],"key":"JcrWorkspace.java|reindexSinceAsync|INTERFACE_NOT_THREAD_SAFE","hash":"da9e1eafab662bb21919143cc63ebcdd","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEYAAAAEAAAAGQAAABKgsAECMQD/kgk7c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9SZXBvc2l0b3J5UXVlcnlNYW5hZ2VyLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void AbstractJcrNode.remove()` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":3445,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.remove():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3445,"column_number":-1,"description":"call to void AbstractJcrNode.removeShare()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3149,"column_number":-1,"description":"call to void AbstractJcrNode.internalRemove(boolean)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3170,"column_number":-1,"description":"call to void AbstractJcrNode.checkForLock()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":635,"column_number":-1,"description":"call to Lock AbstractJcrNode.getLockIfExists()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3322,"column_number":-1,"description":"call to Lock JcrLockManager.getLockIfExists(AbstractJcrNode)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrLockManager.java","line_number":178,"column_number":-1,"description":"call to Lock RepositoryLockManager$ModeShapeLock.lockFor(JcrSession)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","line_number":661,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"AbstractJcrNode.java|remove|THREAD_SAFETY_VIOLATION","hash":"224d796d6b88ce0165434b803b91c7e7","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void JcrSystemNode.remove()` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.remove():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to void AbstractJcrNode.remove()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3445,"column_number":-1,"description":"call to void AbstractJcrNode.removeShare()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3149,"column_number":-1,"description":"call to void AbstractJcrNode.internalRemove(boolean)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3170,"column_number":-1,"description":"call to void AbstractJcrNode.checkForLock()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":635,"column_number":-1,"description":"call to Lock AbstractJcrNode.getLockIfExists()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3322,"column_number":-1,"description":"call to Lock JcrLockManager.getLockIfExists(AbstractJcrNode)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrLockManager.java","line_number":178,"column_number":-1,"description":"call to Lock RepositoryLockManager$ModeShapeLock.lockFor(JcrSession)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","line_number":661,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":11,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"JcrSystemNode.java|remove|THREAD_SAFETY_VIOLATION","hash":"a7e9d11689c1da433e9b766eb22e7963","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `SchematicEntry DocumentStore.get(String)` of un-annotated interface `org.modeshape.jcr.cache.document.DocumentStore`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":1588,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.removeACL(org.modeshape.jcr.cache.SessionCache):org.modeshape.jcr.cache.MutableCachedNode$PermissionChanges","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1588,"column_number":-1,"description":"call to boolean SessionNode.hasACL(NodeCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1483,"column_number":-1,"description":"call to ChildReferences SessionNode.getChildReferences(NodeCache)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1120,"column_number":-1,"description":"call to boolean SessionNode.allowsSNS(NodeCache)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1136,"column_number":-1,"description":"call to Name SessionNode.getPrimaryType(NodeCache)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":495,"column_number":-1,"description":"call to Property SessionNode.getProperty(Name,NodeCache)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":740,"column_number":-1,"description":"call to CachedNode SessionNode.nodeInWorkspace(AbstractSessionCache)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":309,"column_number":-1,"description":"call to CachedNode WorkspaceCache.getNode(NodeKey)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":243,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(NodeKey)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":207,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(String)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":188,"column_number":-1,"description":"Call to un-annotated interface method SchematicEntry DocumentStore.get(String)"}],"key":"SessionNode.java|removeACL|INTERFACE_NOT_THREAD_SAFE","hash":"d68a7c79e249d81a4c952f3124bf517a","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEAvAD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xb3Jrc3BhY2VDYWNoZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `SchematicEntry DocumentStore.get(String)` of un-annotated interface `org.modeshape.jcr.cache.document.DocumentStore`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":1101,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.removeAllProperties(org.modeshape.jcr.cache.SessionCache):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1101,"column_number":-1,"description":"call to Iterator SessionNode.getProperties(NodeCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":778,"column_number":-1,"description":"call to CachedNode SessionNode.nodeInWorkspace(AbstractSessionCache)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":309,"column_number":-1,"description":"call to CachedNode WorkspaceCache.getNode(NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":243,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":207,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(String)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":188,"column_number":-1,"description":"Call to un-annotated interface method SchematicEntry DocumentStore.get(String)"}],"key":"SessionNode.java|removeAllProperties|INTERFACE_NOT_THREAD_SAFE","hash":"969f77582762858606ae69b3410f2a62","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEAvAD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xb3Jrc3BhY2VDYWNoZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void SessionNode.removeAllProperties(SessionCache)` indirectly mutates container `changes.addedStrong` via call to `put` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1114,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.removeAllProperties(org.modeshape.jcr.cache.SessionCache):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1114,"column_number":-1,"description":"call to void SessionNode.processPropertyChange(SessionCache,Name,SessionCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":965,"column_number":-1,"description":"call to void SessionNode.addOrRemoveReferrers(SessionCache,SessionCache,Property,Iterator,boolean)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1023,"column_number":-1,"description":"call to void SessionNode.addReferrer(SessionCache,Property,NodeKey,CachedNode$ReferenceType)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":678,"column_number":-1,"description":"call to void SessionNode$ReferrerChanges.addStrongReferrer(Property,NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2474,"column_number":-1,"description":"call to void SessionNode$ReferrerChanges.processReferrerChange(Property,NodeKey,Map,Map)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2504,"column_number":-1,"description":"Write to container `changes.addedStrong` via call to `put`"}],"key":"SessionNode.java|removeAllProperties|THREAD_SAFETY_VIOLATION","hash":"cb24901b5421373b063857cbbc3d7155","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEoAAAAEAAAAGgAAABKgsAEJyAD/kgk/c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9TZXNzaW9uTm9kZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `SchematicEntry DocumentStore.get(String)` of un-annotated interface `org.modeshape.jcr.cache.document.DocumentStore`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":973,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.removeAllReferences(org.modeshape.jcr.cache.SessionCache):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":973,"column_number":-1,"description":"call to Iterator SessionNode.getProperties(NodeCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":778,"column_number":-1,"description":"call to CachedNode SessionNode.nodeInWorkspace(AbstractSessionCache)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":309,"column_number":-1,"description":"call to CachedNode WorkspaceCache.getNode(NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":243,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":207,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(String)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":188,"column_number":-1,"description":"Call to un-annotated interface method SchematicEntry DocumentStore.get(String)"}],"key":"SessionNode.java|removeAllReferences|INTERFACE_NOT_THREAD_SAFE","hash":"b395b3034d4a34962f9d22c3bdaa4471","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEAvAD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xb3Jrc3BhY2VDYWNoZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void SessionNode.removeAllReferences(SessionCache)` indirectly mutates container `changes.addedStrong` via call to `put` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":979,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.removeAllReferences(org.modeshape.jcr.cache.SessionCache):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":979,"column_number":-1,"description":"call to void SessionNode.addOrRemoveReferrers(SessionCache,SessionCache,Property,Iterator,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1023,"column_number":-1,"description":"call to void SessionNode.addReferrer(SessionCache,Property,NodeKey,CachedNode$ReferenceType)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":678,"column_number":-1,"description":"call to void SessionNode$ReferrerChanges.addStrongReferrer(Property,NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2474,"column_number":-1,"description":"call to void SessionNode$ReferrerChanges.processReferrerChange(Property,NodeKey,Map,Map)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2504,"column_number":-1,"description":"Write to container `changes.addedStrong` via call to `put`"}],"key":"SessionNode.java|removeAllReferences|THREAD_SAFETY_VIOLATION","hash":"95958819f29873e9eed5c7bd4d17fd22","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEoAAAAEAAAAGgAAABKgsAEJyAD/kgk/c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9TZXNzaW9uTm9kZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `NodeCache NodeCache.unwrap()` of un-annotated interface `org.modeshape.jcr.cache.NodeCache`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":1218,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.removeChild(org.modeshape.jcr.cache.SessionCache,org.modeshape.jcr.cache.NodeKey):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1218,"column_number":-1,"description":"call to WritableSessionCache SessionNode.writableSession(NodeCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":291,"column_number":-1,"description":"Call to un-annotated interface method NodeCache NodeCache.unwrap()"}],"key":"SessionNode.java|removeChild|INTERFACE_NOT_THREAD_SAFE","hash":"ef4010f6f9024a90c7899d20ee3abb53","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEoAAAAEAAAAGgAAABKgsAEBIwD/kgk/c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9TZXNzaW9uTm9kZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `SchematicEntry DocumentStore.get(String)` of un-annotated interface `org.modeshape.jcr.cache.document.DocumentStore`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":1253,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.removeChildFromNode(org.modeshape.jcr.cache.document.AbstractSessionCache,org.modeshape.jcr.cache.NodeKey):org.modeshape.jcr.cache.document.SessionNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1253,"column_number":-1,"description":"call to NodeKey SessionNode.getParentKey(NodeCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":317,"column_number":-1,"description":"call to CachedNode SessionNode.nodeInWorkspace(AbstractSessionCache)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":309,"column_number":-1,"description":"call to CachedNode WorkspaceCache.getNode(NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":243,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":207,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(String)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":188,"column_number":-1,"description":"Call to un-annotated interface method SchematicEntry DocumentStore.get(String)"}],"key":"SessionNode.java|removeChildFromNode|INTERFACE_NOT_THREAD_SAFE","hash":"fb414262ba28b2c7235d5323deae317d","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEAvAD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xb3Jrc3BhY2VDYWNoZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void JcrObservationManager.removeEventListener(EventListener)` indirectly reads without synchronization from `this.session.context`. Potentially races with write in method `JcrObservationManager.setUserData(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":197,"column":-1,"procedure":"org.modeshape.jcr.JcrObservationManager.removeEventListener(javax.jcr.observation.EventListener):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrObservationManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrObservationManager.java","line_number":197,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrObservationManager.java","line_number":197,"column_number":-1,"description":"call to void JcrObservationManager.checkSession()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrObservationManager.java","line_number":175,"column_number":-1,"description":"call to void JcrSession.checkLive()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":327,"column_number":-1,"description":"call to String JcrSession.sessionId()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":313,"column_number":-1,"description":"access to `this.session.context`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrObservationManager.java","line_number":213,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrObservationManager.java","line_number":213,"column_number":-1,"description":"call to void JcrSession.addContextData(String,String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":434,"column_number":-1,"description":"access to `this.session.context`"}],"key":"JcrObservationManager.java|removeEventListener|THREAD_SAFETY_VIOLATION","hash":"babd315ae317b99f24c9c7b4e78e2ada","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAHMAAAAIAAAALAAAACCgsAEBOQD/kgkvc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JTZXNzaW9uLmphdmGgsAEBsgD/kgkvc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JTZXNzaW9uLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrProperty AbstractJcrNode.removeExistingProperty(Name)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1652,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.removeExistingProperty(org.modeshape.jcr.value.Name):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1652,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|removeExistingProperty|THREAD_SAFETY_VIOLATION","hash":"c11c2a4c50fe849a7e4d9383fd0745ed","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `AbstractJcrProperty AbstractJcrNode.removeExistingProperty(Name)` indirectly reads without synchronization from `definition.checker`. Potentially races with write in method `AbstractJcrNode.setProperty(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1654,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.removeExistingProperty(org.modeshape.jcr.value.Name):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1654,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1654,"column_number":-1,"description":"call to void AbstractJcrProperty.remove()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":326,"column_number":-1,"description":"call to void AbstractJcrProperty.checkNotProtected()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":346,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":295,"column_number":-1,"description":"access to `definition.checker`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1586,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1586,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(Name,JcrValue,boolean,boolean,boolean,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1703,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|removeExistingProperty|THREAD_SAFETY_VIOLATION","hash":"63dc1d91441bb13ef8a2e95077e2fcd2","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAIkAAAAIAAAAMgAAACSgsAEBJwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YaCwAQErAP+SCTpzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL0pjclByb3BlcnR5RGVmaW5pdGlvbi5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `ChildReference ChildReferences.getChild(Name)` of un-annotated interface `org.modeshape.jcr.cache.ChildReferences`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":124,"column":-1,"procedure":"org.modeshape.jcr.JcrLockManager.removeLockToken(java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrLockManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrLockManager.java","line_number":124,"column_number":-1,"description":"call to boolean RepositoryLockManager.setHeldBySession(JcrSession,String,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","line_number":406,"column_number":-1,"description":"call to boolean SystemContent.changeLockHeldBySession(String,boolean)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/SystemContent.java","line_number":1118,"column_number":-1,"description":"call to CachedNode SystemContent.locksNode()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/SystemContent.java","line_number":206,"column_number":-1,"description":"call to NodeKey SystemContent.locksKey()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/SystemContent.java","line_number":172,"column_number":-1,"description":"call to CachedNode SystemContent.systemNode()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/SystemContent.java","line_number":190,"column_number":-1,"description":"call to NodeKey SystemContent.systemKey()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/SystemContent.java","line_number":133,"column_number":-1,"description":"Call to un-annotated interface method ChildReference ChildReferences.getChild(Name)"}],"key":"JcrLockManager.java|removeLockToken|INTERFACE_NOT_THREAD_SAFE","hash":"e29a428fd83f47192e086fd380b533e0","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEAhQD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9TeXN0ZW1Db250ZW50LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void AbstractJcrNode.removeMixin(String)` indirectly reads without synchronization from `definition.checker`. Potentially races with write in method `AbstractJcrNode.setProperty(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":2634,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.removeMixin(java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2634,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2634,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":295,"column_number":-1,"description":"access to `definition.checker`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1586,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1586,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(Name,JcrValue,boolean,boolean,boolean,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1703,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|removeMixin|THREAD_SAFETY_VIOLATION","hash":"e82c415cc6b9cbc33895907275f92fe8","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAIkAAAAIAAAAMgAAACSgsAEBJwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YaCwAQErAP+SCTpzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL0pjclByb3BlcnR5RGVmaW5pdGlvbi5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void AbstractJcrNode.removeMixin(String)` indirectly writes to field `nodeType.key.sourceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":2678,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.removeMixin(java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2678,"column_number":-1,"description":"call to JcrNodeType AbstractJcrNode.getPrimaryNodeType()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2278,"column_number":-1,"description":"call to JcrNodeType JcrNodeTypeManager.getNodeType(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrNodeTypeManager.java","line_number":148,"column_number":-1,"description":"call to JcrNodeType JcrNodeType.with(ExecutionContext,JcrSession)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":640,"column_number":-1,"description":"call to JcrNodeType.<init>(NodeKey,ExecutionContext,JcrSession,RepositoryNodeTypeManager,Name,List,Name,Collection,Collection,boolean,boolean,boolean,boolean)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":178,"column_number":-1,"description":"call to NodeKey NodeKey.withId(String)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":229,"column_number":-1,"description":"call to String NodeKey.getSourceKey()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":154,"column_number":-1,"description":"access to `nodeType.key.sourceKey`"}],"key":"AbstractJcrNode.java|removeMixin|THREAD_SAFETY_VIOLATION","hash":"350b095e7a711674e1cd0764eacd350c","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEAmgD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void AbstractJcrNode.removeMixin(String)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":2617,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.removeMixin(java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2617,"column_number":-1,"description":"call to PropertyIterator AbstractJcrNode.getProperties()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2073,"column_number":-1,"description":"call to Collection AbstractJcrNode.findJcrProperties(Iterator)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2058,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|removeMixin|THREAD_SAFETY_VIOLATION","hash":"927aa2d6603c18f7aec9bcdabcc9dfb0","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void AbstractJcrNode.removeMixin(String)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":2637,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.removeMixin(java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2637,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,Value,boolean,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":972,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,Value,boolean,boolean,boolean)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1065,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(Value,JcrSession)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":262,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|removeMixin|THREAD_SAFETY_VIOLATION","hash":"927aa2d6603c18f7aec9bcdabcc9dfb0","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBBgD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void AbstractJcrNode.removeMixin(String)` indirectly writes to field `parentKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":2568,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.removeMixin(java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2568,"column_number":-1,"description":"call to NodeIterator AbstractJcrNode.getSharedSet()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3055,"column_number":-1,"description":"call to NodeIterator JcrSharedNodeCache$SharedSet.getSharedNodes()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSharedNodeCache.java","line_number":243,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `parentKey.workspaceKey`"}],"key":"AbstractJcrNode.java|removeMixin|THREAD_SAFETY_VIOLATION","hash":"511271e3084ca9d11d53b0ef80a8ccb0","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `boolean NodeTypes$ReusableNodeDefinitionSet.appliesTo(NodeTypes,Name,Set)` of un-annotated interface `org.modeshape.jcr.NodeTypes$ReusableNodeDefinitionSet`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":2553,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.removeMixin(java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2553,"column_number":-1,"description":"call to void AbstractJcrNode.checkForCheckedOut()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":657,"column_number":-1,"description":"call to boolean AbstractJcrNode.isCheckedOut()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3222,"column_number":-1,"description":"call to NodeDefinition AbstractJcrNode.getDefinition()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2835,"column_number":-1,"description":"call to NodeDefinition AbstractJcrNode.nodeDefinition()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2907,"column_number":-1,"description":"call to NodeTypes$NodeDefinitionSet NodeTypes.findChildNodeDefinitions(Name,Set)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":2375,"column_number":-1,"description":"Call to un-annotated interface method boolean NodeTypes$ReusableNodeDefinitionSet.appliesTo(NodeTypes,Name,Set)"}],"key":"AbstractJcrNode.java|removeMixin|INTERFACE_NOT_THREAD_SAFE","hash":"abfa9cd6545c95849a6393477c2eb54e","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAADkAAAAEAAAAFgAAABCgsAEJRwD/kgkuc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9Ob2RlVHlwZXMuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void AbstractJcrNode.removeMixin(String)` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":2552,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.removeMixin(java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2552,"column_number":-1,"description":"call to void AbstractJcrNode.checkForLock()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":635,"column_number":-1,"description":"call to Lock AbstractJcrNode.getLockIfExists()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3322,"column_number":-1,"description":"call to Lock JcrLockManager.getLockIfExists(AbstractJcrNode)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrLockManager.java","line_number":178,"column_number":-1,"description":"call to Lock RepositoryLockManager$ModeShapeLock.lockFor(JcrSession)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","line_number":661,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"AbstractJcrNode.java|removeMixin|THREAD_SAFETY_VIOLATION","hash":"519b2a6a4c2db5c042a442a56b076c42","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void AbstractJcrNode.removeMixin(String)` indirectly mutates container `ace.privileges` via call to `addAll` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":2592,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.removeMixin(java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2592,"column_number":-1,"description":"call to void AbstractJcrNode.unlock()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3330,"column_number":-1,"description":"call to void JcrLockManager.unlock(AbstractJcrNode)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrLockManager.java","line_number":298,"column_number":-1,"description":"call to void JcrSession.checkPermission(String,Path,java.lang.String[])"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1559,"column_number":-1,"description":"call to void JcrSession.checkPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1567,"column_number":-1,"description":"call to boolean JcrSession.hasPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1375,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPermission(Path,java.lang.String[])"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":322,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPrivileges(String,javax.jcr.security.Privilege[])"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":109,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.getApplicableACL(String)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":114,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.findAccessList(String,boolean)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":289,"column_number":-1,"description":"call to boolean JcrAccessControlList.addAccessControlEntry(Principal,javax.jcr.security.Privilege[])"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/security/acl/JcrAccessControlList.java","line_number":113,"column_number":-1,"description":"call to boolean AccessControlEntryImpl.addIfNotPresent(javax.jcr.security.Privilege[])"},{"level":11,"filename":"src/main/java/org/modeshape/jcr/security/acl/AccessControlEntryImpl.java","line_number":103,"column_number":-1,"description":"Write to container `ace.privileges` via call to `addAll`"}],"key":"AbstractJcrNode.java|removeMixin|THREAD_SAFETY_VIOLATION","hash":"c909f2dfa377abd79976021e2f0eb2bd","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFIAAAAEAAAAHQAAABSgsABnAP+SCUhzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3NlY3VyaXR5L2FjbC9BY2Nlc3NDb250cm9sRW50cnlJbXBsLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void JcrSystemNode.removeMixin(String)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.removeMixin(java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to void AbstractJcrNode.removeMixin(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2634,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrSystemNode.java|removeMixin|THREAD_SAFETY_VIOLATION","hash":"cba728bb061c5abeea20f3bb5616eac6","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `ExecutionContext SessionCache.getContext()` of un-annotated interface `org.modeshape.jcr.cache.SessionCache`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":587,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.removeMixin(org.modeshape.jcr.cache.SessionCache,org.modeshape.jcr.value.Name):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":587,"column_number":-1,"description":"Call to un-annotated interface method ExecutionContext SessionCache.getContext()"}],"key":"SessionNode.java|removeMixin|INTERFACE_NOT_THREAD_SAFE","hash":"ebbb7d3bb7f087ab486f5ebb8d1485ca","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEoAAAAEAAAAGgAAABKgsAECSwD/kgk/c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9TZXNzaW9uTm9kZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `MutableCachedNode SessionCache.mutable(NodeKey)` of un-annotated interface `org.modeshape.jcr.cache.SessionCache`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":535,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.removeProperty(org.modeshape.jcr.AbstractJcrProperty):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":535,"column_number":-1,"description":"call to MutableCachedNode AbstractJcrNode.mutable()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":212,"column_number":-1,"description":"Call to un-annotated interface method MutableCachedNode SessionCache.mutable(NodeKey)"}],"key":"AbstractJcrNode.java|removeProperty|INTERFACE_NOT_THREAD_SAFE","hash":"357772a4337434ae674aac3f41acabeb","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEA1AD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `SchematicEntry DocumentStore.get(String)` of un-annotated interface `org.modeshape.jcr.cache.document.DocumentStore`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":1089,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.removeProperty(org.modeshape.jcr.cache.SessionCache,org.modeshape.jcr.value.Name):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1089,"column_number":-1,"description":"call to CachedNode SessionNode.nodeInWorkspace(AbstractSessionCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":309,"column_number":-1,"description":"call to CachedNode WorkspaceCache.getNode(NodeKey)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":243,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":207,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(String)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":188,"column_number":-1,"description":"Call to un-annotated interface method SchematicEntry DocumentStore.get(String)"}],"key":"SessionNode.java|removeProperty|INTERFACE_NOT_THREAD_SAFE","hash":"ab8f29a29d70325ffd7f7ea5515eb8f7","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEAvAD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xb3Jrc3BhY2VDYWNoZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void SessionNode.removeProperty(SessionCache,Name)` indirectly mutates container `changes.addedStrong` via call to `put` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1094,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.removeProperty(org.modeshape.jcr.cache.SessionCache,org.modeshape.jcr.value.Name):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1094,"column_number":-1,"description":"call to void SessionNode.processPropertyChange(SessionCache,Name,SessionCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":965,"column_number":-1,"description":"call to void SessionNode.addOrRemoveReferrers(SessionCache,SessionCache,Property,Iterator,boolean)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1023,"column_number":-1,"description":"call to void SessionNode.addReferrer(SessionCache,Property,NodeKey,CachedNode$ReferenceType)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":678,"column_number":-1,"description":"call to void SessionNode$ReferrerChanges.addStrongReferrer(Property,NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2474,"column_number":-1,"description":"call to void SessionNode$ReferrerChanges.processReferrerChange(Property,NodeKey,Map,Map)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2504,"column_number":-1,"description":"Write to container `changes.addedStrong` via call to `put`"}],"key":"SessionNode.java|removeProperty|THREAD_SAFETY_VIOLATION","hash":"6a01fa02012ddc6c5267846d2f7e0945","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEoAAAAEAAAAGgAAABKgsAEJyAD/kgk/c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9TZXNzaW9uTm9kZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void LocalJournal.removeRecordsOlderThan(long)` reads without synchronization from `this.journalDB`. Potentially races with write in method `LocalJournal.start()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":212,"column":-1,"procedure":"org.modeshape.jcr.journal.LocalJournal.removeRecordsOlderThan(long):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","line_number":212,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","line_number":212,"column_number":-1,"description":"access to `this.journalDB`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","line_number":136,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","line_number":136,"column_number":-1,"description":"access to `this.journalDB`"}],"key":"LocalJournal.java|removeRecordsOlderThan|THREAD_SAFETY_VIOLATION","hash":"583e57f4393432153a2bb7f59528b173","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAIcAAAAIAAAAMgAAACSgsAEA1AD/kgk5c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9qb3VybmFsL0xvY2FsSm91cm5hbC5qYXZhoLABAIgA/5IJOXNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3Ivam91cm5hbC9Mb2NhbEpvdXJuYWwuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void LocalJournal.removeRecordsOlderThan(long)` reads without synchronization from `this.records`. Potentially races with write in method `LocalJournal.start()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":210,"column":-1,"procedure":"org.modeshape.jcr.journal.LocalJournal.removeRecordsOlderThan(long):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","line_number":210,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","line_number":210,"column_number":-1,"description":"access to `this.records`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","line_number":140,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","line_number":140,"column_number":-1,"description":"access to `this.records`"}],"key":"LocalJournal.java|removeRecordsOlderThan|THREAD_SAFETY_VIOLATION","hash":"67494ebedefdf288aacacd79e36b1219","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAIcAAAAIAAAAMgAAACSgsAEA0gD/kgk5c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9qb3VybmFsL0xvY2FsSm91cm5hbC5qYXZhoLABAIwA/5IJOXNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3Ivam91cm5hbC9Mb2NhbEpvdXJuYWwuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void SessionNode.removeReferrer(SessionCache,Property,NodeKey,CachedNode$ReferenceType)` indirectly mutates container `changes.addedWeak` via call to `remove` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":693,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.removeReferrer(org.modeshape.jcr.cache.SessionCache,org.modeshape.jcr.value.Property,org.modeshape.jcr.cache.NodeKey,org.modeshape.jcr.cache.CachedNode$ReferenceType):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":693,"column_number":-1,"description":"call to void SessionNode$ReferrerChanges.removeWeakReferrer(Property,NodeKey)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2469,"column_number":-1,"description":"call to void SessionNode$ReferrerChanges.processReferrerChange(Property,NodeKey,Map,Map)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2493,"column_number":-1,"description":"Write to container `changes.addedWeak` via call to `remove`"}],"key":"SessionNode.java|removeReferrer|THREAD_SAFETY_VIOLATION","hash":"45fb5fb586cfb120b4294c1f7dd3334a","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEoAAAAEAAAAGgAAABKgsAEJvQD/kgk/c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9TZXNzaW9uTm9kZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void SessionNode.removeReferrer(SessionCache,Property,NodeKey,CachedNode$ReferenceType)` indirectly mutates container `changes.addedStrong` via call to `remove` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":696,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.removeReferrer(org.modeshape.jcr.cache.SessionCache,org.modeshape.jcr.value.Property,org.modeshape.jcr.cache.NodeKey,org.modeshape.jcr.cache.CachedNode$ReferenceType):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":696,"column_number":-1,"description":"call to void SessionNode$ReferrerChanges.removeStrongReferrer(Property,NodeKey)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2479,"column_number":-1,"description":"call to void SessionNode$ReferrerChanges.processReferrerChange(Property,NodeKey,Map,Map)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2493,"column_number":-1,"description":"Write to container `changes.addedStrong` via call to `remove`"}],"key":"SessionNode.java|removeReferrer|THREAD_SAFETY_VIOLATION","hash":"86f27413ece604d8bbf44cbc3e7ff6ba","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEoAAAAEAAAAGgAAABKgsAEJvQD/kgk/c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9TZXNzaW9uTm9kZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void AbstractJcrNode.removeShare()` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":3149,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.removeShare():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3149,"column_number":-1,"description":"call to void AbstractJcrNode.internalRemove(boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3170,"column_number":-1,"description":"call to void AbstractJcrNode.checkForLock()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":635,"column_number":-1,"description":"call to Lock AbstractJcrNode.getLockIfExists()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3322,"column_number":-1,"description":"call to Lock JcrLockManager.getLockIfExists(AbstractJcrNode)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrLockManager.java","line_number":178,"column_number":-1,"description":"call to Lock RepositoryLockManager$ModeShapeLock.lockFor(JcrSession)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","line_number":661,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"AbstractJcrNode.java|removeShare|THREAD_SAFETY_VIOLATION","hash":"a0824881a25560bc4ecf585a2c4421b4","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void JcrSystemNode.removeShare()` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.removeShare():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to void AbstractJcrNode.removeShare()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3149,"column_number":-1,"description":"call to void AbstractJcrNode.internalRemove(boolean)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3170,"column_number":-1,"description":"call to void AbstractJcrNode.checkForLock()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":635,"column_number":-1,"description":"call to Lock AbstractJcrNode.getLockIfExists()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3322,"column_number":-1,"description":"call to Lock JcrLockManager.getLockIfExists(AbstractJcrNode)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrLockManager.java","line_number":178,"column_number":-1,"description":"call to Lock RepositoryLockManager$ModeShapeLock.lockFor(JcrSession)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","line_number":661,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"JcrSystemNode.java|removeShare|THREAD_SAFETY_VIOLATION","hash":"364c01510aec340ce23a495f8e0338e0","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void AbstractJcrNode.removeSharedSet()` indirectly mutates container `ace.privileges` via call to `addAll` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":3122,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.removeSharedSet():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3122,"column_number":-1,"description":"call to void JcrSession.checkPermission(AbstractJcrItem,java.lang.String[])"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1535,"column_number":-1,"description":"call to void JcrSession.checkPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1567,"column_number":-1,"description":"call to boolean JcrSession.hasPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1375,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPermission(Path,java.lang.String[])"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":322,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPrivileges(String,javax.jcr.security.Privilege[])"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":109,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.getApplicableACL(String)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":114,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.findAccessList(String,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":289,"column_number":-1,"description":"call to boolean JcrAccessControlList.addAccessControlEntry(Principal,javax.jcr.security.Privilege[])"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/security/acl/JcrAccessControlList.java","line_number":113,"column_number":-1,"description":"call to boolean AccessControlEntryImpl.addIfNotPresent(javax.jcr.security.Privilege[])"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/security/acl/AccessControlEntryImpl.java","line_number":103,"column_number":-1,"description":"Write to container `ace.privileges` via call to `addAll`"}],"key":"AbstractJcrNode.java|removeSharedSet|THREAD_SAFETY_VIOLATION","hash":"f26e517f8284e90459e8d05a9dc6d5c8","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFIAAAAEAAAAHQAAABSgsABnAP+SCUhzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3NlY3VyaXR5L2FjbC9BY2Nlc3NDb250cm9sRW50cnlJbXBsLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void AbstractJcrNode.removeSharedSet()` indirectly writes to field `parentKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":3113,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.removeSharedSet():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3113,"column_number":-1,"description":"call to NodeIterator JcrSharedNodeCache$SharedSet.getSharedNodes()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSharedNodeCache.java","line_number":243,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `parentKey.workspaceKey`"}],"key":"AbstractJcrNode.java|removeSharedSet|THREAD_SAFETY_VIOLATION","hash":"644d171b16c6edecb23a1a6402c6897a","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Set CachedNode.getAdditionalParentKeys(NodeCache)` of un-annotated interface `org.modeshape.jcr.cache.CachedNode`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":3111,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.removeSharedSet():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3111,"column_number":-1,"description":"call to int JcrSharedNodeCache$SharedSet.getSize()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSharedNodeCache.java","line_number":221,"column_number":-1,"description":"Call to un-annotated interface method Set CachedNode.getAdditionalParentKeys(NodeCache)"}],"key":"AbstractJcrNode.java|removeSharedSet|INTERFACE_NOT_THREAD_SAFE","hash":"1c42a17f8cb6f000330fb3e05457d93a","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEIAAAAEAAAAGAAAABGgsAEA3QD/kgk3c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JTaGFyZWROb2RlQ2FjaGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void AbstractJcrNode.removeSharedSet()` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":3121,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.removeSharedSet():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3121,"column_number":-1,"description":"call to void AbstractJcrNode.checkForLock()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":635,"column_number":-1,"description":"call to Lock AbstractJcrNode.getLockIfExists()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3322,"column_number":-1,"description":"call to Lock JcrLockManager.getLockIfExists(AbstractJcrNode)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrLockManager.java","line_number":178,"column_number":-1,"description":"call to Lock RepositoryLockManager$ModeShapeLock.lockFor(JcrSession)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","line_number":661,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"AbstractJcrNode.java|removeSharedSet|THREAD_SAFETY_VIOLATION","hash":"c1e97a9e97154e61608b8e907f5b5bdb","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void JcrSystemNode.removeSharedSet()` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.removeSharedSet():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to void AbstractJcrNode.removeSharedSet()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3121,"column_number":-1,"description":"call to void AbstractJcrNode.checkForLock()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":635,"column_number":-1,"description":"call to Lock AbstractJcrNode.getLockIfExists()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3322,"column_number":-1,"description":"call to Lock JcrLockManager.getLockIfExists(AbstractJcrNode)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrLockManager.java","line_number":178,"column_number":-1,"description":"call to Lock RepositoryLockManager$ModeShapeLock.lockFor(JcrSession)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","line_number":661,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"JcrSystemNode.java|removeSharedSet|THREAD_SAFETY_VIOLATION","hash":"beecfdd4e3e5bed5f00f63b7818402af","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void CassandraBinaryStore.removeValuesUnusedLongerThan(long,TimeUnit)` reads without synchronization from `this.session`. Potentially races with write in method `CassandraBinaryStore.start()`.\n Reporting because a superclass `class org.modeshape.jcr.value.binary.AbstractBinaryStore` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":219,"column":-1,"procedure":"org.modeshape.jcr.value.binary.CassandraBinaryStore.removeValuesUnusedLongerThan(long,java.util.concurrent.TimeUnit):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/CassandraBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/CassandraBinaryStore.java","line_number":219,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/CassandraBinaryStore.java","line_number":219,"column_number":-1,"description":"access to `this.session`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/CassandraBinaryStore.java","line_number":262,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/CassandraBinaryStore.java","line_number":262,"column_number":-1,"description":"access to `this.session`"}],"key":"CassandraBinaryStore.java|removeValuesUnusedLongerThan|THREAD_SAFETY_VIOLATION","hash":"f5616d81d9aac0834438cbd7d9c478e0","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAKEAAAAIAAAAOAAAACagsAEA2wD/kglGc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvQ2Fzc2FuZHJhQmluYXJ5U3RvcmUuamF2YaCwAQEGAP+SCUZzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2JpbmFyeS9DYXNzYW5kcmFCaW5hcnlTdG9yZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void DatabaseBinaryStore.removeValuesUnusedLongerThan(long,TimeUnit)` indirectly reads without synchronization from `this.dataSource`. Potentially races with write in method `DatabaseBinaryStore.start()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":248,"column":-1,"procedure":"org.modeshape.jcr.value.binary.DatabaseBinaryStore.removeValuesUnusedLongerThan(long,java.util.concurrent.TimeUnit):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":248,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":248,"column_number":-1,"description":"call to Object DatabaseBinaryStore.dbCall(DatabaseBinaryStore$DBCallable)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":357,"column_number":-1,"description":"call to Connection DatabaseBinaryStore.newConnection()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":328,"column_number":-1,"description":"access to `this.dataSource`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":146,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":146,"column_number":-1,"description":"call to void DatabaseBinaryStore.lookupDataSource()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":338,"column_number":-1,"description":"access to `this.dataSource`"}],"key":"DatabaseBinaryStore.java|removeValuesUnusedLongerThan|THREAD_SAFETY_VIOLATION","hash":"66630a925464072508563bf12ab79abc","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAJ8AAAAIAAAAOAAAACagsAEBSAD/kglFc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvRGF0YWJhc2VCaW5hcnlTdG9yZS5qYXZhoLABAVIA/5IJRXNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvdmFsdWUvYmluYXJ5L0RhdGFiYXNlQmluYXJ5U3RvcmUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void MongodbBinaryStore.removeValuesUnusedLongerThan(long,TimeUnit)` indirectly reads without synchronization from `this.db`. Potentially races with write in method `MongodbBinaryStore.start()`.\n Reporting because a superclass `class org.modeshape.jcr.value.binary.AbstractBinaryStore` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":263,"column":-1,"procedure":"org.modeshape.jcr.value.binary.MongodbBinaryStore.removeValuesUnusedLongerThan(long,java.util.concurrent.TimeUnit):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":263,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":263,"column_number":-1,"description":"call to Set MongodbBinaryStore.getStoredKeys(boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":322,"column_number":-1,"description":"access to `this.db`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":346,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":346,"column_number":-1,"description":"call to void MongodbBinaryStore.initMongoDatabase()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":367,"column_number":-1,"description":"access to `this.db`"}],"key":"MongodbBinaryStore.java|removeValuesUnusedLongerThan|THREAD_SAFETY_VIOLATION","hash":"d55b62cd5a2de811955060ac4fb49aa4","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAJ0AAAAIAAAAOAAAACagsAEBQgD/kglEc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvTW9uZ29kYkJpbmFyeVN0b3JlLmphdmGgsAEBbwD/kglEc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvTW9uZ29kYkJpbmFyeVN0b3JlLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void InfinispanBinaryStore.removeValuesUnusedLongerThan(long,TimeUnit)` reads without synchronization from `this.metadataCache`. Potentially races with write in method `InfinispanBinaryStore.start()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":351,"column":-1,"procedure":"org.modeshape.jcr.value.binary.infinispan.InfinispanBinaryStore.removeValuesUnusedLongerThan(long,java.util.concurrent.TimeUnit):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":351,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":351,"column_number":-1,"description":"access to `this.metadataCache`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":179,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":179,"column_number":-1,"description":"access to `this.metadataCache`"}],"key":"InfinispanBinaryStore.java|removeValuesUnusedLongerThan|THREAD_SAFETY_VIOLATION","hash":"aed6dfc3d7306505dd56dae66d9e5783","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAALkAAAAIAAAAPgAAACqgsAEBXwD/kglSc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvaW5maW5pc3Bhbi9JbmZpbmlzcGFuQmluYXJ5U3RvcmUuamF2YaCwAQCzAP+SCVJzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2JpbmFyeS9pbmZpbmlzcGFuL0luZmluaXNwYW5CaW5hcnlTdG9yZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void InfinispanBinaryStore.removeValuesUnusedLongerThan(long,TimeUnit)` reads with synchronization from `this.blobCache`. Potentially races with unsynchronized write in method `InfinispanBinaryStore.start()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":372,"column":-1,"procedure":"org.modeshape.jcr.value.binary.infinispan.InfinispanBinaryStore.removeValuesUnusedLongerThan(long,java.util.concurrent.TimeUnit):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":372,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":372,"column_number":-1,"description":"access to `this.blobCache`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":180,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":180,"column_number":-1,"description":"access to `this.blobCache`"}],"key":"InfinispanBinaryStore.java|removeValuesUnusedLongerThan|THREAD_SAFETY_VIOLATION","hash":"b97deb57e7b8e33821730929e2a4a182","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAALkAAAAIAAAAPgAAACqgsAEBdAD/kglSc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvaW5maW5pc3Bhbi9JbmZpbmlzcGFuQmluYXJ5U3RvcmUuamF2YaCwAQC0AP+SCVJzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2JpbmFyeS9pbmZpbmlzcGFuL0luZmluaXNwYW5CaW5hcnlTdG9yZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `EmbeddedCacheManager Cache.getCacheManager()` of un-annotated interface `org.infinispan.Cache`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":354,"column":-1,"procedure":"org.modeshape.jcr.value.binary.infinispan.InfinispanBinaryStore.removeValuesUnusedLongerThan(long,java.util.concurrent.TimeUnit):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":354,"column_number":-1,"description":"Call to un-annotated interface method EmbeddedCacheManager Cache.getCacheManager()"}],"key":"InfinispanBinaryStore.java|removeValuesUnusedLongerThan|INTERFACE_NOT_THREAD_SAFE","hash":"331cb462e9d9f94ab1b14e88b037f1c4","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAF0AAAAEAAAAHwAAABWgsAEBYgD/kglSc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvaW5maW5pc3Bhbi9JbmZpbmlzcGFuQmluYXJ5U3RvcmUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void InfinispanBinaryStore.removeValuesUnusedLongerThan(long,TimeUnit)` reads with synchronization from `this.lockFactory`. Potentially races with unsynchronized write in method `InfinispanBinaryStore.start()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":370,"column":-1,"procedure":"org.modeshape.jcr.value.binary.infinispan.InfinispanBinaryStore.removeValuesUnusedLongerThan(long,java.util.concurrent.TimeUnit):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":370,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":370,"column_number":-1,"description":"access to `this.lockFactory`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":181,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":181,"column_number":-1,"description":"access to `this.lockFactory`"}],"key":"InfinispanBinaryStore.java|removeValuesUnusedLongerThan|THREAD_SAFETY_VIOLATION","hash":"52ca3e67c07a5d64e5c8575e61c67b43","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAALkAAAAIAAAAPgAAACqgsAEBcgD/kglSc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvaW5maW5pc3Bhbi9JbmZpbmlzcGFuQmluYXJ5U3RvcmUuamF2YaCwAQC1AP+SCVJzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2JpbmFyeS9pbmZpbmlzcGFuL0luZmluaXNwYW5CaW5hcnlTdG9yZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void JcrVersionHistoryNode.removeVersion(String)` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":181,"column":-1,"procedure":"org.modeshape.jcr.JcrVersionHistoryNode.removeVersion(java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":181,"column_number":-1,"description":"call to JcrVersionNode JcrVersionHistoryNode.getVersion(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":93,"column_number":-1,"description":"call to AbstractJcrNode JcrSystemNode.getNode(String)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to AbstractJcrNode AbstractJcrNode.getNode(String)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":796,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,Path)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":659,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"JcrVersionHistoryNode.java|removeVersion|THREAD_SAFETY_VIOLATION","hash":"f8870f927d7343c71ddfd414644350f7","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void JcrVersionHistoryNode.removeVersion(String)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":182,"column":-1,"procedure":"org.modeshape.jcr.JcrVersionHistoryNode.removeVersion(java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":182,"column_number":-1,"description":"call to void JcrVersionHistoryNode.removeVersion(Version)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":203,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrVersionHistoryNode.java|removeVersion|THREAD_SAFETY_VIOLATION","hash":"10ce94a4177af53202da3ac1d33d0b69","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `void SessionCache.destroy(NodeKey)` of un-annotated interface `org.modeshape.jcr.cache.SessionCache`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":259,"column":-1,"procedure":"org.modeshape.jcr.JcrVersionHistoryNode.removeVersion(javax.jcr.version.Version):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":259,"column_number":-1,"description":"Call to un-annotated interface method void SessionCache.destroy(NodeKey)"}],"key":"JcrVersionHistoryNode.java|removeVersion|INTERFACE_NOT_THREAD_SAFE","hash":"803d2fb502e0848b880eb1fe19d749a6","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBAwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JWZXJzaW9uSGlzdG9yeU5vZGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void JcrVersionHistoryNode.removeVersion(Version)` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":198,"column":-1,"procedure":"org.modeshape.jcr.JcrVersionHistoryNode.removeVersion(javax.jcr.version.Version):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":198,"column_number":-1,"description":"call to void JcrVersionHistoryNode.validateIncomingReferences(JcrVersionNode)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":281,"column_number":-1,"description":"call to JcrVersionHistoryNode JcrVersionNode.getContainingHistory()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","line_number":54,"column_number":-1,"description":"call to JcrVersionHistoryNode JcrVersionNode.getParent()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrVersionNode.java","line_number":49,"column_number":-1,"description":"call to AbstractJcrNode JcrSystemNode.getParent()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to AbstractJcrNode JcrNode.getParent()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrNode.java","line_number":68,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"JcrVersionHistoryNode.java|removeVersion|THREAD_SAFETY_VIOLATION","hash":"29a2d275c12e6716a77f4c6fd3f096c2","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void JcrVersionHistoryNode.removeVersion(Version)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":203,"column":-1,"procedure":"org.modeshape.jcr.JcrVersionHistoryNode.removeVersion(javax.jcr.version.Version):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":203,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrVersionHistoryNode.java|removeVersion|THREAD_SAFETY_VIOLATION","hash":"2d420f6bab09747e702e58495d12437f","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void JcrVersionHistoryNode.removeVersion(Version)` indirectly reads without synchronization from `nodeKey.workspaceKey`. Potentially races with write in method `JcrVersionHistoryNode.addVersionLabel(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":216,"column":-1,"procedure":"org.modeshape.jcr.JcrVersionHistoryNode.removeVersion(javax.jcr.version.Version):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":216,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":216,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":165,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":315,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":315,"column_number":-1,"description":"call to AbstractJcrNode JcrVersionHistoryNode.versionLabels()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":77,"column_number":-1,"description":"call to AbstractJcrNode AbstractJcrNode.childNode(Name,AbstractJcrNode$Type)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":690,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"JcrVersionHistoryNode.java|removeVersion|THREAD_SAFETY_VIOLATION","hash":"6574568b984014331a3f5f854631bad8","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAHkAAAAIAAAALgAAACKgsAEApQD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `int Transaction.getStatus()` of un-annotated interface `javax.transaction.Transaction`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":349,"column":-1,"procedure":"org.modeshape.jcr.JcrVersionHistoryNode.removeVersionLabel(java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":349,"column_number":-1,"description":"call to SessionCache JcrSession.createSystemCache(boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":378,"column_number":-1,"description":"call to SessionCache JcrRepository.createSystemSession(ExecutionContext,boolean)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":501,"column_number":-1,"description":"call to SessionCache RepositoryCache.createSession(ExecutionContext,String,boolean)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/RepositoryCache.java","line_number":1137,"column_number":-1,"description":"call to ReadOnlySessionCache.<init>(ExecutionContext,WorkspaceCache,RepositoryEnvironment)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/ReadOnlySessionCache.java","line_number":40,"column_number":-1,"description":"call to AbstractSessionCache.<init>(ExecutionContext,WorkspaceCache,RepositoryEnvironment)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/document/AbstractSessionCache.java","line_number":94,"column_number":-1,"description":"call to void AbstractSessionCache.checkForTransaction()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/cache/document/AbstractSessionCache.java","line_number":110,"column_number":-1,"description":"Call to un-annotated interface method int Transaction.getStatus()"}],"key":"JcrVersionHistoryNode.java|removeVersionLabel|INTERFACE_NOT_THREAD_SAFE","hash":"c32dd396e8a3dd08b178a836fa0b2f5d","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAFIAAAAEAAAAHQAAABSgsABuAP+SCUhzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL2NhY2hlL2RvY3VtZW50L0Fic3RyYWN0U2Vzc2lvbkNhY2hlLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void JcrVersionHistoryNode.removeVersionLabel(String)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":342,"column":-1,"procedure":"org.modeshape.jcr.JcrVersionHistoryNode.removeVersionLabel(java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":342,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":336,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrVersionHistoryNode.java|removeVersionLabel|THREAD_SAFETY_VIOLATION","hash":"c3d50d66f44bd58a5dfb27ed5eee1fcf","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void JcrVersionHistoryNode.removeVersionLabel(String)` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":337,"column":-1,"procedure":"org.modeshape.jcr.JcrVersionHistoryNode.removeVersionLabel(java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":337,"column_number":-1,"description":"call to AbstractJcrNode JcrVersionHistoryNode.versionLabels()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":77,"column_number":-1,"description":"call to AbstractJcrNode AbstractJcrNode.childNode(Name,AbstractJcrNode$Type)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":690,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"JcrVersionHistoryNode.java|removeVersionLabel|THREAD_SAFETY_VIOLATION","hash":"936671c5e0a6bf033e0d4560b8b109dd","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `SchematicEntry DocumentStore.get(String)` of un-annotated interface `org.modeshape.jcr.cache.document.DocumentStore`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":1337,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.renameChild(org.modeshape.jcr.cache.SessionCache,org.modeshape.jcr.cache.NodeKey,org.modeshape.jcr.value.Name):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1337,"column_number":-1,"description":"call to ChildReferences SessionNode.getChildReferences(NodeCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1120,"column_number":-1,"description":"call to boolean SessionNode.allowsSNS(NodeCache)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1136,"column_number":-1,"description":"call to Name SessionNode.getPrimaryType(NodeCache)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":495,"column_number":-1,"description":"call to Property SessionNode.getProperty(Name,NodeCache)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":740,"column_number":-1,"description":"call to CachedNode SessionNode.nodeInWorkspace(AbstractSessionCache)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":309,"column_number":-1,"description":"call to CachedNode WorkspaceCache.getNode(NodeKey)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":243,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(NodeKey)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":207,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(String)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":188,"column_number":-1,"description":"Call to un-annotated interface method SchematicEntry DocumentStore.get(String)"}],"key":"SessionNode.java|renameChild|INTERFACE_NOT_THREAD_SAFE","hash":"34d29c9e1c076355346826f97640e72f","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEAvAD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xb3Jrc3BhY2VDYWNoZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void SessionNode.renameChild(SessionCache,NodeKey,Name)` indirectly mutates container `newNames` via call to `put` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1351,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.renameChild(org.modeshape.jcr.cache.SessionCache,org.modeshape.jcr.cache.NodeKey,org.modeshape.jcr.value.Name):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1351,"column_number":-1,"description":"call to void SessionNode$ChangedChildren.renameTo(NodeKey,Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2096,"column_number":-1,"description":"Write to container `newNames` via call to `put`"}],"key":"SessionNode.java|renameChild|THREAD_SAFETY_VIOLATION","hash":"03dcc0c4b17b89cc95ae4d8c942c1121","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEoAAAAEAAAAGgAAABKgsAEIMAD/kgk/c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9TZXNzaW9uTm9kZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void SessionNode$ChangedChildren.renameTo(NodeKey,Name)` mutates container `newNames` via call to `put` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":2096,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode$ChangedChildren.renameTo(org.modeshape.jcr.cache.NodeKey,org.modeshape.jcr.value.Name):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2096,"column_number":-1,"description":"Write to container `newNames` via call to `put`"}],"key":"SessionNode.java|renameTo|THREAD_SAFETY_VIOLATION","hash":"207dbe89e24f0bad2131ec0de41f23dc","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEoAAAAEAAAAGgAAABKgsAEIMAD/kgk/c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9TZXNzaW9uTm9kZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `SchematicEntry DocumentStore.get(String)` of un-annotated interface `org.modeshape.jcr.cache.document.DocumentStore`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":1294,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.reorderChild(org.modeshape.jcr.cache.SessionCache,org.modeshape.jcr.cache.NodeKey,org.modeshape.jcr.cache.NodeKey):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1294,"column_number":-1,"description":"call to ChildReferences SessionNode.getChildReferences(NodeCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1120,"column_number":-1,"description":"call to boolean SessionNode.allowsSNS(NodeCache)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1136,"column_number":-1,"description":"call to Name SessionNode.getPrimaryType(NodeCache)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":495,"column_number":-1,"description":"call to Property SessionNode.getProperty(Name,NodeCache)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":740,"column_number":-1,"description":"call to CachedNode SessionNode.nodeInWorkspace(AbstractSessionCache)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":309,"column_number":-1,"description":"call to CachedNode WorkspaceCache.getNode(NodeKey)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":243,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(NodeKey)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":207,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(String)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":188,"column_number":-1,"description":"Call to un-annotated interface method SchematicEntry DocumentStore.get(String)"}],"key":"SessionNode.java|reorderChild|INTERFACE_NOT_THREAD_SAFE","hash":"ee6f79f055374313536d9d2c5e58f5af","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEAvAD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xb3Jrc3BhY2VDYWNoZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `SchematicEntry DocumentStore.get(String)` of un-annotated interface `org.modeshape.jcr.cache.document.DocumentStore`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":244,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.replaceParentWithAdditionalParent(org.modeshape.jcr.cache.NodeCache,org.modeshape.jcr.cache.NodeKey,org.modeshape.jcr.cache.NodeKey):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":244,"column_number":-1,"description":"call to Set SessionNode.getAdditionalParentKeys(NodeCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":348,"column_number":-1,"description":"call to CachedNode SessionNode.nodeInWorkspace(AbstractSessionCache)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":309,"column_number":-1,"description":"call to CachedNode WorkspaceCache.getNode(NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":243,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":207,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(String)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":188,"column_number":-1,"description":"Call to un-annotated interface method SchematicEntry DocumentStore.get(String)"}],"key":"SessionNode.java|replaceParentWithAdditionalParent|INTERFACE_NOT_THREAD_SAFE","hash":"344f4ba6813b19afd63bbd8b724c2a6d","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEAvAD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xb3Jrc3BhY2VDYWNoZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `JcrRepositoryManager JcrWorkspace.repositoryManager()` reads without synchronization from `this.repositoryManager`. Potentially races with write in method `JcrWorkspace.getRepositoryManager()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":686,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.repositoryManager():org.modeshape.jcr.JcrRepositoryManager","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":686,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":686,"column_number":-1,"description":"access to `this.repositoryManager`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":72,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":72,"column_number":-1,"description":"call to JcrRepositoryManager JcrWorkspace.getRepositoryManager()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":682,"column_number":-1,"description":"call to JcrRepositoryManager JcrWorkspace.repositoryManager()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":689,"column_number":-1,"description":"access to `this.repositoryManager`"}],"key":"JcrWorkspace.java|repositoryManager|THREAD_SAFETY_VIOLATION","hash":"0a6ba202852aa661b49911c645815b9c","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAHcAAAAIAAAALgAAACKgsAECrgD/kgkxc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JXb3Jrc3BhY2UuamF2YaCwAQKxAP+SCTFzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL0pjcldvcmtzcGFjZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `JcrRepositoryMonitor JcrRepositoryManager.repositoryMonitor()` reads without synchronization from `this.monitor`. Potentially races with write in method `JcrRepositoryManager.repositoryMonitor()`.\n Reporting because this access may occur on a background thread.","severity":"WARNING","line":65,"column":-1,"procedure":"org.modeshape.jcr.JcrRepositoryManager.repositoryMonitor():org.modeshape.jcr.JcrRepositoryMonitor","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrRepositoryManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRepositoryManager.java","line_number":65,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRepositoryManager.java","line_number":65,"column_number":-1,"description":"access to `this.monitor`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRepositoryManager.java","line_number":60,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRepositoryManager.java","line_number":60,"column_number":-1,"description":"access to `this.monitor`"}],"key":"JcrRepositoryManager.java|repositoryMonitor|THREAD_SAFETY_VIOLATION","hash":"2879b502325f3990917b755a1d97a841","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEoAAAAGAAAAIAAAABmgsABBAP+SCTlzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL0pjclJlcG9zaXRvcnlNYW5hZ2VyLmphdmGgsHwA/wQEQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void JcrWorkspace.restore(javax.jcr.version.Version[],boolean)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":564,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.restore(javax.jcr.version.Version[],boolean):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":564,"column_number":-1,"description":"call to void JcrVersionManager.restore(javax.jcr.version.Version[],boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":654,"column_number":-1,"description":"call to void JcrVersionManager$RestoreCommand.execute()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":1136,"column_number":-1,"description":"call to void JcrVersionManager$RestoreCommand.restoreNode(AbstractJcrNode,AbstractJcrNode,DateTime)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":1194,"column_number":-1,"description":"call to CachedNode JcrVersionManager$RestoreCommand.resolveSourceNode(CachedNode,DateTime,NodeCache)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":1535,"column_number":-1,"description":"call to JcrVersionNode JcrVersionHistoryNode.getVersionByLabel(String)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":102,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":11,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":12,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrWorkspace.java|restore|THREAD_SAFETY_VIOLATION","hash":"8cac1b5ef1dd93120b4b94e661cea60d","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void AbstractJcrNode.restore(String,boolean)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":3243,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.restore(java.lang.String,boolean):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3243,"column_number":-1,"description":"call to void AbstractJcrNode.restore(Version,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3256,"column_number":-1,"description":"call to void JcrVersionManager.restoreAtAbsPath(String,Version,boolean,boolean)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":738,"column_number":-1,"description":"call to void JcrVersionManager.restore(JcrSession,Path,Version,String,boolean)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":884,"column_number":-1,"description":"call to void JcrVersionManager$RestoreCommand.execute()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":1136,"column_number":-1,"description":"call to void JcrVersionManager$RestoreCommand.restoreNode(AbstractJcrNode,AbstractJcrNode,DateTime)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":1194,"column_number":-1,"description":"call to CachedNode JcrVersionManager$RestoreCommand.resolveSourceNode(CachedNode,DateTime,NodeCache)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":1535,"column_number":-1,"description":"call to JcrVersionNode JcrVersionHistoryNode.getVersionByLabel(String)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":102,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":11,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":12,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":13,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":14,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|restore|THREAD_SAFETY_VIOLATION","hash":"f0d5ce2e3b8c2b55be9cc0d390b7ecbf","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void JcrSystemNode.restore(String,boolean)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.restore(java.lang.String,boolean):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to void AbstractJcrNode.restore(String,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3243,"column_number":-1,"description":"call to void AbstractJcrNode.restore(Version,boolean)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3256,"column_number":-1,"description":"call to void JcrVersionManager.restoreAtAbsPath(String,Version,boolean,boolean)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":738,"column_number":-1,"description":"call to void JcrVersionManager.restore(JcrSession,Path,Version,String,boolean)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":884,"column_number":-1,"description":"call to void JcrVersionManager$RestoreCommand.execute()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":1136,"column_number":-1,"description":"call to void JcrVersionManager$RestoreCommand.restoreNode(AbstractJcrNode,AbstractJcrNode,DateTime)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":1194,"column_number":-1,"description":"call to CachedNode JcrVersionManager$RestoreCommand.resolveSourceNode(CachedNode,DateTime,NodeCache)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":1535,"column_number":-1,"description":"call to JcrVersionNode JcrVersionHistoryNode.getVersionByLabel(String)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":102,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":11,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":12,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":13,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":14,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":15,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrSystemNode.java|restore|THREAD_SAFETY_VIOLATION","hash":"b7be1a321f460a3e5471105de1912ce3","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `boolean NodeTypes$ReusableNodeDefinitionSet.appliesTo(NodeTypes,Name,Set)` of un-annotated interface `org.modeshape.jcr.NodeTypes$ReusableNodeDefinitionSet`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":3252,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.restore(javax.jcr.version.Version,boolean):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3252,"column_number":-1,"description":"call to void AbstractJcrNode.checkNotProtected()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2929,"column_number":-1,"description":"call to NodeDefinition AbstractJcrNode.getDefinition()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2835,"column_number":-1,"description":"call to NodeDefinition AbstractJcrNode.nodeDefinition()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2907,"column_number":-1,"description":"call to NodeTypes$NodeDefinitionSet NodeTypes.findChildNodeDefinitions(Name,Set)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":2375,"column_number":-1,"description":"Call to un-annotated interface method boolean NodeTypes$ReusableNodeDefinitionSet.appliesTo(NodeTypes,Name,Set)"}],"key":"AbstractJcrNode.java|restore|INTERFACE_NOT_THREAD_SAFE","hash":"cc4333ca33e265842891243ccadcc773","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAADkAAAAEAAAAFgAAABCgsAEJRwD/kgkuc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9Ob2RlVHlwZXMuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void AbstractJcrNode.restore(Version,boolean)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":3256,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.restore(javax.jcr.version.Version,boolean):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3256,"column_number":-1,"description":"call to void JcrVersionManager.restoreAtAbsPath(String,Version,boolean,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":738,"column_number":-1,"description":"call to void JcrVersionManager.restore(JcrSession,Path,Version,String,boolean)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":884,"column_number":-1,"description":"call to void JcrVersionManager$RestoreCommand.execute()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":1136,"column_number":-1,"description":"call to void JcrVersionManager$RestoreCommand.restoreNode(AbstractJcrNode,AbstractJcrNode,DateTime)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":1194,"column_number":-1,"description":"call to CachedNode JcrVersionManager$RestoreCommand.resolveSourceNode(CachedNode,DateTime,NodeCache)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":1535,"column_number":-1,"description":"call to JcrVersionNode JcrVersionHistoryNode.getVersionByLabel(String)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":102,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":11,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":12,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":13,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|restore|THREAD_SAFETY_VIOLATION","hash":"721eb93c5331f95732cfc1bfc13ca798","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void JcrSystemNode.restore(Version,boolean)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.restore(javax.jcr.version.Version,boolean):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to void AbstractJcrNode.restore(Version,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3256,"column_number":-1,"description":"call to void JcrVersionManager.restoreAtAbsPath(String,Version,boolean,boolean)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":738,"column_number":-1,"description":"call to void JcrVersionManager.restore(JcrSession,Path,Version,String,boolean)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":884,"column_number":-1,"description":"call to void JcrVersionManager$RestoreCommand.execute()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":1136,"column_number":-1,"description":"call to void JcrVersionManager$RestoreCommand.restoreNode(AbstractJcrNode,AbstractJcrNode,DateTime)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":1194,"column_number":-1,"description":"call to CachedNode JcrVersionManager$RestoreCommand.resolveSourceNode(CachedNode,DateTime,NodeCache)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":1535,"column_number":-1,"description":"call to JcrVersionNode JcrVersionHistoryNode.getVersionByLabel(String)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":102,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":11,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":12,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":13,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":14,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrSystemNode.java|restore|THREAD_SAFETY_VIOLATION","hash":"f8e14aab93706700f30a62d3299cb564","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void AbstractJcrNode.restore(Version,String,boolean)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":3272,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.restore(javax.jcr.version.Version,java.lang.String,boolean):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3272,"column_number":-1,"description":"call to void JcrVersionManager.restoreAtAbsPath(String,Version,boolean,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":738,"column_number":-1,"description":"call to void JcrVersionManager.restore(JcrSession,Path,Version,String,boolean)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":884,"column_number":-1,"description":"call to void JcrVersionManager$RestoreCommand.execute()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":1136,"column_number":-1,"description":"call to void JcrVersionManager$RestoreCommand.restoreNode(AbstractJcrNode,AbstractJcrNode,DateTime)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":1194,"column_number":-1,"description":"call to CachedNode JcrVersionManager$RestoreCommand.resolveSourceNode(CachedNode,DateTime,NodeCache)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":1535,"column_number":-1,"description":"call to JcrVersionNode JcrVersionHistoryNode.getVersionByLabel(String)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":102,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":11,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":12,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":13,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|restore|THREAD_SAFETY_VIOLATION","hash":"ee3118ef5fe46fa23bd9dfa2e4f386ee","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `boolean NodeTypes$ReusableNodeDefinitionSet.appliesTo(NodeTypes,Name,Set)` of un-annotated interface `org.modeshape.jcr.NodeTypes$ReusableNodeDefinitionSet`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":3265,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.restore(javax.jcr.version.Version,java.lang.String,boolean):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3265,"column_number":-1,"description":"call to void AbstractJcrNode.checkNotProtected()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2929,"column_number":-1,"description":"call to NodeDefinition AbstractJcrNode.getDefinition()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2835,"column_number":-1,"description":"call to NodeDefinition AbstractJcrNode.nodeDefinition()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2907,"column_number":-1,"description":"call to NodeTypes$NodeDefinitionSet NodeTypes.findChildNodeDefinitions(Name,Set)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":2375,"column_number":-1,"description":"Call to un-annotated interface method boolean NodeTypes$ReusableNodeDefinitionSet.appliesTo(NodeTypes,Name,Set)"}],"key":"AbstractJcrNode.java|restore|INTERFACE_NOT_THREAD_SAFE","hash":"cc4333ca33e265842891243ccadcc773","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAADkAAAAEAAAAFgAAABCgsAEJRwD/kgkuc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9Ob2RlVHlwZXMuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void JcrSystemNode.restore(Version,String,boolean)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.restore(javax.jcr.version.Version,java.lang.String,boolean):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to void AbstractJcrNode.restore(Version,String,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3272,"column_number":-1,"description":"call to void JcrVersionManager.restoreAtAbsPath(String,Version,boolean,boolean)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":738,"column_number":-1,"description":"call to void JcrVersionManager.restore(JcrSession,Path,Version,String,boolean)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":884,"column_number":-1,"description":"call to void JcrVersionManager$RestoreCommand.execute()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":1136,"column_number":-1,"description":"call to void JcrVersionManager$RestoreCommand.restoreNode(AbstractJcrNode,AbstractJcrNode,DateTime)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":1194,"column_number":-1,"description":"call to CachedNode JcrVersionManager$RestoreCommand.resolveSourceNode(CachedNode,DateTime,NodeCache)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrVersionManager.java","line_number":1535,"column_number":-1,"description":"call to JcrVersionNode JcrVersionHistoryNode.getVersionByLabel(String)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":102,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":11,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":12,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":13,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":14,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrSystemNode.java|restore|THREAD_SAFETY_VIOLATION","hash":"529c19451ce3ab4444ca6fe782918673","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void AbstractJcrNode.restoreByLabel(String,boolean)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":3280,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.restoreByLabel(java.lang.String,boolean):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3280,"column_number":-1,"description":"call to JcrVersionNode JcrVersionHistoryNode.getVersionByLabel(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":102,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|restoreByLabel|THREAD_SAFETY_VIOLATION","hash":"a8f85c2e7de1ece1edfd09410dd07763","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void JcrSystemNode.restoreByLabel(String,boolean)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.restoreByLabel(java.lang.String,boolean):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to void AbstractJcrNode.restoreByLabel(String,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3280,"column_number":-1,"description":"call to JcrVersionNode JcrVersionHistoryNode.getVersionByLabel(String)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":102,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrSystemNode.java|restoreByLabel|THREAD_SAFETY_VIOLATION","hash":"9add01fee0e410c542fc67003ad134b5","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Problems JcrRepositoryManager.restoreRepository(File,RestoreOptions)` indirectly mutates container `ace.privileges` via call to `addAll` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":86,"column":-1,"procedure":"org.modeshape.jcr.JcrRepositoryManager.restoreRepository(java.io.File,org.modeshape.jcr.api.RestoreOptions):org.modeshape.jcr.api.Problems","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrRepositoryManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRepositoryManager.java","line_number":86,"column_number":-1,"description":"<Write on unknown thread>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRepositoryManager.java","line_number":86,"column_number":-1,"description":"call to void JcrSession.checkPermission(Path,java.lang.String[])"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1514,"column_number":-1,"description":"call to void JcrSession.checkPermission(String,Path,java.lang.String[])"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1559,"column_number":-1,"description":"call to void JcrSession.checkPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1567,"column_number":-1,"description":"call to boolean JcrSession.hasPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1375,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPermission(Path,java.lang.String[])"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":322,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPrivileges(String,javax.jcr.security.Privilege[])"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":109,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.getApplicableACL(String)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":114,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.findAccessList(String,boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":289,"column_number":-1,"description":"call to boolean JcrAccessControlList.addAccessControlEntry(Principal,javax.jcr.security.Privilege[])"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/security/acl/JcrAccessControlList.java","line_number":113,"column_number":-1,"description":"call to boolean AccessControlEntryImpl.addIfNotPresent(javax.jcr.security.Privilege[])"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/security/acl/AccessControlEntryImpl.java","line_number":103,"column_number":-1,"description":"Write to container `ace.privileges` via call to `addAll`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRepositoryManager.java","line_number":60,"column_number":-1,"description":"<Write on background thread>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRepositoryManager.java","line_number":60,"column_number":-1,"description":"call to JcrRepositoryMonitor.<init>(JcrSession)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrRepositoryMonitor.java","line_number":39,"column_number":-1,"description":"call to boolean JcrSession.hasPermission(String,String)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1593,"column_number":-1,"description":"call to boolean JcrSession.hasPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1375,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPermission(Path,java.lang.String[])"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":322,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPrivileges(String,javax.jcr.security.Privilege[])"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":109,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.getApplicableACL(String)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":114,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.findAccessList(String,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":289,"column_number":-1,"description":"call to boolean JcrAccessControlList.addAccessControlEntry(Principal,javax.jcr.security.Privilege[])"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/security/acl/JcrAccessControlList.java","line_number":113,"column_number":-1,"description":"call to boolean AccessControlEntryImpl.addIfNotPresent(javax.jcr.security.Privilege[])"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/security/acl/AccessControlEntryImpl.java","line_number":103,"column_number":-1,"description":"Write to container `ace.privileges` via call to `addAll`"}],"key":"JcrRepositoryManager.java|restoreRepository|THREAD_SAFETY_VIOLATION","hash":"032ce489107112cf8868acfdc0ed763d","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAKMAAAAIAAAAOgAAACigsABnAP+SCUhzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3NlY3VyaXR5L2FjbC9BY2Nlc3NDb250cm9sRW50cnlJbXBsLmphdmGgsABnAP+SCUhzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3NlY3VyaXR5L2FjbC9BY2Nlc3NDb250cm9sRW50cnlJbXBsLmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `long DurationActivity.getDuration(TimeUnit)` of un-annotated interface `org.modeshape.jcr.api.monitor.DurationActivity`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":659,"column":-1,"procedure":"org.modeshape.jcr.RepositoryStatistics$DurationHistory.rollup():org.modeshape.jcr.api.monitor.Window","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/RepositoryStatistics.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryStatistics.java","line_number":659,"column_number":-1,"description":"Call to un-annotated interface method long DurationActivity.getDuration(TimeUnit)"}],"key":"RepositoryStatistics.java|rollup|INTERFACE_NOT_THREAD_SAFE","hash":"2f4862502c8d7335a8e5de1979c374f1","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEQAAAAEAAAAGQAAABKgsAECkwD/kgk5c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9SZXBvc2l0b3J5U3RhdGlzdGljcy5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `void Transactions$Transaction.commit()` of un-annotated interface `org.modeshape.jcr.txn.Transactions$Transaction`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":3411,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.save():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3411,"column_number":-1,"description":"call to void JcrSession.save()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1172,"column_number":-1,"description":"call to JcrSession$JcrPreSave.<init>(JcrSession,SystemContent,Map,Map,long)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":2066,"column_number":-1,"description":"call to void JcrSession$JcrPreSave.aclMetadataRefresh(long)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":2077,"column_number":-1,"description":"call to void RepositoryCache.setAccessControlEnabled(boolean)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/RepositoryCache.java","line_number":415,"column_number":-1,"description":"call to void RepositoryCache.refreshRepositoryMetadata(boolean)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/RepositoryCache.java","line_number":624,"column_number":-1,"description":"call to Object RepositoryCache.runInTransaction(Callable,int,java.lang.String[])"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/cache/RepositoryCache.java","line_number":517,"column_number":-1,"description":"Call to un-annotated interface method void Transactions$Transaction.commit()"}],"key":"AbstractJcrNode.java|save|INTERFACE_NOT_THREAD_SAFE","hash":"82131c71235bf0e5c8967460381d994b","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAECBQD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9SZXBvc2l0b3J5Q2FjaGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void AbstractJcrNode.save()` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":3413,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.save():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3413,"column_number":-1,"description":"call to void JcrSession.save(AbstractJcrNode)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1219,"column_number":-1,"description":"call to boolean AbstractJcrNode.containsChangesWithExternalDependencies(AtomicReference)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3549,"column_number":-1,"description":"call to void AbstractJcrNode.removeReferrerChanges(Set,Set)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3573,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"AbstractJcrNode.java|save|THREAD_SAFETY_VIOLATION","hash":"5d1052dd80e40b66a7e7414981a7117a","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void JcrSystemNode.save()` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.save():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to void AbstractJcrNode.save()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3413,"column_number":-1,"description":"call to void JcrSession.save(AbstractJcrNode)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1219,"column_number":-1,"description":"call to boolean AbstractJcrNode.containsChangesWithExternalDependencies(AtomicReference)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3549,"column_number":-1,"description":"call to void AbstractJcrNode.removeReferrerChanges(Set,Set)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3573,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"JcrSystemNode.java|save|THREAD_SAFETY_VIOLATION","hash":"7256f061408339a30b43548b28ad3ea6","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void WritableSessionCache.save()` indirectly reads with synchronization from `this.changedNodes`. Potentially races with unsynchronized write in method `WritableSessionCache.clearState()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":432,"column":-1,"procedure":"org.modeshape.jcr.cache.document.WritableSessionCache.save():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":432,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":432,"column_number":-1,"description":"call to void WritableSessionCache.save(SessionCache$PreSave)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":447,"column_number":-1,"description":"call to void WritableSessionCache.runPreSaveBeforeTransaction(SessionCache$PreSave)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":546,"column_number":-1,"description":"access to `this.changedNodes`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":573,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":573,"column_number":-1,"description":"access to `this.changedNodes`"}],"key":"WritableSessionCache.java|save|THREAD_SAFETY_VIOLATION","hash":"e7cc8f18b033d7e553e84ce0e848bbd6","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAKUAAAAIAAAAOgAAACigsAECIgD/kglIc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xcml0YWJsZVNlc3Npb25DYWNoZS5qYXZhoLABAj0A/5IJSHNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvY2FjaGUvZG9jdW1lbnQvV3JpdGFibGVTZXNzaW9uQ2FjaGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `SessionCache SessionCache.unwrap()` of un-annotated interface `org.modeshape.jcr.cache.SessionCache`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":758,"column":-1,"procedure":"org.modeshape.jcr.cache.document.WritableSessionCache.save(java.util.Set,org.modeshape.jcr.cache.SessionCache,org.modeshape.jcr.cache.SessionCache$PreSave):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":758,"column_number":-1,"description":"Call to un-annotated interface method SessionCache SessionCache.unwrap()"}],"key":"WritableSessionCache.java|save|INTERFACE_NOT_THREAD_SAFE","hash":"db486c92b5091772781944da62438a28","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAFMAAAAEAAAAHQAAABSgsAEC9gD/kglIc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xcml0YWJsZVNlc3Npb25DYWNoZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void WritableSessionCache.save(Set,SessionCache,SessionCache$PreSave)` indirectly reads with synchronization from `this.replacedNodes`. Potentially races with unsynchronized write in method `WritableSessionCache.clearState()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":824,"column":-1,"procedure":"org.modeshape.jcr.cache.document.WritableSessionCache.save(java.util.Set,org.modeshape.jcr.cache.SessionCache,org.modeshape.jcr.cache.SessionCache$PreSave):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":824,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":824,"column_number":-1,"description":"call to ChangeSet WritableSessionCache.persistChanges(Iterable,WorkspaceCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":1325,"column_number":-1,"description":"access to `this.replacedNodes`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":577,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":577,"column_number":-1,"description":"access to `this.replacedNodes`"}],"key":"WritableSessionCache.java|save|THREAD_SAFETY_VIOLATION","hash":"5de9db33611ffd7f3bca643b79014117","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAKUAAAAIAAAAOgAAACigsAEFLQD/kglIc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xcml0YWJsZVNlc3Npb25DYWNoZS5qYXZhoLABAkEA/5IJSHNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvY2FjaGUvZG9jdW1lbnQvV3JpdGFibGVTZXNzaW9uQ2FjaGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void WritableSessionCache.save(Set,SessionCache,SessionCache$PreSave)` reads with synchronization from `this.changedNodes`. Potentially races with unsynchronized write in method `WritableSessionCache.clearState()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":775,"column":-1,"procedure":"org.modeshape.jcr.cache.document.WritableSessionCache.save(java.util.Set,org.modeshape.jcr.cache.SessionCache,org.modeshape.jcr.cache.SessionCache$PreSave):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":775,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":775,"column_number":-1,"description":"access to `this.changedNodes`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":573,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":573,"column_number":-1,"description":"access to `this.changedNodes`"}],"key":"WritableSessionCache.java|save|THREAD_SAFETY_VIOLATION","hash":"a040135b5dbe7b8bb77901e5721b2481","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAKUAAAAIAAAAOgAAACigsAEDBwD/kglIc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xcml0YWJsZVNlc3Npb25DYWNoZS5qYXZhoLABAj0A/5IJSHNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvY2FjaGUvZG9jdW1lbnQvV3JpdGFibGVTZXNzaW9uQ2FjaGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void WritableSessionCache.save(Set,SessionCache,SessionCache$PreSave)` indirectly reads with synchronization from container `this.changedNodes` via call to `keySet`. Potentially races with unsynchronized write in method `WritableSessionCache.clearState(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":796,"column":-1,"procedure":"org.modeshape.jcr.cache.document.WritableSessionCache.save(java.util.Set,org.modeshape.jcr.cache.SessionCache,org.modeshape.jcr.cache.SessionCache$PreSave):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":796,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":796,"column_number":-1,"description":"call to WorkspaceCache WritableSessionCache.lockNodes(Collection)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":1461,"column_number":-1,"description":"Read of container `this.changedNodes` via call to `keySet`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":584,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":584,"column_number":-1,"description":"Write to container `this.changedNodes` via call to `remove`"}],"key":"WritableSessionCache.java|save|THREAD_SAFETY_VIOLATION","hash":"55272e1eff3969ec2cf0d53aba062760","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAKUAAAAIAAAAOgAAACigsAEFtQD/kglIc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xcml0YWJsZVNlc3Npb25DYWNoZS5qYXZhoLABAkgA/5IJSHNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvY2FjaGUvZG9jdW1lbnQvV3JpdGFibGVTZXNzaW9uQ2FjaGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void WritableSessionCache.save(SessionCache,SessionCache$PreSave)` indirectly reads with synchronization from `this.replacedNodes`. Potentially races with unsynchronized write in method `WritableSessionCache.clearState()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":647,"column":-1,"procedure":"org.modeshape.jcr.cache.document.WritableSessionCache.save(org.modeshape.jcr.cache.SessionCache,org.modeshape.jcr.cache.SessionCache$PreSave):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":647,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":647,"column_number":-1,"description":"call to ChangeSet WritableSessionCache.persistChanges(Iterable,WorkspaceCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":1325,"column_number":-1,"description":"access to `this.replacedNodes`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":577,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":577,"column_number":-1,"description":"access to `this.replacedNodes`"}],"key":"WritableSessionCache.java|save|THREAD_SAFETY_VIOLATION","hash":"236fd66b844a7495fabcdbe9cdf53ef8","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAKUAAAAIAAAAOgAAACigsAEFLQD/kglIc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xcml0YWJsZVNlc3Npb25DYWNoZS5qYXZhoLABAkEA/5IJSHNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvY2FjaGUvZG9jdW1lbnQvV3JpdGFibGVTZXNzaW9uQ2FjaGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `SessionCache SessionCache.unwrap()` of un-annotated interface `org.modeshape.jcr.cache.SessionCache`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":600,"column":-1,"procedure":"org.modeshape.jcr.cache.document.WritableSessionCache.save(org.modeshape.jcr.cache.SessionCache,org.modeshape.jcr.cache.SessionCache$PreSave):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":600,"column_number":-1,"description":"Call to un-annotated interface method SessionCache SessionCache.unwrap()"}],"key":"WritableSessionCache.java|save|INTERFACE_NOT_THREAD_SAFE","hash":"db486c92b5091772781944da62438a28","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAFMAAAAEAAAAHQAAABSgsAECWAD/kglIc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xcml0YWJsZVNlc3Npb25DYWNoZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void WritableSessionCache.save(SessionCache,SessionCache$PreSave)` reads with synchronization from container `this.changedNodes` via call to `size`. Potentially races with unsynchronized write in method `WritableSessionCache.clearState(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":614,"column":-1,"procedure":"org.modeshape.jcr.cache.document.WritableSessionCache.save(org.modeshape.jcr.cache.SessionCache,org.modeshape.jcr.cache.SessionCache$PreSave):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":614,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":614,"column_number":-1,"description":"Read of container `this.changedNodes` via call to `size`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":584,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":584,"column_number":-1,"description":"Write to container `this.changedNodes` via call to `remove`"}],"key":"WritableSessionCache.java|save|THREAD_SAFETY_VIOLATION","hash":"d205385627f024faba237a9b485f6c76","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAKUAAAAIAAAAOgAAACigsAECZgD/kglIc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xcml0YWJsZVNlc3Npb25DYWNoZS5qYXZhoLABAkgA/5IJSHNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvY2FjaGUvZG9jdW1lbnQvV3JpdGFibGVTZXNzaW9uQ2FjaGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void WritableSessionCache.save(SessionCache,SessionCache$PreSave)` indirectly reads with synchronization from `this.changedNodes`. Potentially races with unsynchronized write in method `WritableSessionCache.clearState()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":612,"column":-1,"procedure":"org.modeshape.jcr.cache.document.WritableSessionCache.save(org.modeshape.jcr.cache.SessionCache,org.modeshape.jcr.cache.SessionCache$PreSave):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":612,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":612,"column_number":-1,"description":"call to void WritableSessionCache.runPreSaveBeforeTransaction(SessionCache$PreSave)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":546,"column_number":-1,"description":"access to `this.changedNodes`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":573,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":573,"column_number":-1,"description":"access to `this.changedNodes`"}],"key":"WritableSessionCache.java|save|THREAD_SAFETY_VIOLATION","hash":"8de33c3a55a64de64a7414520cad94f0","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAKUAAAAIAAAAOgAAACigsAECIgD/kglIc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xcml0YWJsZVNlc3Npb25DYWNoZS5qYXZhoLABAj0A/5IJSHNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvY2FjaGUvZG9jdW1lbnQvV3JpdGFibGVTZXNzaW9uQ2FjaGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void WritableSessionCache.save(SessionCache$PreSave)` reads with synchronization from container `this.changedNodes` via call to `size`. Potentially races with unsynchronized write in method `WritableSessionCache.clearState(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":449,"column":-1,"procedure":"org.modeshape.jcr.cache.document.WritableSessionCache.save(org.modeshape.jcr.cache.SessionCache$PreSave):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":449,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":449,"column_number":-1,"description":"Read of container `this.changedNodes` via call to `size`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":584,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":584,"column_number":-1,"description":"Write to container `this.changedNodes` via call to `remove`"}],"key":"WritableSessionCache.java|save|THREAD_SAFETY_VIOLATION","hash":"26209338844f6dd986fc820122249bfe","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAKUAAAAIAAAAOgAAACigsAEBwQD/kglIc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xcml0YWJsZVNlc3Npb25DYWNoZS5qYXZhoLABAkgA/5IJSHNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvY2FjaGUvZG9jdW1lbnQvV3JpdGFibGVTZXNzaW9uQ2FjaGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void WritableSessionCache.save(SessionCache$PreSave)` indirectly reads with synchronization from `this.replacedNodes`. Potentially races with unsynchronized write in method `WritableSessionCache.clearState()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":477,"column":-1,"procedure":"org.modeshape.jcr.cache.document.WritableSessionCache.save(org.modeshape.jcr.cache.SessionCache$PreSave):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":477,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":477,"column_number":-1,"description":"call to ChangeSet WritableSessionCache.persistChanges(Iterable,WorkspaceCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":1325,"column_number":-1,"description":"access to `this.replacedNodes`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":577,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":577,"column_number":-1,"description":"access to `this.replacedNodes`"}],"key":"WritableSessionCache.java|save|THREAD_SAFETY_VIOLATION","hash":"c0a4084921ffd6f416a9aee3e11a3dca","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAKUAAAAIAAAAOgAAACigsAEFLQD/kglIc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xcml0YWJsZVNlc3Npb25DYWNoZS5qYXZhoLABAkEA/5IJSHNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvY2FjaGUvZG9jdW1lbnQvV3JpdGFibGVTZXNzaW9uQ2FjaGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void WritableSessionCache.save(SessionCache$PreSave)` indirectly reads with synchronization from `this.changedNodes`. Potentially races with unsynchronized write in method `WritableSessionCache.clearState()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":447,"column":-1,"procedure":"org.modeshape.jcr.cache.document.WritableSessionCache.save(org.modeshape.jcr.cache.SessionCache$PreSave):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":447,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":447,"column_number":-1,"description":"call to void WritableSessionCache.runPreSaveBeforeTransaction(SessionCache$PreSave)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":546,"column_number":-1,"description":"access to `this.changedNodes`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":573,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":573,"column_number":-1,"description":"access to `this.changedNodes`"}],"key":"WritableSessionCache.java|save|THREAD_SAFETY_VIOLATION","hash":"001a87757fec37049b908878164379f5","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAKUAAAAIAAAAOgAAACigsAECIgD/kglIc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xcml0YWJsZVNlc3Npb25DYWNoZS5qYXZhoLABAj0A/5IJSHNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvY2FjaGUvZG9jdW1lbnQvV3JpdGFibGVTZXNzaW9uQ2FjaGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `CachedNode SessionCache.getNode(NodeKey)` of un-annotated interface `org.modeshape.jcr.cache.SessionCache`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":247,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.segment():org.modeshape.jcr.value.Path$Segment","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":247,"column_number":-1,"description":"call to CachedNode AbstractJcrNode.node()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":201,"column_number":-1,"description":"Call to un-annotated interface method CachedNode SessionCache.getNode(NodeKey)"}],"key":"AbstractJcrNode.java|segment|INTERFACE_NOT_THREAD_SAFE","hash":"dc36fb0d8ff7578be9b4f1cceee3aa9d","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEAyQD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `ChildReference ChildReferences.getChild(NodeKey)` of un-annotated interface `org.modeshape.jcr.cache.ChildReferences`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":105,"column":-1,"procedure":"org.modeshape.jcr.JcrSharedNode.segment():org.modeshape.jcr.value.Path$Segment","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSharedNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSharedNode.java","line_number":105,"column_number":-1,"description":"Call to un-annotated interface method ChildReference ChildReferences.getChild(NodeKey)"}],"key":"JcrSharedNode.java|segment|INTERFACE_NOT_THREAD_SAFE","hash":"ef8a53a8f42dd82f36a6264b9c4278e3","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAADwAAAAEAAAAFwAAABGgsABpAP+SCTJzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL0pjclNoYXJlZE5vZGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Path$Segment JcrSharedNode.segment()` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":102,"column":-1,"procedure":"org.modeshape.jcr.JcrSharedNode.segment():org.modeshape.jcr.value.Path$Segment","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSharedNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSharedNode.java","line_number":102,"column_number":-1,"description":"call to AbstractJcrNode JcrSharedNode.parent()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSharedNode.java","line_number":77,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"JcrSharedNode.java|segment|THREAD_SAFETY_VIOLATION","hash":"77b4750f7dc80717692ce9e5bbbcb30b","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `boolean ClusteringService.sendMessage(Serializable)` indirectly reads without synchronization from `this.channel`. Potentially races with write in method `ClusteringService.restart()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":269,"column":-1,"procedure":"org.modeshape.jcr.clustering.ClusteringService.sendMessage(java.io.Serializable):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","line_number":269,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","line_number":269,"column_number":-1,"description":"call to String ClusteringService.clusterName()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","line_number":245,"column_number":-1,"description":"access to `this.channel`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","line_number":141,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","line_number":141,"column_number":-1,"description":"call to boolean ClusteringService.shutdown()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","line_number":177,"column_number":-1,"description":"access to `this.channel`"}],"key":"ClusteringService.java|sendMessage|THREAD_SAFETY_VIOLATION","hash":"19d07f5a15a9c349156c94b017026d74","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAJcAAAAIAAAANgAAACagsAEA9QD/kglBc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jbHVzdGVyaW5nL0NsdXN0ZXJpbmdTZXJ2aWNlLmphdmGgsAEAsQD/kglBc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jbHVzdGVyaW5nL0NsdXN0ZXJpbmdTZXJ2aWNlLmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `NodeCache NodeCache.unwrap()` of un-annotated interface `org.modeshape.jcr.cache.NodeCache`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":295,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.session(org.modeshape.jcr.cache.NodeCache):org.modeshape.jcr.cache.document.AbstractSessionCache","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":295,"column_number":-1,"description":"Call to un-annotated interface method NodeCache NodeCache.unwrap()"}],"key":"SessionNode.java|session|INTERFACE_NOT_THREAD_SAFE","hash":"40461981bafa12bffebb148782edb560","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEoAAAAEAAAAGgAAABKgsAEBJwD/kgk/c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9TZXNzaW9uTm9kZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void RecordingChanges.setChangedNodes(Set)` writes to field `this.nodeKeys` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":291,"column":-1,"procedure":"org.modeshape.jcr.cache.change.RecordingChanges.setChangedNodes(java.util.Set):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/change/RecordingChanges.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/change/RecordingChanges.java","line_number":291,"column_number":-1,"description":"access to `this.nodeKeys`"}],"key":"RecordingChanges.java|setChangedNodes|THREAD_SAFETY_VIOLATION","hash":"d0c3ce49d06afbcbcbf95f32eb590653","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEBIwD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9jaGFuZ2UvUmVjb3JkaW5nQ2hhbmdlcy5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void MongodbBinaryStore.setChunkSize(int)` writes to field `this.chunkSize` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.value.binary.AbstractBinaryStore` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":194,"column":-1,"procedure":"org.modeshape.jcr.value.binary.MongodbBinaryStore.setChunkSize(int):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":194,"column_number":-1,"description":"access to `this.chunkSize`"}],"key":"MongodbBinaryStore.java|setChunkSize|THREAD_SAFETY_VIOLATION","hash":"f70596479995d6ddd1803bcddcde0ea4","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAE8AAAAEAAAAHAAAABOgsAEAwgD/kglEc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvTW9uZ29kYkJpbmFyeVN0b3JlLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void SystemNamespaceRegistry.setContext(ExecutionContext)` writes to field `this.context` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":60,"column":-1,"procedure":"org.modeshape.jcr.SystemNamespaceRegistry.setContext(org.modeshape.jcr.ExecutionContext):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/SystemNamespaceRegistry.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/SystemNamespaceRegistry.java","line_number":60,"column_number":-1,"description":"access to `this.context`"}],"key":"SystemNamespaceRegistry.java|setContext|THREAD_SAFETY_VIOLATION","hash":"22af520db9aaaf1e0ea55f0f613bfa7d","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGgAAABKgsHwA/5IJPHNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvU3lzdGVtTmFtZXNwYWNlUmVnaXN0cnkuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `ChildReference ChildReferences.getChild(Name)` of un-annotated interface `org.modeshape.jcr.cache.ChildReferences`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":406,"column":-1,"procedure":"org.modeshape.jcr.RepositoryLockManager.setHeldBySession(org.modeshape.jcr.JcrSession,java.lang.String,boolean):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","line_number":406,"column_number":-1,"description":"call to boolean SystemContent.changeLockHeldBySession(String,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/SystemContent.java","line_number":1118,"column_number":-1,"description":"call to CachedNode SystemContent.locksNode()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/SystemContent.java","line_number":206,"column_number":-1,"description":"call to NodeKey SystemContent.locksKey()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/SystemContent.java","line_number":172,"column_number":-1,"description":"call to CachedNode SystemContent.systemNode()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/SystemContent.java","line_number":190,"column_number":-1,"description":"call to NodeKey SystemContent.systemKey()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/SystemContent.java","line_number":133,"column_number":-1,"description":"Call to un-annotated interface method ChildReference ChildReferences.getChild(Name)"}],"key":"RepositoryLockManager.java|setHeldBySession|INTERFACE_NOT_THREAD_SAFE","hash":"fd12ba77b333286f832a0a216e61349e","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEAhQD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9TeXN0ZW1Db250ZW50LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `MutableCachedNode$PermissionChanges SessionNode.setPermissions(SessionCache,Map)` indirectly mutates container `changes.addedStrong` via call to `put` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":88,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.setPermissions(org.modeshape.jcr.cache.SessionCache,java.util.Map):org.modeshape.jcr.cache.MutableCachedNode$PermissionChanges","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":88,"column_number":-1,"description":"call to SessionNode$PermissionChanges SessionNode.setPermissions(SessionCache,Map)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1545,"column_number":-1,"description":"call to MutableCachedNode SessionNode.createChild(SessionCache,NodeKey,Name,Property,org.modeshape.jcr.value.Property[])"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1165,"column_number":-1,"description":"call to void SessionNode.setProperty(SessionCache,Property)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":819,"column_number":-1,"description":"call to void SessionNode.processPropertyChange(SessionCache,Name,SessionCache)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":965,"column_number":-1,"description":"call to void SessionNode.addOrRemoveReferrers(SessionCache,SessionCache,Property,Iterator,boolean)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1023,"column_number":-1,"description":"call to void SessionNode.addReferrer(SessionCache,Property,NodeKey,CachedNode$ReferenceType)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":678,"column_number":-1,"description":"call to void SessionNode$ReferrerChanges.addStrongReferrer(Property,NodeKey)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2474,"column_number":-1,"description":"call to void SessionNode$ReferrerChanges.processReferrerChange(Property,NodeKey,Map,Map)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2504,"column_number":-1,"description":"Write to container `changes.addedStrong` via call to `put`"}],"key":"SessionNode.java|setPermissions|THREAD_SAFETY_VIOLATION","hash":"0408fc5529c52f9f8a99fa88b3af2592","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEoAAAAEAAAAGgAAABKgsAEJyAD/kgk/c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9TZXNzaW9uTm9kZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `MutableCachedNode MutableCachedNode.createChild(SessionCache,NodeKey,Name,Property,org.modeshape.jcr.value.Property[])` of un-annotated interface `org.modeshape.jcr.cache.MutableCachedNode`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":1564,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.setPermissions(org.modeshape.jcr.cache.SessionCache,java.util.Map):org.modeshape.jcr.cache.document.SessionNode$PermissionChanges","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1564,"column_number":-1,"description":"Call to un-annotated interface method MutableCachedNode MutableCachedNode.createChild(SessionCache,NodeKey,Name,Property,org.modeshape.jcr.value.Property[])"}],"key":"SessionNode.java|setPermissions|INTERFACE_NOT_THREAD_SAFE","hash":"455ad7b135b456eb03c989570d9ca118","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEoAAAAEAAAAGgAAABKgsAEGHAD/kgk/c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9TZXNzaW9uTm9kZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `SessionNode$PermissionChanges SessionNode.setPermissions(SessionCache,Map)` indirectly mutates container `changes.addedStrong` via call to `put` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1545,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.setPermissions(org.modeshape.jcr.cache.SessionCache,java.util.Map):org.modeshape.jcr.cache.document.SessionNode$PermissionChanges","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1545,"column_number":-1,"description":"call to MutableCachedNode SessionNode.createChild(SessionCache,NodeKey,Name,Property,org.modeshape.jcr.value.Property[])"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1165,"column_number":-1,"description":"call to void SessionNode.setProperty(SessionCache,Property)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":819,"column_number":-1,"description":"call to void SessionNode.processPropertyChange(SessionCache,Name,SessionCache)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":965,"column_number":-1,"description":"call to void SessionNode.addOrRemoveReferrers(SessionCache,SessionCache,Property,Iterator,boolean)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1023,"column_number":-1,"description":"call to void SessionNode.addReferrer(SessionCache,Property,NodeKey,CachedNode$ReferenceType)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":678,"column_number":-1,"description":"call to void SessionNode$ReferrerChanges.addStrongReferrer(Property,NodeKey)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2474,"column_number":-1,"description":"call to void SessionNode$ReferrerChanges.processReferrerChange(Property,NodeKey,Map,Map)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2504,"column_number":-1,"description":"Write to container `changes.addedStrong` via call to `put`"}],"key":"SessionNode.java|setPermissions|THREAD_SAFETY_VIOLATION","hash":"be2fcf0ce831ece0e9ce874892abb2eb","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEoAAAAEAAAAGgAAABKgsAEJyAD/kgk/c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9TZXNzaW9uTm9kZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void AbstractJcrNode.setPrimaryType(String)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":2431,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setPrimaryType(java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2431,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|setPrimaryType|THREAD_SAFETY_VIOLATION","hash":"8d73a15315b1d540ac068da0f614ea87","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void AbstractJcrNode.setPrimaryType(String)` indirectly writes to field `defn.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":2472,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setPrimaryType(java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2472,"column_number":-1,"description":"call to void AbstractJcrNode.autoCreateItemsFor(JcrNodeType)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2362,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(Name,javax.jcr.Value[],int,boolean)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1826,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(Name,javax.jcr.Value[],int,boolean,boolean,boolean,boolean)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1955,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.canCastToTypeAndSatisfyConstraints(javax.jcr.Value[],JcrSession)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":437,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.canCastToTypeAndSatisfyConstraints(Value,JcrSession)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":413,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(Value,JcrSession)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":262,"column_number":-1,"description":"access to `defn.checker`"}],"key":"AbstractJcrNode.java|setPrimaryType|THREAD_SAFETY_VIOLATION","hash":"d19f8ab1e1aee5a6543c4cdc8fde557e","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBBgD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `boolean NodeTypes$ReusableNodeDefinitionSet.appliesTo(NodeTypes,Name,Set)` of un-annotated interface `org.modeshape.jcr.NodeTypes$ReusableNodeDefinitionSet`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":2399,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setPrimaryType(java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2399,"column_number":-1,"description":"call to void AbstractJcrNode.checkForCheckedOut()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":657,"column_number":-1,"description":"call to boolean AbstractJcrNode.isCheckedOut()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3222,"column_number":-1,"description":"call to NodeDefinition AbstractJcrNode.getDefinition()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2835,"column_number":-1,"description":"call to NodeDefinition AbstractJcrNode.nodeDefinition()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2907,"column_number":-1,"description":"call to NodeTypes$NodeDefinitionSet NodeTypes.findChildNodeDefinitions(Name,Set)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":2375,"column_number":-1,"description":"Call to un-annotated interface method boolean NodeTypes$ReusableNodeDefinitionSet.appliesTo(NodeTypes,Name,Set)"}],"key":"AbstractJcrNode.java|setPrimaryType|INTERFACE_NOT_THREAD_SAFE","hash":"cdc3d74425cf435d4de09a1f77854b33","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAADkAAAAEAAAAFgAAABCgsAEJRwD/kgkuc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9Ob2RlVHlwZXMuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void AbstractJcrNode.setPrimaryType(String)` indirectly mutates container `ace.privileges` via call to `addAll` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":2400,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setPrimaryType(java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2400,"column_number":-1,"description":"call to void JcrSession.checkPermission(AbstractJcrItem,java.lang.String[])"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1535,"column_number":-1,"description":"call to void JcrSession.checkPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1567,"column_number":-1,"description":"call to boolean JcrSession.hasPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1375,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPermission(Path,java.lang.String[])"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":322,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPrivileges(String,javax.jcr.security.Privilege[])"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":109,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.getApplicableACL(String)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":114,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.findAccessList(String,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":289,"column_number":-1,"description":"call to boolean JcrAccessControlList.addAccessControlEntry(Principal,javax.jcr.security.Privilege[])"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/security/acl/JcrAccessControlList.java","line_number":113,"column_number":-1,"description":"call to boolean AccessControlEntryImpl.addIfNotPresent(javax.jcr.security.Privilege[])"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/security/acl/AccessControlEntryImpl.java","line_number":103,"column_number":-1,"description":"Write to container `ace.privileges` via call to `addAll`"}],"key":"AbstractJcrNode.java|setPrimaryType|THREAD_SAFETY_VIOLATION","hash":"62205f2b68c23254ad0578b7c932cd08","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFIAAAAEAAAAHQAAABSgsABnAP+SCUhzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3NlY3VyaXR5L2FjbC9BY2Nlc3NDb250cm9sRW50cnlJbXBsLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void AbstractJcrNode.setPrimaryType(String)` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":2398,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setPrimaryType(java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2398,"column_number":-1,"description":"call to void AbstractJcrNode.checkForLock()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":635,"column_number":-1,"description":"call to Lock AbstractJcrNode.getLockIfExists()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3322,"column_number":-1,"description":"call to Lock JcrLockManager.getLockIfExists(AbstractJcrNode)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrLockManager.java","line_number":178,"column_number":-1,"description":"call to Lock RepositoryLockManager$ModeShapeLock.lockFor(JcrSession)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","line_number":661,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"AbstractJcrNode.java|setPrimaryType|THREAD_SAFETY_VIOLATION","hash":"2580003d7133b135c105261c86526057","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void JcrSystemNode.setPrimaryType(String)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.setPrimaryType(java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to void AbstractJcrNode.setPrimaryType(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2431,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrSystemNode.java|setPrimaryType|THREAD_SAFETY_VIOLATION","hash":"9dc8c6a43c3dab1a6b5ac9c4a4566b00","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void SessionNode.setProperties(SessionCache,Iterable)` indirectly mutates container `changes.addedStrong` via call to `put` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1064,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.setProperties(org.modeshape.jcr.cache.SessionCache,java.lang.Iterable):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1064,"column_number":-1,"description":"call to void SessionNode.processPropertyChange(SessionCache,Name,SessionCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":965,"column_number":-1,"description":"call to void SessionNode.addOrRemoveReferrers(SessionCache,SessionCache,Property,Iterator,boolean)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1023,"column_number":-1,"description":"call to void SessionNode.addReferrer(SessionCache,Property,NodeKey,CachedNode$ReferenceType)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":678,"column_number":-1,"description":"call to void SessionNode$ReferrerChanges.addStrongReferrer(Property,NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2474,"column_number":-1,"description":"call to void SessionNode$ReferrerChanges.processReferrerChange(Property,NodeKey,Map,Map)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2504,"column_number":-1,"description":"Write to container `changes.addedStrong` via call to `put`"}],"key":"SessionNode.java|setProperties|THREAD_SAFETY_VIOLATION","hash":"19f4ff01c0ce2527f6ecca053fc9749d","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEoAAAAEAAAAGgAAABKgsAEJyAD/kgk/c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9TZXNzaW9uTm9kZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Name Property.getName()` of un-annotated interface `org.modeshape.jcr.value.Property`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":1061,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.setProperties(org.modeshape.jcr.cache.SessionCache,java.lang.Iterable):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1061,"column_number":-1,"description":"Call to un-annotated interface method Name Property.getName()"}],"key":"SessionNode.java|setProperties|INTERFACE_NOT_THREAD_SAFE","hash":"4e245d23f6e78044237a3d47ccc22356","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEoAAAAEAAAAGgAAABKgsAEEJQD/kgk/c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9TZXNzaW9uTm9kZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void SessionNode.setProperties(SessionCache,Iterator)` indirectly mutates container `changes.addedStrong` via call to `put` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1077,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.setProperties(org.modeshape.jcr.cache.SessionCache,java.util.Iterator):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1077,"column_number":-1,"description":"call to void SessionNode.processPropertyChange(SessionCache,Name,SessionCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":965,"column_number":-1,"description":"call to void SessionNode.addOrRemoveReferrers(SessionCache,SessionCache,Property,Iterator,boolean)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1023,"column_number":-1,"description":"call to void SessionNode.addReferrer(SessionCache,Property,NodeKey,CachedNode$ReferenceType)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":678,"column_number":-1,"description":"call to void SessionNode$ReferrerChanges.addStrongReferrer(Property,NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2474,"column_number":-1,"description":"call to void SessionNode$ReferrerChanges.processReferrerChange(Property,NodeKey,Map,Map)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2504,"column_number":-1,"description":"Write to container `changes.addedStrong` via call to `put`"}],"key":"SessionNode.java|setProperties|THREAD_SAFETY_VIOLATION","hash":"6ff82e236f2aacf4c01bf0d54a51c36e","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEoAAAAEAAAAGgAAABKgsAEJyAD/kgk/c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9TZXNzaW9uTm9kZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Name Property.getName()` of un-annotated interface `org.modeshape.jcr.value.Property`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":1074,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.setProperties(org.modeshape.jcr.cache.SessionCache,java.util.Iterator):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1074,"column_number":-1,"description":"Call to un-annotated interface method Name Property.getName()"}],"key":"SessionNode.java|setProperties|INTERFACE_NOT_THREAD_SAFE","hash":"4e245d23f6e78044237a3d47ccc22356","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEoAAAAEAAAAGgAAABKgsAEEMgD/kgk/c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9TZXNzaW9uTm9kZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Property AbstractJcrNode.setProperty(String,boolean)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":101,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setProperty(java.lang.String,boolean):javax.jcr.Property","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":101,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(String,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1586,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(Name,JcrValue,boolean,boolean,boolean,boolean)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1703,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"b545e35ec6c4e8fab466bc3eb39ecfd8","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrProperty AbstractJcrNode.setProperty(String,boolean)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1586,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setProperty(java.lang.String,boolean):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1586,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(Name,JcrValue,boolean,boolean,boolean,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1703,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"c2bf024fd64a8a5b43e27b058aa16d39","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrProperty JcrSystemNode.setProperty(String,boolean)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.setProperty(java.lang.String,boolean):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(String,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1586,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(Name,JcrValue,boolean,boolean,boolean,boolean)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1703,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrSystemNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"74f5995fb6281532c3bea1101fd256ba","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Property AbstractJcrNode.setProperty(String,double)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":101,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setProperty(java.lang.String,double):javax.jcr.Property","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":101,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(String,double)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1596,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(Name,JcrValue,boolean,boolean,boolean,boolean)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1703,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"47e777b9d70b67940d186e9445def75a","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrProperty AbstractJcrNode.setProperty(String,double)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1596,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setProperty(java.lang.String,double):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1596,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(Name,JcrValue,boolean,boolean,boolean,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1703,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"d291e5d54abc4ddfe353aa1669cd3f3b","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrProperty JcrSystemNode.setProperty(String,double)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.setProperty(java.lang.String,double):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(String,double)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1596,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(Name,JcrValue,boolean,boolean,boolean,boolean)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1703,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrSystemNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"130cfe94e814bc1956b403401ea8a571","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Property AbstractJcrNode.setProperty(String,java.lang.String[])` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":101,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setProperty(java.lang.String,java.lang.String[]):javax.jcr.Property","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":101,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(String,java.lang.String[])"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1500,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.removeExistingProperty(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1654,"column_number":-1,"description":"call to void AbstractJcrProperty.remove()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":326,"column_number":-1,"description":"call to void AbstractJcrProperty.checkNotProtected()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":346,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":11,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"228fbb6bdc23757aac98f910c82117dd","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrProperty AbstractJcrNode.setProperty(String,java.lang.String[])` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1500,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setProperty(java.lang.String,java.lang.String[]):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1500,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.removeExistingProperty(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1654,"column_number":-1,"description":"call to void AbstractJcrProperty.remove()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":326,"column_number":-1,"description":"call to void AbstractJcrProperty.checkNotProtected()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":346,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"4120b230f8755ab8da1a4b104388c1a4","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrProperty AbstractJcrNode.setProperty(String,java.lang.String[])` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1501,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setProperty(java.lang.String,java.lang.String[]):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1501,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(Name,javax.jcr.Value[],int,boolean,boolean,boolean,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1899,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":509,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,Value,boolean,boolean)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":972,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,Value,boolean,boolean,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1065,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(Value,JcrSession)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":262,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"4120b230f8755ab8da1a4b104388c1a4","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBBgD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrProperty JcrSystemNode.setProperty(String,java.lang.String[])` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.setProperty(java.lang.String,java.lang.String[]):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(String,java.lang.String[])"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1500,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.removeExistingProperty(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1654,"column_number":-1,"description":"call to void AbstractJcrProperty.remove()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":326,"column_number":-1,"description":"call to void AbstractJcrProperty.checkNotProtected()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":346,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":11,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrSystemNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"bf1a891207c6292b5f52124b352ebb57","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Property AbstractJcrNode.setProperty(String,java.lang.String[],int)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":101,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setProperty(java.lang.String,java.lang.String[],int):javax.jcr.Property","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":101,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(String,java.lang.String[],int)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1522,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.removeExistingProperty(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1654,"column_number":-1,"description":"call to void AbstractJcrProperty.remove()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":326,"column_number":-1,"description":"call to void AbstractJcrProperty.checkNotProtected()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":346,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":11,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"f9c9f7c41727e3b4882a4d7be5befeab","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrProperty AbstractJcrNode.setProperty(String,java.lang.String[],int)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1522,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setProperty(java.lang.String,java.lang.String[],int):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1522,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.removeExistingProperty(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1654,"column_number":-1,"description":"call to void AbstractJcrProperty.remove()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":326,"column_number":-1,"description":"call to void AbstractJcrProperty.checkNotProtected()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":346,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"3da9b13daa5a39065b4a9737a9ac389c","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrProperty AbstractJcrNode.setProperty(String,java.lang.String[],int)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1523,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setProperty(java.lang.String,java.lang.String[],int):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1523,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(Name,javax.jcr.Value[],int,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1826,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(Name,javax.jcr.Value[],int,boolean,boolean,boolean,boolean)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1899,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":509,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,Value,boolean,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":972,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,Value,boolean,boolean,boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1065,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(Value,JcrSession)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":262,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"3da9b13daa5a39065b4a9737a9ac389c","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBBgD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrProperty JcrSystemNode.setProperty(String,java.lang.String[],int)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.setProperty(java.lang.String,java.lang.String[],int):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(String,java.lang.String[],int)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1522,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.removeExistingProperty(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1654,"column_number":-1,"description":"call to void AbstractJcrProperty.remove()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":326,"column_number":-1,"description":"call to void AbstractJcrProperty.checkNotProtected()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":346,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":11,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrSystemNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"84d32a667e534d84ee8b75c5a4b18df4","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Property AbstractJcrNode.setProperty(String,javax.jcr.Value[])` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":101,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setProperty(java.lang.String,javax.jcr.Value[]):javax.jcr.Property","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":101,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(String,javax.jcr.Value[])"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1452,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.removeExistingProperty(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1654,"column_number":-1,"description":"call to void AbstractJcrProperty.remove()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":326,"column_number":-1,"description":"call to void AbstractJcrProperty.checkNotProtected()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":346,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":11,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"5e453af7411a96b48c1a451ec3dde562","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrProperty AbstractJcrNode.setProperty(String,javax.jcr.Value[])` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1452,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setProperty(java.lang.String,javax.jcr.Value[]):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1452,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.removeExistingProperty(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1654,"column_number":-1,"description":"call to void AbstractJcrProperty.remove()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":326,"column_number":-1,"description":"call to void AbstractJcrProperty.checkNotProtected()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":346,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"e6bfa6166f55191d97fe69b717544b97","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrProperty AbstractJcrNode.setProperty(String,javax.jcr.Value[])` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1466,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setProperty(java.lang.String,javax.jcr.Value[]):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1466,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(Name,javax.jcr.Value[],int,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1826,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(Name,javax.jcr.Value[],int,boolean,boolean,boolean,boolean)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1899,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":509,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,Value,boolean,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":972,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,Value,boolean,boolean,boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1065,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(Value,JcrSession)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":262,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"e6bfa6166f55191d97fe69b717544b97","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBBgD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrProperty JcrSystemNode.setProperty(String,javax.jcr.Value[])` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.setProperty(java.lang.String,javax.jcr.Value[]):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(String,javax.jcr.Value[])"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1452,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.removeExistingProperty(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1654,"column_number":-1,"description":"call to void AbstractJcrProperty.remove()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":326,"column_number":-1,"description":"call to void AbstractJcrProperty.checkNotProtected()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":346,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":11,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrSystemNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"88d0f5214c260e1e70c48dde7f5e6638","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Property AbstractJcrNode.setProperty(String,javax.jcr.Value[],int)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":101,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setProperty(java.lang.String,javax.jcr.Value[],int):javax.jcr.Property","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":101,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(String,javax.jcr.Value[],int)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1476,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.removeExistingProperty(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1654,"column_number":-1,"description":"call to void AbstractJcrProperty.remove()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":326,"column_number":-1,"description":"call to void AbstractJcrProperty.checkNotProtected()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":346,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":11,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"8f32c70fc665d87aec298cdfe2e6ee14","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrProperty AbstractJcrNode.setProperty(String,javax.jcr.Value[],int)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1476,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setProperty(java.lang.String,javax.jcr.Value[],int):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1476,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.removeExistingProperty(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1654,"column_number":-1,"description":"call to void AbstractJcrProperty.remove()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":326,"column_number":-1,"description":"call to void AbstractJcrProperty.checkNotProtected()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":346,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"753910bcce36770ae3fcd7a2433fb202","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrProperty AbstractJcrNode.setProperty(String,javax.jcr.Value[],int)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1491,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setProperty(java.lang.String,javax.jcr.Value[],int):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1491,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(Name,javax.jcr.Value[],int,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1826,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(Name,javax.jcr.Value[],int,boolean,boolean,boolean,boolean)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1899,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":509,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,Value,boolean,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":972,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,Value,boolean,boolean,boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1065,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(Value,JcrSession)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":262,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"753910bcce36770ae3fcd7a2433fb202","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBBgD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrProperty JcrSystemNode.setProperty(String,javax.jcr.Value[],int)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.setProperty(java.lang.String,javax.jcr.Value[],int):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(String,javax.jcr.Value[],int)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1476,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.removeExistingProperty(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1654,"column_number":-1,"description":"call to void AbstractJcrProperty.remove()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":326,"column_number":-1,"description":"call to void AbstractJcrProperty.checkNotProtected()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":346,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":11,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrSystemNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"01eabe27d6eb80c08785e3d3b60f6a6a","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Property AbstractJcrNode.setProperty(String,long)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":101,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setProperty(java.lang.String,long):javax.jcr.Property","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":101,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(String,long)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1616,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(Name,JcrValue,boolean,boolean,boolean,boolean)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1703,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"3a3e3f3ccd4d521a4d218b49712b5e01","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrProperty AbstractJcrNode.setProperty(String,long)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1616,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setProperty(java.lang.String,long):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1616,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(Name,JcrValue,boolean,boolean,boolean,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1703,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"0189a097d01ffcc2d2a625de7a3ebdf5","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrProperty JcrSystemNode.setProperty(String,long)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.setProperty(java.lang.String,long):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(String,long)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1616,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(Name,JcrValue,boolean,boolean,boolean,boolean)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1703,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrSystemNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"da18709d43b254799773275e202e8402","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Property AbstractJcrNode.setProperty(String,InputStream)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":101,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setProperty(java.lang.String,java.io.InputStream):javax.jcr.Property","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":101,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(String,InputStream)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1564,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.removeExistingProperty(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1654,"column_number":-1,"description":"call to void AbstractJcrProperty.remove()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":326,"column_number":-1,"description":"call to void AbstractJcrProperty.checkNotProtected()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":346,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":11,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"bf1ad48529bab0cf4654727dd0d5d959","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrProperty AbstractJcrNode.setProperty(String,InputStream)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1564,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setProperty(java.lang.String,java.io.InputStream):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1564,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.removeExistingProperty(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1654,"column_number":-1,"description":"call to void AbstractJcrProperty.remove()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":326,"column_number":-1,"description":"call to void AbstractJcrProperty.checkNotProtected()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":346,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"d1cccf7afa52ff8bca9861762bceb868","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrProperty AbstractJcrNode.setProperty(String,InputStream)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1566,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setProperty(java.lang.String,java.io.InputStream):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1566,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(Name,JcrValue,boolean,boolean,boolean,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1703,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":509,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,Value,boolean,boolean)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":972,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,Value,boolean,boolean,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1065,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(Value,JcrSession)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":262,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"d1cccf7afa52ff8bca9861762bceb868","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBBgD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrProperty JcrSystemNode.setProperty(String,InputStream)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.setProperty(java.lang.String,java.io.InputStream):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(String,InputStream)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1564,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.removeExistingProperty(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1654,"column_number":-1,"description":"call to void AbstractJcrProperty.remove()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":326,"column_number":-1,"description":"call to void AbstractJcrProperty.checkNotProtected()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":346,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":11,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrSystemNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"d268b11c78eed7357bdd9b318320b18e","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Property AbstractJcrNode.setProperty(String,String)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":101,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setProperty(java.lang.String,java.lang.String):javax.jcr.Property","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":101,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(String,String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1532,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.removeExistingProperty(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1654,"column_number":-1,"description":"call to void AbstractJcrProperty.remove()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":326,"column_number":-1,"description":"call to void AbstractJcrProperty.checkNotProtected()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":346,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":11,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"a1c291a8d7821aba51730ddf170f8545","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrProperty AbstractJcrNode.setProperty(String,String)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1532,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setProperty(java.lang.String,java.lang.String):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1532,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.removeExistingProperty(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1654,"column_number":-1,"description":"call to void AbstractJcrProperty.remove()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":326,"column_number":-1,"description":"call to void AbstractJcrProperty.checkNotProtected()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":346,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"d937bab37f976f1c67e444fdc1b03daf","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrProperty AbstractJcrNode.setProperty(String,String)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1533,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setProperty(java.lang.String,java.lang.String):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1533,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(Name,JcrValue,boolean,boolean,boolean,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1703,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":509,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,Value,boolean,boolean)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":972,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,Value,boolean,boolean,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1065,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(Value,JcrSession)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":262,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"d937bab37f976f1c67e444fdc1b03daf","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBBgD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrProperty JcrSystemNode.setProperty(String,String)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.setProperty(java.lang.String,java.lang.String):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(String,String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1532,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.removeExistingProperty(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1654,"column_number":-1,"description":"call to void AbstractJcrProperty.remove()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":326,"column_number":-1,"description":"call to void AbstractJcrProperty.checkNotProtected()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":346,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":11,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrSystemNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"6e2b659fb37f5cc3e5d32c7aba8acf4c","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Property AbstractJcrNode.setProperty(String,String,int)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":101,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setProperty(java.lang.String,java.lang.String,int):javax.jcr.Property","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":101,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(String,String,int)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1553,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.removeExistingProperty(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1654,"column_number":-1,"description":"call to void AbstractJcrProperty.remove()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":326,"column_number":-1,"description":"call to void AbstractJcrProperty.checkNotProtected()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":346,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":11,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"e6555233f05d0589ad03e2e6c367a832","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrProperty AbstractJcrNode.setProperty(String,String,int)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1553,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setProperty(java.lang.String,java.lang.String,int):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1553,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.removeExistingProperty(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1654,"column_number":-1,"description":"call to void AbstractJcrProperty.remove()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":326,"column_number":-1,"description":"call to void AbstractJcrProperty.checkNotProtected()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":346,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"c852fd054380be0dd8cb3330c81f3f6a","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrProperty AbstractJcrNode.setProperty(String,String,int)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1555,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setProperty(java.lang.String,java.lang.String,int):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1555,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(Name,JcrValue,boolean,boolean,boolean,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1703,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":509,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,Value,boolean,boolean)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":972,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,Value,boolean,boolean,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1065,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(Value,JcrSession)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":262,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"c852fd054380be0dd8cb3330c81f3f6a","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBBgD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrProperty JcrSystemNode.setProperty(String,String,int)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.setProperty(java.lang.String,java.lang.String,int):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(String,String,int)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1553,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.removeExistingProperty(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1654,"column_number":-1,"description":"call to void AbstractJcrProperty.remove()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":326,"column_number":-1,"description":"call to void AbstractJcrProperty.checkNotProtected()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":346,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":11,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrSystemNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"0078d5f2182f20cc803677e073107e66","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Property AbstractJcrNode.setProperty(String,BigDecimal)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":101,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setProperty(java.lang.String,java.math.BigDecimal):javax.jcr.Property","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":101,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(String,BigDecimal)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1606,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(Name,JcrValue,boolean,boolean,boolean,boolean)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1703,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"ce410a5cfc0f5d878fda1aa83b1603f3","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrProperty AbstractJcrNode.setProperty(String,BigDecimal)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1606,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setProperty(java.lang.String,java.math.BigDecimal):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1606,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(Name,JcrValue,boolean,boolean,boolean,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1703,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"779f25283ce70b21408476dc6cba2e26","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrProperty JcrSystemNode.setProperty(String,BigDecimal)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.setProperty(java.lang.String,java.math.BigDecimal):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(String,BigDecimal)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1606,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(Name,JcrValue,boolean,boolean,boolean,boolean)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1703,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrSystemNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"14cc9cb92b11b2f87a3a4ed316caf563","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Property AbstractJcrNode.setProperty(String,Calendar)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":101,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setProperty(java.lang.String,java.util.Calendar):javax.jcr.Property","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":101,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(String,Calendar)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1625,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.removeExistingProperty(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1654,"column_number":-1,"description":"call to void AbstractJcrProperty.remove()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":326,"column_number":-1,"description":"call to void AbstractJcrProperty.checkNotProtected()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":346,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":11,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"f967650ca6ee20be59051c8019632cda","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrProperty AbstractJcrNode.setProperty(String,Calendar)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1625,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setProperty(java.lang.String,java.util.Calendar):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1625,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.removeExistingProperty(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1654,"column_number":-1,"description":"call to void AbstractJcrProperty.remove()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":326,"column_number":-1,"description":"call to void AbstractJcrProperty.checkNotProtected()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":346,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"b526da6c50dff43dd45e385d89f365f6","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrProperty AbstractJcrNode.setProperty(String,Calendar)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1627,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setProperty(java.lang.String,java.util.Calendar):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1627,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(Name,JcrValue,boolean,boolean,boolean,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1703,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":509,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,Value,boolean,boolean)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":972,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,Value,boolean,boolean,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1065,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(Value,JcrSession)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":262,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"b526da6c50dff43dd45e385d89f365f6","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBBgD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrProperty JcrSystemNode.setProperty(String,Calendar)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.setProperty(java.lang.String,java.util.Calendar):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(String,Calendar)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1625,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.removeExistingProperty(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1654,"column_number":-1,"description":"call to void AbstractJcrProperty.remove()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":326,"column_number":-1,"description":"call to void AbstractJcrProperty.checkNotProtected()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":346,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":11,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrSystemNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"4d690d944d42ed772da32ba93cd7e132","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Property AbstractJcrNode.setProperty(String,Binary)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":101,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setProperty(java.lang.String,javax.jcr.Binary):javax.jcr.Property","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":101,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(String,Binary)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1576,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(Name,JcrValue,boolean,boolean,boolean,boolean)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1703,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"3341a0bad6753acc0f73373e595f4073","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrProperty AbstractJcrNode.setProperty(String,Binary)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1576,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setProperty(java.lang.String,javax.jcr.Binary):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1576,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(Name,JcrValue,boolean,boolean,boolean,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1703,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"dfd44db73a0570fe2ce0afdb252f675b","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrProperty JcrSystemNode.setProperty(String,Binary)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.setProperty(java.lang.String,javax.jcr.Binary):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(String,Binary)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1576,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(Name,JcrValue,boolean,boolean,boolean,boolean)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1703,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrSystemNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"7c346c93c6481cdbc06b7e497996cd14","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Property AbstractJcrNode.setProperty(String,Node)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":101,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setProperty(java.lang.String,javax.jcr.Node):javax.jcr.Property","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":101,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(String,Node)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1636,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.removeExistingProperty(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1654,"column_number":-1,"description":"call to void AbstractJcrProperty.remove()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":326,"column_number":-1,"description":"call to void AbstractJcrProperty.checkNotProtected()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":346,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":11,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"f0634b56977ab110090f9a546520571e","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrProperty AbstractJcrNode.setProperty(String,Node)` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1638,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setProperty(java.lang.String,javax.jcr.Node):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1638,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(Name,JcrValue,boolean,boolean,boolean,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1685,"column_number":-1,"description":"call to void AbstractJcrNode.checkForLock()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":635,"column_number":-1,"description":"call to Lock AbstractJcrNode.getLockIfExists()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3322,"column_number":-1,"description":"call to Lock JcrLockManager.getLockIfExists(AbstractJcrNode)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrLockManager.java","line_number":178,"column_number":-1,"description":"call to Lock RepositoryLockManager$ModeShapeLock.lockFor(JcrSession)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","line_number":661,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"AbstractJcrNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"3c603785a1428768f6362e6fc53703ef","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrProperty AbstractJcrNode.setProperty(String,Node)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1636,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setProperty(java.lang.String,javax.jcr.Node):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1636,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.removeExistingProperty(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1654,"column_number":-1,"description":"call to void AbstractJcrProperty.remove()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":326,"column_number":-1,"description":"call to void AbstractJcrProperty.checkNotProtected()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":346,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"da39bf0467568b86d18cdecc8f750991","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrProperty JcrSystemNode.setProperty(String,Node)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.setProperty(java.lang.String,javax.jcr.Node):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(String,Node)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1636,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.removeExistingProperty(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1654,"column_number":-1,"description":"call to void AbstractJcrProperty.remove()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":326,"column_number":-1,"description":"call to void AbstractJcrProperty.checkNotProtected()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":346,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":11,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrSystemNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"547beb2f3109fe9580f5ce6e81294415","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Property AbstractJcrNode.setProperty(String,Value)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":101,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setProperty(java.lang.String,javax.jcr.Value):javax.jcr.Property","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":101,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(String,Value)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1420,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.removeExistingProperty(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1654,"column_number":-1,"description":"call to void AbstractJcrProperty.remove()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":326,"column_number":-1,"description":"call to void AbstractJcrProperty.checkNotProtected()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":346,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":11,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"11ac25ca47cc2fedd3dfe134c7c690fd","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrProperty AbstractJcrNode.setProperty(String,Value)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1420,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setProperty(java.lang.String,javax.jcr.Value):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1420,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.removeExistingProperty(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1654,"column_number":-1,"description":"call to void AbstractJcrProperty.remove()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":326,"column_number":-1,"description":"call to void AbstractJcrProperty.checkNotProtected()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":346,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"2b9c01630765593c5967f472a961ef8e","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrProperty AbstractJcrNode.setProperty(String,Value)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1425,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setProperty(java.lang.String,javax.jcr.Value):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1425,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(Name,JcrValue,boolean,boolean,boolean,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1703,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":509,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,Value,boolean,boolean)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":972,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,Value,boolean,boolean,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1065,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(Value,JcrSession)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":262,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"2b9c01630765593c5967f472a961ef8e","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBBgD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrProperty JcrSystemNode.setProperty(String,Value)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.setProperty(java.lang.String,javax.jcr.Value):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(String,Value)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1420,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.removeExistingProperty(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1654,"column_number":-1,"description":"call to void AbstractJcrProperty.remove()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":326,"column_number":-1,"description":"call to void AbstractJcrProperty.checkNotProtected()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":346,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":11,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrSystemNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"70d5942ac04459049c0e96c6896969aa","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Property AbstractJcrNode.setProperty(String,Value,int)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":101,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setProperty(java.lang.String,javax.jcr.Value,int):javax.jcr.Property","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":101,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(String,Value,int)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1437,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.removeExistingProperty(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1654,"column_number":-1,"description":"call to void AbstractJcrProperty.remove()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":326,"column_number":-1,"description":"call to void AbstractJcrProperty.checkNotProtected()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":346,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":11,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"5bbfcb4ba6c5b97f2d9283601da5a494","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrProperty AbstractJcrNode.setProperty(String,Value,int)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1437,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setProperty(java.lang.String,javax.jcr.Value,int):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1437,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.removeExistingProperty(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1654,"column_number":-1,"description":"call to void AbstractJcrProperty.remove()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":326,"column_number":-1,"description":"call to void AbstractJcrProperty.checkNotProtected()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":346,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"ebf3053d5d4f5c4b842173fdc3304c27","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrProperty AbstractJcrNode.setProperty(String,Value,int)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1443,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setProperty(java.lang.String,javax.jcr.Value,int):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1443,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(Name,JcrValue,boolean,boolean,boolean,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1703,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":509,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,Value,boolean,boolean)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":972,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,Value,boolean,boolean,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1065,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(Value,JcrSession)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":262,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"ebf3053d5d4f5c4b842173fdc3304c27","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBBgD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrProperty JcrSystemNode.setProperty(String,Value,int)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.setProperty(java.lang.String,javax.jcr.Value,int):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(String,Value,int)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1437,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.removeExistingProperty(Name)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1654,"column_number":-1,"description":"call to void AbstractJcrProperty.remove()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":326,"column_number":-1,"description":"call to void AbstractJcrProperty.checkNotProtected()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":346,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":11,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrSystemNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"1ec69dbf25ac613909267eb5565f993a","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void SessionNode.setProperty(SessionCache,Property)` indirectly mutates container `changes.addedStrong` via call to `put` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":819,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.setProperty(org.modeshape.jcr.cache.SessionCache,org.modeshape.jcr.value.Property):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":819,"column_number":-1,"description":"call to void SessionNode.processPropertyChange(SessionCache,Name,SessionCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":965,"column_number":-1,"description":"call to void SessionNode.addOrRemoveReferrers(SessionCache,SessionCache,Property,Iterator,boolean)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1023,"column_number":-1,"description":"call to void SessionNode.addReferrer(SessionCache,Property,NodeKey,CachedNode$ReferenceType)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":678,"column_number":-1,"description":"call to void SessionNode$ReferrerChanges.addStrongReferrer(Property,NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2474,"column_number":-1,"description":"call to void SessionNode$ReferrerChanges.processReferrerChange(Property,NodeKey,Map,Map)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2504,"column_number":-1,"description":"Write to container `changes.addedStrong` via call to `put`"}],"key":"SessionNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"5f7a84f9e1e8c9f43a9d423fe3f542d4","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEoAAAAEAAAAGgAAABKgsAEJyAD/kgk/c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9TZXNzaW9uTm9kZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Name Property.getName()` of un-annotated interface `org.modeshape.jcr.value.Property`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":816,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.setProperty(org.modeshape.jcr.cache.SessionCache,org.modeshape.jcr.value.Property):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":816,"column_number":-1,"description":"Call to un-annotated interface method Name Property.getName()"}],"key":"SessionNode.java|setProperty|INTERFACE_NOT_THREAD_SAFE","hash":"ae8aa145c07f53e6cc8c38ef5c15e5be","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEoAAAAEAAAAGgAAABKgsAEDMAD/kgk/c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9TZXNzaW9uTm9kZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrProperty AbstractJcrNode.setProperty(Name,javax.jcr.Value[],int,boolean)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1826,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setProperty(org.modeshape.jcr.value.Name,javax.jcr.Value[],int,boolean):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1826,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(Name,javax.jcr.Value[],int,boolean,boolean,boolean,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1899,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"ed95dcffa5ae1af6fe9196cacffc4b3d","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrProperty AbstractJcrNode.setProperty(Name,javax.jcr.Value[],int,boolean,boolean,boolean,boolean)` indirectly writes to field `defn.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1955,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setProperty(org.modeshape.jcr.value.Name,javax.jcr.Value[],int,boolean,boolean,boolean,boolean):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1955,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.canCastToTypeAndSatisfyConstraints(javax.jcr.Value[],JcrSession)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":437,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.canCastToTypeAndSatisfyConstraints(Value,JcrSession)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":413,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(Value,JcrSession)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":262,"column_number":-1,"description":"access to `defn.checker`"}],"key":"AbstractJcrNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"f1b2887586e62b0f03de9d6568d2a425","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBBgD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrProperty AbstractJcrNode.setProperty(Name,javax.jcr.Value[],int,boolean,boolean,boolean,boolean)` indirectly mutates container `ace.privileges` via call to `addAll` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1861,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setProperty(org.modeshape.jcr.value.Name,javax.jcr.Value[],int,boolean,boolean,boolean,boolean):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1861,"column_number":-1,"description":"call to void JcrSession.checkPermission(AbstractJcrItem,java.lang.String[])"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1535,"column_number":-1,"description":"call to void JcrSession.checkPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1567,"column_number":-1,"description":"call to boolean JcrSession.hasPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1375,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPermission(Path,java.lang.String[])"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":322,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPrivileges(String,javax.jcr.security.Privilege[])"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":109,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.getApplicableACL(String)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":114,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.findAccessList(String,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":289,"column_number":-1,"description":"call to boolean JcrAccessControlList.addAccessControlEntry(Principal,javax.jcr.security.Privilege[])"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/security/acl/JcrAccessControlList.java","line_number":113,"column_number":-1,"description":"call to boolean AccessControlEntryImpl.addIfNotPresent(javax.jcr.security.Privilege[])"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/security/acl/AccessControlEntryImpl.java","line_number":103,"column_number":-1,"description":"Write to container `ace.privileges` via call to `addAll`"}],"key":"AbstractJcrNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"443a8e905bd7ca9d1156837c855efc7c","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFIAAAAEAAAAHQAAABSgsABnAP+SCUhzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3NlY3VyaXR5L2FjbC9BY2Nlc3NDb250cm9sRW50cnlJbXBsLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrProperty AbstractJcrNode.setProperty(Name,javax.jcr.Value[],int,boolean,boolean,boolean,boolean)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1890,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setProperty(org.modeshape.jcr.value.Name,javax.jcr.Value[],int,boolean,boolean,boolean,boolean):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1890,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"88808ab52e54a19cee91f22b0f4a5285","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `boolean NodeTypes$ReusableNodeDefinitionSet.appliesTo(NodeTypes,Name,Set)` of un-annotated interface `org.modeshape.jcr.NodeTypes$ReusableNodeDefinitionSet`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":1856,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setProperty(org.modeshape.jcr.value.Name,javax.jcr.Value[],int,boolean,boolean,boolean,boolean):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1856,"column_number":-1,"description":"call to void AbstractJcrNode.checkForCheckedOut()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":657,"column_number":-1,"description":"call to boolean AbstractJcrNode.isCheckedOut()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3222,"column_number":-1,"description":"call to NodeDefinition AbstractJcrNode.getDefinition()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2835,"column_number":-1,"description":"call to NodeDefinition AbstractJcrNode.nodeDefinition()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2907,"column_number":-1,"description":"call to NodeTypes$NodeDefinitionSet NodeTypes.findChildNodeDefinitions(Name,Set)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":2375,"column_number":-1,"description":"Call to un-annotated interface method boolean NodeTypes$ReusableNodeDefinitionSet.appliesTo(NodeTypes,Name,Set)"}],"key":"AbstractJcrNode.java|setProperty|INTERFACE_NOT_THREAD_SAFE","hash":"d664077809fb52015327d1ce858ce174","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAADkAAAAEAAAAFgAAABCgsAEJRwD/kgkuc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9Ob2RlVHlwZXMuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrProperty AbstractJcrNode.setProperty(Name,javax.jcr.Value[],int,boolean,boolean,boolean,boolean)` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1854,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setProperty(org.modeshape.jcr.value.Name,javax.jcr.Value[],int,boolean,boolean,boolean,boolean):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1854,"column_number":-1,"description":"call to void AbstractJcrNode.checkForLock()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":635,"column_number":-1,"description":"call to Lock AbstractJcrNode.getLockIfExists()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3322,"column_number":-1,"description":"call to Lock JcrLockManager.getLockIfExists(AbstractJcrNode)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrLockManager.java","line_number":178,"column_number":-1,"description":"call to Lock RepositoryLockManager$ModeShapeLock.lockFor(JcrSession)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","line_number":661,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"AbstractJcrNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"f32cb321ae5d6df4c40028530c4efd91","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `AbstractJcrProperty AbstractJcrNode.setProperty(Name,javax.jcr.Value[],int,boolean,boolean,boolean,boolean)` indirectly reads without synchronization from `definition.checker`. Potentially races with write in method `AbstractJcrNode.setProperty(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1899,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setProperty(org.modeshape.jcr.value.Name,javax.jcr.Value[],int,boolean,boolean,boolean,boolean):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1899,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1899,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":295,"column_number":-1,"description":"access to `definition.checker`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1586,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1586,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(Name,JcrValue,boolean,boolean,boolean,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1703,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"e9bd7aa16f8fd5b4f7a839e39732f03c","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAIkAAAAIAAAAMgAAACSgsAEBJwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YaCwAQErAP+SCTpzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL0pjclByb3BlcnR5RGVmaW5pdGlvbi5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrProperty AbstractJcrNode.setProperty(Name,JcrValue,boolean,boolean,boolean,boolean)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1694,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setProperty(org.modeshape.jcr.value.Name,org.modeshape.jcr.JcrValue,boolean,boolean,boolean,boolean):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1694,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"601f66dbba806726a50267444e660b02","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrProperty AbstractJcrNode.setProperty(Name,JcrValue,boolean,boolean,boolean,boolean)` indirectly mutates container `ace.privileges` via call to `addAll` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1690,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setProperty(org.modeshape.jcr.value.Name,org.modeshape.jcr.JcrValue,boolean,boolean,boolean,boolean):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1690,"column_number":-1,"description":"call to void JcrSession.checkPermission(AbstractJcrItem,java.lang.String[])"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1535,"column_number":-1,"description":"call to void JcrSession.checkPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1567,"column_number":-1,"description":"call to boolean JcrSession.hasPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1375,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPermission(Path,java.lang.String[])"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":322,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPrivileges(String,javax.jcr.security.Privilege[])"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":109,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.getApplicableACL(String)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":114,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.findAccessList(String,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":289,"column_number":-1,"description":"call to boolean JcrAccessControlList.addAccessControlEntry(Principal,javax.jcr.security.Privilege[])"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/security/acl/JcrAccessControlList.java","line_number":113,"column_number":-1,"description":"call to boolean AccessControlEntryImpl.addIfNotPresent(javax.jcr.security.Privilege[])"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/security/acl/AccessControlEntryImpl.java","line_number":103,"column_number":-1,"description":"Write to container `ace.privileges` via call to `addAll`"}],"key":"AbstractJcrNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"4dcb7c855c296b37de74ccedc7803f01","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFIAAAAEAAAAHQAAABSgsABnAP+SCUhzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3NlY3VyaXR5L2FjbC9BY2Nlc3NDb250cm9sRW50cnlJbXBsLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `AbstractJcrProperty AbstractJcrNode.setProperty(Name,JcrValue,boolean,boolean,boolean,boolean)` indirectly reads without synchronization from `definition.checker`. Potentially races with write in method `AbstractJcrNode.setProperty(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1703,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setProperty(org.modeshape.jcr.value.Name,org.modeshape.jcr.JcrValue,boolean,boolean,boolean,boolean):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1703,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1703,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":295,"column_number":-1,"description":"access to `definition.checker`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1586,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1586,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(Name,JcrValue,boolean,boolean,boolean,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1703,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"362a1c965c1fb2f261b0198247220c89","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAIkAAAAIAAAAMgAAACSgsAEBJwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YaCwAQErAP+SCTpzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL0pjclByb3BlcnR5RGVmaW5pdGlvbi5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrProperty AbstractJcrNode.setProperty(Name,JcrValue,boolean,boolean,boolean,boolean)` indirectly writes to field `defn.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1767,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setProperty(org.modeshape.jcr.value.Name,org.modeshape.jcr.JcrValue,boolean,boolean,boolean,boolean):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1767,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.canCastToTypeAndSatisfyConstraints(Value,JcrSession)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":413,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(Value,JcrSession)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":262,"column_number":-1,"description":"access to `defn.checker`"}],"key":"AbstractJcrNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"19f360205e774493cbb00f95f2d47075","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBBgD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrProperty AbstractJcrNode.setProperty(Name,JcrValue,boolean,boolean,boolean,boolean)` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1685,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setProperty(org.modeshape.jcr.value.Name,org.modeshape.jcr.JcrValue,boolean,boolean,boolean,boolean):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1685,"column_number":-1,"description":"call to void AbstractJcrNode.checkForLock()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":635,"column_number":-1,"description":"call to Lock AbstractJcrNode.getLockIfExists()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3322,"column_number":-1,"description":"call to Lock JcrLockManager.getLockIfExists(AbstractJcrNode)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrLockManager.java","line_number":178,"column_number":-1,"description":"call to Lock RepositoryLockManager$ModeShapeLock.lockFor(JcrSession)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","line_number":661,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"AbstractJcrNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"3502d3166258eb8c650d3ecb96675244","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `boolean NodeTypes$ReusableNodeDefinitionSet.appliesTo(NodeTypes,Name,Set)` of un-annotated interface `org.modeshape.jcr.NodeTypes$ReusableNodeDefinitionSet`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":1778,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setProperty(org.modeshape.jcr.value.Name,org.modeshape.jcr.JcrValue,boolean,boolean,boolean,boolean):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1778,"column_number":-1,"description":"call to boolean AbstractJcrNode.isCheckedOut()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3222,"column_number":-1,"description":"call to NodeDefinition AbstractJcrNode.getDefinition()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2835,"column_number":-1,"description":"call to NodeDefinition AbstractJcrNode.nodeDefinition()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2907,"column_number":-1,"description":"call to NodeTypes$NodeDefinitionSet NodeTypes.findChildNodeDefinitions(Name,Set)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":2375,"column_number":-1,"description":"Call to un-annotated interface method boolean NodeTypes$ReusableNodeDefinitionSet.appliesTo(NodeTypes,Name,Set)"}],"key":"AbstractJcrNode.java|setProperty|INTERFACE_NOT_THREAD_SAFE","hash":"d664077809fb52015327d1ce858ce174","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAADkAAAAEAAAAFgAAABCgsAEJRwD/kgkuc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9Ob2RlVHlwZXMuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrProperty AbstractJcrNode.setProperty(Name,JcrValue,boolean,boolean,boolean,boolean)` indirectly writes to field `propertyDefinition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1710,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setProperty(org.modeshape.jcr.value.Name,org.modeshape.jcr.JcrValue,boolean,boolean,boolean,boolean):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1710,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.canCastToTypeAndSatisfyConstraints(Value,JcrSession)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":413,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(Value,JcrSession)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":262,"column_number":-1,"description":"access to `propertyDefinition.checker`"}],"key":"AbstractJcrNode.java|setProperty|THREAD_SAFETY_VIOLATION","hash":"79e053eaf484a28b41e1e5cc4d4fdcdc","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBBgD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `SchematicEntry DocumentStore.get(String)` of un-annotated interface `org.modeshape.jcr.cache.document.DocumentStore`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":1050,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.setPropertyIfUnchanged(org.modeshape.jcr.cache.SessionCache,org.modeshape.jcr.value.Property):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1050,"column_number":-1,"description":"call to boolean SessionNode.isPropertyInWorkspaceCache(SessionCache,Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":157,"column_number":-1,"description":"call to CachedNode SessionNode.nodeInWorkspace(AbstractSessionCache)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":309,"column_number":-1,"description":"call to CachedNode WorkspaceCache.getNode(NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":243,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":207,"column_number":-1,"description":"call to Document WorkspaceCache.documentFor(String)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/document/WorkspaceCache.java","line_number":188,"column_number":-1,"description":"Call to un-annotated interface method SchematicEntry DocumentStore.get(String)"}],"key":"SessionNode.java|setPropertyIfUnchanged|INTERFACE_NOT_THREAD_SAFE","hash":"826b6a36bb77d9df46265cb68a9b6382","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE0AAAAEAAAAGwAAABOgsAEAvAD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xb3Jrc3BhY2VDYWNoZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void SessionNode.setPropertyIfUnchanged(SessionCache,Property)` indirectly mutates container `changes.addedStrong` via call to `put` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1052,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.setPropertyIfUnchanged(org.modeshape.jcr.cache.SessionCache,org.modeshape.jcr.value.Property):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1052,"column_number":-1,"description":"call to void SessionNode.setProperty(SessionCache,Property)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":819,"column_number":-1,"description":"call to void SessionNode.processPropertyChange(SessionCache,Name,SessionCache)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":965,"column_number":-1,"description":"call to void SessionNode.addOrRemoveReferrers(SessionCache,SessionCache,Property,Iterator,boolean)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1023,"column_number":-1,"description":"call to void SessionNode.addReferrer(SessionCache,Property,NodeKey,CachedNode$ReferenceType)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":678,"column_number":-1,"description":"call to void SessionNode$ReferrerChanges.addStrongReferrer(Property,NodeKey)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2474,"column_number":-1,"description":"call to void SessionNode$ReferrerChanges.processReferrerChange(Property,NodeKey,Map,Map)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2504,"column_number":-1,"description":"Write to container `changes.addedStrong` via call to `put`"}],"key":"SessionNode.java|setPropertyIfUnchanged|THREAD_SAFETY_VIOLATION","hash":"fe70e997c471ab045c36a58da6a2d8cd","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEoAAAAEAAAAGgAAABKgsAEJyAD/kgk/c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9TZXNzaW9uTm9kZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrProperty AbstractJcrNode.setPropertyInAccessControlScope(String,java.lang.String[])` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1510,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setPropertyInAccessControlScope(java.lang.String,java.lang.String[]):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1510,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.removeExistingProperty(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1654,"column_number":-1,"description":"call to void AbstractJcrProperty.remove()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":326,"column_number":-1,"description":"call to void AbstractJcrProperty.checkNotProtected()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":346,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|setPropertyInAccessControlScope|THREAD_SAFETY_VIOLATION","hash":"df0d9b1688b906117201e51922cdeb69","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrProperty AbstractJcrNode.setPropertyInAccessControlScope(String,java.lang.String[])` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1511,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setPropertyInAccessControlScope(java.lang.String,java.lang.String[]):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1511,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(Name,javax.jcr.Value[],int,boolean,boolean,boolean,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1899,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":509,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,Value,boolean,boolean)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":972,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,Value,boolean,boolean,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1065,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(Value,JcrSession)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":262,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|setPropertyInAccessControlScope|THREAD_SAFETY_VIOLATION","hash":"df0d9b1688b906117201e51922cdeb69","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBBgD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrProperty AbstractJcrNode.setPropertyInAccessControlScope(String,String)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1541,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setPropertyInAccessControlScope(java.lang.String,java.lang.String):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1541,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.removeExistingProperty(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1654,"column_number":-1,"description":"call to void AbstractJcrProperty.remove()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":326,"column_number":-1,"description":"call to void AbstractJcrProperty.checkNotProtected()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":346,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|setPropertyInAccessControlScope|THREAD_SAFETY_VIOLATION","hash":"27ba744c91fd7298de8f35ac89ac8923","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrProperty AbstractJcrNode.setPropertyInAccessControlScope(String,String)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1543,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.setPropertyInAccessControlScope(java.lang.String,java.lang.String):org.modeshape.jcr.AbstractJcrProperty","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1543,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.setProperty(Name,JcrValue,boolean,boolean,boolean,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1703,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.getDefinition()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":250,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrProperty.propertyDefinition()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrProperty.java","line_number":136,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":509,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,Value,boolean,boolean)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":972,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,Value,boolean,boolean,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1065,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(Value,JcrSession)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":262,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|setPropertyInAccessControlScope|THREAD_SAFETY_VIOLATION","hash":"27ba744c91fd7298de8f35ac89ac8923","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBBgD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void SessionNode.setReference(SessionCache,Property,SessionCache)` indirectly mutates container `changes.addedStrong` via call to `put` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":832,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.setReference(org.modeshape.jcr.cache.SessionCache,org.modeshape.jcr.value.Property,org.modeshape.jcr.cache.SessionCache):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":832,"column_number":-1,"description":"call to void SessionNode.processPropertyChange(SessionCache,Name,SessionCache)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":965,"column_number":-1,"description":"call to void SessionNode.addOrRemoveReferrers(SessionCache,SessionCache,Property,Iterator,boolean)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1023,"column_number":-1,"description":"call to void SessionNode.addReferrer(SessionCache,Property,NodeKey,CachedNode$ReferenceType)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":678,"column_number":-1,"description":"call to void SessionNode$ReferrerChanges.addStrongReferrer(Property,NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2474,"column_number":-1,"description":"call to void SessionNode$ReferrerChanges.processReferrerChange(Property,NodeKey,Map,Map)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":2504,"column_number":-1,"description":"Write to container `changes.addedStrong` via call to `put`"}],"key":"SessionNode.java|setReference|THREAD_SAFETY_VIOLATION","hash":"ca38ec0bf103e47c1860bf187feafdda","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEoAAAAEAAAAGgAAABKgsAEJyAD/kgk/c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9TZXNzaW9uTm9kZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Name Property.getName()` of un-annotated interface `org.modeshape.jcr.value.Property`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":829,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.setReference(org.modeshape.jcr.cache.SessionCache,org.modeshape.jcr.value.Property,org.modeshape.jcr.cache.SessionCache):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":829,"column_number":-1,"description":"Call to un-annotated interface method Name Property.getName()"}],"key":"SessionNode.java|setReference|INTERFACE_NOT_THREAD_SAFE","hash":"af2a61bab910802ff93672e9e7e649cb","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEoAAAAEAAAAGgAAABKgsAEDPQD/kgk/c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9TZXNzaW9uTm9kZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void JcrObservationManager.setUserData(String)` indirectly writes to field `this.session.context` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":213,"column":-1,"procedure":"org.modeshape.jcr.JcrObservationManager.setUserData(java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrObservationManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrObservationManager.java","line_number":213,"column_number":-1,"description":"call to void JcrSession.addContextData(String,String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":434,"column_number":-1,"description":"access to `this.session.context`"}],"key":"JcrObservationManager.java|setUserData|THREAD_SAFETY_VIOLATION","hash":"6050233e9616d88839e6d9106da31bfb","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAADoAAAAEAAAAFgAAABCgsAEBsgD/kgkvc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JTZXNzaW9uLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void JcrRepository$RunningState.shutdown()` reads without synchronization from container `this.internalSessions` via call to `isEmpty`. Potentially races with write in method `JcrRepository$RunningState.removeSession(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":1674,"column":-1,"procedure":"org.modeshape.jcr.JcrRepository$RunningState.shutdown():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrRepository.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1674,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1674,"column_number":-1,"description":"Read of container `this.internalSessions` via call to `isEmpty`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1798,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrRepository.java","line_number":1798,"column_number":-1,"description":"Write to container `this.internalSessions` via call to `remove`"}],"key":"JcrRepository.java|shutdown|THREAD_SAFETY_VIOLATION","hash":"b53d4d4cda67004317c0b34b26b64046","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAHkAAAAIAAAALgAAACKgsAEGigD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JSZXBvc2l0b3J5LmphdmGgsAEHBgD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JSZXBvc2l0b3J5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `boolean ClusteringService$ForkedClusteringService.shutdown()` indirectly reads with synchronization from `this.channel`. Potentially races with unsynchronized write in method `ClusteringService$ForkedClusteringService.init()`.\n Reporting because a superclass `class org.modeshape.jcr.clustering.ClusteringService` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":574,"column":-1,"procedure":"org.modeshape.jcr.clustering.ClusteringService$ForkedClusteringService.shutdown():boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","line_number":574,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","line_number":574,"column_number":-1,"description":"call to boolean ClusteringService.shutdown()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","line_number":161,"column_number":-1,"description":"access to `this.channel`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","line_number":541,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","line_number":541,"column_number":-1,"description":"access to `this.channel`"}],"key":"ClusteringService.java|shutdown|THREAD_SAFETY_VIOLATION","hash":"b43be069dfaad33d0c0bc8d67f8e168f","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAJcAAAAIAAAANgAAACagsAEAoQD/kglBc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jbHVzdGVyaW5nL0NsdXN0ZXJpbmdTZXJ2aWNlLmphdmGgsAECHQD/kglBc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jbHVzdGVyaW5nL0NsdXN0ZXJpbmdTZXJ2aWNlLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `boolean ClusteringService$ForkedClusteringService.shutdown()` reads with synchronization from container `clustering.ClusteringService$ForkedClusteringService.FORK_STACKS_BY_CHANNEL_NAME` via call to `get`. Potentially races with unsynchronized write in method `ClusteringService$ForkedClusteringService.init()`.\n Reporting because a superclass `class org.modeshape.jcr.clustering.ClusteringService` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":576,"column":-1,"procedure":"org.modeshape.jcr.clustering.ClusteringService$ForkedClusteringService.shutdown():boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","line_number":576,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","line_number":576,"column_number":-1,"description":"Read of container `clustering.ClusteringService$ForkedClusteringService.FORK_STACKS_BY_CHANNEL_NAME` via call to `get`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","line_number":562,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","line_number":562,"column_number":-1,"description":"Write to container `clustering.ClusteringService$ForkedClusteringService.FORK_STACKS_BY_CHANNEL_NAME` via call to `put`"}],"key":"ClusteringService.java|shutdown|THREAD_SAFETY_VIOLATION","hash":"cbefa75ec7e46e4ad86bb7d6473d9067","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAJcAAAAIAAAANgAAACagsAECQAD/kglBc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jbHVzdGVyaW5nL0NsdXN0ZXJpbmdTZXJ2aWNlLmphdmGgsAECMgD/kglBc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jbHVzdGVyaW5nL0NsdXN0ZXJpbmdTZXJ2aWNlLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void InfinispanBinaryStore.shutdown()` reads without synchronization from `this.cacheContainer`. Potentially races with write in method `InfinispanBinaryStore.shutdown()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":188,"column":-1,"procedure":"org.modeshape.jcr.value.binary.infinispan.InfinispanBinaryStore.shutdown():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":188,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":188,"column_number":-1,"description":"access to `this.cacheContainer`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":191,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":191,"column_number":-1,"description":"access to `this.cacheContainer`"}],"key":"InfinispanBinaryStore.java|shutdown|THREAD_SAFETY_VIOLATION","hash":"e6166b42aaf04b7a0341e32d27337b78","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAGYAAAAGAAAAJgAAABygsAEAvAD/kglSc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvaW5maW5pc3Bhbi9JbmZpbmlzcGFuQmluYXJ5U3RvcmUuamF2YaCwAQC/AP8EBEA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void InfinispanBinaryStore.shutdown()` writes to field `this.metadataCache` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":192,"column":-1,"procedure":"org.modeshape.jcr.value.binary.infinispan.InfinispanBinaryStore.shutdown():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":192,"column_number":-1,"description":"access to `this.metadataCache`"}],"key":"InfinispanBinaryStore.java|shutdown|THREAD_SAFETY_VIOLATION","hash":"2415951e8c38791aefa8442b58c7ebe6","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAF0AAAAEAAAAHwAAABWgsAEAwAD/kglSc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvaW5maW5pc3Bhbi9JbmZpbmlzcGFuQmluYXJ5U3RvcmUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void InfinispanBinaryStore.shutdown()` writes to field `this.cacheContainer` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":191,"column":-1,"procedure":"org.modeshape.jcr.value.binary.infinispan.InfinispanBinaryStore.shutdown():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":191,"column_number":-1,"description":"access to `this.cacheContainer`"}],"key":"InfinispanBinaryStore.java|shutdown|THREAD_SAFETY_VIOLATION","hash":"40e77d754dfbf366b7aab73912a446c5","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAF0AAAAEAAAAHwAAABWgsAEAvwD/kglSc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvaW5maW5pc3Bhbi9JbmZpbmlzcGFuQmluYXJ5U3RvcmUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void InfinispanBinaryStore.shutdown()` writes to field `this.blobCache` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":193,"column":-1,"procedure":"org.modeshape.jcr.value.binary.infinispan.InfinispanBinaryStore.shutdown():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":193,"column_number":-1,"description":"access to `this.blobCache`"}],"key":"InfinispanBinaryStore.java|shutdown|THREAD_SAFETY_VIOLATION","hash":"26e733109ea509180a0b7d3f93814aea","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAF0AAAAEAAAAHwAAABWgsAEAwQD/kglSc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvaW5maW5pc3Bhbi9JbmZpbmlzcGFuQmluYXJ5U3RvcmUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `void CacheContainer.stop()` of un-annotated interface `org.infinispan.manager.CacheContainer`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.Environment` is annotated `@ThreadSafe`.","severity":"WARNING","line":176,"column":-1,"procedure":"org.modeshape.jcr.LocalEnvironment.shutdown(org.infinispan.manager.CacheContainer):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/LocalEnvironment.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/LocalEnvironment.java","line_number":176,"column_number":-1,"description":"Call to un-annotated interface method void CacheContainer.stop()"}],"key":"LocalEnvironment.java|shutdown|INTERFACE_NOT_THREAD_SAFE","hash":"1d7dc17f2b3b1e4d0739f744d8d177d1","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEAAAAAEAAAAGAAAABGgsAEAsAD/kgk1c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9Mb2NhbEVudmlyb25tZW50LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `long ChildReferences.size()` of un-annotated interface `org.modeshape.jcr.cache.ChildReferences`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":58,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionChildReferences.size():long","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionChildReferences.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionChildReferences.java","line_number":58,"column_number":-1,"description":"Call to un-annotated interface method long ChildReferences.size()"}],"key":"SessionChildReferences.java|size|INTERFACE_NOT_THREAD_SAFE","hash":"14e6ac6d1e766aa64616570232187d77","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAFMAAAAEAAAAHQAAABSgsHoA/5IJSnNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvY2FjaGUvZG9jdW1lbnQvU2Vzc2lvbkNoaWxkUmVmZXJlbmNlcy5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void ClusteredJournal.start()` indirectly reads without synchronization from `this.localJournal.journalId`. Potentially races with write in method `ClusteredJournal.start()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":101,"column":-1,"procedure":"org.modeshape.jcr.journal.ClusteredJournal.start():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":101,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":101,"column_number":-1,"description":"call to String ClusteredJournal.journalId()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":169,"column_number":-1,"description":"call to String LocalJournal.journalId()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","line_number":320,"column_number":-1,"description":"access to `this.localJournal.journalId`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":81,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":81,"column_number":-1,"description":"call to void LocalJournal.start()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","line_number":146,"column_number":-1,"description":"access to `this.localJournal.journalId`"}],"key":"ClusteredJournal.java|start|THREAD_SAFETY_VIOLATION","hash":"f068a02845cc5102f05fc4f30808a728","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAIcAAAAIAAAAMgAAACSgsAEBQAD/kgk5c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9qb3VybmFsL0xvY2FsSm91cm5hbC5qYXZhoLABAJIA/5IJOXNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3Ivam91cm5hbC9Mb2NhbEpvdXJuYWwuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void ClusteredJournal.start()` writes to field `this.reconciliationLatch` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":96,"column":-1,"procedure":"org.modeshape.jcr.journal.ClusteredJournal.start():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":96,"column_number":-1,"description":"access to `this.reconciliationLatch`"}],"key":"ClusteredJournal.java|start|THREAD_SAFETY_VIOLATION","hash":"f47afbd5ce8cfc4492642ca0419e6ee4","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEcAAAAEAAAAGgAAABKgsABgAP+SCT1zcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL2pvdXJuYWwvQ2x1c3RlcmVkSm91cm5hbC5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void ClusteredJournal.start()` indirectly reads without synchronization from `this.localJournal.records`. Potentially races with write in method `ClusteredJournal.start()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":99,"column":-1,"procedure":"org.modeshape.jcr.journal.ClusteredJournal.start():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":99,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":99,"column_number":-1,"description":"call to JournalRecord ClusteredJournal.lastRecord()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":147,"column_number":-1,"description":"call to JournalRecord LocalJournal.lastRecord()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","line_number":227,"column_number":-1,"description":"access to `this.localJournal.records`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":81,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":81,"column_number":-1,"description":"call to void LocalJournal.start()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","line_number":140,"column_number":-1,"description":"access to `this.localJournal.records`"}],"key":"ClusteredJournal.java|start|THREAD_SAFETY_VIOLATION","hash":"c7d7f9eca9fdbfbdf9fa023295d80c36","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAIcAAAAIAAAAMgAAACSgsAEA4wD/kgk5c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9qb3VybmFsL0xvY2FsSm91cm5hbC5qYXZhoLABAIwA/5IJOXNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3Ivam91cm5hbC9Mb2NhbEpvdXJuYWwuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `long DateTime.getMillisecondsInUtc()` of un-annotated interface `org.modeshape.jcr.api.value.DateTime`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":100,"column":-1,"procedure":"org.modeshape.jcr.journal.ClusteredJournal.start():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":100,"column_number":-1,"description":"call to long JournalRecord.getChangeTimeMillis()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/journal/JournalRecord.java","line_number":110,"column_number":-1,"description":"Call to un-annotated interface method long DateTime.getMillisecondsInUtc()"}],"key":"ClusteredJournal.java|start|INTERFACE_NOT_THREAD_SAFE","hash":"fa51d5fa226c249d7810ecbeeed70020","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEQAAAAEAAAAGQAAABKgsABuAP+SCTpzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL2pvdXJuYWwvSm91cm5hbFJlY29yZC5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void ClusteredJournal.start()` indirectly reads without synchronization from `this.reconciliationLatch`. Potentially races with write in method `ClusteredJournal.start()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":106,"column":-1,"procedure":"org.modeshape.jcr.journal.ClusteredJournal.start():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":106,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":106,"column_number":-1,"description":"call to void ClusteredJournal.waitForReconciliationToComplete()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":113,"column_number":-1,"description":"access to `this.reconciliationLatch`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":96,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":96,"column_number":-1,"description":"access to `this.reconciliationLatch`"}],"key":"ClusteredJournal.java|start|THREAD_SAFETY_VIOLATION","hash":"f9c43672e57a75d2ebc2f94347ae4ffe","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAI0AAAAIAAAANAAAACSgsABxAP+SCT1zcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL2pvdXJuYWwvQ2x1c3RlcmVkSm91cm5hbC5qYXZhoLAAYAD/kgk9c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9qb3VybmFsL0NsdXN0ZXJlZEpvdXJuYWwuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void CassandraBinaryStore.start()` writes to field `this.session` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.value.binary.AbstractBinaryStore` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":262,"column":-1,"procedure":"org.modeshape.jcr.value.binary.CassandraBinaryStore.start():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/CassandraBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/CassandraBinaryStore.java","line_number":262,"column_number":-1,"description":"access to `this.session`"}],"key":"CassandraBinaryStore.java|start|THREAD_SAFETY_VIOLATION","hash":"e5dc9e7f40c2bccb294ed3b246c951fb","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFEAAAAEAAAAHAAAABOgsAEBBgD/kglGc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvQ2Fzc2FuZHJhQmluYXJ5U3RvcmUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void CassandraBinaryStore.start()` reads without synchronization from `this.session`. Potentially races with write in method `CassandraBinaryStore.start()`.\n Reporting because a superclass `class org.modeshape.jcr.value.binary.AbstractBinaryStore` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":264,"column":-1,"procedure":"org.modeshape.jcr.value.binary.CassandraBinaryStore.start():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/CassandraBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/CassandraBinaryStore.java","line_number":264,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/CassandraBinaryStore.java","line_number":264,"column_number":-1,"description":"access to `this.session`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/CassandraBinaryStore.java","line_number":262,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/CassandraBinaryStore.java","line_number":262,"column_number":-1,"description":"access to `this.session`"}],"key":"CassandraBinaryStore.java|start|THREAD_SAFETY_VIOLATION","hash":"1efdab1232b48f2d00b778315cc9bad3","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFoAAAAGAAAAIwAAABqgsAEBCAD/kglGc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvQ2Fzc2FuZHJhQmluYXJ5U3RvcmUuamF2YaCwAQEGAP8EBEA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void DatabaseBinaryStore.start()` indirectly writes to field `this.dataSource` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":146,"column":-1,"procedure":"org.modeshape.jcr.value.binary.DatabaseBinaryStore.start():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":146,"column_number":-1,"description":"call to void DatabaseBinaryStore.lookupDataSource()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":338,"column_number":-1,"description":"access to `this.dataSource`"}],"key":"DatabaseBinaryStore.java|start|THREAD_SAFETY_VIOLATION","hash":"a7f806bf77da4b71a281116d0f124df6","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFAAAAAEAAAAHAAAABOgsAEBUgD/kglFc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvRGF0YWJhc2VCaW5hcnlTdG9yZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void DatabaseBinaryStore.start()` indirectly reads without synchronization from `this.dataSource`. Potentially races with write in method `DatabaseBinaryStore.start()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":151,"column":-1,"procedure":"org.modeshape.jcr.value.binary.DatabaseBinaryStore.start():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":151,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":151,"column_number":-1,"description":"call to Database DatabaseBinaryStore.database()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":156,"column_number":-1,"description":"call to Connection DatabaseBinaryStore.newConnection()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":328,"column_number":-1,"description":"access to `this.dataSource`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":146,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":146,"column_number":-1,"description":"call to void DatabaseBinaryStore.lookupDataSource()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":338,"column_number":-1,"description":"access to `this.dataSource`"}],"key":"DatabaseBinaryStore.java|start|THREAD_SAFETY_VIOLATION","hash":"ae9442fb0759ee509c53b5d0af1fad53","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAJ8AAAAIAAAAOAAAACagsAEBSAD/kglFc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvRGF0YWJhc2VCaW5hcnlTdG9yZS5qYXZhoLABAVIA/5IJRXNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvdmFsdWUvYmluYXJ5L0RhdGFiYXNlQmluYXJ5U3RvcmUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void MongodbBinaryStore.start()` indirectly writes to field `this.db` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.value.binary.AbstractBinaryStore` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":346,"column":-1,"procedure":"org.modeshape.jcr.value.binary.MongodbBinaryStore.start():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":346,"column_number":-1,"description":"call to void MongodbBinaryStore.initMongoDatabase()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":367,"column_number":-1,"description":"access to `this.db`"}],"key":"MongodbBinaryStore.java|start|THREAD_SAFETY_VIOLATION","hash":"88e35b74987ab7b127eb389c5a52242e","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAE8AAAAEAAAAHAAAABOgsAEBbwD/kglEc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvTW9uZ29kYkJpbmFyeVN0b3JlLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void MongodbBinaryStore.start()` reads without synchronization from `this.db`. Potentially races with write in method `MongodbBinaryStore.start()`.\n Reporting because a superclass `class org.modeshape.jcr.value.binary.AbstractBinaryStore` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":350,"column":-1,"procedure":"org.modeshape.jcr.value.binary.MongodbBinaryStore.start():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":350,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":350,"column_number":-1,"description":"access to `this.db`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":346,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":346,"column_number":-1,"description":"call to void MongodbBinaryStore.initMongoDatabase()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":367,"column_number":-1,"description":"access to `this.db`"}],"key":"MongodbBinaryStore.java|start|THREAD_SAFETY_VIOLATION","hash":"f3a5ed0474732468502935b682cf348a","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAJ0AAAAIAAAAOAAAACagsAEBXgD/kglEc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvTW9uZ29kYkJpbmFyeVN0b3JlLmphdmGgsAEBbwD/kglEc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvTW9uZ29kYkJpbmFyeVN0b3JlLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void InfinispanBinaryStore.start()` reads without synchronization from `this.metadataCache`. Potentially races with write in method `InfinispanBinaryStore.start()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":172,"column":-1,"procedure":"org.modeshape.jcr.value.binary.infinispan.InfinispanBinaryStore.start():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":172,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":172,"column_number":-1,"description":"access to `this.metadataCache`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":179,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":179,"column_number":-1,"description":"access to `this.metadataCache`"}],"key":"InfinispanBinaryStore.java|start|THREAD_SAFETY_VIOLATION","hash":"23268d4ec741b2a3c41a113c19c430dd","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAGYAAAAGAAAAJgAAABygsAEArAD/kglSc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvaW5maW5pc3Bhbi9JbmZpbmlzcGFuQmluYXJ5U3RvcmUuamF2YaCwAQCzAP8EBEA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void InfinispanBinaryStore.start()` writes to field `this.metadataCache` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":179,"column":-1,"procedure":"org.modeshape.jcr.value.binary.infinispan.InfinispanBinaryStore.start():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":179,"column_number":-1,"description":"access to `this.metadataCache`"}],"key":"InfinispanBinaryStore.java|start|THREAD_SAFETY_VIOLATION","hash":"d2b419fddd9443125a46b74571eb9175","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAF0AAAAEAAAAHwAAABWgsAEAswD/kglSc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvaW5maW5pc3Bhbi9JbmZpbmlzcGFuQmluYXJ5U3RvcmUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void InfinispanBinaryStore.start()` writes to field `this.lockFactory` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":181,"column":-1,"procedure":"org.modeshape.jcr.value.binary.infinispan.InfinispanBinaryStore.start():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":181,"column_number":-1,"description":"access to `this.lockFactory`"}],"key":"InfinispanBinaryStore.java|start|THREAD_SAFETY_VIOLATION","hash":"3bba716a84a8ca3e0fad3f30d693ed83","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAF0AAAAEAAAAHwAAABWgsAEAtQD/kglSc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvaW5maW5pc3Bhbi9JbmZpbmlzcGFuQmluYXJ5U3RvcmUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void InfinispanBinaryStore.start()` reads without synchronization from `this.cacheContainer`. Potentially races with write in method `InfinispanBinaryStore.shutdown()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":177,"column":-1,"procedure":"org.modeshape.jcr.value.binary.infinispan.InfinispanBinaryStore.start():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":177,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":177,"column_number":-1,"description":"access to `this.cacheContainer`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":191,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":191,"column_number":-1,"description":"access to `this.cacheContainer`"}],"key":"InfinispanBinaryStore.java|start|THREAD_SAFETY_VIOLATION","hash":"0fc570ebd1b2f03148c837dc7a7c33c6","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAALkAAAAIAAAAPgAAACqgsAEAsQD/kglSc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvaW5maW5pc3Bhbi9JbmZpbmlzcGFuQmluYXJ5U3RvcmUuamF2YaCwAQC/AP+SCVJzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2JpbmFyeS9pbmZpbmlzcGFuL0luZmluaXNwYW5CaW5hcnlTdG9yZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void InfinispanBinaryStore.start()` writes to field `this.blobCache` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":180,"column":-1,"procedure":"org.modeshape.jcr.value.binary.infinispan.InfinispanBinaryStore.start():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":180,"column_number":-1,"description":"access to `this.blobCache`"}],"key":"InfinispanBinaryStore.java|start|THREAD_SAFETY_VIOLATION","hash":"c0371849db653a0291072bc6e8ed2c21","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAF0AAAAEAAAAHwAAABWgsAEAtAD/kglSc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvaW5maW5pc3Bhbi9JbmZpbmlzcGFuQmluYXJ5U3RvcmUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `long DurationActivity.getDuration(TimeUnit)` of un-annotated interface `org.modeshape.jcr.api.monitor.DurationActivity`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":180,"column":-1,"procedure":"org.modeshape.jcr.RepositoryStatistics.start(java.util.concurrent.ScheduledExecutorService):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/RepositoryStatistics.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryStatistics.java","line_number":180,"column_number":-1,"description":"call to void RepositoryStatistics.rollup()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryStatistics.java","line_number":213,"column_number":-1,"description":"call to Window RepositoryStatistics$DurationHistory.rollup()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/RepositoryStatistics.java","line_number":659,"column_number":-1,"description":"Call to un-annotated interface method long DurationActivity.getDuration(TimeUnit)"}],"key":"RepositoryStatistics.java|start|INTERFACE_NOT_THREAD_SAFE","hash":"7ab262c15cc26f201fbd50ea8987e91e","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEQAAAAEAAAAGQAAABKgsAECkwD/kgk5c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9SZXBvc2l0b3J5U3RhdGlzdGljcy5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `ClusteringService ClusteringService.startForked(Channel)` indirectly mutates container `clustering.ClusteringService$ForkedClusteringService.FORK_STACKS_BY_CHANNEL_NAME` via call to `put` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":314,"column":-1,"procedure":"org.modeshape.jcr.clustering.ClusteringService.startForked(org.jgroups.Channel):org.modeshape.jcr.clustering.ClusteringService","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","line_number":314,"column_number":-1,"description":"call to void ClusteringService$ForkedClusteringService.init()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","line_number":562,"column_number":-1,"description":"Write to container `clustering.ClusteringService$ForkedClusteringService.FORK_STACKS_BY_CHANNEL_NAME` via call to `put`"}],"key":"ClusteringService.java|startForked|THREAD_SAFETY_VIOLATION","hash":"5e792f26e80bd220d0ed833a600459a9","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEwAAAAEAAAAGwAAABOgsAECMgD/kglBc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jbHVzdGVyaW5nL0NsdXN0ZXJpbmdTZXJ2aWNlLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `boolean ClusteredJournal.started()` indirectly reads without synchronization from `this.reconciliationLatch`. Potentially races with write in method `ClusteredJournal.start()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":174,"column":-1,"procedure":"org.modeshape.jcr.journal.ClusteredJournal.started():boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":174,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":174,"column_number":-1,"description":"call to boolean ClusteredJournal.reconciliationCompleted()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":190,"column_number":-1,"description":"access to `this.reconciliationLatch`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":96,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/ClusteredJournal.java","line_number":96,"column_number":-1,"description":"access to `this.reconciliationLatch`"}],"key":"ClusteredJournal.java|started|THREAD_SAFETY_VIOLATION","hash":"7cce9d3a8586b04b6351b41ac43d6c81","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAI4AAAAIAAAANAAAACSgsAEAvgD/kgk9c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9qb3VybmFsL0NsdXN0ZXJlZEpvdXJuYWwuamF2YaCwAGAA/5IJPXNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3Ivam91cm5hbC9DbHVzdGVyZWRKb3VybmFsLmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `int Statistics.getCount()` of un-annotated interface `org.modeshape.jcr.api.monitor.Statistics`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":733,"column":-1,"procedure":"org.modeshape.jcr.RepositoryStatistics.statisticsFor(org.modeshape.jcr.api.monitor.Statistics[]):org.modeshape.jcr.api.monitor.Statistics","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/RepositoryStatistics.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryStatistics.java","line_number":733,"column_number":-1,"description":"Call to un-annotated interface method int Statistics.getCount()"}],"key":"RepositoryStatistics.java|statisticsFor|INTERFACE_NOT_THREAD_SAFE","hash":"18582fc4e433e713672a73ceb664809b","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEQAAAAEAAAAGQAAABKgsAEC3QD/kgk5c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9SZXBvc2l0b3J5U3RhdGlzdGljcy5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void CassandraBinaryStore.storeExtractedText(BinaryValue,String)` reads without synchronization from `this.session`. Potentially races with write in method `CassandraBinaryStore.start()`.\n Reporting because a superclass `class org.modeshape.jcr.value.binary.AbstractBinaryStore` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":99,"column":-1,"procedure":"org.modeshape.jcr.value.binary.CassandraBinaryStore.storeExtractedText(org.modeshape.jcr.value.BinaryValue,java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/CassandraBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/CassandraBinaryStore.java","line_number":99,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/CassandraBinaryStore.java","line_number":99,"column_number":-1,"description":"access to `this.session`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/CassandraBinaryStore.java","line_number":262,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/CassandraBinaryStore.java","line_number":262,"column_number":-1,"description":"access to `this.session`"}],"key":"CassandraBinaryStore.java|storeExtractedText|THREAD_SAFETY_VIOLATION","hash":"5d70a9bc6d1ebfa9c07476e5abde78da","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAKAAAAAIAAAAOAAAACagsABjAP+SCUZzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2JpbmFyeS9DYXNzYW5kcmFCaW5hcnlTdG9yZS5qYXZhoLABAQYA/5IJRnNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvdmFsdWUvYmluYXJ5L0Nhc3NhbmRyYUJpbmFyeVN0b3JlLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void DatabaseBinaryStore.storeExtractedText(BinaryValue,String)` indirectly reads without synchronization from `this.dataSource`. Potentially races with write in method `DatabaseBinaryStore.start()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":302,"column":-1,"procedure":"org.modeshape.jcr.value.binary.DatabaseBinaryStore.storeExtractedText(org.modeshape.jcr.value.BinaryValue,java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":302,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":302,"column_number":-1,"description":"call to Object DatabaseBinaryStore.dbCall(DatabaseBinaryStore$DBCallable)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":357,"column_number":-1,"description":"call to Connection DatabaseBinaryStore.newConnection()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":328,"column_number":-1,"description":"access to `this.dataSource`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":146,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":146,"column_number":-1,"description":"call to void DatabaseBinaryStore.lookupDataSource()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":338,"column_number":-1,"description":"access to `this.dataSource`"}],"key":"DatabaseBinaryStore.java|storeExtractedText|THREAD_SAFETY_VIOLATION","hash":"1cf8e90401306e6556272b25aca08754","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAJ8AAAAIAAAAOAAAACagsAEBSAD/kglFc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvRGF0YWJhc2VCaW5hcnlTdG9yZS5qYXZhoLABAVIA/5IJRXNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvdmFsdWUvYmluYXJ5L0RhdGFiYXNlQmluYXJ5U3RvcmUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `BinaryKey BinaryValue.getKey()` of un-annotated interface `org.modeshape.jcr.value.BinaryValue`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":566,"column":-1,"procedure":"org.modeshape.jcr.value.binary.FileSystemBinaryStore.storeExtractedText(org.modeshape.jcr.value.BinaryValue,java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":566,"column_number":-1,"description":"call to boolean FileSystemBinaryStore.binaryValueExists(BinaryValue)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":609,"column_number":-1,"description":"Call to un-annotated interface method BinaryKey BinaryValue.getKey()"}],"key":"FileSystemBinaryStore.java|storeExtractedText|INTERFACE_NOT_THREAD_SAFE","hash":"e82af40d0a6bd2ae4346e5d906099b45","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAFIAAAAEAAAAHAAAABOgsAECYQD/kglHc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvRmlsZVN5c3RlbUJpbmFyeVN0b3JlLmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Object DBObject.get(String)` of un-annotated interface `com.mongodb.DBObject`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.binary.AbstractBinaryStore` is annotated `@ThreadSafe`.","severity":"WARNING","line":297,"column":-1,"procedure":"org.modeshape.jcr.value.binary.MongodbBinaryStore.storeExtractedText(org.modeshape.jcr.value.BinaryValue,java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":297,"column_number":-1,"description":"call to void MongodbBinaryStore.setAttribute(DBCollection,String,Object)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":387,"column_number":-1,"description":"Call to un-annotated interface method Object DBObject.get(String)"}],"key":"MongodbBinaryStore.java|storeExtractedText|INTERFACE_NOT_THREAD_SAFE","hash":"3f5264392c9789d859651001cc59f0f1","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE8AAAAEAAAAHAAAABOgsAEBgwD/kglEc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvTW9uZ29kYkJpbmFyeVN0b3JlLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void MongodbBinaryStore.storeExtractedText(BinaryValue,String)` reads without synchronization from `this.db`. Potentially races with write in method `MongodbBinaryStore.start()`.\n Reporting because a superclass `class org.modeshape.jcr.value.binary.AbstractBinaryStore` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":293,"column":-1,"procedure":"org.modeshape.jcr.value.binary.MongodbBinaryStore.storeExtractedText(org.modeshape.jcr.value.BinaryValue,java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":293,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":293,"column_number":-1,"description":"access to `this.db`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":346,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":346,"column_number":-1,"description":"call to void MongodbBinaryStore.initMongoDatabase()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":367,"column_number":-1,"description":"access to `this.db`"}],"key":"MongodbBinaryStore.java|storeExtractedText|THREAD_SAFETY_VIOLATION","hash":"aa952d5a33bc9022987f80a01f29115c","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAJ0AAAAIAAAAOAAAACagsAEBJQD/kglEc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvTW9uZ29kYkJpbmFyeVN0b3JlLmphdmGgsAEBbwD/kglEc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvTW9uZ29kYkJpbmFyeVN0b3JlLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void InfinispanBinaryStore.storeExtractedText(BinaryValue,String)` reads with synchronization from `this.metadataCache`. Potentially races with unsynchronized write in method `InfinispanBinaryStore.start()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":546,"column":-1,"procedure":"org.modeshape.jcr.value.binary.infinispan.InfinispanBinaryStore.storeExtractedText(org.modeshape.jcr.value.BinaryValue,java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":546,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":546,"column_number":-1,"description":"access to `this.metadataCache`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":179,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":179,"column_number":-1,"description":"access to `this.metadataCache`"}],"key":"InfinispanBinaryStore.java|storeExtractedText|THREAD_SAFETY_VIOLATION","hash":"5b49fbde73efde60ead078fc8a793c54","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAALkAAAAIAAAAPgAAACqgsAECIgD/kglSc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvaW5maW5pc3Bhbi9JbmZpbmlzcGFuQmluYXJ5U3RvcmUuamF2YaCwAQCzAP+SCVJzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2JpbmFyeS9pbmZpbmlzcGFuL0luZmluaXNwYW5CaW5hcnlTdG9yZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void InfinispanBinaryStore.storeExtractedText(BinaryValue,String)` reads with synchronization from `this.blobCache`. Potentially races with unsynchronized write in method `InfinispanBinaryStore.start()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":555,"column":-1,"procedure":"org.modeshape.jcr.value.binary.infinispan.InfinispanBinaryStore.storeExtractedText(org.modeshape.jcr.value.BinaryValue,java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":555,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":555,"column_number":-1,"description":"access to `this.blobCache`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":180,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":180,"column_number":-1,"description":"access to `this.blobCache`"}],"key":"InfinispanBinaryStore.java|storeExtractedText|THREAD_SAFETY_VIOLATION","hash":"0cd3e4d2c0d9c43f4295005b49f02ab9","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAALkAAAAIAAAAPgAAACqgsAECKwD/kglSc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvaW5maW5pc3Bhbi9JbmZpbmlzcGFuQmluYXJ5U3RvcmUuamF2YaCwAQC0AP+SCVJzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2JpbmFyeS9pbmZpbmlzcGFuL0luZmluaXNwYW5CaW5hcnlTdG9yZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `BinaryKey BinaryValue.getKey()` of un-annotated interface `org.modeshape.jcr.value.BinaryValue`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":542,"column":-1,"procedure":"org.modeshape.jcr.value.binary.infinispan.InfinispanBinaryStore.storeExtractedText(org.modeshape.jcr.value.BinaryValue,java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":542,"column_number":-1,"description":"Call to un-annotated interface method BinaryKey BinaryValue.getKey()"}],"key":"InfinispanBinaryStore.java|storeExtractedText|INTERFACE_NOT_THREAD_SAFE","hash":"d38b595e5a1f7fcd8077adc9f437534a","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAF0AAAAEAAAAHwAAABWgsAECHgD/kglSc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvaW5maW5pc3Bhbi9JbmZpbmlzcGFuQmluYXJ5U3RvcmUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void InfinispanBinaryStore.storeExtractedText(BinaryValue,String)` reads without synchronization from `this.lockFactory`. Potentially races with write in method `InfinispanBinaryStore.start()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":543,"column":-1,"procedure":"org.modeshape.jcr.value.binary.infinispan.InfinispanBinaryStore.storeExtractedText(org.modeshape.jcr.value.BinaryValue,java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":543,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":543,"column_number":-1,"description":"access to `this.lockFactory`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":181,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":181,"column_number":-1,"description":"access to `this.lockFactory`"}],"key":"InfinispanBinaryStore.java|storeExtractedText|THREAD_SAFETY_VIOLATION","hash":"70555ebd94f83790b567157e15fceb7b","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAALkAAAAIAAAAPgAAACqgsAECHwD/kglSc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvaW5maW5pc3Bhbi9JbmZpbmlzcGFuQmluYXJ5U3RvcmUuamF2YaCwAQC1AP+SCVJzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2JpbmFyeS9pbmZpbmlzcGFuL0luZmluaXNwYW5CaW5hcnlTdG9yZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void CassandraBinaryStore.storeMimeType(BinaryValue,String)` reads without synchronization from `this.session`. Potentially races with write in method `CassandraBinaryStore.start()`.\n Reporting because a superclass `class org.modeshape.jcr.value.binary.AbstractBinaryStore` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":89,"column":-1,"procedure":"org.modeshape.jcr.value.binary.CassandraBinaryStore.storeMimeType(org.modeshape.jcr.value.BinaryValue,java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/CassandraBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/CassandraBinaryStore.java","line_number":89,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/CassandraBinaryStore.java","line_number":89,"column_number":-1,"description":"access to `this.session`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/CassandraBinaryStore.java","line_number":262,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/CassandraBinaryStore.java","line_number":262,"column_number":-1,"description":"access to `this.session`"}],"key":"CassandraBinaryStore.java|storeMimeType|THREAD_SAFETY_VIOLATION","hash":"b1edbd8296f5afcb2a45476de477d29b","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAKAAAAAIAAAAOAAAACagsABZAP+SCUZzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2JpbmFyeS9DYXNzYW5kcmFCaW5hcnlTdG9yZS5qYXZhoLABAQYA/5IJRnNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvdmFsdWUvYmluYXJ5L0Nhc3NhbmRyYUJpbmFyeVN0b3JlLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void DatabaseBinaryStore.storeMimeType(BinaryValue,String)` indirectly reads without synchronization from `this.dataSource`. Potentially races with write in method `DatabaseBinaryStore.start()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":275,"column":-1,"procedure":"org.modeshape.jcr.value.binary.DatabaseBinaryStore.storeMimeType(org.modeshape.jcr.value.BinaryValue,java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":275,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":275,"column_number":-1,"description":"call to Object DatabaseBinaryStore.dbCall(DatabaseBinaryStore$DBCallable)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":357,"column_number":-1,"description":"call to Connection DatabaseBinaryStore.newConnection()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":328,"column_number":-1,"description":"access to `this.dataSource`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":146,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":146,"column_number":-1,"description":"call to void DatabaseBinaryStore.lookupDataSource()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":338,"column_number":-1,"description":"access to `this.dataSource`"}],"key":"DatabaseBinaryStore.java|storeMimeType|THREAD_SAFETY_VIOLATION","hash":"1b6018042f33f4c49f9fe0cddae787e9","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAJ8AAAAIAAAAOAAAACagsAEBSAD/kglFc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvRGF0YWJhc2VCaW5hcnlTdG9yZS5qYXZhoLABAVIA/5IJRXNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvdmFsdWUvYmluYXJ5L0RhdGFiYXNlQmluYXJ5U3RvcmUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `BinaryKey BinaryValue.getKey()` of un-annotated interface `org.modeshape.jcr.value.BinaryValue`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":601,"column":-1,"procedure":"org.modeshape.jcr.value.binary.FileSystemBinaryStore.storeMimeType(org.modeshape.jcr.value.BinaryValue,java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":601,"column_number":-1,"description":"call to boolean FileSystemBinaryStore.binaryValueExists(BinaryValue)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/FileSystemBinaryStore.java","line_number":609,"column_number":-1,"description":"Call to un-annotated interface method BinaryKey BinaryValue.getKey()"}],"key":"FileSystemBinaryStore.java|storeMimeType|INTERFACE_NOT_THREAD_SAFE","hash":"abe151e6d69d79ad33a57de0ad6b1504","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAFIAAAAEAAAAHAAAABOgsAECYQD/kglHc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvRmlsZVN5c3RlbUJpbmFyeVN0b3JlLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void MongodbBinaryStore.storeMimeType(BinaryValue,String)` reads without synchronization from `this.db`. Potentially races with write in method `MongodbBinaryStore.start()`.\n Reporting because a superclass `class org.modeshape.jcr.value.binary.AbstractBinaryStore` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":273,"column":-1,"procedure":"org.modeshape.jcr.value.binary.MongodbBinaryStore.storeMimeType(org.modeshape.jcr.value.BinaryValue,java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":273,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":273,"column_number":-1,"description":"access to `this.db`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":346,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":346,"column_number":-1,"description":"call to void MongodbBinaryStore.initMongoDatabase()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":367,"column_number":-1,"description":"access to `this.db`"}],"key":"MongodbBinaryStore.java|storeMimeType|THREAD_SAFETY_VIOLATION","hash":"f3c44894af50e49040b7e50cf6809a67","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAJ0AAAAIAAAAOAAAACagsAEBEQD/kglEc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvTW9uZ29kYkJpbmFyeVN0b3JlLmphdmGgsAEBbwD/kglEc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvTW9uZ29kYkJpbmFyeVN0b3JlLmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Object DBObject.get(String)` of un-annotated interface `com.mongodb.DBObject`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.binary.AbstractBinaryStore` is annotated `@ThreadSafe`.","severity":"WARNING","line":275,"column":-1,"procedure":"org.modeshape.jcr.value.binary.MongodbBinaryStore.storeMimeType(org.modeshape.jcr.value.BinaryValue,java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":275,"column_number":-1,"description":"call to void MongodbBinaryStore.setAttribute(DBCollection,String,Object)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":387,"column_number":-1,"description":"Call to un-annotated interface method Object DBObject.get(String)"}],"key":"MongodbBinaryStore.java|storeMimeType|INTERFACE_NOT_THREAD_SAFE","hash":"dabf2268750c386a340d0c0aa99a9490","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAE8AAAAEAAAAHAAAABOgsAEBgwD/kglEc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvTW9uZ29kYkJpbmFyeVN0b3JlLmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `BinaryKey BinaryValue.getKey()` of un-annotated interface `org.modeshape.jcr.value.BinaryValue`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":499,"column":-1,"procedure":"org.modeshape.jcr.value.binary.infinispan.InfinispanBinaryStore.storeMimeType(org.modeshape.jcr.value.BinaryValue,java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":499,"column_number":-1,"description":"Call to un-annotated interface method BinaryKey BinaryValue.getKey()"}],"key":"InfinispanBinaryStore.java|storeMimeType|INTERFACE_NOT_THREAD_SAFE","hash":"e01e7424c61d796ece38aeaf81af4e47","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAF0AAAAEAAAAHwAAABWgsAEB8wD/kglSc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvaW5maW5pc3Bhbi9JbmZpbmlzcGFuQmluYXJ5U3RvcmUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void InfinispanBinaryStore.storeMimeType(BinaryValue,String)` reads without synchronization from `this.lockFactory`. Potentially races with write in method `InfinispanBinaryStore.start()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":500,"column":-1,"procedure":"org.modeshape.jcr.value.binary.infinispan.InfinispanBinaryStore.storeMimeType(org.modeshape.jcr.value.BinaryValue,java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":500,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":500,"column_number":-1,"description":"access to `this.lockFactory`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":181,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":181,"column_number":-1,"description":"access to `this.lockFactory`"}],"key":"InfinispanBinaryStore.java|storeMimeType|THREAD_SAFETY_VIOLATION","hash":"7ff10ad1fedcabf68fa80b4df8d5cb33","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAALkAAAAIAAAAPgAAACqgsAEB9AD/kglSc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvaW5maW5pc3Bhbi9JbmZpbmlzcGFuQmluYXJ5U3RvcmUuamF2YaCwAQC1AP+SCVJzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2JpbmFyeS9pbmZpbmlzcGFuL0luZmluaXNwYW5CaW5hcnlTdG9yZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void InfinispanBinaryStore.storeMimeType(BinaryValue,String)` reads with synchronization from `this.metadataCache`. Potentially races with unsynchronized write in method `InfinispanBinaryStore.start()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":503,"column":-1,"procedure":"org.modeshape.jcr.value.binary.infinispan.InfinispanBinaryStore.storeMimeType(org.modeshape.jcr.value.BinaryValue,java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":503,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":503,"column_number":-1,"description":"access to `this.metadataCache`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":179,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":179,"column_number":-1,"description":"access to `this.metadataCache`"}],"key":"InfinispanBinaryStore.java|storeMimeType|THREAD_SAFETY_VIOLATION","hash":"c433f514b8e38e31118ab08a501a7be9","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAALkAAAAIAAAAPgAAACqgsAEB9wD/kglSc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvaW5maW5pc3Bhbi9JbmZpbmlzcGFuQmluYXJ5U3RvcmUuamF2YaCwAQCzAP+SCVJzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2JpbmFyeS9pbmZpbmlzcGFuL0luZmluaXNwYW5CaW5hcnlTdG9yZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `BinaryValue CassandraBinaryStore.storeValue(InputStream,boolean)` indirectly reads with synchronization from `this.session`. Potentially races with unsynchronized write in method `CassandraBinaryStore.start()`.\n Reporting because a superclass `class org.modeshape.jcr.value.binary.AbstractBinaryStore` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":131,"column":-1,"procedure":"org.modeshape.jcr.value.binary.CassandraBinaryStore.storeValue(java.io.InputStream,boolean):org.modeshape.jcr.value.BinaryValue","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/CassandraBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/CassandraBinaryStore.java","line_number":131,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/CassandraBinaryStore.java","line_number":131,"column_number":-1,"description":"call to boolean CassandraBinaryStore.contentExists(BinaryKey,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/CassandraBinaryStore.java","line_number":303,"column_number":-1,"description":"access to `this.session`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/CassandraBinaryStore.java","line_number":262,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/CassandraBinaryStore.java","line_number":262,"column_number":-1,"description":"access to `this.session`"}],"key":"CassandraBinaryStore.java|storeValue|THREAD_SAFETY_VIOLATION","hash":"ac6e58ed5cf70eb3f6cbf3092bf2571f","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAKEAAAAIAAAAOAAAACagsAEBLwD/kglGc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvQ2Fzc2FuZHJhQmluYXJ5U3RvcmUuamF2YaCwAQEGAP+SCUZzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2JpbmFyeS9DYXNzYW5kcmFCaW5hcnlTdG9yZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `BinaryValue CompositeBinaryStore.storeValue(InputStream,boolean)` indirectly writes to field `this.defaultBinaryStore` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.value.binary.BinaryStore` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":145,"column":-1,"procedure":"org.modeshape.jcr.value.binary.CompositeBinaryStore.storeValue(java.io.InputStream,boolean):org.modeshape.jcr.value.BinaryValue","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/CompositeBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/CompositeBinaryStore.java","line_number":145,"column_number":-1,"description":"call to BinaryValue CompositeBinaryStore.storeValue(InputStream,String,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/CompositeBinaryStore.java","line_number":150,"column_number":-1,"description":"call to BinaryStore CompositeBinaryStore.selectBinaryStore(String)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/binary/CompositeBinaryStore.java","line_number":427,"column_number":-1,"description":"call to BinaryStore CompositeBinaryStore.getDefaultBinaryStore()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/value/binary/CompositeBinaryStore.java","line_number":438,"column_number":-1,"description":"access to `this.defaultBinaryStore`"}],"key":"CompositeBinaryStore.java|storeValue|THREAD_SAFETY_VIOLATION","hash":"73b1cc946f0f4cbe7d27096f4413a79a","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFEAAAAEAAAAHAAAABOgsAEBtgD/kglGc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvQ29tcG9zaXRlQmluYXJ5U3RvcmUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `BinaryValue DatabaseBinaryStore.storeValue(InputStream,boolean)` indirectly reads with synchronization from `this.dataSource`. Potentially races with unsynchronized write in method `DatabaseBinaryStore.start()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":173,"column":-1,"procedure":"org.modeshape.jcr.value.binary.DatabaseBinaryStore.storeValue(java.io.InputStream,boolean):org.modeshape.jcr.value.BinaryValue","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":173,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":173,"column_number":-1,"description":"call to Object DatabaseBinaryStore.dbCall(DatabaseBinaryStore$DBCallable)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":357,"column_number":-1,"description":"call to Connection DatabaseBinaryStore.newConnection()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":328,"column_number":-1,"description":"access to `this.dataSource`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":146,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":146,"column_number":-1,"description":"call to void DatabaseBinaryStore.lookupDataSource()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/DatabaseBinaryStore.java","line_number":338,"column_number":-1,"description":"access to `this.dataSource`"}],"key":"DatabaseBinaryStore.java|storeValue|THREAD_SAFETY_VIOLATION","hash":"f3676f1c9f1279a07a42a07fc7c02d6b","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAJ8AAAAIAAAAOAAAACagsAEBSAD/kglFc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvRGF0YWJhc2VCaW5hcnlTdG9yZS5qYXZhoLABAVIA/5IJRXNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvdmFsdWUvYmluYXJ5L0RhdGFiYXNlQmluYXJ5U3RvcmUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `BinaryValue MongodbBinaryStore.storeValue(InputStream,boolean)` reads with synchronization from `this.db`. Potentially races with unsynchronized write in method `MongodbBinaryStore.start()`.\n Reporting because a superclass `class org.modeshape.jcr.value.binary.AbstractBinaryStore` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":207,"column":-1,"procedure":"org.modeshape.jcr.value.binary.MongodbBinaryStore.storeValue(java.io.InputStream,boolean):org.modeshape.jcr.value.BinaryValue","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":207,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":207,"column_number":-1,"description":"access to `this.db`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":346,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":346,"column_number":-1,"description":"call to void MongodbBinaryStore.initMongoDatabase()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/MongodbBinaryStore.java","line_number":367,"column_number":-1,"description":"access to `this.db`"}],"key":"MongodbBinaryStore.java|storeValue|THREAD_SAFETY_VIOLATION","hash":"283b33c7574a93a05d49062ef290d810","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAJ0AAAAIAAAAOAAAACagsAEAzwD/kglEc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvTW9uZ29kYkJpbmFyeVN0b3JlLmphdmGgsAEBbwD/kglEc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvTW9uZ29kYkJpbmFyeVN0b3JlLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `BinaryValue InfinispanBinaryStore.storeValue(InputStream,boolean)` indirectly reads without synchronization from `metadata.unusedSince`. Potentially races with write in method `InfinispanBinaryStore.storeValue(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":238,"column":-1,"procedure":"org.modeshape.jcr.value.binary.infinispan.InfinispanBinaryStore.storeValue(java.io.InputStream,boolean):org.modeshape.jcr.value.BinaryValue","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":238,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":238,"column_number":-1,"description":"call to boolean Metadata.isUnused()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/Metadata.java","line_number":100,"column_number":-1,"description":"access to `metadata.unusedSince`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":239,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":239,"column_number":-1,"description":"call to void Metadata.markAsUsed()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/Metadata.java","line_number":108,"column_number":-1,"description":"access to `metadata.unusedSince`"}],"key":"InfinispanBinaryStore.java|storeValue|THREAD_SAFETY_VIOLATION","hash":"0feab5029a8fe00500cb14e0eecbc3a0","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAJ0AAAAIAAAAOAAAACagsABkAP+SCUVzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2JpbmFyeS9pbmZpbmlzcGFuL01ldGFkYXRhLmphdmGgsABsAP+SCUVzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2JpbmFyeS9pbmZpbmlzcGFuL01ldGFkYXRhLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `BinaryValue InfinispanBinaryStore.storeValue(InputStream,boolean)` reads without synchronization from `this.metadataCache`. Potentially races with write in method `InfinispanBinaryStore.start()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":234,"column":-1,"procedure":"org.modeshape.jcr.value.binary.infinispan.InfinispanBinaryStore.storeValue(java.io.InputStream,boolean):org.modeshape.jcr.value.BinaryValue","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":234,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":234,"column_number":-1,"description":"access to `this.metadataCache`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":179,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":179,"column_number":-1,"description":"access to `this.metadataCache`"}],"key":"InfinispanBinaryStore.java|storeValue|THREAD_SAFETY_VIOLATION","hash":"5f3e76560d485701eeb80ce1f603a6ba","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAALkAAAAIAAAAPgAAACqgsAEA6gD/kglSc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvaW5maW5pc3Bhbi9JbmZpbmlzcGFuQmluYXJ5U3RvcmUuamF2YaCwAQCzAP+SCVJzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2JpbmFyeS9pbmZpbmlzcGFuL0luZmluaXNwYW5CaW5hcnlTdG9yZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `BinaryValue InfinispanBinaryStore.storeValue(InputStream,boolean)` reads without synchronization from `this.lockFactory`. Potentially races with write in method `InfinispanBinaryStore.start()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":256,"column":-1,"procedure":"org.modeshape.jcr.value.binary.infinispan.InfinispanBinaryStore.storeValue(java.io.InputStream,boolean):org.modeshape.jcr.value.BinaryValue","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":256,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":256,"column_number":-1,"description":"access to `this.lockFactory`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":181,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":181,"column_number":-1,"description":"access to `this.lockFactory`"}],"key":"InfinispanBinaryStore.java|storeValue|THREAD_SAFETY_VIOLATION","hash":"d95df6f61f6c161b4426fb7ac1d79144","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAALkAAAAIAAAAPgAAACqgsAEBAAD/kglSc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvaW5maW5pc3Bhbi9JbmZpbmlzcGFuQmluYXJ5U3RvcmUuamF2YaCwAQC1AP+SCVJzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2JpbmFyeS9pbmZpbmlzcGFuL0luZmluaXNwYW5CaW5hcnlTdG9yZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `BinaryValue InfinispanBinaryStore.storeValue(InputStream,boolean)` reads without synchronization from `this.blobCache`. Potentially races with write in method `InfinispanBinaryStore.start()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":253,"column":-1,"procedure":"org.modeshape.jcr.value.binary.infinispan.InfinispanBinaryStore.storeValue(java.io.InputStream,boolean):org.modeshape.jcr.value.BinaryValue","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":253,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":253,"column_number":-1,"description":"access to `this.blobCache`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":180,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":180,"column_number":-1,"description":"access to `this.blobCache`"}],"key":"InfinispanBinaryStore.java|storeValue|THREAD_SAFETY_VIOLATION","hash":"c5925fccfd924a7eebc3beb06db580cb","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAALkAAAAIAAAAPgAAACqgsAEA/QD/kglSc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvaW5maW5pc3Bhbi9JbmZpbmlzcGFuQmluYXJ5U3RvcmUuamF2YaCwAQC0AP+SCVJzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2JpbmFyeS9pbmZpbmlzcGFuL0luZmluaXNwYW5CaW5hcnlTdG9yZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `BinaryValue InfinispanBinaryStore.storeValue(InputStream,boolean)` indirectly writes to field `metadata.unusedSince` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":239,"column":-1,"procedure":"org.modeshape.jcr.value.binary.infinispan.InfinispanBinaryStore.storeValue(java.io.InputStream,boolean):org.modeshape.jcr.value.BinaryValue","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/InfinispanBinaryStore.java","line_number":239,"column_number":-1,"description":"call to void Metadata.markAsUsed()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/infinispan/Metadata.java","line_number":108,"column_number":-1,"description":"access to `metadata.unusedSince`"}],"key":"InfinispanBinaryStore.java|storeValue|THREAD_SAFETY_VIOLATION","hash":"aaa8a13a9597ec32bd14153d86beb5a9","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAE8AAAAEAAAAHAAAABOgsABsAP+SCUVzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3ZhbHVlL2JpbmFyeS9pbmZpbmlzcGFuL01ldGFkYXRhLmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `BinaryKey BinaryValue.getKey()` of un-annotated interface `org.modeshape.jcr.value.BinaryValue`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because a superclass `class org.modeshape.jcr.value.binary.BinaryStore` is annotated `@ThreadSafe`.","severity":"WARNING","line":152,"column":-1,"procedure":"org.modeshape.jcr.value.binary.CompositeBinaryStore.storeValue(java.io.InputStream,java.lang.String,boolean):org.modeshape.jcr.value.BinaryValue","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/CompositeBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/CompositeBinaryStore.java","line_number":152,"column_number":-1,"description":"Call to un-annotated interface method BinaryKey BinaryValue.getKey()"}],"key":"CompositeBinaryStore.java|storeValue|INTERFACE_NOT_THREAD_SAFE","hash":"b4dc9afc0dca67f20ebdbabcc777d11c","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAFEAAAAEAAAAHAAAABOgsAEAmAD/kglGc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvQ29tcG9zaXRlQmluYXJ5U3RvcmUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `BinaryValue CompositeBinaryStore.storeValue(InputStream,String,boolean)` indirectly writes to field `this.defaultBinaryStore` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.value.binary.BinaryStore` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":150,"column":-1,"procedure":"org.modeshape.jcr.value.binary.CompositeBinaryStore.storeValue(java.io.InputStream,java.lang.String,boolean):org.modeshape.jcr.value.BinaryValue","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/value/binary/CompositeBinaryStore.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/value/binary/CompositeBinaryStore.java","line_number":150,"column_number":-1,"description":"call to BinaryStore CompositeBinaryStore.selectBinaryStore(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/value/binary/CompositeBinaryStore.java","line_number":427,"column_number":-1,"description":"call to BinaryStore CompositeBinaryStore.getDefaultBinaryStore()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/value/binary/CompositeBinaryStore.java","line_number":438,"column_number":-1,"description":"access to `this.defaultBinaryStore`"}],"key":"CompositeBinaryStore.java|storeValue|THREAD_SAFETY_VIOLATION","hash":"c524e4990eb4e7ce503756346f3850a5","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFEAAAAEAAAAHAAAABOgsAEBtgD/kglGc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci92YWx1ZS9iaW5hcnkvQ29tcG9zaXRlQmluYXJ5U3RvcmUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `String AbstractJcrNode.toString()` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":3519,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.toString():java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3519,"column_number":-1,"description":"call to PropertyIterator AbstractJcrNode.getProperties()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2073,"column_number":-1,"description":"call to Collection AbstractJcrNode.findJcrProperties(Iterator)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2058,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|toString|THREAD_SAFETY_VIOLATION","hash":"116616e1b028a8d4726488f1ce781626","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `boolean PropertyIterator.hasNext()` of un-annotated interface `javax.jcr.PropertyIterator`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":3521,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.toString():java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3521,"column_number":-1,"description":"Call to un-annotated interface method boolean PropertyIterator.hasNext()"}],"key":"AbstractJcrNode.java|toString|INTERFACE_NOT_THREAD_SAFE","hash":"8d8f521c97c9618b8988199de960866c","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAENwQD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String Name.getString(NamespaceRegistry)` of un-annotated interface `org.modeshape.jcr.value.Name`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":613,"column":-1,"procedure":"org.modeshape.jcr.JcrNodeType.toString():java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrNodeType.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":613,"column_number":-1,"description":"call to String JcrNodeType.getName()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":499,"column_number":-1,"description":"Call to un-annotated interface method String Name.getString(NamespaceRegistry)"}],"key":"JcrNodeType.java|toString|INTERFACE_NOT_THREAD_SAFE","hash":"5b8352f8a0fb6cd5ff5061636f0d8441","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAADsAAAAEAAAAFwAAABGgsAEB8wD/kgkwc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JOb2RlVHlwZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `String JcrSystemNode.toString()` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.toString():java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to String AbstractJcrNode.toString()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3519,"column_number":-1,"description":"call to PropertyIterator AbstractJcrNode.getProperties()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2073,"column_number":-1,"description":"call to Collection AbstractJcrNode.findJcrProperties(Iterator)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2058,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrSystemNode.java|toString|THREAD_SAFETY_VIOLATION","hash":"2b9ebd4424406f5eaa34fec8283b428d","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `String JcrVersionHistoryNode.toString()` indirectly reads without synchronization from `nodeKey.workspaceKey`. Potentially races with write in method `JcrVersionHistoryNode.addVersionLabel(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":392,"column":-1,"procedure":"org.modeshape.jcr.JcrVersionHistoryNode.toString():java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":392,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":392,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.getNonSystemNodeByIdentifier(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":832,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":165,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":315,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":315,"column_number":-1,"description":"call to AbstractJcrNode JcrVersionHistoryNode.versionLabels()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":77,"column_number":-1,"description":"call to AbstractJcrNode AbstractJcrNode.childNode(Name,AbstractJcrNode$Type)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":690,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"JcrVersionHistoryNode.java|toString|THREAD_SAFETY_VIOLATION","hash":"70cf26b9e1ddee5432cf29a6a67a43ca","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAHkAAAAIAAAALgAAACKgsAEApQD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `String JcrVersionHistoryNode.toString()` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":394,"column":-1,"procedure":"org.modeshape.jcr.JcrVersionHistoryNode.toString():java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":394,"column_number":-1,"description":"call to VersionIterator JcrVersionHistoryNode.getAllLinearVersions()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":366,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.getNonSystemNodeByIdentifier(String)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":832,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"JcrVersionHistoryNode.java|toString|THREAD_SAFETY_VIOLATION","hash":"865e98afad96b1edb43e39e124542f64","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `String JcrVersionHistoryNode.toString()` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":391,"column":-1,"procedure":"org.modeshape.jcr.JcrVersionHistoryNode.toString():java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":391,"column_number":-1,"description":"call to String JcrVersionHistoryNode.getVersionableIdentifier()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":384,"column_number":-1,"description":"call to String JcrVersionHistoryNode.getVersionableUUID()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":163,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrVersionHistoryNode.java|toString|THREAD_SAFETY_VIOLATION","hash":"bb810501b3eebc98df8c4e121685550b","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String Version.getName()` of un-annotated interface `javax.jcr.version.Version`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":397,"column":-1,"procedure":"org.modeshape.jcr.JcrVersionHistoryNode.toString():java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":397,"column_number":-1,"description":"Call to un-annotated interface method String Version.getName()"}],"key":"JcrVersionHistoryNode.java|toString|INTERFACE_NOT_THREAD_SAFE","hash":"3c1e37c5e18460a6e430b039c3a412c5","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBjQD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JWZXJzaW9uSGlzdG9yeU5vZGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `String RecordingChanges.toString()` reads without synchronization from `this.nodeKeys`. Potentially races with write in method `RecordingChanges.setChangedNodes(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":372,"column":-1,"procedure":"org.modeshape.jcr.cache.change.RecordingChanges.toString():java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/change/RecordingChanges.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/change/RecordingChanges.java","line_number":372,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/change/RecordingChanges.java","line_number":372,"column_number":-1,"description":"access to `this.nodeKeys`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/change/RecordingChanges.java","line_number":291,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/change/RecordingChanges.java","line_number":291,"column_number":-1,"description":"access to `this.nodeKeys`"}],"key":"RecordingChanges.java|toString|THREAD_SAFETY_VIOLATION","hash":"c44972234d56da1aeead7d784f45315d","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAJkAAAAIAAAANgAAACagsAEBdAD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9jaGFuZ2UvUmVjb3JkaW5nQ2hhbmdlcy5qYXZhoLABASMA/5IJQnNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvY2FjaGUvY2hhbmdlL1JlY29yZGluZ0NoYW5nZXMuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `String RecordingChanges.toString()` reads without synchronization from `this.userData`. Potentially races with write in method `RecordingChanges.freeze(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":361,"column":-1,"procedure":"org.modeshape.jcr.cache.change.RecordingChanges.toString():java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/change/RecordingChanges.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/change/RecordingChanges.java","line_number":361,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/change/RecordingChanges.java","line_number":361,"column_number":-1,"description":"access to `this.userData`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/change/RecordingChanges.java","line_number":307,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/change/RecordingChanges.java","line_number":307,"column_number":-1,"description":"access to `this.userData`"}],"key":"RecordingChanges.java|toString|THREAD_SAFETY_VIOLATION","hash":"04e73dcf175684958e279c8cd651bf9a","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAJkAAAAIAAAANgAAACagsAEBaQD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9jaGFuZ2UvUmVjb3JkaW5nQ2hhbmdlcy5qYXZhoLABATMA/5IJQnNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvY2FjaGUvY2hhbmdlL1JlY29yZGluZ0NoYW5nZXMuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `String RecordingChanges.toString()` indirectly reads without synchronization from `this.timestamp`. Potentially races with write in method `RecordingChanges.freeze(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":360,"column":-1,"procedure":"org.modeshape.jcr.cache.change.RecordingChanges.toString():java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/change/RecordingChanges.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/change/RecordingChanges.java","line_number":360,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/change/RecordingChanges.java","line_number":360,"column_number":-1,"description":"call to DateTime RecordingChanges.getTimestamp()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/change/RecordingChanges.java","line_number":329,"column_number":-1,"description":"access to `this.timestamp`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/change/RecordingChanges.java","line_number":309,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/change/RecordingChanges.java","line_number":309,"column_number":-1,"description":"access to `this.timestamp`"}],"key":"RecordingChanges.java|toString|THREAD_SAFETY_VIOLATION","hash":"34a2d6b39bf44c52ef0b0ec6fcb92359","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAJkAAAAIAAAANgAAACagsAEBSQD/kglCc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9jaGFuZ2UvUmVjb3JkaW5nQ2hhbmdlcy5qYXZhoLABATUA/5IJQnNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvY2FjaGUvY2hhbmdlL1JlY29yZGluZ0NoYW5nZXMuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String Name.getString(NamespaceRegistry)` of un-annotated interface `org.modeshape.jcr.value.Name`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":1647,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.toString():java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1647,"column_number":-1,"description":"call to String SessionNode.getString(NamespaceRegistry)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1700,"column_number":-1,"description":"Call to un-annotated interface method String Name.getString(NamespaceRegistry)"}],"key":"SessionNode.java|toString|INTERFACE_NOT_THREAD_SAFE","hash":"df04c46f043a7b6fc25744df44c93f8b","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEoAAAAEAAAAGgAAABKgsAEGpAD/kgk/c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9TZXNzaW9uTm9kZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `String Name.getString(NamespaceRegistry)` of un-annotated interface `org.modeshape.jcr.value.Name`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":1728,"column":-1,"procedure":"org.modeshape.jcr.cache.document.WritableSessionCache.toString():java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":1728,"column_number":-1,"description":"call to String SessionNode.getString(NamespaceRegistry)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":1700,"column_number":-1,"description":"Call to un-annotated interface method String Name.getString(NamespaceRegistry)"}],"key":"WritableSessionCache.java|toString|INTERFACE_NOT_THREAD_SAFE","hash":"826521e08755715f888ca6d9e5652b05","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEoAAAAEAAAAGgAAABKgsAEGpAD/kgk/c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9TZXNzaW9uTm9kZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `String WritableSessionCache.toString()` reads without synchronization from `this.changedNodes`. Potentially races with write in method `WritableSessionCache.save()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":1723,"column":-1,"procedure":"org.modeshape.jcr.cache.document.WritableSessionCache.toString():java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":1723,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":1723,"column_number":-1,"description":"access to `this.changedNodes`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":432,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":432,"column_number":-1,"description":"call to void WritableSessionCache.save(SessionCache$PreSave)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":489,"column_number":-1,"description":"call to void WritableSessionCache.clearState()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/WritableSessionCache.java","line_number":573,"column_number":-1,"description":"access to `this.changedNodes`"}],"key":"WritableSessionCache.java|toString|THREAD_SAFETY_VIOLATION","hash":"3aa49581915c9f4448de178a8c8491a1","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAKUAAAAIAAAAOgAAACigsAEGuwD/kglIc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9Xcml0YWJsZVNlc3Npb25DYWNoZS5qYXZhoLABAj0A/5IJSHNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvY2FjaGUvZG9jdW1lbnQvV3JpdGFibGVTZXNzaW9uQ2FjaGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `String ClusteringService.toString()` indirectly reads without synchronization from `this.channel`. Potentially races with write in method `ClusteringService.restart()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":285,"column":-1,"procedure":"org.modeshape.jcr.clustering.ClusteringService.toString():java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","line_number":285,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","line_number":285,"column_number":-1,"description":"call to String ClusteringService.clusterName()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","line_number":245,"column_number":-1,"description":"access to `this.channel`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","line_number":141,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","line_number":141,"column_number":-1,"description":"call to boolean ClusteringService.shutdown()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/clustering/ClusteringService.java","line_number":177,"column_number":-1,"description":"access to `this.channel`"}],"key":"ClusteringService.java|toString|THREAD_SAFETY_VIOLATION","hash":"93480d2183a95a35c46659286ef654d9","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAJcAAAAIAAAANgAAACagsAEA9QD/kglBc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jbHVzdGVyaW5nL0NsdXN0ZXJpbmdTZXJ2aWNlLmphdmGgsAEAsQD/kglBc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jbHVzdGVyaW5nL0NsdXN0ZXJpbmdTZXJ2aWNlLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `StringBuilder BucketedChildReferences.toString(StringBuilder)` reads without synchronization from container `this.rangeBucketsById` via call to `values`. Potentially races with write in method `BucketedChildReferences.getChildCount(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":261,"column":-1,"procedure":"org.modeshape.jcr.cache.document.BucketedChildReferences.toString(java.lang.StringBuilder):java.lang.StringBuilder","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":261,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":261,"column_number":-1,"description":"Read of container `this.rangeBucketsById` via call to `values`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":88,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":88,"column_number":-1,"description":"call to BucketedChildReferences$Bucket BucketedChildReferences.bucketFor(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":269,"column_number":-1,"description":"call to BucketedChildReferences$Bucket BucketedChildReferences.loadBucket(BucketId)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/document/BucketedChildReferences.java","line_number":284,"column_number":-1,"description":"Write to container `this.rangeBucketsById` via call to `put`"}],"key":"BucketedChildReferences.java|toString|THREAD_SAFETY_VIOLATION","hash":"24581b765ac501c059e34cf681b676e6","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAKsAAAAIAAAAOgAAACigsAEBBQD/kglLc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9CdWNrZXRlZENoaWxkUmVmZXJlbmNlcy5qYXZhoLABARwA/5IJS3NyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvY2FjaGUvZG9jdW1lbnQvQnVja2V0ZWRDaGlsZFJlZmVyZW5jZXMuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void AbstractJcrNode.unlock()` indirectly mutates container `ace.privileges` via call to `addAll` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":3330,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.unlock():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3330,"column_number":-1,"description":"call to void JcrLockManager.unlock(AbstractJcrNode)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrLockManager.java","line_number":298,"column_number":-1,"description":"call to void JcrSession.checkPermission(String,Path,java.lang.String[])"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1559,"column_number":-1,"description":"call to void JcrSession.checkPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1567,"column_number":-1,"description":"call to boolean JcrSession.hasPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1375,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPermission(Path,java.lang.String[])"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":322,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPrivileges(String,javax.jcr.security.Privilege[])"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":109,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.getApplicableACL(String)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":114,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.findAccessList(String,boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":289,"column_number":-1,"description":"call to boolean JcrAccessControlList.addAccessControlEntry(Principal,javax.jcr.security.Privilege[])"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/security/acl/JcrAccessControlList.java","line_number":113,"column_number":-1,"description":"call to boolean AccessControlEntryImpl.addIfNotPresent(javax.jcr.security.Privilege[])"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/security/acl/AccessControlEntryImpl.java","line_number":103,"column_number":-1,"description":"Write to container `ace.privileges` via call to `addAll`"}],"key":"AbstractJcrNode.java|unlock|THREAD_SAFETY_VIOLATION","hash":"fa58f66237688f132e01ba641701b763","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFIAAAAEAAAAHQAAABSgsABnAP+SCUhzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3NlY3VyaXR5L2FjbC9BY2Nlc3NDb250cm9sRW50cnlJbXBsLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void JcrSystemNode.unlock()` indirectly mutates container `ace.privileges` via call to `addAll` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.unlock():void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to void AbstractJcrNode.unlock()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3330,"column_number":-1,"description":"call to void JcrLockManager.unlock(AbstractJcrNode)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrLockManager.java","line_number":298,"column_number":-1,"description":"call to void JcrSession.checkPermission(String,Path,java.lang.String[])"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1559,"column_number":-1,"description":"call to void JcrSession.checkPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1567,"column_number":-1,"description":"call to boolean JcrSession.hasPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1375,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPermission(Path,java.lang.String[])"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":322,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPrivileges(String,javax.jcr.security.Privilege[])"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":109,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.getApplicableACL(String)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":114,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.findAccessList(String,boolean)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":289,"column_number":-1,"description":"call to boolean JcrAccessControlList.addAccessControlEntry(Principal,javax.jcr.security.Privilege[])"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/security/acl/JcrAccessControlList.java","line_number":113,"column_number":-1,"description":"call to boolean AccessControlEntryImpl.addIfNotPresent(javax.jcr.security.Privilege[])"},{"level":11,"filename":"src/main/java/org/modeshape/jcr/security/acl/AccessControlEntryImpl.java","line_number":103,"column_number":-1,"description":"Write to container `ace.privileges` via call to `addAll`"}],"key":"JcrSystemNode.java|unlock|THREAD_SAFETY_VIOLATION","hash":"5ef6d5d8d30c2c82e9fe6c603a912d5c","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFIAAAAEAAAAHQAAABSgsABnAP+SCUhzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3NlY3VyaXR5L2FjbC9BY2Nlc3NDb250cm9sRW50cnlJbXBsLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void JcrLockManager.unlock(String)` indirectly mutates container `ace.privileges` via call to `addAll` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":284,"column":-1,"procedure":"org.modeshape.jcr.JcrLockManager.unlock(java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrLockManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrLockManager.java","line_number":284,"column_number":-1,"description":"call to void JcrLockManager.unlock(AbstractJcrNode)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrLockManager.java","line_number":298,"column_number":-1,"description":"call to void JcrSession.checkPermission(String,Path,java.lang.String[])"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1559,"column_number":-1,"description":"call to void JcrSession.checkPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1567,"column_number":-1,"description":"call to boolean JcrSession.hasPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1375,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPermission(Path,java.lang.String[])"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":322,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPrivileges(String,javax.jcr.security.Privilege[])"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":109,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.getApplicableACL(String)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":114,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.findAccessList(String,boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":289,"column_number":-1,"description":"call to boolean JcrAccessControlList.addAccessControlEntry(Principal,javax.jcr.security.Privilege[])"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/security/acl/JcrAccessControlList.java","line_number":113,"column_number":-1,"description":"call to boolean AccessControlEntryImpl.addIfNotPresent(javax.jcr.security.Privilege[])"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/security/acl/AccessControlEntryImpl.java","line_number":103,"column_number":-1,"description":"Write to container `ace.privileges` via call to `addAll`"}],"key":"JcrLockManager.java|unlock|THREAD_SAFETY_VIOLATION","hash":"afdaf9a39bb21d50b530a8bd5c1d89eb","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFIAAAAEAAAAHQAAABSgsABnAP+SCUhzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3NlY3VyaXR5L2FjbC9BY2Nlc3NDb250cm9sRW50cnlJbXBsLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void JcrLockManager.unlock(String)` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":283,"column":-1,"procedure":"org.modeshape.jcr.JcrLockManager.unlock(java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrLockManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrLockManager.java","line_number":283,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(Path)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":677,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,Path)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":659,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"JcrLockManager.java|unlock|THREAD_SAFETY_VIOLATION","hash":"2f4262fcbfdf73cbd7ae22fd6ae2f4f6","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `void SessionCache.destroy(NodeKey)` of un-annotated interface `org.modeshape.jcr.cache.SessionCache`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":306,"column":-1,"procedure":"org.modeshape.jcr.JcrLockManager.unlock(org.modeshape.jcr.AbstractJcrNode):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrLockManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrLockManager.java","line_number":306,"column_number":-1,"description":"call to String RepositoryLockManager.unlock(JcrSession,NodeKey)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","line_number":423,"column_number":-1,"description":"call to void RepositoryLockManager.unlock(JcrSession,Iterable)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","line_number":441,"column_number":-1,"description":"call to void SystemContent.removeLock(RepositoryLockManager$ModeShapeLock)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/SystemContent.java","line_number":1103,"column_number":-1,"description":"Call to un-annotated interface method void SessionCache.destroy(NodeKey)"}],"key":"JcrLockManager.java|unlock|INTERFACE_NOT_THREAD_SAFE","hash":"ad462d2ab94f3630d0d538cc79adc649","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEETwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9TeXN0ZW1Db250ZW50LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void JcrLockManager.unlock(AbstractJcrNode)` indirectly mutates container `ace.privileges` via call to `addAll` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":298,"column":-1,"procedure":"org.modeshape.jcr.JcrLockManager.unlock(org.modeshape.jcr.AbstractJcrNode):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrLockManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrLockManager.java","line_number":298,"column_number":-1,"description":"call to void JcrSession.checkPermission(String,Path,java.lang.String[])"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1559,"column_number":-1,"description":"call to void JcrSession.checkPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1567,"column_number":-1,"description":"call to boolean JcrSession.hasPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1375,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPermission(Path,java.lang.String[])"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":322,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPrivileges(String,javax.jcr.security.Privilege[])"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":109,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.getApplicableACL(String)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":114,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.findAccessList(String,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":289,"column_number":-1,"description":"call to boolean JcrAccessControlList.addAccessControlEntry(Principal,javax.jcr.security.Privilege[])"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/security/acl/JcrAccessControlList.java","line_number":113,"column_number":-1,"description":"call to boolean AccessControlEntryImpl.addIfNotPresent(javax.jcr.security.Privilege[])"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/security/acl/AccessControlEntryImpl.java","line_number":103,"column_number":-1,"description":"Write to container `ace.privileges` via call to `addAll`"}],"key":"JcrLockManager.java|unlock|THREAD_SAFETY_VIOLATION","hash":"2aa8b261d07783ae7e4cbee54da844d4","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFIAAAAEAAAAHQAAABSgsABnAP+SCUhzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3NlY3VyaXR5L2FjbC9BY2Nlc3NDb250cm9sRW50cnlJbXBsLmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `void SessionCache.destroy(NodeKey)` of un-annotated interface `org.modeshape.jcr.cache.SessionCache`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":423,"column":-1,"procedure":"org.modeshape.jcr.RepositoryLockManager.unlock(org.modeshape.jcr.JcrSession,org.modeshape.jcr.cache.NodeKey):java.lang.String","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","line_number":423,"column_number":-1,"description":"call to void RepositoryLockManager.unlock(JcrSession,Iterable)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","line_number":441,"column_number":-1,"description":"call to void SystemContent.removeLock(RepositoryLockManager$ModeShapeLock)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/SystemContent.java","line_number":1103,"column_number":-1,"description":"Call to un-annotated interface method void SessionCache.destroy(NodeKey)"}],"key":"RepositoryLockManager.java|unlock|INTERFACE_NOT_THREAD_SAFE","hash":"af7d25a7d9ae8aba6b97963cf0e9d246","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEETwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9TeXN0ZW1Db250ZW50LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `boolean IndexWriter.canBeSkipped()` of un-annotated interface `org.modeshape.jcr.spi.index.IndexWriter`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":342,"column":-1,"procedure":"org.modeshape.jcr.RepositoryIndexManager.unregister(java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":342,"column_number":-1,"description":"call to void RepositoryIndexManager.refreshIndexWriter()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":233,"column_number":-1,"description":"call to IndexWriter CompositeIndexWriter.create(Iterable)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/query/CompositeIndexWriter.java","line_number":39,"column_number":-1,"description":"Call to un-annotated interface method boolean IndexWriter.canBeSkipped()"}],"key":"RepositoryIndexManager.java|unregister|INTERFACE_NOT_THREAD_SAFE","hash":"6d506fb310c7a1f2d2cfafa1625a8578","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEgAAAAEAAAAGgAAABKgsGcA/5IJP3NyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvcXVlcnkvQ29tcG9zaXRlSW5kZXhXcml0ZXIuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void RepositoryIndexManager.unregister(String)` indirectly mutates container `indexes` via call to `add` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":339,"column":-1,"procedure":"org.modeshape.jcr.RepositoryIndexManager.unregister(java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":339,"column_number":-1,"description":"call to RepositoryIndexes RepositoryIndexManager.readIndexDefinitions()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":817,"column_number":-1,"description":"call to RepositoryIndexManager$Indexes.<init>(ExecutionContext,Collection,NodeTypes)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":883,"column_number":-1,"description":"Write to container `indexes` via call to `add`"}],"key":"RepositoryIndexManager.java|unregister|THREAD_SAFETY_VIOLATION","hash":"017a7d84e8f9fd78927dc1c918228814","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEYAAAAEAAAAGQAAABKgsAEDcwD/kgk7c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9SZXBvc2l0b3J5SW5kZXhNYW5hZ2VyLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `boolean SystemNamespaceRegistry.unregister(String)` indirectly reads with synchronization from `this.context`. Potentially races with unsynchronized write in method `SystemNamespaceRegistry.setContext(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":215,"column":-1,"procedure":"org.modeshape.jcr.SystemNamespaceRegistry.unregister(java.lang.String):boolean","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/SystemNamespaceRegistry.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/SystemNamespaceRegistry.java","line_number":215,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/SystemNamespaceRegistry.java","line_number":215,"column_number":-1,"description":"call to SystemContent SystemNamespaceRegistry.systemContent(boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/SystemNamespaceRegistry.java","line_number":88,"column_number":-1,"description":"access to `this.context`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/SystemNamespaceRegistry.java","line_number":60,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/SystemNamespaceRegistry.java","line_number":60,"column_number":-1,"description":"access to `this.context`"}],"key":"SystemNamespaceRegistry.java|unregister|THREAD_SAFETY_VIOLATION","hash":"2883273185bb42f72ae341107de30360","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAIoAAAAIAAAANAAAACSgsABYAP+SCTxzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL1N5c3RlbU5hbWVzcGFjZVJlZ2lzdHJ5LmphdmGgsHwA/5IJPHNyYy9tYWluL2phdmEvb3JnL21vZGVzaGFwZS9qY3IvU3lzdGVtTmFtZXNwYWNlUmVnaXN0cnkuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `void SessionCache.destroy(NodeKey)` of un-annotated interface `org.modeshape.jcr.cache.SessionCache`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":544,"column":-1,"procedure":"org.modeshape.jcr.RepositoryIndexManager.unregisterIndexes(java.lang.String[]):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":544,"column_number":-1,"description":"call to void SystemContent.remove(IndexDefinition)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/SystemContent.java","line_number":612,"column_number":-1,"description":"Call to un-annotated interface method void SessionCache.destroy(NodeKey)"}],"key":"RepositoryIndexManager.java|unregisterIndexes|INTERFACE_NOT_THREAD_SAFE","hash":"4f854dd4dd9425a23e024b1dd65068be","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAECZAD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9TeXN0ZW1Db250ZW50LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void RepositoryIndexManager.unregisterIndexes(java.lang.String[])` indirectly mutates container `indexes` via call to `add` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":549,"column":-1,"procedure":"org.modeshape.jcr.RepositoryIndexManager.unregisterIndexes(java.lang.String[]):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":549,"column_number":-1,"description":"call to RepositoryIndexes RepositoryIndexManager.readIndexDefinitions()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":817,"column_number":-1,"description":"call to RepositoryIndexManager$Indexes.<init>(ExecutionContext,Collection,NodeTypes)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":883,"column_number":-1,"description":"Write to container `indexes` via call to `add`"}],"key":"RepositoryIndexManager.java|unregisterIndexes|THREAD_SAFETY_VIOLATION","hash":"dc00c0bad7745af15f79507eb64ecdf3","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEYAAAAEAAAAGQAAABKgsAEDcwD/kgk7c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9SZXBvc2l0b3J5SW5kZXhNYW5hZ2VyLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void RepositoryNodeTypeManager.unregisterNodeType(Collection,boolean)` indirectly writes to field `mutableTable.extraColumns` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":200,"column":-1,"procedure":"org.modeshape.jcr.RepositoryNodeTypeManager.unregisterNodeType(java.util.Collection,boolean):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/RepositoryNodeTypeManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryNodeTypeManager.java","line_number":200,"column_number":-1,"description":"call to boolean RepositoryNodeTypeManager.isNodeTypeInUse(Name)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryNodeTypeManager.java","line_number":314,"column_number":-1,"description":"call to NodeTypeSchemata RepositoryNodeTypeManager.getRepositorySchemata()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/RepositoryNodeTypeManager.java","line_number":289,"column_number":-1,"description":"call to NodeTypeSchemata.<init>(ExecutionContext,NodeTypes,boolean,boolean)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/NodeTypeSchemata.java","line_number":130,"column_number":-1,"description":"call to Schemata ImmutableSchemata$Builder.build()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/query/validate/ImmutableSchemata.java","line_number":438,"column_number":-1,"description":"call to void ImmutableSchemata$MutableTable.setExtraColumns(boolean)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/query/validate/ImmutableSchemata.java","line_number":631,"column_number":-1,"description":"access to `mutableTable.extraColumns`"}],"key":"RepositoryNodeTypeManager.java|unregisterNodeType|THREAD_SAFETY_VIOLATION","hash":"0cd735a9ae13990695b4d477adb013ec","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFAAAAAEAAAAHAAAABOgsAECdwD/kglFc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9xdWVyeS92YWxpZGF0ZS9JbW11dGFibGVTY2hlbWF0YS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void AbstractJcrNode.update(String)` indirectly mutates container `ace.privileges` via call to `addAll` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":2964,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.update(java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2964,"column_number":-1,"description":"call to void JcrWorkspace.validateCrossWorkspaceAction(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":533,"column_number":-1,"description":"call to void JcrSession.checkWorkspacePermission(String,java.lang.String[])"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1582,"column_number":-1,"description":"call to void JcrSession.checkPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1567,"column_number":-1,"description":"call to boolean JcrSession.hasPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1375,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPermission(Path,java.lang.String[])"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":322,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPrivileges(String,javax.jcr.security.Privilege[])"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":109,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.getApplicableACL(String)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":114,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.findAccessList(String,boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":289,"column_number":-1,"description":"call to boolean JcrAccessControlList.addAccessControlEntry(Principal,javax.jcr.security.Privilege[])"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/security/acl/JcrAccessControlList.java","line_number":113,"column_number":-1,"description":"call to boolean AccessControlEntryImpl.addIfNotPresent(javax.jcr.security.Privilege[])"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/security/acl/AccessControlEntryImpl.java","line_number":103,"column_number":-1,"description":"Write to container `ace.privileges` via call to `addAll`"}],"key":"AbstractJcrNode.java|update|THREAD_SAFETY_VIOLATION","hash":"3f25e6de8dc220f93f23db34ec4141e4","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFIAAAAEAAAAHQAAABSgsABnAP+SCUhzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3NlY3VyaXR5L2FjbC9BY2Nlc3NDb250cm9sRW50cnlJbXBsLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void AbstractJcrNode.update(String)` indirectly reads without synchronization from `nodeKey.workspaceKey`. Potentially races with write in method `AbstractJcrNode.addNode(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":2987,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.update(java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2987,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2987,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(Path)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":674,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.getNodeByIdentifier(String)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":778,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":165,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":977,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":977,"column_number":-1,"description":"call to AbstractJcrNode AbstractJcrNode.addNode(String,String,NodeKey,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1045,"column_number":-1,"description":"call to AbstractJcrItem JcrSession.findItem(AbstractJcrNode,Path)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":699,"column_number":-1,"description":"call to AbstractJcrItem JcrSession.getItem(Path)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":880,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(Path)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":677,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,Path)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":659,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"AbstractJcrNode.java|update|THREAD_SAFETY_VIOLATION","hash":"5aa703119f876597600425fbf992d9f5","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAHkAAAAIAAAALgAAACKgsAEApQD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `boolean NodeTypes$ReusableNodeDefinitionSet.appliesTo(NodeTypes,Name,Set)` of un-annotated interface `org.modeshape.jcr.NodeTypes$ReusableNodeDefinitionSet`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":2974,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.update(java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2974,"column_number":-1,"description":"call to void AbstractJcrNode.checkNotProtected()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2929,"column_number":-1,"description":"call to NodeDefinition AbstractJcrNode.getDefinition()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2835,"column_number":-1,"description":"call to NodeDefinition AbstractJcrNode.nodeDefinition()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2907,"column_number":-1,"description":"call to NodeTypes$NodeDefinitionSet NodeTypes.findChildNodeDefinitions(Name,Set)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":2375,"column_number":-1,"description":"Call to un-annotated interface method boolean NodeTypes$ReusableNodeDefinitionSet.appliesTo(NodeTypes,Name,Set)"}],"key":"AbstractJcrNode.java|update|INTERFACE_NOT_THREAD_SAFE","hash":"89205ab15fe94cddbdabf57a3455f3d2","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAADkAAAAEAAAAFgAAABCgsAEJRwD/kgkuc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9Ob2RlVHlwZXMuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void AbstractJcrNode.update(String)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":3003,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.update(java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3003,"column_number":-1,"description":"call to void JcrWorkspace.deepClone(JcrSession,NodeKey,JcrSession,NodeKey)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":841,"column_number":-1,"description":"call to JcrVersionNode AbstractJcrNode.getBaseVersion()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3294,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"AbstractJcrNode.java|update|THREAD_SAFETY_VIOLATION","hash":"d385690faab0672471f1363953b6cba3","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void AbstractJcrNode.update(String)` indirectly writes to field `key.identifier` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":2978,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.update(java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2978,"column_number":-1,"description":"call to Path AbstractJcrNode.correspondingNodePath(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3047,"column_number":-1,"description":"call to String NodeKey.getIdentifier()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":180,"column_number":-1,"description":"access to `key.identifier`"}],"key":"AbstractJcrNode.java|update|THREAD_SAFETY_VIOLATION","hash":"55ad176d62bfef86d9204caa982d1140","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEAtAD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void AbstractJcrNode.update(String)` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":2989,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.update(java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":2989,"column_number":-1,"description":"call to Lock AbstractJcrNode.getLock()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3317,"column_number":-1,"description":"call to Lock JcrLockManager.getLock(AbstractJcrNode)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrLockManager.java","line_number":172,"column_number":-1,"description":"call to Lock RepositoryLockManager$ModeShapeLock.lockFor(JcrSession)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","line_number":661,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":485,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"AbstractJcrNode.java|update|THREAD_SAFETY_VIOLATION","hash":"85416df8b1fb1a266db4d794435eb011","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void JcrSystemNode.update(String)` indirectly writes to field `definition.checker` outside of synchronization.\n Reporting because a superclass `class org.modeshape.jcr.JcrNode` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":25,"column":-1,"procedure":"org.modeshape.jcr.JcrSystemNode.update(java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrSystemNode.java","line_number":25,"column_number":-1,"description":"call to void AbstractJcrNode.update(String)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3003,"column_number":-1,"description":"call to void JcrWorkspace.deepClone(JcrSession,NodeKey,JcrSession,NodeKey)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":841,"column_number":-1,"description":"call to JcrVersionNode AbstractJcrNode.getBaseVersion()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":3294,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.getProperty(Name)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":359,"column_number":-1,"description":"call to AbstractJcrProperty AbstractJcrNode.createJcrProperty(Property,Name,Set)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":395,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.propertyDefinitionFor(Property,Name,Set,NodeTypes)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":458,"column_number":-1,"description":"call to JcrPropertyDefinition AbstractJcrNode.findBestPropertyDefinition(Name,Collection,Property,boolean,boolean,boolean,NodeTypes)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":518,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean)"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1400,"column_number":-1,"description":"call to JcrPropertyDefinition NodeTypes.findPropertyDefinition(JcrSession,Name,Collection,Name,javax.jcr.Value[],boolean,boolean)"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":1491,"column_number":-1,"description":"call to boolean JcrPropertyDefinition.satisfiesConstraints(javax.jcr.Value[],JcrSession)"},{"level":10,"filename":"src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java","line_number":299,"column_number":-1,"description":"access to `definition.checker`"}],"key":"JcrSystemNode.java|update|THREAD_SAFETY_VIOLATION","hash":"dbc7f849168d7f6e7365ef7f67ac4435","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAEAAAAGQAAABKgsAEBKwD/kgk6c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JQcm9wZXJ0eURlZmluaXRpb24uamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `boolean NodeTypes$ReusableNodeDefinitionSet.appliesTo(NodeTypes,Name,Set)` of un-annotated interface `org.modeshape.jcr.NodeTypes$ReusableNodeDefinitionSet`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":1265,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.validateChildNodeDefinition(org.modeshape.jcr.value.Name,org.modeshape.jcr.value.Name,boolean):org.modeshape.jcr.JcrNodeDefinition","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":1265,"column_number":-1,"description":"call to NodeTypes$NodeDefinitionSet NodeTypes.findChildNodeDefinitions(Name,Set)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":2375,"column_number":-1,"description":"Call to un-annotated interface method boolean NodeTypes$ReusableNodeDefinitionSet.appliesTo(NodeTypes,Name,Set)"}],"key":"AbstractJcrNode.java|validateChildNodeDefinition|INTERFACE_NOT_THREAD_SAFE","hash":"f1fac2131bb08c6e4ba4baa2d341a312","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAADkAAAAEAAAAFgAAABCgsAEJRwD/kgkuc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9Ob2RlVHlwZXMuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void JcrWorkspace.validateCrossWorkspaceAction(String)` indirectly mutates container `ace.privileges` via call to `addAll` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":533,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.validateCrossWorkspaceAction(java.lang.String):void","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":533,"column_number":-1,"description":"call to void JcrSession.checkWorkspacePermission(String,java.lang.String[])"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1582,"column_number":-1,"description":"call to void JcrSession.checkPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1567,"column_number":-1,"description":"call to boolean JcrSession.hasPermission(String,JcrSession$PathSupplier,java.lang.String[])"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":1375,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPermission(Path,java.lang.String[])"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":322,"column_number":-1,"description":"call to boolean AccessControlManagerImpl.hasPrivileges(String,javax.jcr.security.Privilege[])"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":109,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.getApplicableACL(String)"},{"level":6,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":114,"column_number":-1,"description":"call to JcrAccessControlList AccessControlManagerImpl.findAccessList(String,boolean)"},{"level":7,"filename":"src/main/java/org/modeshape/jcr/AccessControlManagerImpl.java","line_number":289,"column_number":-1,"description":"call to boolean JcrAccessControlList.addAccessControlEntry(Principal,javax.jcr.security.Privilege[])"},{"level":8,"filename":"src/main/java/org/modeshape/jcr/security/acl/JcrAccessControlList.java","line_number":113,"column_number":-1,"description":"call to boolean AccessControlEntryImpl.addIfNotPresent(javax.jcr.security.Privilege[])"},{"level":9,"filename":"src/main/java/org/modeshape/jcr/security/acl/AccessControlEntryImpl.java","line_number":103,"column_number":-1,"description":"Write to container `ace.privileges` via call to `addAll`"}],"key":"JcrWorkspace.java|validateCrossWorkspaceAction|THREAD_SAFETY_VIOLATION","hash":"9d9c7f16bc7057f19d03e6577cffcd35","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFIAAAAEAAAAHQAAABSgsABnAP+SCUhzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL3NlY3VyaXR5L2FjbC9BY2Nlc3NDb250cm9sRW50cnlJbXBsLmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `CachedNode SessionCache.getNode(NodeKey)` of un-annotated interface `org.modeshape.jcr.cache.SessionCache`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":598,"column":-1,"procedure":"org.modeshape.jcr.AbstractJcrNode.valueFrom(javax.jcr.Node):org.modeshape.jcr.JcrValue","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":598,"column_number":-1,"description":"call to Path AbstractJcrNode.path()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":226,"column_number":-1,"description":"call to CachedNode AbstractJcrNode.node()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":201,"column_number":-1,"description":"Call to un-annotated interface method CachedNode SessionCache.getNode(NodeKey)"}],"key":"AbstractJcrNode.java|valueFrom|INTERFACE_NOT_THREAD_SAFE","hash":"82ab658a6f4a76f8b5bd1a0266a13efb","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEAyQD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9BYnN0cmFjdEpjck5vZGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `AbstractJcrNode JcrVersionHistoryNode.versionLabels()` indirectly writes to field `nodeKey.workspaceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":77,"column":-1,"procedure":"org.modeshape.jcr.JcrVersionHistoryNode.versionLabels():org.modeshape.jcr.AbstractJcrNode","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrVersionHistoryNode.java","line_number":77,"column_number":-1,"description":"call to AbstractJcrNode AbstractJcrNode.childNode(Name,AbstractJcrNode$Type)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/AbstractJcrNode.java","line_number":690,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(NodeKey,AbstractJcrNode$Type,NodeKey)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":507,"column_number":-1,"description":"call to AbstractJcrNode JcrSession.node(CachedNode,AbstractJcrNode$Type,NodeKey)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/JcrSession.java","line_number":552,"column_number":-1,"description":"call to String NodeKey.getWorkspaceKey()"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":167,"column_number":-1,"description":"access to `nodeKey.workspaceKey`"}],"key":"JcrVersionHistoryNode.java|versionLabels|THREAD_SAFETY_VIOLATION","hash":"f4c906f5a537d41ae1d7f34d314b3f7c","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEApwD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `JcrVersionManager JcrWorkspace.versionManager()` reads without synchronization from `this.versionManager`. Potentially races with write in method `JcrWorkspace.versionManager()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":668,"column":-1,"procedure":"org.modeshape.jcr.JcrWorkspace.versionManager():org.modeshape.jcr.JcrVersionManager","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":668,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":668,"column_number":-1,"description":"access to `this.versionManager`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":671,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrWorkspace.java","line_number":671,"column_number":-1,"description":"access to `this.versionManager`"}],"key":"JcrWorkspace.java|versionManager|THREAD_SAFETY_VIOLATION","hash":"efb5de9bf814376f64303a18bdb510d5","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEUAAAAGAAAAHgAAABigsAECnAD/kgkxc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9KY3JXb3Jrc3BhY2UuamF2YaCwAQKfAP8EBEA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `JcrNodeType JcrNodeType.with(ExecutionContext,JcrSession)` indirectly writes to field `this.key.sourceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":640,"column":-1,"procedure":"org.modeshape.jcr.JcrNodeType.with(org.modeshape.jcr.ExecutionContext,org.modeshape.jcr.JcrSession):org.modeshape.jcr.JcrNodeType","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrNodeType.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":640,"column_number":-1,"description":"call to JcrNodeType.<init>(NodeKey,ExecutionContext,JcrSession,RepositoryNodeTypeManager,Name,List,Name,Collection,Collection,boolean,boolean,boolean,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":178,"column_number":-1,"description":"call to NodeKey NodeKey.withId(String)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":229,"column_number":-1,"description":"call to String NodeKey.getSourceKey()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":154,"column_number":-1,"description":"access to `this.key.sourceKey`"}],"key":"JcrNodeType.java|with|THREAD_SAFETY_VIOLATION","hash":"950d8b25b6db787ff2a9b9331e46f31e","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEAmgD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `RepositoryIndexManager RepositoryIndexManager.with(JcrRepository$RunningState)` indirectly reads with synchronization from container `byProvider` via call to `get`. Potentially races with unsynchronized write in method `RepositoryIndexManager.registerIndexes(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":553,"column":-1,"procedure":"org.modeshape.jcr.RepositoryIndexManager.with(org.modeshape.jcr.JcrRepository$RunningState):org.modeshape.jcr.RepositoryIndexManager","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":553,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":553,"column_number":-1,"description":"call to RepositoryIndexManager.<init>(JcrRepository$RunningState,RepositoryConfiguration)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":135,"column_number":-1,"description":"call to void RepositoryIndexManager.register(IndexProvider)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":322,"column_number":-1,"description":"call to RepositoryIndexes RepositoryIndexManager.readIndexDefinitions()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":817,"column_number":-1,"description":"call to RepositoryIndexManager$Indexes.<init>(ExecutionContext,Collection,NodeTypes)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":878,"column_number":-1,"description":"Read of container `byProvider` via call to `get`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":529,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":529,"column_number":-1,"description":"call to RepositoryIndexes RepositoryIndexManager.readIndexDefinitions()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":817,"column_number":-1,"description":"call to RepositoryIndexManager$Indexes.<init>(ExecutionContext,Collection,NodeTypes)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/RepositoryIndexManager.java","line_number":881,"column_number":-1,"description":"Write to container `byProvider` via call to `put`"}],"key":"RepositoryIndexManager.java|with|THREAD_SAFETY_VIOLATION","hash":"0a875d3a069afee0b1803767cb247f9b","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAIsAAAAIAAAAMgAAACSgsAEDbgD/kgk7c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9SZXBvc2l0b3J5SW5kZXhNYW5hZ2VyLmphdmGgsAEDcQD/kgk7c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9SZXBvc2l0b3J5SW5kZXhNYW5hZ2VyLmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `Collection Multimap.get(Object)` of un-annotated interface `org.modeshape.common.collection.Multimap`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":126,"column":-1,"procedure":"org.modeshape.jcr.RepositoryNodeTypeManager.with(org.modeshape.jcr.JcrRepository$RunningState,boolean,boolean):org.modeshape.jcr.RepositoryNodeTypeManager","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/RepositoryNodeTypeManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryNodeTypeManager.java","line_number":126,"column_number":-1,"description":"call to RepositoryNodeTypeManager.<init>(JcrRepository$RunningState,boolean,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryNodeTypeManager.java","line_number":112,"column_number":-1,"description":"call to NodeTypes.<init>(ExecutionContext)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":198,"column_number":-1,"description":"call to NodeTypes.<init>(ExecutionContext,Iterable,int)"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/NodeTypes.java","line_number":327,"column_number":-1,"description":"call to Collection JcrNodeType.allChildNodeDefinitions(Name,boolean)"},{"level":4,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":261,"column_number":-1,"description":"call to Collection DefinitionCache.allChildNodeDefinitions(Name,boolean)"},{"level":5,"filename":"src/main/java/org/modeshape/jcr/DefinitionCache.java","line_number":204,"column_number":-1,"description":"Call to un-annotated interface method Collection Multimap.get(Object)"}],"key":"RepositoryNodeTypeManager.java|with|INTERFACE_NOT_THREAD_SAFE","hash":"b70279f2329ea839e8e7370b133bfba9","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAD8AAAAEAAAAGAAAABGgsAEAzAD/kgk0c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9EZWZpbml0aW9uQ2FjaGUuamF2YUA="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `int Document.getInteger(String,int)` of un-annotated interface `org.infinispan.schematic.document.Document`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":112,"column":-1,"procedure":"org.modeshape.jcr.RepositoryLockManager.with(org.modeshape.jcr.JcrRepository$RunningState,org.modeshape.jcr.RepositoryConfiguration$GarbageCollection):org.modeshape.jcr.RepositoryLockManager","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","line_number":112,"column_number":-1,"description":"call to RepositoryLockManager.<init>(JcrRepository$RunningState,RepositoryConfiguration$GarbageCollection)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/RepositoryLockManager.java","line_number":82,"column_number":-1,"description":"call to long RepositoryConfiguration$GarbageCollection.getIntervalInMillis()"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/RepositoryConfiguration.java","line_number":2065,"column_number":-1,"description":"call to int RepositoryConfiguration$GarbageCollection.getIntervalInHours()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/RepositoryConfiguration.java","line_number":2056,"column_number":-1,"description":"Call to un-annotated interface method int Document.getInteger(String,int)"}],"key":"RepositoryLockManager.java|with|INTERFACE_NOT_THREAD_SAFE","hash":"6806157e896d1d542c0eb74c074ce9f0","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEcAAAAEAAAAGgAAABKgsAEICAD/kgk8c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9SZXBvc2l0b3J5Q29uZmlndXJhdGlvbi5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `JcrNodeType JcrNodeType.with(RepositoryNodeTypeManager)` indirectly writes to field `this.key.sourceKey` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":625,"column":-1,"procedure":"org.modeshape.jcr.JcrNodeType.with(org.modeshape.jcr.RepositoryNodeTypeManager):org.modeshape.jcr.JcrNodeType","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/JcrNodeType.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":625,"column_number":-1,"description":"call to JcrNodeType.<init>(NodeKey,ExecutionContext,JcrSession,RepositoryNodeTypeManager,Name,List,Name,Collection,Collection,boolean,boolean,boolean,boolean)"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/JcrNodeType.java","line_number":178,"column_number":-1,"description":"call to NodeKey NodeKey.withId(String)"},{"level":2,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":229,"column_number":-1,"description":"call to String NodeKey.getSourceKey()"},{"level":3,"filename":"src/main/java/org/modeshape/jcr/cache/NodeKey.java","line_number":154,"column_number":-1,"description":"access to `this.key.sourceKey`"}],"key":"JcrNodeType.java|with|THREAD_SAFETY_VIOLATION","hash":"9733041b6f2bb75741ef4525aafe5771","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD0AAAAEAAAAFwAAABGgsAEAmgD/kgkyc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9Ob2RlS2V5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `LocalJournal LocalJournal.withSearchTimeDelta(long)` writes to field `this.searchTimeDelta` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":324,"column":-1,"procedure":"org.modeshape.jcr.journal.LocalJournal.withSearchTimeDelta(long):org.modeshape.jcr.journal.LocalJournal","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/journal/LocalJournal.java","line_number":324,"column_number":-1,"description":"access to `this.searchTimeDelta`"}],"key":"LocalJournal.java|withSearchTimeDelta|THREAD_SAFETY_VIOLATION","hash":"f056cd468be884779cb699ed6707c386","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEQAAAAEAAAAGQAAABKgsAEBRAD/kgk5c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9qb3VybmFsL0xvY2FsSm91cm5hbC5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `Connectors$Snapshot Connectors$Snapshot.withoutConnectors(Iterable)` indirectly reads without synchronization from container `this.sourceKeyToConnectorMap` via call to `values`. Potentially races with write in method `Connectors$Snapshot.shutdownConnectors()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":954,"column":-1,"procedure":"org.modeshape.jcr.Connectors$Snapshot.withoutConnectors(java.lang.Iterable):org.modeshape.jcr.Connectors$Snapshot","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/Connectors.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/Connectors.java","line_number":954,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/Connectors.java","line_number":954,"column_number":-1,"description":"call to void Connectors$Snapshot.checkForReadonlyConnectors()"},{"level":1,"filename":"src/main/java/org/modeshape/jcr/Connectors.java","line_number":1099,"column_number":-1,"description":"Read of container `this.sourceKeyToConnectorMap` via call to `values`"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/Connectors.java","line_number":725,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/modeshape/jcr/Connectors.java","line_number":725,"column_number":-1,"description":"Write to container `this.sourceKeyToConnectorMap` via call to `clear`"}],"key":"Connectors.java|withoutConnectors|THREAD_SAFETY_VIOLATION","hash":"f489101e2233d71c3cd1941be278609c","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAHMAAAAIAAAALAAAACCgsAEESwD/kgkvc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9Db25uZWN0b3JzLmphdmGgsAEC1QD/kgkvc3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9Db25uZWN0b3JzLmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `NodeCache NodeCache.unwrap()` of un-annotated interface `org.modeshape.jcr.cache.NodeCache`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":299,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.workspace(org.modeshape.jcr.cache.NodeCache):org.modeshape.jcr.cache.document.WorkspaceCache","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":299,"column_number":-1,"description":"Call to un-annotated interface method NodeCache NodeCache.unwrap()"}],"key":"SessionNode.java|workspace|INTERFACE_NOT_THREAD_SAFE","hash":"3576ffb9ab015270c57c8a91a69a4fa2","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEoAAAAEAAAAGgAAABKgsAEBKwD/kgk/c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9TZXNzaW9uTm9kZS5qYXZhQA=="},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `NodeCache NodeCache.unwrap()` of un-annotated interface `org.modeshape.jcr.cache.NodeCache`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":105,"column":-1,"procedure":"org.modeshape.jcr.cache.document.LazyCachedNode.workspaceCache(org.modeshape.jcr.cache.NodeCache):org.modeshape.jcr.cache.document.WorkspaceCache","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/LazyCachedNode.java","line_number":105,"column_number":-1,"description":"Call to un-annotated interface method NodeCache NodeCache.unwrap()"}],"key":"LazyCachedNode.java|workspaceCache|INTERFACE_NOT_THREAD_SAFE","hash":"c3e03bbfc2f9f8a397331de515bd9d27","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEwAAAAEAAAAGwAAABOgsABpAP+SCUJzcmMvbWFpbi9qYXZhL29yZy9tb2Rlc2hhcGUvamNyL2NhY2hlL2RvY3VtZW50L0xhenlDYWNoZWROb2RlLmphdmFA"},{"bug_type":"INTERFACE_NOT_THREAD_SAFE","qualifier":"Unprotected call to method `NodeCache NodeCache.unwrap()` of un-annotated interface `org.modeshape.jcr.cache.NodeCache`. Consider annotating the class with `@ThreadSafe`, adding a lock, or using an interface that is known to be thread-safe.\n Reporting because the current class is annotated `@ThreadSafe`.","severity":"WARNING","line":291,"column":-1,"procedure":"org.modeshape.jcr.cache.document.SessionNode.writableSession(org.modeshape.jcr.cache.NodeCache):org.modeshape.jcr.cache.document.WritableSessionCache","procedure_start_line":0,"file":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","bug_trace":[{"level":0,"filename":"src/main/java/org/modeshape/jcr/cache/document/SessionNode.java","line_number":291,"column_number":-1,"description":"Call to un-annotated interface method NodeCache NodeCache.unwrap()"}],"key":"SessionNode.java|writableSession|INTERFACE_NOT_THREAD_SAFE","hash":"8c544d9f43206c3f977060a7a49e09aa","bug_type_hum":"Interface Not Thread Safe","access":"hJWmvgAAAEoAAAAEAAAAGgAAABKgsAEBIwD/kgk/c3JjL21haW4vamF2YS9vcmcvbW9kZXNoYXBlL2pjci9jYWNoZS9kb2N1bWVudC9TZXNzaW9uTm9kZS5qYXZhQA=="}]
