[{"bug_type":"NULL_DEREFERENCE","qualifier":"object `farthest` last assigned on line 91 could be null and is dereferenced by call to `contains(...)` at line 93.","severity":"ERROR","line":93,"column":-1,"procedure":"org.apache.commons.math3.geometry.enclosing.WelzlEncloser.pivotingBall(java.lang.Iterable):org.apache.commons.math3.geometry.enclosing.EnclosingBall","procedure_start_line":78,"file":"src/main/java/org/apache/commons/math3/geometry/enclosing/WelzlEncloser.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/geometry/enclosing/WelzlEncloser.java","line_number":78,"column_number":-1,"description":"start of procedure pivotingBall(...)"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/geometry/enclosing/WelzlEncloser.java","line_number":80,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/apache/commons/math3/geometry/enclosing/WelzlEncloser.java","line_number":81,"column_number":-1,"description":"Skipping getSpace(): unknown method"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/geometry/Point.java","line_number":-1,"column_number":-1,"description":"Definition of getSpace()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/geometry/enclosing/WelzlEncloser.java","line_number":81,"column_number":-1,"description":"Skipping getDimension(): unknown method"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/geometry/Space.java","line_number":-1,"column_number":-1,"description":"Definition of getDimension()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/geometry/enclosing/WelzlEncloser.java","line_number":81,"column_number":-1,"description":"Skipping ArrayList(...): unknown method"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/geometry/enclosing/WelzlEncloser.java","line_number":82,"column_number":-1,"description":"Skipping getSpace(): unknown method"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/geometry/Point.java","line_number":-1,"column_number":-1,"description":"Definition of getSpace()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/geometry/enclosing/WelzlEncloser.java","line_number":82,"column_number":-1,"description":"Skipping getDimension(): unknown method"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/geometry/Space.java","line_number":-1,"column_number":-1,"description":"Definition of getDimension()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/geometry/enclosing/WelzlEncloser.java","line_number":82,"column_number":-1,"description":"Skipping ArrayList(...): unknown method"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/geometry/enclosing/WelzlEncloser.java","line_number":85,"column_number":-1,"description":"Skipping add(...): unknown method"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/geometry/enclosing/WelzlEncloser.java","line_number":86,"column_number":-1,"description":"Skipping moveToFrontBall(...): empty list of specs"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/geometry/enclosing/WelzlEncloser.java","line_number":125,"column_number":-1,"description":"Definition of moveToFrontBall(...)"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/geometry/enclosing/WelzlEncloser.java","line_number":91,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/geometry/enclosing/WelzlEncloser.java","line_number":164,"column_number":-1,"description":"start of procedure selectFarthest(...)"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/geometry/enclosing/WelzlEncloser.java","line_number":166,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/apache/commons/math3/geometry/enclosing/EnclosingBall.java","line_number":61,"column_number":-1,"description":"start of procedure getCenter()"},{"level":2,"filename":"src/main/java/org/apache/commons/math3/geometry/enclosing/EnclosingBall.java","line_number":62,"column_number":-1,"description":"return from a call to Point EnclosingBall.getCenter()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/geometry/enclosing/WelzlEncloser.java","line_number":167,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/geometry/enclosing/WelzlEncloser.java","line_number":168,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/geometry/enclosing/WelzlEncloser.java","line_number":170,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/geometry/enclosing/WelzlEncloser.java","line_number":178,"column_number":-1,"description":"return from a call to Point WelzlEncloser.selectFarthest(Iterable,EnclosingBall)"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/geometry/enclosing/WelzlEncloser.java","line_number":93,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/geometry/enclosing/EnclosingBall.java","line_number":100,"column_number":-1,"description":"start of procedure contains(...)"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/geometry/enclosing/EnclosingBall.java","line_number":101,"column_number":-1,"description":"Skipping distance(...): unknown method"},{"level":2,"filename":"src/main/java/org/apache/commons/math3/geometry/Point.java","line_number":-1,"column_number":-1,"description":"Definition of distance(...)"}],"key":"WelzlEncloser.java|pivotingBall|NULL_DEREFERENCE","node_key":"abc3ff9bdb4e69c2ce5598513ed71898","hash":"24291e90a4f958c45b229f48a4152cf6","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `previous` last assigned on line 154 could be null and is dereferenced at line 161.","severity":"ERROR","line":161,"column":-1,"procedure":"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer.doOptimize():org.apache.commons.math3.optim.PointValuePair","procedure_start_line":127,"file":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java","line_number":127,"column_number":-1,"description":"start of procedure doOptimize()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java","line_number":128,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java","line_number":212,"column_number":-1,"description":"start of procedure checkParameters()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java","line_number":213,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java","line_number":216,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/apache/commons/math3/optim/BaseMultivariateOptimizer.java","line_number":114,"column_number":-1,"description":"start of procedure getLowerBound()"},{"level":2,"filename":"src/main/java/org/apache/commons/math3/optim/BaseMultivariateOptimizer.java","line_number":115,"column_number":-1,"description":"Taking true branch"},{"level":2,"filename":"src/main/java/org/apache/commons/math3/optim/BaseMultivariateOptimizer.java","line_number":115,"column_number":-1,"description":"return from a call to double[] BaseMultivariateOptimizer.getLowerBound()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java","line_number":216,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java","line_number":217,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/apache/commons/math3/optim/BaseMultivariateOptimizer.java","line_number":120,"column_number":-1,"description":"start of procedure getUpperBound()"},{"level":2,"filename":"src/main/java/org/apache/commons/math3/optim/BaseMultivariateOptimizer.java","line_number":121,"column_number":-1,"description":"Taking true branch"},{"level":2,"filename":"src/main/java/org/apache/commons/math3/optim/BaseMultivariateOptimizer.java","line_number":121,"column_number":-1,"description":"return from a call to double[] BaseMultivariateOptimizer.getUpperBound()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java","line_number":217,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java","line_number":220,"column_number":-1,"description":"return from a call to void SimplexOptimizer.checkParameters()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java","line_number":132,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java","line_number":86,"column_number":-1,"description":"start of procedure SimplexOptimizer$1(...)"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java","line_number":133,"column_number":-1,"description":"return from a call to SimplexOptimizer$1.<init>(SimplexOptimizer)"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java","line_number":139,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/MultivariateOptimizer.java","line_number":100,"column_number":-1,"description":"start of procedure getGoalType()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/MultivariateOptimizer.java","line_number":101,"column_number":-1,"description":"return from a call to GoalType MultivariateOptimizer.getGoalType()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java","line_number":139,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java","line_number":140,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java","line_number":86,"column_number":-1,"description":"start of procedure SimplexOptimizer$2(...)"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java","line_number":141,"column_number":-1,"description":"return from a call to SimplexOptimizer$2.<init>(SimplexOptimizer,boolean)"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java","line_number":151,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/BaseMultivariateOptimizer.java","line_number":108,"column_number":-1,"description":"start of procedure getStartPoint()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/BaseMultivariateOptimizer.java","line_number":109,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/BaseMultivariateOptimizer.java","line_number":109,"column_number":-1,"description":"return from a call to double[] BaseMultivariateOptimizer.getStartPoint()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java","line_number":151,"column_number":-1,"description":"Skipping build(...): empty list of specs"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex.java","line_number":216,"column_number":-1,"description":"Definition of build(...)"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java","line_number":152,"column_number":-1,"description":"Skipping evaluate(...): empty list of specs"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex.java","line_number":246,"column_number":-1,"description":"Definition of evaluate(...)"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java","line_number":154,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java","line_number":155,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java","line_number":156,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java","line_number":112,"column_number":-1,"description":"start of procedure getConvergenceChecker()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java","line_number":113,"column_number":-1,"description":"return from a call to ConvergenceChecker BaseOptimizer.getConvergenceChecker()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java","line_number":158,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java","line_number":103,"column_number":-1,"description":"start of procedure getIterations()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java","line_number":104,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/apache/commons/math3/util/Incrementor.java","line_number":113,"column_number":-1,"description":"start of procedure getCount()"},{"level":2,"filename":"src/main/java/org/apache/commons/math3/util/Incrementor.java","line_number":114,"column_number":-1,"description":"return from a call to int Incrementor.getCount()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java","line_number":104,"column_number":-1,"description":"return from a call to int BaseOptimizer.getIterations()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java","line_number":158,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java","line_number":159,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java","line_number":160,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex.java","line_number":193,"column_number":-1,"description":"start of procedure getSize()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex.java","line_number":194,"column_number":-1,"description":"return from a call to int AbstractSimplex.getSize()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java","line_number":160,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java","line_number":161,"column_number":-1,"description":""}],"key":"SimplexOptimizer.java|doOptimize|NULL_DEREFERENCE","node_key":"d79e1bbbf90cb97da530d2e00030f966","hash":"7927149bcef5471adab0899af143a11e","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `NonLinearConjugateGradientOptimizer.point` last assigned on line 152 could be null and is dereferenced at line 154.","severity":"ERROR","line":154,"column":-1,"procedure":"org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer.doOptimize():org.apache.commons.math3.optimization.PointValuePair","procedure_start_line":150,"file":"src/main/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizer.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizer.java","line_number":150,"column_number":-1,"description":"start of procedure doOptimize()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizer.java","line_number":151,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java","line_number":92,"column_number":-1,"description":"start of procedure getConvergenceChecker()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java","line_number":93,"column_number":-1,"description":"return from a call to ConvergenceChecker BaseAbstractMultivariateOptimizer.getConvergenceChecker()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizer.java","line_number":152,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java","line_number":246,"column_number":-1,"description":"start of procedure getStartPoint()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java","line_number":247,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java","line_number":247,"column_number":-1,"description":"return from a call to double[] BaseAbstractMultivariateOptimizer.getStartPoint()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizer.java","line_number":152,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizer.java","line_number":153,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java","line_number":239,"column_number":-1,"description":"start of procedure getGoalType()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java","line_number":240,"column_number":-1,"description":"return from a call to GoalType BaseAbstractMultivariateOptimizer.getGoalType()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizer.java","line_number":154,"column_number":-1,"description":""}],"key":"NonLinearConjugateGradientOptimizer.java|doOptimize|NULL_DEREFERENCE","node_key":"3a978a1985549a0a5f032520bbf3780d","hash":"2c375f0fda59606058a9b54b8ca39ec3","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `guess` last assigned on line 166 could be null and is dereferenced at line 167.","severity":"ERROR","line":167,"column":-1,"procedure":"org.apache.commons.math3.optimization.direct.PowellOptimizer.doOptimize():org.apache.commons.math3.optimization.PointValuePair","procedure_start_line":164,"file":"src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java","line_number":164,"column_number":-1,"description":"start of procedure doOptimize()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java","line_number":165,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java","line_number":239,"column_number":-1,"description":"start of procedure getGoalType()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java","line_number":240,"column_number":-1,"description":"return from a call to GoalType BaseAbstractMultivariateOptimizer.getGoalType()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java","line_number":166,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java","line_number":246,"column_number":-1,"description":"start of procedure getStartPoint()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java","line_number":247,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java","line_number":247,"column_number":-1,"description":"return from a call to double[] BaseAbstractMultivariateOptimizer.getStartPoint()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java","line_number":167,"column_number":-1,"description":""}],"key":"PowellOptimizer.java|doOptimize|NULL_DEREFERENCE","node_key":"42f56fda1ad408e362508b93a175bb0c","hash":"154513930e0bc8e63029bcfb95168d56","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `guess` last assigned on line 172 could be null and is dereferenced at line 173.","severity":"ERROR","line":173,"column":-1,"procedure":"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer.doOptimize():org.apache.commons.math3.optim.PointValuePair","procedure_start_line":168,"file":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer.java","line_number":168,"column_number":-1,"description":"start of procedure doOptimize()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer.java","line_number":169,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer.java","line_number":294,"column_number":-1,"description":"start of procedure checkParameters()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer.java","line_number":295,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/apache/commons/math3/optim/BaseMultivariateOptimizer.java","line_number":114,"column_number":-1,"description":"start of procedure getLowerBound()"},{"level":2,"filename":"src/main/java/org/apache/commons/math3/optim/BaseMultivariateOptimizer.java","line_number":115,"column_number":-1,"description":"Taking true branch"},{"level":2,"filename":"src/main/java/org/apache/commons/math3/optim/BaseMultivariateOptimizer.java","line_number":115,"column_number":-1,"description":"return from a call to double[] BaseMultivariateOptimizer.getLowerBound()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer.java","line_number":295,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer.java","line_number":296,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/apache/commons/math3/optim/BaseMultivariateOptimizer.java","line_number":120,"column_number":-1,"description":"start of procedure getUpperBound()"},{"level":2,"filename":"src/main/java/org/apache/commons/math3/optim/BaseMultivariateOptimizer.java","line_number":121,"column_number":-1,"description":"Taking true branch"},{"level":2,"filename":"src/main/java/org/apache/commons/math3/optim/BaseMultivariateOptimizer.java","line_number":121,"column_number":-1,"description":"return from a call to double[] BaseMultivariateOptimizer.getUpperBound()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer.java","line_number":296,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer.java","line_number":299,"column_number":-1,"description":"return from a call to void PowellOptimizer.checkParameters()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer.java","line_number":171,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/MultivariateOptimizer.java","line_number":100,"column_number":-1,"description":"start of procedure getGoalType()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/MultivariateOptimizer.java","line_number":101,"column_number":-1,"description":"return from a call to GoalType MultivariateOptimizer.getGoalType()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer.java","line_number":172,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/BaseMultivariateOptimizer.java","line_number":108,"column_number":-1,"description":"start of procedure getStartPoint()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/BaseMultivariateOptimizer.java","line_number":109,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/BaseMultivariateOptimizer.java","line_number":109,"column_number":-1,"description":"return from a call to double[] BaseMultivariateOptimizer.getStartPoint()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer.java","line_number":173,"column_number":-1,"description":""}],"key":"PowellOptimizer.java|doOptimize|NULL_DEREFERENCE","node_key":"42f56fda1ad408e362508b93a175bb0c","hash":"154513930e0bc8e63029bcfb95168d56","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `best` last assigned on line 181 could be null and is dereferenced at line 183.","severity":"ERROR","line":183,"column":-1,"procedure":"org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction.findAndUpdateBestNeuron(org.apache.commons.math3.ml.neuralnet.Network,double[],double):org.apache.commons.math3.ml.neuralnet.Neuron","procedure_start_line":177,"file":"src/main/java/org/apache/commons/math3/ml/neuralnet/sofm/KohonenUpdateAction.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/ml/neuralnet/sofm/KohonenUpdateAction.java","line_number":177,"column_number":-1,"description":"start of procedure findAndUpdateBestNeuron(...)"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/ml/neuralnet/sofm/KohonenUpdateAction.java","line_number":181,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/ml/neuralnet/MapUtils.java","line_number":52,"column_number":-1,"description":"start of procedure findBest(...)"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/ml/neuralnet/MapUtils.java","line_number":55,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/ml/neuralnet/MapUtils.java","line_number":56,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/ml/neuralnet/MapUtils.java","line_number":57,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/ml/neuralnet/MapUtils.java","line_number":65,"column_number":-1,"description":"return from a call to Neuron MapUtils.findBest(double[],Iterable,DistanceMeasure)"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/ml/neuralnet/sofm/KohonenUpdateAction.java","line_number":183,"column_number":-1,"description":""}],"key":"KohonenUpdateAction.java|findAndUpdateBestNeuron|NULL_DEREFERENCE","node_key":"acaec5e305bcc4bb44d93c058ea68ab1","hash":"7ccd8908b4a7764a9cee9031f5df4c1d","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `nanPositions` last assigned on line 201 could be null and is dereferenced by call to `restoreNaNs(...)` at line 254.","severity":"ERROR","line":254,"column":-1,"procedure":"org.apache.commons.math3.stat.ranking.NaturalRanking.rank(double[]):double[]","procedure_start_line":195,"file":"src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java","line_number":195,"column_number":-1,"description":"start of procedure rank(...)"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java","line_number":196,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java","line_number":201,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java","line_number":202,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java","line_number":204,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java","line_number":296,"column_number":-1,"description":"start of procedure recodeNaNs(...)"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java","line_number":297,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java","line_number":303,"column_number":-1,"description":"return from a call to void NaturalRanking.recodeNaNs(org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[],double)"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java","line_number":226,"column_number":-1,"description":"Skipping sort(...): unknown method"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java","line_number":230,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java","line_number":231,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java","line_number":232,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java","line_number":471,"column_number":-1,"description":"start of procedure getPosition()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java","line_number":472,"column_number":-1,"description":"return from a call to int NaturalRanking$IntDoublePair.getPosition()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java","line_number":232,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java","line_number":233,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java","line_number":234,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java","line_number":471,"column_number":-1,"description":"start of procedure getPosition()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java","line_number":472,"column_number":-1,"description":"return from a call to int NaturalRanking$IntDoublePair.getPosition()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java","line_number":234,"column_number":-1,"description":"Skipping add(...): unknown method"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java","line_number":235,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java","line_number":250,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java","line_number":253,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java","line_number":254,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java","line_number":395,"column_number":-1,"description":"start of procedure restoreNaNs(...)"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java","line_number":396,"column_number":-1,"description":"Skipping size(): unknown method"}],"key":"NaturalRanking.java|rank|NULL_DEREFERENCE","node_key":"132d03f9403026897a8515d551b4ad02","hash":"093901faa7b6b2e0f7624cf84991959b","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object returned by `findBest(f,neurons,distance)` could be null and is dereferenced at line 206.","severity":"ERROR","line":206,"column":-1,"procedure":"org.apache.commons.math3.ml.neuralnet.MapUtils.computeQuantizationError(java.lang.Iterable,java.lang.Iterable,org.apache.commons.math3.ml.distance.DistanceMeasure):double","procedure_start_line":199,"file":"src/main/java/org/apache/commons/math3/ml/neuralnet/MapUtils.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/ml/neuralnet/MapUtils.java","line_number":199,"column_number":-1,"description":"start of procedure computeQuantizationError(...)"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/ml/neuralnet/MapUtils.java","line_number":202,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/apache/commons/math3/ml/neuralnet/MapUtils.java","line_number":203,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/apache/commons/math3/ml/neuralnet/MapUtils.java","line_number":204,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/ml/neuralnet/MapUtils.java","line_number":205,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/apache/commons/math3/ml/neuralnet/MapUtils.java","line_number":206,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/ml/neuralnet/MapUtils.java","line_number":52,"column_number":-1,"description":"start of procedure findBest(...)"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/ml/neuralnet/MapUtils.java","line_number":55,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/ml/neuralnet/MapUtils.java","line_number":56,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/ml/neuralnet/MapUtils.java","line_number":57,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/ml/neuralnet/MapUtils.java","line_number":65,"column_number":-1,"description":"return from a call to Neuron MapUtils.findBest(double[],Iterable,DistanceMeasure)"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/ml/neuralnet/MapUtils.java","line_number":206,"column_number":-1,"description":""}],"key":"MapUtils.java|computeQuantizationError|NULL_DEREFERENCE","node_key":"acaec5e305bcc4bb44d93c058ea68ab1","hash":"1c604c8369b6ec256cbee5a8046aa2c2","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object returned by `getStartPoint()` could be null and is dereferenced by call to `ArrayRealVector(...)` at line 240.","severity":"ERROR","line":240,"column":-1,"procedure":"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizer.doOptimize():org.apache.commons.math3.optim.PointValuePair","procedure_start_line":232,"file":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java","line_number":232,"column_number":-1,"description":"start of procedure doOptimize()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java","line_number":233,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/BaseMultivariateOptimizer.java","line_number":114,"column_number":-1,"description":"start of procedure getLowerBound()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/BaseMultivariateOptimizer.java","line_number":115,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/BaseMultivariateOptimizer.java","line_number":115,"column_number":-1,"description":"return from a call to double[] BaseMultivariateOptimizer.getLowerBound()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java","line_number":234,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/BaseMultivariateOptimizer.java","line_number":120,"column_number":-1,"description":"start of procedure getUpperBound()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/BaseMultivariateOptimizer.java","line_number":121,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/BaseMultivariateOptimizer.java","line_number":121,"column_number":-1,"description":"return from a call to double[] BaseMultivariateOptimizer.getUpperBound()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java","line_number":237,"column_number":-1,"description":"Skipping setup(...): empty list of specs"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java","line_number":2375,"column_number":-1,"description":"Definition of setup(...)"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java","line_number":239,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/MultivariateOptimizer.java","line_number":100,"column_number":-1,"description":"start of procedure getGoalType()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/MultivariateOptimizer.java","line_number":101,"column_number":-1,"description":"return from a call to GoalType MultivariateOptimizer.getGoalType()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java","line_number":239,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java","line_number":240,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/BaseMultivariateOptimizer.java","line_number":108,"column_number":-1,"description":"start of procedure getStartPoint()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/BaseMultivariateOptimizer.java","line_number":109,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/BaseMultivariateOptimizer.java","line_number":109,"column_number":-1,"description":"return from a call to double[] BaseMultivariateOptimizer.getStartPoint()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java","line_number":240,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java","line_number":85,"column_number":-1,"description":"start of procedure ArrayRealVector(...)"},{"level":2,"filename":"src/main/java/org/apache/commons/math3/linear/RealVector.java","line_number":60,"column_number":-1,"description":"start of procedure RealVector()"},{"level":2,"filename":"src/main/java/org/apache/commons/math3/linear/RealVector.java","line_number":60,"column_number":-1,"description":"return from a call to RealVector.<init>()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java","line_number":86,"column_number":-1,"description":"Skipping clone(): unknown method"}],"key":"BOBYQAOptimizer.java|doOptimize|NULL_DEREFERENCE","node_key":"968d36670ada817de078cc50e2ef1cce","hash":"e7e80ace3aa18c0ea87ba51ce8d62e29","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object returned by `getStartPoint()` could be null and is dereferenced by call to `ArrayRealVector(...)` at line 245.","severity":"ERROR","line":245,"column":-1,"procedure":"org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.doOptimize():org.apache.commons.math3.optimization.PointValuePair","procedure_start_line":237,"file":"src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java","line_number":237,"column_number":-1,"description":"start of procedure doOptimize()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java","line_number":238,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java","line_number":253,"column_number":-1,"description":"start of procedure getLowerBound()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java","line_number":254,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java","line_number":254,"column_number":-1,"description":"return from a call to double[] BaseAbstractMultivariateOptimizer.getLowerBound()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java","line_number":239,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java","line_number":260,"column_number":-1,"description":"start of procedure getUpperBound()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java","line_number":261,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java","line_number":261,"column_number":-1,"description":"return from a call to double[] BaseAbstractMultivariateOptimizer.getUpperBound()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java","line_number":242,"column_number":-1,"description":"Skipping setup(...): empty list of specs"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java","line_number":2380,"column_number":-1,"description":"Definition of setup(...)"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java","line_number":244,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java","line_number":239,"column_number":-1,"description":"start of procedure getGoalType()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java","line_number":240,"column_number":-1,"description":"return from a call to GoalType BaseAbstractMultivariateOptimizer.getGoalType()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java","line_number":244,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java","line_number":245,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java","line_number":246,"column_number":-1,"description":"start of procedure getStartPoint()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java","line_number":247,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java","line_number":247,"column_number":-1,"description":"return from a call to double[] BaseAbstractMultivariateOptimizer.getStartPoint()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java","line_number":245,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java","line_number":85,"column_number":-1,"description":"start of procedure ArrayRealVector(...)"},{"level":2,"filename":"src/main/java/org/apache/commons/math3/linear/RealVector.java","line_number":60,"column_number":-1,"description":"start of procedure RealVector()"},{"level":2,"filename":"src/main/java/org/apache/commons/math3/linear/RealVector.java","line_number":60,"column_number":-1,"description":"return from a call to RealVector.<init>()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java","line_number":86,"column_number":-1,"description":"Skipping clone(): unknown method"}],"key":"BOBYQAOptimizer.java|doOptimize|NULL_DEREFERENCE","node_key":"968d36670ada817de078cc50e2ef1cce","hash":"e7e80ace3aa18c0ea87ba51ce8d62e29","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `point` last assigned on line 252 could be null and is dereferenced at line 254.","severity":"ERROR","line":254,"column":-1,"procedure":"org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.doOptimize():org.apache.commons.math3.optim.PointValuePair","procedure_start_line":250,"file":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java","line_number":250,"column_number":-1,"description":"start of procedure doOptimize()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java","line_number":251,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java","line_number":112,"column_number":-1,"description":"start of procedure getConvergenceChecker()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java","line_number":113,"column_number":-1,"description":"return from a call to ConvergenceChecker BaseOptimizer.getConvergenceChecker()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java","line_number":252,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/BaseMultivariateOptimizer.java","line_number":108,"column_number":-1,"description":"start of procedure getStartPoint()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/BaseMultivariateOptimizer.java","line_number":109,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/BaseMultivariateOptimizer.java","line_number":109,"column_number":-1,"description":"return from a call to double[] BaseMultivariateOptimizer.getStartPoint()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java","line_number":253,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/MultivariateOptimizer.java","line_number":100,"column_number":-1,"description":"start of procedure getGoalType()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/MultivariateOptimizer.java","line_number":101,"column_number":-1,"description":"return from a call to GoalType MultivariateOptimizer.getGoalType()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java","line_number":254,"column_number":-1,"description":""}],"key":"NonLinearConjugateGradientOptimizer.java|doOptimize|NULL_DEREFERENCE","node_key":"3677875e6aead27ee1320f16c80d8b0f","hash":"2c9c2877189bf317ffe9aac9496ca13e","bug_type_hum":"Null Dereference"},{"bug_type":"RESOURCE_LEAK","qualifier":"resource of type `java.io.InputStreamReader` acquired to `in` by call to `new()` at line 258 is not released after line 266.","severity":"ERROR","line":266,"column":-1,"procedure":"org.apache.commons.math3.random.EmpiricalDistribution.load(java.net.URL):void","procedure_start_line":254,"file":"src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java","line_number":254,"column_number":-1,"description":"start of procedure load(...)"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java","line_number":255,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/util/MathUtils.java","line_number":274,"column_number":-1,"description":"start of procedure checkNotNull(...)"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/util/MathUtils.java","line_number":276,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/util/MathUtils.java","line_number":279,"column_number":-1,"description":"return from a call to void MathUtils.checkNotNull(Object)"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java","line_number":256,"column_number":-1,"description":"Skipping forName(...): unknown method"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java","line_number":258,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java","line_number":260,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java","line_number":345,"column_number":-1,"description":"start of procedure EmpiricalDistribution$StreamDataAdapter(...)"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java","line_number":346,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java","line_number":314,"column_number":-1,"description":"start of procedure EmpiricalDistribution$DataAdapter(...)"},{"level":2,"filename":"src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java","line_number":314,"column_number":-1,"description":"return from a call to EmpiricalDistribution$DataAdapter.<init>(EmpiricalDistribution)"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java","line_number":347,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java","line_number":348,"column_number":-1,"description":"return from a call to EmpiricalDistribution$StreamDataAdapter.<init>(EmpiricalDistribution,BufferedReader)"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java","line_number":261,"column_number":-1,"description":"Skipping computeStats(): empty list of specs"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java","line_number":367,"column_number":-1,"description":"Definition of computeStats()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java","line_number":262,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/SummaryStatistics.java","line_number":175,"column_number":-1,"description":"start of procedure getN()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/SummaryStatistics.java","line_number":176,"column_number":-1,"description":"return from a call to long SummaryStatistics.getN()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java","line_number":262,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java","line_number":266,"column_number":-1,"description":""}],"key":"EmpiricalDistribution.java|load|RESOURCE_LEAK","node_key":"fce71b9d1dee10ff66a3a959ce065161","hash":"b844aef298243d654724d590afbeff67","bug_type_hum":"Resource Leak"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `y` last assigned on line 305 could be null and is dereferenced at line 317.","severity":"ERROR","line":317,"column":-1,"procedure":"org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator$2.value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure):org.apache.commons.math3.analysis.differentiation.DerivativeStructure[]","procedure_start_line":293,"file":"src/main/java/org/apache/commons/math3/analysis/differentiation/FiniteDifferencesDifferentiator.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/analysis/differentiation/FiniteDifferencesDifferentiator.java","line_number":293,"column_number":-1,"description":"start of procedure value(...)"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/analysis/differentiation/FiniteDifferencesDifferentiator.java","line_number":297,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java","line_number":232,"column_number":-1,"description":"start of procedure getOrder()"},{"level":2,"filename":"src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java","line_number":640,"column_number":-1,"description":"start of procedure getOrder()"},{"level":2,"filename":"src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java","line_number":641,"column_number":-1,"description":"return from a call to int DSCompiler.getOrder()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java","line_number":232,"column_number":-1,"description":"return from a call to int DerivativeStructure.getOrder()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/analysis/differentiation/FiniteDifferencesDifferentiator.java","line_number":297,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/analysis/differentiation/FiniteDifferencesDifferentiator.java","line_number":302,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java","line_number":260,"column_number":-1,"description":"start of procedure getValue()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java","line_number":261,"column_number":-1,"description":"return from a call to double DerivativeStructure.getValue()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/analysis/differentiation/FiniteDifferencesDifferentiator.java","line_number":302,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/util/FastMath.java","line_number":3477,"column_number":-1,"description":"start of procedure min(...)"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/util/FastMath.java","line_number":3478,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/util/FastMath.java","line_number":3481,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/util/FastMath.java","line_number":3482,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/util/FastMath.java","line_number":3494,"column_number":-1,"description":"return from a call to double FastMath.min(double,double)"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/analysis/differentiation/FiniteDifferencesDifferentiator.java","line_number":302,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/util/FastMath.java","line_number":3545,"column_number":-1,"description":"start of procedure max(...)"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/util/FastMath.java","line_number":3546,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/util/FastMath.java","line_number":3547,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/util/FastMath.java","line_number":3562,"column_number":-1,"description":"return from a call to double FastMath.max(double,double)"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/analysis/differentiation/FiniteDifferencesDifferentiator.java","line_number":302,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/apache/commons/math3/analysis/differentiation/FiniteDifferencesDifferentiator.java","line_number":305,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/apache/commons/math3/analysis/differentiation/FiniteDifferencesDifferentiator.java","line_number":306,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/analysis/differentiation/FiniteDifferencesDifferentiator.java","line_number":317,"column_number":-1,"description":""}],"key":"FiniteDifferencesDifferentiator.java|value|NULL_DEREFERENCE","node_key":"44ca3bff83f85a85b4b3f795730895f5","hash":"fa0ca4d65e2eb03ad9d557bc7616869e","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `projector.leaf` last assigned on line 301 could be null and is dereferenced by call to `getProjection()` at line 303.","severity":"ERROR","line":303,"column":-1,"procedure":"org.apache.commons.math3.geometry.partitioning.AbstractRegion.projectToBoundary(org.apache.commons.math3.geometry.Point):org.apache.commons.math3.geometry.partitioning.BoundaryProjection","procedure_start_line":300,"file":"src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java","line_number":300,"column_number":-1,"description":"start of procedure projectToBoundary(...)"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java","line_number":301,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/geometry/partitioning/BoundaryProjector.java","line_number":50,"column_number":-1,"description":"start of procedure BoundaryProjector(...)"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/geometry/partitioning/BoundaryProjector.java","line_number":51,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/geometry/partitioning/BoundaryProjector.java","line_number":52,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/geometry/partitioning/BoundaryProjector.java","line_number":53,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/geometry/partitioning/BoundaryProjector.java","line_number":54,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/geometry/partitioning/BoundaryProjector.java","line_number":55,"column_number":-1,"description":"return from a call to BoundaryProjector.<init>(Point)"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java","line_number":302,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java","line_number":353,"column_number":-1,"description":"start of procedure getTree(...)"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java","line_number":354,"column_number":-1,"description":"Taking true branch"},{"level":2,"filename":"src/main/java/org/apache/commons/math3/geometry/partitioning/BSPTree.java","line_number":197,"column_number":-1,"description":"start of procedure getCut()"},{"level":2,"filename":"src/main/java/org/apache/commons/math3/geometry/partitioning/BSPTree.java","line_number":198,"column_number":-1,"description":"return from a call to SubHyperplane BSPTree.getCut()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java","line_number":354,"column_number":-1,"description":"Taking true branch"},{"level":2,"filename":"src/main/java/org/apache/commons/math3/geometry/partitioning/BSPTree.java","line_number":238,"column_number":-1,"description":"start of procedure getAttribute()"},{"level":2,"filename":"src/main/java/org/apache/commons/math3/geometry/partitioning/BSPTree.java","line_number":239,"column_number":-1,"description":"return from a call to Object BSPTree.getAttribute()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java","line_number":354,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java","line_number":358,"column_number":-1,"description":"return from a call to BSPTree AbstractRegion.getTree(boolean)"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java","line_number":302,"column_number":-1,"description":"Skipping visit(...): empty list of specs"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/geometry/partitioning/BSPTree.java","line_number":245,"column_number":-1,"description":"Definition of visit(...)"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java","line_number":303,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/geometry/partitioning/BoundaryProjector.java","line_number":126,"column_number":-1,"description":"start of procedure getProjection()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/geometry/partitioning/BoundaryProjector.java","line_number":129,"column_number":-1,"description":""}],"key":"AbstractRegion.java|projectToBoundary|NULL_DEREFERENCE","node_key":"440a2ac18d3e8319bfc8d78b5f377e5b","hash":"4bbd508433171ece6478d6e4038bb100","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `pivotCol` last assigned on line 323 could be null and is dereferenced at line 324.","severity":"ERROR","line":324,"column":-1,"procedure":"org.apache.commons.math3.optim.linear.SimplexSolver.doIteration(org.apache.commons.math3.optim.linear.SimplexTableau):void","procedure_start_line":317,"file":"src/main/java/org/apache/commons/math3/optim/linear/SimplexSolver.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/linear/SimplexSolver.java","line_number":317,"column_number":-1,"description":"start of procedure doIteration(...)"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/linear/SimplexSolver.java","line_number":321,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java","line_number":201,"column_number":-1,"description":"start of procedure incrementIterationCount()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java","line_number":203,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/apache/commons/math3/util/Incrementor.java","line_number":154,"column_number":-1,"description":"start of procedure incrementCount()"},{"level":2,"filename":"src/main/java/org/apache/commons/math3/util/Incrementor.java","line_number":155,"column_number":-1,"description":"Taking true branch"},{"level":2,"filename":"src/main/java/org/apache/commons/math3/util/Incrementor.java","line_number":156,"column_number":-1,"description":"Skipping trigger(...): unknown method"},{"level":3,"filename":"src/main/java/org/apache/commons/math3/util/Incrementor.java","line_number":-1,"column_number":-1,"description":"Definition of trigger(...)"},{"level":2,"filename":"src/main/java/org/apache/commons/math3/util/Incrementor.java","line_number":158,"column_number":-1,"description":"return from a call to void Incrementor.incrementCount()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java","line_number":204,"column_number":-1,"description":"return from a call to void BaseOptimizer.incrementIterationCount()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/linear/SimplexSolver.java","line_number":323,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/linear/SimplexSolver.java","line_number":196,"column_number":-1,"description":"start of procedure getPivotColumn(...)"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/linear/SimplexSolver.java","line_number":197,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/linear/SimplexSolver.java","line_number":198,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/linear/SimplexSolver.java","line_number":199,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/apache/commons/math3/optim/linear/SimplexTableau.java","line_number":279,"column_number":-1,"description":"start of procedure getNumObjectiveFunctions()"},{"level":2,"filename":"src/main/java/org/apache/commons/math3/optim/linear/SimplexTableau.java","line_number":280,"column_number":-1,"description":"Taking true branch"},{"level":2,"filename":"src/main/java/org/apache/commons/math3/optim/linear/SimplexTableau.java","line_number":280,"column_number":-1,"description":"return from a call to int SimplexTableau.getNumObjectiveFunctions()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/linear/SimplexSolver.java","line_number":199,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/apache/commons/math3/optim/linear/SimplexTableau.java","line_number":544,"column_number":-1,"description":"start of procedure getWidth()"},{"level":2,"filename":"src/main/java/org/apache/commons/math3/optim/linear/SimplexTableau.java","line_number":545,"column_number":-1,"description":""},{"level":3,"filename":"src/main/java/org/apache/commons/math3/linear/Array2DRowRealMatrix.java","line_number":344,"column_number":-1,"description":"start of procedure getColumnDimension()"},{"level":3,"filename":"src/main/java/org/apache/commons/math3/linear/Array2DRowRealMatrix.java","line_number":345,"column_number":-1,"description":"Taking true branch"},{"level":3,"filename":"src/main/java/org/apache/commons/math3/linear/Array2DRowRealMatrix.java","line_number":345,"column_number":-1,"description":"Taking true branch"},{"level":3,"filename":"src/main/java/org/apache/commons/math3/linear/Array2DRowRealMatrix.java","line_number":345,"column_number":-1,"description":"return from a call to int Array2DRowRealMatrix.getColumnDimension()"},{"level":2,"filename":"src/main/java/org/apache/commons/math3/optim/linear/SimplexTableau.java","line_number":545,"column_number":-1,"description":"return from a call to int SimplexTableau.getWidth()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/linear/SimplexSolver.java","line_number":199,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/linear/SimplexSolver.java","line_number":213,"column_number":-1,"description":"return from a call to Integer SimplexSolver.getPivotColumn(SimplexTableau)"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/linear/SimplexSolver.java","line_number":324,"column_number":-1,"description":""}],"key":"SimplexSolver.java|doIteration|NULL_DEREFERENCE","node_key":"3677875e6aead27ee1320f16c80d8b0f","hash":"a2233287217ebc81054cc741cbdf5b26","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `y` last assigned on line 356 could be null and is dereferenced at line 370.","severity":"ERROR","line":370,"column":-1,"procedure":"org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator$3.value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure):org.apache.commons.math3.analysis.differentiation.DerivativeStructure[][]","procedure_start_line":344,"file":"src/main/java/org/apache/commons/math3/analysis/differentiation/FiniteDifferencesDifferentiator.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/analysis/differentiation/FiniteDifferencesDifferentiator.java","line_number":344,"column_number":-1,"description":"start of procedure value(...)"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/analysis/differentiation/FiniteDifferencesDifferentiator.java","line_number":348,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java","line_number":232,"column_number":-1,"description":"start of procedure getOrder()"},{"level":2,"filename":"src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java","line_number":640,"column_number":-1,"description":"start of procedure getOrder()"},{"level":2,"filename":"src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java","line_number":641,"column_number":-1,"description":"return from a call to int DSCompiler.getOrder()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java","line_number":232,"column_number":-1,"description":"return from a call to int DerivativeStructure.getOrder()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/analysis/differentiation/FiniteDifferencesDifferentiator.java","line_number":348,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/analysis/differentiation/FiniteDifferencesDifferentiator.java","line_number":353,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java","line_number":260,"column_number":-1,"description":"start of procedure getValue()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java","line_number":261,"column_number":-1,"description":"return from a call to double DerivativeStructure.getValue()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/analysis/differentiation/FiniteDifferencesDifferentiator.java","line_number":353,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/util/FastMath.java","line_number":3477,"column_number":-1,"description":"start of procedure min(...)"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/util/FastMath.java","line_number":3478,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/util/FastMath.java","line_number":3481,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/util/FastMath.java","line_number":3482,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/util/FastMath.java","line_number":3494,"column_number":-1,"description":"return from a call to double FastMath.min(double,double)"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/analysis/differentiation/FiniteDifferencesDifferentiator.java","line_number":353,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/util/FastMath.java","line_number":3545,"column_number":-1,"description":"start of procedure max(...)"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/util/FastMath.java","line_number":3546,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/util/FastMath.java","line_number":3547,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/util/FastMath.java","line_number":3562,"column_number":-1,"description":"return from a call to double FastMath.max(double,double)"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/analysis/differentiation/FiniteDifferencesDifferentiator.java","line_number":353,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/apache/commons/math3/analysis/differentiation/FiniteDifferencesDifferentiator.java","line_number":356,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/apache/commons/math3/analysis/differentiation/FiniteDifferencesDifferentiator.java","line_number":357,"column_number":-1,"description":"Taking false branch"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/analysis/differentiation/FiniteDifferencesDifferentiator.java","line_number":370,"column_number":-1,"description":""}],"key":"FiniteDifferencesDifferentiator.java|value|NULL_DEREFERENCE","node_key":"f78e6cfd38dac75060167b407360e5b5","hash":"fa0ca4d65e2eb03ad9d557bc7616869e","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `guess` last assigned on line 375 could be null and is dereferenced at line 377.","severity":"ERROR","line":377,"column":-1,"procedure":"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.doOptimize():org.apache.commons.math3.optim.PointValuePair","procedure_start_line":371,"file":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java","line_number":371,"column_number":-1,"description":"start of procedure doOptimize()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java","line_number":373,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/MultivariateOptimizer.java","line_number":100,"column_number":-1,"description":"start of procedure getGoalType()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/MultivariateOptimizer.java","line_number":101,"column_number":-1,"description":"return from a call to GoalType MultivariateOptimizer.getGoalType()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java","line_number":373,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java","line_number":374,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java","line_number":935,"column_number":-1,"description":"start of procedure CMAESOptimizer$FitnessFunction(...)"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java","line_number":936,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java","line_number":937,"column_number":-1,"description":"return from a call to CMAESOptimizer$FitnessFunction.<init>(CMAESOptimizer)"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java","line_number":375,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/BaseMultivariateOptimizer.java","line_number":108,"column_number":-1,"description":"start of procedure getStartPoint()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/BaseMultivariateOptimizer.java","line_number":109,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/BaseMultivariateOptimizer.java","line_number":109,"column_number":-1,"description":"return from a call to double[] BaseMultivariateOptimizer.getStartPoint()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java","line_number":377,"column_number":-1,"description":""}],"key":"CMAESOptimizer.java|doOptimize|NULL_DEREFERENCE","node_key":"08c0b6dbba9aac20118c31b3221373c4","hash":"e849d3b9c6e79a1482ef1c920fcbebb0","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `guess` last assigned on line 503 could be null and is dereferenced at line 505.","severity":"ERROR","line":505,"column":-1,"procedure":"org.apache.commons.math3.optimization.direct.CMAESOptimizer.doOptimize():org.apache.commons.math3.optimization.PointValuePair","procedure_start_line":498,"file":"src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java","line_number":498,"column_number":-1,"description":"start of procedure doOptimize()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java","line_number":499,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java","line_number":670,"column_number":-1,"description":"start of procedure checkParameters()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java","line_number":671,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java","line_number":246,"column_number":-1,"description":"start of procedure getStartPoint()"},{"level":2,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java","line_number":247,"column_number":-1,"description":"Taking true branch"},{"level":2,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java","line_number":247,"column_number":-1,"description":"return from a call to double[] BaseAbstractMultivariateOptimizer.getStartPoint()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java","line_number":672,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java","line_number":253,"column_number":-1,"description":"start of procedure getLowerBound()"},{"level":2,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java","line_number":254,"column_number":-1,"description":"Taking false branch"},{"level":2,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java","line_number":254,"column_number":-1,"description":"return from a call to double[] BaseAbstractMultivariateOptimizer.getLowerBound()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java","line_number":673,"column_number":-1,"description":""},{"level":2,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java","line_number":260,"column_number":-1,"description":"start of procedure getUpperBound()"},{"level":2,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java","line_number":261,"column_number":-1,"description":"Taking false branch"},{"level":2,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java","line_number":261,"column_number":-1,"description":"return from a call to double[] BaseAbstractMultivariateOptimizer.getUpperBound()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java","line_number":675,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java","line_number":689,"column_number":-1,"description":"return from a call to void CMAESOptimizer.checkParameters()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java","line_number":501,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java","line_number":239,"column_number":-1,"description":"start of procedure getGoalType()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java","line_number":240,"column_number":-1,"description":"return from a call to GoalType BaseAbstractMultivariateOptimizer.getGoalType()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java","line_number":501,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java","line_number":502,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java","line_number":1017,"column_number":-1,"description":"start of procedure CMAESOptimizer$FitnessFunction(...)"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java","line_number":1018,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java","line_number":1019,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java","line_number":1020,"column_number":-1,"description":"return from a call to CMAESOptimizer$FitnessFunction.<init>(CMAESOptimizer)"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java","line_number":503,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java","line_number":246,"column_number":-1,"description":"start of procedure getStartPoint()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java","line_number":247,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java","line_number":247,"column_number":-1,"description":"return from a call to double[] BaseAbstractMultivariateOptimizer.getStartPoint()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java","line_number":505,"column_number":-1,"description":""}],"key":"CMAESOptimizer.java|doOptimize|NULL_DEREFERENCE","node_key":"08c0b6dbba9aac20118c31b3221373c4","hash":"e849d3b9c6e79a1482ef1c920fcbebb0","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `init` last assigned on line 560 could be null and is dereferenced at line 565.","severity":"ERROR","line":565,"column":-1,"procedure":"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.checkParameters():void","procedure_start_line":559,"file":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java","line_number":559,"column_number":-1,"description":"start of procedure checkParameters()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java","line_number":560,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/BaseMultivariateOptimizer.java","line_number":108,"column_number":-1,"description":"start of procedure getStartPoint()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/BaseMultivariateOptimizer.java","line_number":109,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/BaseMultivariateOptimizer.java","line_number":109,"column_number":-1,"description":"return from a call to double[] BaseMultivariateOptimizer.getStartPoint()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java","line_number":561,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/BaseMultivariateOptimizer.java","line_number":114,"column_number":-1,"description":"start of procedure getLowerBound()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/BaseMultivariateOptimizer.java","line_number":115,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/BaseMultivariateOptimizer.java","line_number":115,"column_number":-1,"description":"return from a call to double[] BaseMultivariateOptimizer.getLowerBound()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java","line_number":562,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/BaseMultivariateOptimizer.java","line_number":120,"column_number":-1,"description":"start of procedure getUpperBound()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/BaseMultivariateOptimizer.java","line_number":121,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/BaseMultivariateOptimizer.java","line_number":121,"column_number":-1,"description":"return from a call to double[] BaseMultivariateOptimizer.getUpperBound()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java","line_number":564,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java","line_number":565,"column_number":-1,"description":"Taking false branch"}],"key":"CMAESOptimizer.java|checkParameters|NULL_DEREFERENCE","node_key":"c3eeb014397b2c15b2dffabe6b7b8bfd","hash":"0c3372b4fbcc4711d5c62b3b27e98099","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `init` last assigned on line 671 could be null and is dereferenced at line 676.","severity":"ERROR","line":676,"column":-1,"procedure":"org.apache.commons.math3.optimization.direct.CMAESOptimizer.checkParameters():void","procedure_start_line":670,"file":"src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java","line_number":670,"column_number":-1,"description":"start of procedure checkParameters()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java","line_number":671,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java","line_number":246,"column_number":-1,"description":"start of procedure getStartPoint()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java","line_number":247,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java","line_number":247,"column_number":-1,"description":"return from a call to double[] BaseAbstractMultivariateOptimizer.getStartPoint()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java","line_number":672,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java","line_number":253,"column_number":-1,"description":"start of procedure getLowerBound()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java","line_number":254,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java","line_number":254,"column_number":-1,"description":"return from a call to double[] BaseAbstractMultivariateOptimizer.getLowerBound()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java","line_number":673,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java","line_number":260,"column_number":-1,"description":"start of procedure getUpperBound()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java","line_number":261,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java","line_number":261,"column_number":-1,"description":"return from a call to double[] BaseAbstractMultivariateOptimizer.getUpperBound()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java","line_number":675,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java","line_number":676,"column_number":-1,"description":"Taking false branch"}],"key":"CMAESOptimizer.java|checkParameters|NULL_DEREFERENCE","node_key":"c3eeb014397b2c15b2dffabe6b7b8bfd","hash":"0c3372b4fbcc4711d5c62b3b27e98099","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `lB` last assigned on line 963 could be null and is dereferenced at line 967.","severity":"ERROR","line":967,"column":-1,"procedure":"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction.isFeasible(double[]):boolean","procedure_start_line":962,"file":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java","line_number":962,"column_number":-1,"description":"start of procedure isFeasible(...)"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java","line_number":963,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/BaseMultivariateOptimizer.java","line_number":114,"column_number":-1,"description":"start of procedure getLowerBound()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/BaseMultivariateOptimizer.java","line_number":115,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/BaseMultivariateOptimizer.java","line_number":115,"column_number":-1,"description":"return from a call to double[] BaseMultivariateOptimizer.getLowerBound()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java","line_number":964,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/BaseMultivariateOptimizer.java","line_number":120,"column_number":-1,"description":"start of procedure getUpperBound()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/BaseMultivariateOptimizer.java","line_number":121,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/BaseMultivariateOptimizer.java","line_number":121,"column_number":-1,"description":"return from a call to double[] BaseMultivariateOptimizer.getUpperBound()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java","line_number":966,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java","line_number":967,"column_number":-1,"description":"Taking false branch"}],"key":"CMAESOptimizer.java|isFeasible|NULL_DEREFERENCE","node_key":"dfb32847ba47978af2dafa5e33bc8d61","hash":"c4f6dcff3d0a085808e8c0cfcce7b8ca","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `lB` last assigned on line 982 could be null and is dereferenced at line 987.","severity":"ERROR","line":987,"column":-1,"procedure":"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction.repair(double[]):double[]","procedure_start_line":981,"file":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java","line_number":981,"column_number":-1,"description":"start of procedure repair(...)"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java","line_number":982,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/BaseMultivariateOptimizer.java","line_number":114,"column_number":-1,"description":"start of procedure getLowerBound()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/BaseMultivariateOptimizer.java","line_number":115,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/BaseMultivariateOptimizer.java","line_number":115,"column_number":-1,"description":"return from a call to double[] BaseMultivariateOptimizer.getLowerBound()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java","line_number":983,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/BaseMultivariateOptimizer.java","line_number":120,"column_number":-1,"description":"start of procedure getUpperBound()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/BaseMultivariateOptimizer.java","line_number":121,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/BaseMultivariateOptimizer.java","line_number":121,"column_number":-1,"description":"return from a call to double[] BaseMultivariateOptimizer.getUpperBound()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java","line_number":985,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java","line_number":986,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java","line_number":987,"column_number":-1,"description":"Taking false branch"}],"key":"CMAESOptimizer.java|repair|NULL_DEREFERENCE","node_key":"dfb32847ba47978af2dafa5e33bc8d61","hash":"c43299cba372d5c8cdb3ade1265bf29b","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `lB` last assigned on line 1043 could be null and is dereferenced at line 1047.","severity":"ERROR","line":1047,"column":-1,"procedure":"org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction.isFeasible(double[]):boolean","procedure_start_line":1042,"file":"src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java","line_number":1042,"column_number":-1,"description":"start of procedure isFeasible(...)"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java","line_number":1043,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java","line_number":253,"column_number":-1,"description":"start of procedure getLowerBound()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java","line_number":254,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java","line_number":254,"column_number":-1,"description":"return from a call to double[] BaseAbstractMultivariateOptimizer.getLowerBound()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java","line_number":1044,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java","line_number":260,"column_number":-1,"description":"start of procedure getUpperBound()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java","line_number":261,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java","line_number":261,"column_number":-1,"description":"return from a call to double[] BaseAbstractMultivariateOptimizer.getUpperBound()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java","line_number":1046,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java","line_number":1047,"column_number":-1,"description":"Taking false branch"}],"key":"CMAESOptimizer.java|isFeasible|NULL_DEREFERENCE","node_key":"dfb32847ba47978af2dafa5e33bc8d61","hash":"c4f6dcff3d0a085808e8c0cfcce7b8ca","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `lB` last assigned on line 1069 could be null and is dereferenced at line 1074.","severity":"ERROR","line":1074,"column":-1,"procedure":"org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction.repair(double[]):double[]","procedure_start_line":1068,"file":"src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java","line_number":1068,"column_number":-1,"description":"start of procedure repair(...)"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java","line_number":1069,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java","line_number":253,"column_number":-1,"description":"start of procedure getLowerBound()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java","line_number":254,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java","line_number":254,"column_number":-1,"description":"return from a call to double[] BaseAbstractMultivariateOptimizer.getLowerBound()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java","line_number":1070,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java","line_number":260,"column_number":-1,"description":"start of procedure getUpperBound()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java","line_number":261,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java","line_number":261,"column_number":-1,"description":"return from a call to double[] BaseAbstractMultivariateOptimizer.getUpperBound()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java","line_number":1072,"column_number":-1,"description":""},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java","line_number":1073,"column_number":-1,"description":"Taking true branch"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java","line_number":1074,"column_number":-1,"description":"Taking false branch"}],"key":"CMAESOptimizer.java|repair|NULL_DEREFERENCE","node_key":"dfb32847ba47978af2dafa5e33bc8d61","hash":"c43299cba372d5c8cdb3ade1265bf29b","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `init` last assigned on line 2379 could be null and is dereferenced at line 2380.","severity":"ERROR","line":2380,"column":-1,"procedure":"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizer.setup(double[],double[]):void","procedure_start_line":2375,"file":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java","line_number":2375,"column_number":-1,"description":"start of procedure setup(...)"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java","line_number":2377,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java","line_number":2442,"column_number":-1,"description":"start of procedure printMethod()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java","line_number":2444,"column_number":-1,"description":"return from a call to void BOBYQAOptimizer.printMethod()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java","line_number":2379,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/BaseMultivariateOptimizer.java","line_number":108,"column_number":-1,"description":"start of procedure getStartPoint()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/BaseMultivariateOptimizer.java","line_number":109,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optim/BaseMultivariateOptimizer.java","line_number":109,"column_number":-1,"description":"return from a call to double[] BaseMultivariateOptimizer.getStartPoint()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java","line_number":2380,"column_number":-1,"description":""}],"key":"BOBYQAOptimizer.java|setup|NULL_DEREFERENCE","node_key":"18086a76ec6f499138a84f176568ec09","hash":"c4638f99e7a46f1f95010b1d79fff90c","bug_type_hum":"Null Dereference"},{"bug_type":"NULL_DEREFERENCE","qualifier":"object `init` last assigned on line 2384 could be null and is dereferenced at line 2385.","severity":"ERROR","line":2385,"column":-1,"procedure":"org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.setup(double[],double[]):void","procedure_start_line":2380,"file":"src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java","line_number":2380,"column_number":-1,"description":"start of procedure setup(...)"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java","line_number":2382,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java","line_number":2447,"column_number":-1,"description":"start of procedure printMethod()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java","line_number":2449,"column_number":-1,"description":"return from a call to void BOBYQAOptimizer.printMethod()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java","line_number":2384,"column_number":-1,"description":""},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java","line_number":246,"column_number":-1,"description":"start of procedure getStartPoint()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java","line_number":247,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java","line_number":247,"column_number":-1,"description":"return from a call to double[] BaseAbstractMultivariateOptimizer.getStartPoint()"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java","line_number":2385,"column_number":-1,"description":""}],"key":"BOBYQAOptimizer.java|setup|NULL_DEREFERENCE","node_key":"18086a76ec6f499138a84f176568ec09","hash":"c4638f99e7a46f1f95010b1d79fff90c","bug_type_hum":"Null Dereference"},{"bug_type":"DEADLOCK","qualifier":"Potential deadlock. `DescriptiveStatistics.<init>(DescriptiveStatistics)` (Trace 1) and `void ResizableDoubleArray.copy(ResizableDoubleArray,ResizableDoubleArray)` (Trace 2) acquire locks `source` in `class org.apache.commons.math3.util.ResizableDoubleArray` and `dest` in `class org.apache.commons.math3.util.ResizableDoubleArray` in reverse orders. Additional report(s) on the same line were suppressed.","severity":"ERROR","line":153,"column":-1,"procedure":"org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.<init>(org.apache.commons.math3.stat.descriptive.DescriptiveStatistics)","procedure_start_line":0,"file":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":153,"column_number":-1,"description":"[Trace 1] `DescriptiveStatistics.<init>(DescriptiveStatistics)`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":153,"column_number":-1,"description":"Method call: `void DescriptiveStatistics.copy(DescriptiveStatistics,DescriptiveStatistics)`"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":748,"column_number":-1,"description":"Method call: `ResizableDoubleArray ResizableDoubleArray.copy()`"},{"level":2,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":1148,"column_number":-1,"description":" locks `this` in `class org.apache.commons.math3.util.ResizableDoubleArray`"},{"level":3,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":1150,"column_number":-1,"description":"Method call: `void ResizableDoubleArray.copy(ResizableDoubleArray,ResizableDoubleArray)`"},{"level":4,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":1126,"column_number":-1,"description":" locks `source` in `class org.apache.commons.math3.util.ResizableDoubleArray`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":1126,"column_number":-1,"description":"[Trace 2] `void ResizableDoubleArray.copy(ResizableDoubleArray,ResizableDoubleArray)`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":1126,"column_number":-1,"description":" locks `source` in `class org.apache.commons.math3.util.ResizableDoubleArray`"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":1127,"column_number":-1,"description":" locks `dest` in `class org.apache.commons.math3.util.ResizableDoubleArray`"}],"key":"DescriptiveStatistics.java|<init>|DEADLOCK","hash":"f58e17ea28b46df8de21e02ebf947641","bug_type_hum":"Deadlock"},{"bug_type":"DEADLOCK","qualifier":"Potential deadlock. `SynchronizedDescriptiveStatistics.<init>(SynchronizedDescriptiveStatistics)` (Trace 1) and `void ResizableDoubleArray.copy(ResizableDoubleArray,ResizableDoubleArray)` (Trace 2) acquire locks `source` in `class org.apache.commons.math3.util.ResizableDoubleArray` and `dest` in `class org.apache.commons.math3.util.ResizableDoubleArray` in reverse orders. Additional report(s) on the same line were suppressed.","severity":"ERROR","line":67,"column":-1,"procedure":"org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics.<init>(org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics)","procedure_start_line":0,"file":"src/main/java/org/apache/commons/math3/stat/descriptive/SynchronizedDescriptiveStatistics.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/SynchronizedDescriptiveStatistics.java","line_number":67,"column_number":-1,"description":"[Trace 1] `SynchronizedDescriptiveStatistics.<init>(SynchronizedDescriptiveStatistics)`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/SynchronizedDescriptiveStatistics.java","line_number":67,"column_number":-1,"description":"Method call: `void SynchronizedDescriptiveStatistics.copy(SynchronizedDescriptiveStatistics,SynchronizedDescriptiveStatistics)`"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/SynchronizedDescriptiveStatistics.java","line_number":181,"column_number":-1,"description":"Method call: `void DescriptiveStatistics.copy(DescriptiveStatistics,DescriptiveStatistics)`"},{"level":2,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":748,"column_number":-1,"description":"Method call: `ResizableDoubleArray ResizableDoubleArray.copy()`"},{"level":3,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":1148,"column_number":-1,"description":" locks `this` in `class org.apache.commons.math3.util.ResizableDoubleArray`"},{"level":4,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":1150,"column_number":-1,"description":"Method call: `void ResizableDoubleArray.copy(ResizableDoubleArray,ResizableDoubleArray)`"},{"level":5,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":1126,"column_number":-1,"description":" locks `source` in `class org.apache.commons.math3.util.ResizableDoubleArray`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":1126,"column_number":-1,"description":"[Trace 2] `void ResizableDoubleArray.copy(ResizableDoubleArray,ResizableDoubleArray)`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":1126,"column_number":-1,"description":" locks `source` in `class org.apache.commons.math3.util.ResizableDoubleArray`"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":1127,"column_number":-1,"description":" locks `dest` in `class org.apache.commons.math3.util.ResizableDoubleArray`"}],"key":"SynchronizedDescriptiveStatistics.java|<init>|DEADLOCK","hash":"e3379bec3aed550597fa036779716ee8","bug_type_hum":"Deadlock"},{"bug_type":"DEADLOCK","qualifier":"Potential deadlock. `DescriptiveStatistics DescriptiveStatistics.copy()` (Trace 1) and `void ResizableDoubleArray.copy(ResizableDoubleArray,ResizableDoubleArray)` (Trace 2) acquire locks `source` in `class org.apache.commons.math3.util.ResizableDoubleArray` and `dest` in `class org.apache.commons.math3.util.ResizableDoubleArray` in reverse orders. Additional report(s) on the same line were suppressed.","severity":"ERROR","line":731,"column":-1,"procedure":"org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.copy():org.apache.commons.math3.stat.descriptive.DescriptiveStatistics","procedure_start_line":0,"file":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":731,"column_number":-1,"description":"[Trace 1] `DescriptiveStatistics DescriptiveStatistics.copy()`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":731,"column_number":-1,"description":"Method call: `void DescriptiveStatistics.copy(DescriptiveStatistics,DescriptiveStatistics)`"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":748,"column_number":-1,"description":"Method call: `ResizableDoubleArray ResizableDoubleArray.copy()`"},{"level":2,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":1148,"column_number":-1,"description":" locks `this` in `class org.apache.commons.math3.util.ResizableDoubleArray`"},{"level":3,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":1150,"column_number":-1,"description":"Method call: `void ResizableDoubleArray.copy(ResizableDoubleArray,ResizableDoubleArray)`"},{"level":4,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":1126,"column_number":-1,"description":" locks `source` in `class org.apache.commons.math3.util.ResizableDoubleArray`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":1126,"column_number":-1,"description":"[Trace 2] `void ResizableDoubleArray.copy(ResizableDoubleArray,ResizableDoubleArray)`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":1126,"column_number":-1,"description":" locks `source` in `class org.apache.commons.math3.util.ResizableDoubleArray`"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":1127,"column_number":-1,"description":" locks `dest` in `class org.apache.commons.math3.util.ResizableDoubleArray`"}],"key":"DescriptiveStatistics.java|copy|DEADLOCK","hash":"5d14f77ef5d3589abadb3b30f59cbe12","bug_type_hum":"Deadlock"},{"bug_type":"DEADLOCK","qualifier":"Potential deadlock. `DescriptiveStatistics SynchronizedDescriptiveStatistics.copy()` (Trace 1) and `void SynchronizedDescriptiveStatistics.copy(SynchronizedDescriptiveStatistics,SynchronizedDescriptiveStatistics)` (Trace 2) acquire locks `source` in `class org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics` and `dest` in `class org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics` in reverse orders. Additional report(s) on the same line were suppressed.","severity":"ERROR","line":36,"column":-1,"procedure":"org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics.copy():org.apache.commons.math3.stat.descriptive.DescriptiveStatistics","procedure_start_line":0,"file":"src/main/java/org/apache/commons/math3/stat/descriptive/SynchronizedDescriptiveStatistics.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/SynchronizedDescriptiveStatistics.java","line_number":36,"column_number":-1,"description":"[Trace 1] `DescriptiveStatistics SynchronizedDescriptiveStatistics.copy()`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/SynchronizedDescriptiveStatistics.java","line_number":36,"column_number":-1,"description":"Method call: `SynchronizedDescriptiveStatistics SynchronizedDescriptiveStatistics.copy()`"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/SynchronizedDescriptiveStatistics.java","line_number":157,"column_number":-1,"description":" locks `this` in `class org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics`"},{"level":2,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/SynchronizedDescriptiveStatistics.java","line_number":161,"column_number":-1,"description":"Method call: `void SynchronizedDescriptiveStatistics.copy(SynchronizedDescriptiveStatistics,SynchronizedDescriptiveStatistics)`"},{"level":3,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/SynchronizedDescriptiveStatistics.java","line_number":179,"column_number":-1,"description":" locks `source` in `class org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/SynchronizedDescriptiveStatistics.java","line_number":179,"column_number":-1,"description":"[Trace 2] `void SynchronizedDescriptiveStatistics.copy(SynchronizedDescriptiveStatistics,SynchronizedDescriptiveStatistics)`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/SynchronizedDescriptiveStatistics.java","line_number":179,"column_number":-1,"description":" locks `source` in `class org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics`"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/SynchronizedDescriptiveStatistics.java","line_number":180,"column_number":-1,"description":" locks `dest` in `class org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics`"}],"key":"SynchronizedDescriptiveStatistics.java|copy|DEADLOCK","hash":"20307db78392a4e77506ca65973ed4a0","bug_type_hum":"Deadlock"},{"bug_type":"DEADLOCK","qualifier":"Potential deadlock. `SynchronizedDescriptiveStatistics SynchronizedDescriptiveStatistics.copy()` (Trace 1) and `void SynchronizedDescriptiveStatistics.copy(SynchronizedDescriptiveStatistics,SynchronizedDescriptiveStatistics)` (Trace 2) acquire locks `source` in `class org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics` and `dest` in `class org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics` in reverse orders. Additional report(s) on the same line were suppressed.","severity":"ERROR","line":157,"column":-1,"procedure":"org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics.copy():org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics","procedure_start_line":0,"file":"src/main/java/org/apache/commons/math3/stat/descriptive/SynchronizedDescriptiveStatistics.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/SynchronizedDescriptiveStatistics.java","line_number":157,"column_number":-1,"description":"[Trace 1] `SynchronizedDescriptiveStatistics SynchronizedDescriptiveStatistics.copy()`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/SynchronizedDescriptiveStatistics.java","line_number":157,"column_number":-1,"description":" locks `this` in `class org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics`"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/SynchronizedDescriptiveStatistics.java","line_number":161,"column_number":-1,"description":"Method call: `void SynchronizedDescriptiveStatistics.copy(SynchronizedDescriptiveStatistics,SynchronizedDescriptiveStatistics)`"},{"level":2,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/SynchronizedDescriptiveStatistics.java","line_number":179,"column_number":-1,"description":" locks `source` in `class org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/SynchronizedDescriptiveStatistics.java","line_number":179,"column_number":-1,"description":"[Trace 2] `void SynchronizedDescriptiveStatistics.copy(SynchronizedDescriptiveStatistics,SynchronizedDescriptiveStatistics)`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/SynchronizedDescriptiveStatistics.java","line_number":179,"column_number":-1,"description":" locks `source` in `class org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics`"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/SynchronizedDescriptiveStatistics.java","line_number":180,"column_number":-1,"description":" locks `dest` in `class org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics`"}],"key":"SynchronizedDescriptiveStatistics.java|copy|DEADLOCK","hash":"2d151d74dcdf2f9964f87fb1fe02fbbd","bug_type_hum":"Deadlock"},{"bug_type":"DEADLOCK","qualifier":"Potential deadlock. `SynchronizedDescriptiveStatistics SynchronizedDescriptiveStatistics.copy()` (Trace 1) and `void ResizableDoubleArray.copy(ResizableDoubleArray,ResizableDoubleArray)` (Trace 2) acquire locks `source` in `class org.apache.commons.math3.util.ResizableDoubleArray` and `dest` in `class org.apache.commons.math3.util.ResizableDoubleArray` in reverse orders. Additional report(s) on the same line were suppressed.","severity":"ERROR","line":161,"column":-1,"procedure":"org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics.copy():org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics","procedure_start_line":0,"file":"src/main/java/org/apache/commons/math3/stat/descriptive/SynchronizedDescriptiveStatistics.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/SynchronizedDescriptiveStatistics.java","line_number":161,"column_number":-1,"description":"[Trace 1] `SynchronizedDescriptiveStatistics SynchronizedDescriptiveStatistics.copy()`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/SynchronizedDescriptiveStatistics.java","line_number":161,"column_number":-1,"description":"Method call: `void SynchronizedDescriptiveStatistics.copy(SynchronizedDescriptiveStatistics,SynchronizedDescriptiveStatistics)`"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/SynchronizedDescriptiveStatistics.java","line_number":181,"column_number":-1,"description":"Method call: `void DescriptiveStatistics.copy(DescriptiveStatistics,DescriptiveStatistics)`"},{"level":2,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":748,"column_number":-1,"description":"Method call: `ResizableDoubleArray ResizableDoubleArray.copy()`"},{"level":3,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":1148,"column_number":-1,"description":" locks `this` in `class org.apache.commons.math3.util.ResizableDoubleArray`"},{"level":4,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":1150,"column_number":-1,"description":"Method call: `void ResizableDoubleArray.copy(ResizableDoubleArray,ResizableDoubleArray)`"},{"level":5,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":1126,"column_number":-1,"description":" locks `source` in `class org.apache.commons.math3.util.ResizableDoubleArray`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":1126,"column_number":-1,"description":"[Trace 2] `void ResizableDoubleArray.copy(ResizableDoubleArray,ResizableDoubleArray)`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":1126,"column_number":-1,"description":" locks `source` in `class org.apache.commons.math3.util.ResizableDoubleArray`"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":1127,"column_number":-1,"description":" locks `dest` in `class org.apache.commons.math3.util.ResizableDoubleArray`"}],"key":"SynchronizedDescriptiveStatistics.java|copy|DEADLOCK","hash":"1a557c4c445357745469a311191751b0","bug_type_hum":"Deadlock"},{"bug_type":"DEADLOCK","qualifier":"Potential deadlock. `SummaryStatistics SynchronizedSummaryStatistics.copy()` (Trace 1) and `void SynchronizedSummaryStatistics.copy(SynchronizedSummaryStatistics,SynchronizedSummaryStatistics)` (Trace 2) acquire locks `source` in `class org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics` and `dest` in `class org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics` in reverse orders. Additional report(s) on the same line were suppressed.","severity":"ERROR","line":36,"column":-1,"procedure":"org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics.copy():org.apache.commons.math3.stat.descriptive.SummaryStatistics","procedure_start_line":0,"file":"src/main/java/org/apache/commons/math3/stat/descriptive/SynchronizedSummaryStatistics.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/SynchronizedSummaryStatistics.java","line_number":36,"column_number":-1,"description":"[Trace 1] `SummaryStatistics SynchronizedSummaryStatistics.copy()`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/SynchronizedSummaryStatistics.java","line_number":36,"column_number":-1,"description":"Method call: `SynchronizedSummaryStatistics SynchronizedSummaryStatistics.copy()`"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/SynchronizedSummaryStatistics.java","line_number":330,"column_number":-1,"description":" locks `this` in `class org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics`"},{"level":2,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/SynchronizedSummaryStatistics.java","line_number":334,"column_number":-1,"description":"Method call: `void SynchronizedSummaryStatistics.copy(SynchronizedSummaryStatistics,SynchronizedSummaryStatistics)`"},{"level":3,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/SynchronizedSummaryStatistics.java","line_number":352,"column_number":-1,"description":" locks `source` in `class org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/SynchronizedSummaryStatistics.java","line_number":352,"column_number":-1,"description":"[Trace 2] `void SynchronizedSummaryStatistics.copy(SynchronizedSummaryStatistics,SynchronizedSummaryStatistics)`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/SynchronizedSummaryStatistics.java","line_number":352,"column_number":-1,"description":" locks `source` in `class org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics`"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/SynchronizedSummaryStatistics.java","line_number":353,"column_number":-1,"description":" locks `dest` in `class org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics`"}],"key":"SynchronizedSummaryStatistics.java|copy|DEADLOCK","hash":"beb8dd036e1a3cfe2d0add6edf7b08d3","bug_type_hum":"Deadlock"},{"bug_type":"DEADLOCK","qualifier":"Potential deadlock. `SynchronizedSummaryStatistics SynchronizedSummaryStatistics.copy()` (Trace 1) and `void SynchronizedSummaryStatistics.copy(SynchronizedSummaryStatistics,SynchronizedSummaryStatistics)` (Trace 2) acquire locks `source` in `class org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics` and `dest` in `class org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics` in reverse orders. Additional report(s) on the same line were suppressed.","severity":"ERROR","line":330,"column":-1,"procedure":"org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics.copy():org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics","procedure_start_line":0,"file":"src/main/java/org/apache/commons/math3/stat/descriptive/SynchronizedSummaryStatistics.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/SynchronizedSummaryStatistics.java","line_number":330,"column_number":-1,"description":"[Trace 1] `SynchronizedSummaryStatistics SynchronizedSummaryStatistics.copy()`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/SynchronizedSummaryStatistics.java","line_number":330,"column_number":-1,"description":" locks `this` in `class org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics`"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/SynchronizedSummaryStatistics.java","line_number":334,"column_number":-1,"description":"Method call: `void SynchronizedSummaryStatistics.copy(SynchronizedSummaryStatistics,SynchronizedSummaryStatistics)`"},{"level":2,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/SynchronizedSummaryStatistics.java","line_number":352,"column_number":-1,"description":" locks `source` in `class org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/SynchronizedSummaryStatistics.java","line_number":352,"column_number":-1,"description":"[Trace 2] `void SynchronizedSummaryStatistics.copy(SynchronizedSummaryStatistics,SynchronizedSummaryStatistics)`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/SynchronizedSummaryStatistics.java","line_number":352,"column_number":-1,"description":" locks `source` in `class org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics`"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/SynchronizedSummaryStatistics.java","line_number":353,"column_number":-1,"description":" locks `dest` in `class org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics`"}],"key":"SynchronizedSummaryStatistics.java|copy|DEADLOCK","hash":"9bfb14a3bca9797200557bff0585ada3","bug_type_hum":"Deadlock"},{"bug_type":"DEADLOCK","qualifier":"Potential deadlock. `ResizableDoubleArray ResizableDoubleArray.copy()` (Trace 1) and `void ResizableDoubleArray.copy(ResizableDoubleArray,ResizableDoubleArray)` (Trace 2) acquire locks `source` in `class org.apache.commons.math3.util.ResizableDoubleArray` and `dest` in `class org.apache.commons.math3.util.ResizableDoubleArray` in reverse orders. Additional report(s) on the same line were suppressed.","severity":"ERROR","line":1148,"column":-1,"procedure":"org.apache.commons.math3.util.ResizableDoubleArray.copy():org.apache.commons.math3.util.ResizableDoubleArray","procedure_start_line":0,"file":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":1148,"column_number":-1,"description":"[Trace 1] `ResizableDoubleArray ResizableDoubleArray.copy()`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":1148,"column_number":-1,"description":" locks `this` in `class org.apache.commons.math3.util.ResizableDoubleArray`"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":1150,"column_number":-1,"description":"Method call: `void ResizableDoubleArray.copy(ResizableDoubleArray,ResizableDoubleArray)`"},{"level":2,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":1126,"column_number":-1,"description":" locks `source` in `class org.apache.commons.math3.util.ResizableDoubleArray`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":1126,"column_number":-1,"description":"[Trace 2] `void ResizableDoubleArray.copy(ResizableDoubleArray,ResizableDoubleArray)`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":1126,"column_number":-1,"description":" locks `source` in `class org.apache.commons.math3.util.ResizableDoubleArray`"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":1127,"column_number":-1,"description":" locks `dest` in `class org.apache.commons.math3.util.ResizableDoubleArray`"}],"key":"ResizableDoubleArray.java|copy|DEADLOCK","hash":"539b62ba332e78d35f3e43a295ba040a","bug_type_hum":"Deadlock"},{"bug_type":"DEADLOCK","qualifier":"Potential deadlock. `void DescriptiveStatistics.copy(DescriptiveStatistics,DescriptiveStatistics)` (Trace 1) and `void ResizableDoubleArray.copy(ResizableDoubleArray,ResizableDoubleArray)` (Trace 2) acquire locks `source` in `class org.apache.commons.math3.util.ResizableDoubleArray` and `dest` in `class org.apache.commons.math3.util.ResizableDoubleArray` in reverse orders. Additional report(s) on the same line were suppressed.","severity":"ERROR","line":748,"column":-1,"procedure":"org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.copy(org.apache.commons.math3.stat.descriptive.DescriptiveStatistics,org.apache.commons.math3.stat.descriptive.DescriptiveStatistics):void","procedure_start_line":0,"file":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":748,"column_number":-1,"description":"[Trace 1] `void DescriptiveStatistics.copy(DescriptiveStatistics,DescriptiveStatistics)`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":748,"column_number":-1,"description":"Method call: `ResizableDoubleArray ResizableDoubleArray.copy()`"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":1148,"column_number":-1,"description":" locks `this` in `class org.apache.commons.math3.util.ResizableDoubleArray`"},{"level":2,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":1150,"column_number":-1,"description":"Method call: `void ResizableDoubleArray.copy(ResizableDoubleArray,ResizableDoubleArray)`"},{"level":3,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":1126,"column_number":-1,"description":" locks `source` in `class org.apache.commons.math3.util.ResizableDoubleArray`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":1126,"column_number":-1,"description":"[Trace 2] `void ResizableDoubleArray.copy(ResizableDoubleArray,ResizableDoubleArray)`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":1126,"column_number":-1,"description":" locks `source` in `class org.apache.commons.math3.util.ResizableDoubleArray`"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":1127,"column_number":-1,"description":" locks `dest` in `class org.apache.commons.math3.util.ResizableDoubleArray`"}],"key":"DescriptiveStatistics.java|copy|DEADLOCK","hash":"a1c89e9655986c8d72fd4ab672d52e28","bug_type_hum":"Deadlock"},{"bug_type":"DEADLOCK","qualifier":"Potential deadlock. `void SynchronizedDescriptiveStatistics.copy(SynchronizedDescriptiveStatistics,SynchronizedDescriptiveStatistics)` (Trace 1) and `void ResizableDoubleArray.copy(ResizableDoubleArray,ResizableDoubleArray)` (Trace 2) acquire locks `source` in `class org.apache.commons.math3.util.ResizableDoubleArray` and `dest` in `class org.apache.commons.math3.util.ResizableDoubleArray` in reverse orders. Additional report(s) on the same line were suppressed.","severity":"ERROR","line":181,"column":-1,"procedure":"org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics.copy(org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics,org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics):void","procedure_start_line":0,"file":"src/main/java/org/apache/commons/math3/stat/descriptive/SynchronizedDescriptiveStatistics.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/SynchronizedDescriptiveStatistics.java","line_number":181,"column_number":-1,"description":"[Trace 1] `void SynchronizedDescriptiveStatistics.copy(SynchronizedDescriptiveStatistics,SynchronizedDescriptiveStatistics)`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/SynchronizedDescriptiveStatistics.java","line_number":181,"column_number":-1,"description":"Method call: `void DescriptiveStatistics.copy(DescriptiveStatistics,DescriptiveStatistics)`"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":748,"column_number":-1,"description":"Method call: `ResizableDoubleArray ResizableDoubleArray.copy()`"},{"level":2,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":1148,"column_number":-1,"description":" locks `this` in `class org.apache.commons.math3.util.ResizableDoubleArray`"},{"level":3,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":1150,"column_number":-1,"description":"Method call: `void ResizableDoubleArray.copy(ResizableDoubleArray,ResizableDoubleArray)`"},{"level":4,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":1126,"column_number":-1,"description":" locks `source` in `class org.apache.commons.math3.util.ResizableDoubleArray`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":1126,"column_number":-1,"description":"[Trace 2] `void ResizableDoubleArray.copy(ResizableDoubleArray,ResizableDoubleArray)`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":1126,"column_number":-1,"description":" locks `source` in `class org.apache.commons.math3.util.ResizableDoubleArray`"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":1127,"column_number":-1,"description":" locks `dest` in `class org.apache.commons.math3.util.ResizableDoubleArray`"}],"key":"SynchronizedDescriptiveStatistics.java|copy|DEADLOCK","hash":"25fb32a898154532996a4ff5a581252e","bug_type_hum":"Deadlock"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void BaseRuleFactory.addRule(Pair)` mutates container `this.pointsAndWeights` via call to `put` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":117,"column":-1,"procedure":"org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactory.addRule(org.apache.commons.math3.util.Pair):void","procedure_start_line":0,"file":"src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java","line_number":117,"column_number":-1,"description":"<Write on unknown thread>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java","line_number":117,"column_number":-1,"description":"Write to container `this.pointsAndWeights` via call to `put`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java","line_number":97,"column_number":-1,"description":"<Write on background thread>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java","line_number":97,"column_number":-1,"description":"call to void BaseRuleFactory.addRule(Pair)"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java","line_number":117,"column_number":-1,"description":"Write to container `this.pointsAndWeights` via call to `put`"}],"key":"BaseRuleFactory.java|addRule|THREAD_SAFETY_VIOLATION","hash":"5704abf7a7de0e3f65a042fd029bcb91","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAL8AAAAIAAAAQAAAACqgsAB1AP+SCVZzcmMvbWFpbi9qYXZhL29yZy9hcGFjaGUvY29tbW9ucy9tYXRoMy9hbmFseXNpcy9pbnRlZ3JhdGlvbi9nYXVzcy9CYXNlUnVsZUZhY3RvcnkuamF2YaCwAHUA/5IJVnNyYy9tYWluL2phdmEvb3JnL2FwYWNoZS9jb21tb25zL21hdGgzL2FuYWx5c2lzL2ludGVncmF0aW9uL2dhdXNzL0Jhc2VSdWxlRmFjdG9yeS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void AggregateSummaryStatistics$AggregatingSummaryStatistics.addValue(double)` indirectly writes to field `this.n` outside of synchronization.\n Reporting because this access may occur on a background thread.","severity":"WARNING","line":386,"column":-1,"procedure":"org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics$AggregatingSummaryStatistics.addValue(double):void","procedure_start_line":0,"file":"src/main/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatistics.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatistics.java","line_number":386,"column_number":-1,"description":"call to void SummaryStatistics.addValue(double)"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/SummaryStatistics.java","line_number":168,"column_number":-1,"description":"access to `this.n`"}],"key":"AggregateSummaryStatistics.java|addValue|THREAD_SAFETY_VIOLATION","hash":"501055d1f01301534cb1306a63064f8f","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFkAAAAEAAAAHgAAABSgsAEAqAD/kglOc3JjL21haW4vamF2YS9vcmcvYXBhY2hlL2NvbW1vbnMvbWF0aDMvc3RhdC9kZXNjcmlwdGl2ZS9TdW1tYXJ5U3RhdGlzdGljcy5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `DescriptiveStatistics DescriptiveStatistics.copy()` indirectly reads without synchronization from `this.geometricMeanImpl`. Potentially races with write in method `DescriptiveStatistics.setGeometricMeanImpl(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":731,"column":-1,"procedure":"org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.copy():org.apache.commons.math3.stat.descriptive.DescriptiveStatistics","procedure_start_line":0,"file":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":731,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":731,"column_number":-1,"description":"call to void DescriptiveStatistics.copy(DescriptiveStatistics,DescriptiveStatistics)"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":758,"column_number":-1,"description":"access to `this.geometricMeanImpl`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":530,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":530,"column_number":-1,"description":"access to `this.geometricMeanImpl`"}],"key":"DescriptiveStatistics.java|copy|THREAD_SAFETY_VIOLATION","hash":"a04a85febc2e85e72890dfdd2aa6cb19","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAALkAAAAIAAAAPgAAACqgsAEC9gD/kglSc3JjL21haW4vamF2YS9vcmcvYXBhY2hlL2NvbW1vbnMvbWF0aDMvc3RhdC9kZXNjcmlwdGl2ZS9EZXNjcmlwdGl2ZVN0YXRpc3RpY3MuamF2YaCwAQISAP+SCVJzcmMvbWFpbi9qYXZhL29yZy9hcGFjaGUvY29tbW9ucy9tYXRoMy9zdGF0L2Rlc2NyaXB0aXZlL0Rlc2NyaXB0aXZlU3RhdGlzdGljcy5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `boolean AggregateSummaryStatistics$AggregatingSummaryStatistics.equals(Object)` indirectly reads without synchronization from `this.aggregateStatistics.n`. Potentially races with write in method `AggregateSummaryStatistics$AggregatingSummaryStatistics.addValue(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":409,"column":-1,"procedure":"org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics$AggregatingSummaryStatistics.equals(java.lang.Object):boolean","procedure_start_line":0,"file":"src/main/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatistics.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatistics.java","line_number":409,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatistics.java","line_number":409,"column_number":-1,"description":"call to boolean SummaryStatistics.equals(Object)"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/SummaryStatistics.java","line_number":382,"column_number":-1,"description":"call to long SummaryStatistics.getN()"},{"level":2,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/SummaryStatistics.java","line_number":176,"column_number":-1,"description":"access to `this.aggregateStatistics.n`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatistics.java","line_number":388,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatistics.java","line_number":388,"column_number":-1,"description":"call to void SummaryStatistics.addValue(double)"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/SummaryStatistics.java","line_number":168,"column_number":-1,"description":"access to `this.aggregateStatistics.n`"}],"key":"AggregateSummaryStatistics.java|equals|THREAD_SAFETY_VIOLATION","hash":"9cb1007524dc32a86c27940d4af365e0","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAALEAAAAIAAAAPAAAACigsAEAsAD/kglOc3JjL21haW4vamF2YS9vcmcvYXBhY2hlL2NvbW1vbnMvbWF0aDMvc3RhdC9kZXNjcmlwdGl2ZS9TdW1tYXJ5U3RhdGlzdGljcy5qYXZhoLABAKgA/5IJTnNyYy9tYWluL2phdmEvb3JnL2FwYWNoZS9jb21tb25zL21hdGgzL3N0YXQvZGVzY3JpcHRpdmUvU3VtbWFyeVN0YXRpc3RpY3MuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `boolean AggregateSummaryStatistics$AggregatingSummaryStatistics.equals(Object)` indirectly reads without synchronization from `this.n`. Potentially races with write in method `AggregateSummaryStatistics$AggregatingSummaryStatistics.addValue(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":408,"column":-1,"procedure":"org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics$AggregatingSummaryStatistics.equals(java.lang.Object):boolean","procedure_start_line":0,"file":"src/main/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatistics.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatistics.java","line_number":408,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatistics.java","line_number":408,"column_number":-1,"description":"call to boolean SummaryStatistics.equals(Object)"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/SummaryStatistics.java","line_number":382,"column_number":-1,"description":"call to long SummaryStatistics.getN()"},{"level":2,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/SummaryStatistics.java","line_number":176,"column_number":-1,"description":"access to `this.n`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatistics.java","line_number":386,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatistics.java","line_number":386,"column_number":-1,"description":"call to void SummaryStatistics.addValue(double)"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/SummaryStatistics.java","line_number":168,"column_number":-1,"description":"access to `this.n`"}],"key":"AggregateSummaryStatistics.java|equals|THREAD_SAFETY_VIOLATION","hash":"3c2464d237e093f0d51fdf2aca332c74","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAALEAAAAIAAAAPAAAACigsAEAsAD/kglOc3JjL21haW4vamF2YS9vcmcvYXBhY2hlL2NvbW1vbnMvbWF0aDMvc3RhdC9kZXNjcmlwdGl2ZS9TdW1tYXJ5U3RhdGlzdGljcy5qYXZhoLABAKgA/5IJTnNyYy9tYWluL2phdmEvb3JnL2FwYWNoZS9jb21tb25zL21hdGgzL3N0YXQvZGVzY3JpcHRpdmUvU3VtbWFyeVN0YXRpc3RpY3MuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `double[] ResizableDoubleArray.getArrayRef()` reads without synchronization from `this.internalArray`. Potentially races with write in method `ResizableDoubleArray.addElementRolling(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":897,"column":-1,"procedure":"org.apache.commons.math3.util.ResizableDoubleArray.getArrayRef():double[]","procedure_start_line":0,"file":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":897,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":897,"column_number":-1,"description":"access to `this.internalArray`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":483,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":483,"column_number":-1,"description":"call to void ResizableDoubleArray.expand()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":702,"column_number":-1,"description":"access to `this.internalArray`"}],"key":"ResizableDoubleArray.java|getArrayRef|THREAD_SAFETY_VIOLATION","hash":"d56e51827bc4ddc9f61c96eecd803a23","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAJ8AAAAIAAAAOAAAACagsAEDgQD/kglFc3JjL21haW4vamF2YS9vcmcvYXBhY2hlL2NvbW1vbnMvbWF0aDMvdXRpbC9SZXNpemFibGVEb3VibGVBcnJheS5qYXZhoLABAr4A/5IJRXNyYy9tYWluL2phdmEvb3JnL2FwYWNoZS9jb21tb25zL21hdGgzL3V0aWwvUmVzaXphYmxlRG91YmxlQXJyYXkuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `int ResizableDoubleArray.getCapacity()` reads without synchronization from `this.internalArray`. Potentially races with write in method `ResizableDoubleArray.addElementRolling(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":846,"column":-1,"procedure":"org.apache.commons.math3.util.ResizableDoubleArray.getCapacity():int","procedure_start_line":0,"file":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":846,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":846,"column_number":-1,"description":"access to `this.internalArray`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":483,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":483,"column_number":-1,"description":"call to void ResizableDoubleArray.expand()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":702,"column_number":-1,"description":"access to `this.internalArray`"}],"key":"ResizableDoubleArray.java|getCapacity|THREAD_SAFETY_VIOLATION","hash":"efe0326310021c6ed4b3f98c2cd84689","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAJ8AAAAIAAAAOAAAACagsAEDTgD/kglFc3JjL21haW4vamF2YS9vcmcvYXBhY2hlL2NvbW1vbnMvbWF0aDMvdXRpbC9SZXNpemFibGVEb3VibGVBcnJheS5qYXZhoLABAr4A/5IJRXNyYy9tYWluL2phdmEvb3JnL2FwYWNoZS9jb21tb25zL21hdGgzL3V0aWwvUmVzaXphYmxlRG91YmxlQXJyYXkuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `float ResizableDoubleArray.getContractionCriteria()` indirectly reads without synchronization from `this.contractionCriterion`. Potentially races with write in method `ResizableDoubleArray.setContractionCriteria(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":733,"column":-1,"procedure":"org.apache.commons.math3.util.ResizableDoubleArray.getContractionCriteria():float","procedure_start_line":0,"file":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":733,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":733,"column_number":-1,"description":"call to double ResizableDoubleArray.getContractionCriterion()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":750,"column_number":-1,"description":"access to `this.contractionCriterion`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":928,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":928,"column_number":-1,"description":"access to `this.contractionCriterion`"}],"key":"ResizableDoubleArray.java|getContractionCriteria|THREAD_SAFETY_VIOLATION","hash":"a97060f906b515f1f753941dbfde53fa","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAJ8AAAAIAAAAOAAAACagsAEC7gD/kglFc3JjL21haW4vamF2YS9vcmcvYXBhY2hlL2NvbW1vbnMvbWF0aDMvdXRpbC9SZXNpemFibGVEb3VibGVBcnJheS5qYXZhoLABA6AA/5IJRXNyYy9tYWluL2phdmEvb3JnL2FwYWNoZS9jb21tb25zL21hdGgzL3V0aWwvUmVzaXphYmxlRG91YmxlQXJyYXkuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `double ResizableDoubleArray.getContractionCriterion()` reads without synchronization from `this.contractionCriterion`. Potentially races with write in method `ResizableDoubleArray.setContractionCriteria(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":750,"column":-1,"procedure":"org.apache.commons.math3.util.ResizableDoubleArray.getContractionCriterion():double","procedure_start_line":0,"file":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":750,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":750,"column_number":-1,"description":"access to `this.contractionCriterion`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":928,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":928,"column_number":-1,"description":"access to `this.contractionCriterion`"}],"key":"ResizableDoubleArray.java|getContractionCriterion|THREAD_SAFETY_VIOLATION","hash":"7d5b8ff6d5c39d58cdd14c21bef61826","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAJ8AAAAIAAAAOAAAACagsAEC7gD/kglFc3JjL21haW4vamF2YS9vcmcvYXBhY2hlL2NvbW1vbnMvbWF0aDMvdXRpbC9SZXNpemFibGVEb3VibGVBcnJheS5qYXZhoLABA6AA/5IJRXNyYy9tYWluL2phdmEvb3JnL2FwYWNoZS9jb21tb25zL21hdGgzL3V0aWwvUmVzaXphYmxlRG91YmxlQXJyYXkuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `float ResizableDoubleArray.getExpansionFactor()` reads without synchronization from `this.expansionFactor`. Potentially races with write in method `ResizableDoubleArray.setExpansionFactor(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":799,"column":-1,"procedure":"org.apache.commons.math3.util.ResizableDoubleArray.getExpansionFactor():float","procedure_start_line":0,"file":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":799,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":799,"column_number":-1,"description":"access to `this.expansionFactor`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":992,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":992,"column_number":-1,"description":"access to `this.expansionFactor`"}],"key":"ResizableDoubleArray.java|getExpansionFactor|THREAD_SAFETY_VIOLATION","hash":"b9a4d1ddb123d72dae45a68491a06bcb","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAJ8AAAAIAAAAOAAAACagsAEDHwD/kglFc3JjL21haW4vamF2YS9vcmcvYXBhY2hlL2NvbW1vbnMvbWF0aDMvdXRpbC9SZXNpemFibGVEb3VibGVBcnJheS5qYXZhoLABA+AA/5IJRXNyYy9tYWluL2phdmEvb3JnL2FwYWNoZS9jb21tb25zL21hdGgzL3V0aWwvUmVzaXphYmxlRG91YmxlQXJyYXkuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `int ResizableDoubleArray.getExpansionMode()` reads without synchronization from `this.expansionMode`. Potentially races with write in method `ResizableDoubleArray.setExpansionMode(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":812,"column":-1,"procedure":"org.apache.commons.math3.util.ResizableDoubleArray.getExpansionMode():int","procedure_start_line":0,"file":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":812,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":812,"column_number":-1,"description":"access to `this.expansionMode`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":1015,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":1015,"column_number":-1,"description":"call to void ResizableDoubleArray.setExpansionMode(ResizableDoubleArray$ExpansionMode)"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":1030,"column_number":-1,"description":"access to `this.expansionMode`"}],"key":"ResizableDoubleArray.java|getExpansionMode|THREAD_SAFETY_VIOLATION","hash":"9afde93298743ca5aa77393ca1e92285","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAJ8AAAAIAAAAOAAAACagsAEDLAD/kglFc3JjL21haW4vamF2YS9vcmcvYXBhY2hlL2NvbW1vbnMvbWF0aDMvdXRpbC9SZXNpemFibGVEb3VibGVBcnJheS5qYXZhoLABBAYA/5IJRXNyYy9tYWluL2phdmEvb3JnL2FwYWNoZS9jb21tb25zL21hdGgzL3V0aWwvUmVzaXphYmxlRG91YmxlQXJyYXkuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `double DescriptiveStatistics.getGeometricMean()` reads without synchronization from `this.geometricMeanImpl`. Potentially races with write in method `DescriptiveStatistics.setGeometricMeanImpl(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":217,"column":-1,"procedure":"org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.getGeometricMean():double","procedure_start_line":0,"file":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":217,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":217,"column_number":-1,"description":"access to `this.geometricMeanImpl`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":530,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":530,"column_number":-1,"description":"access to `this.geometricMeanImpl`"}],"key":"DescriptiveStatistics.java|getGeometricMean|THREAD_SAFETY_VIOLATION","hash":"883637159e55c33dd35360bc7e44fa71","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAALkAAAAIAAAAPgAAACqgsAEA2QD/kglSc3JjL21haW4vamF2YS9vcmcvYXBhY2hlL2NvbW1vbnMvbWF0aDMvc3RhdC9kZXNjcmlwdGl2ZS9EZXNjcmlwdGl2ZVN0YXRpc3RpY3MuamF2YaCwAQISAP+SCVJzcmMvbWFpbi9qYXZhL29yZy9hcGFjaGUvY29tbW9ucy9tYXRoMy9zdGF0L2Rlc2NyaXB0aXZlL0Rlc2NyaXB0aXZlU3RhdGlzdGljcy5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `double DescriptiveStatistics.getKurtosis()` reads without synchronization from `this.kurtosisImpl`. Potentially races with write in method `DescriptiveStatistics.setKurtosisImpl(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":279,"column":-1,"procedure":"org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.getKurtosis():double","procedure_start_line":0,"file":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":279,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":279,"column_number":-1,"description":"access to `this.kurtosisImpl`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":551,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":551,"column_number":-1,"description":"access to `this.kurtosisImpl`"}],"key":"DescriptiveStatistics.java|getKurtosis|THREAD_SAFETY_VIOLATION","hash":"b4c158977ffb317d21dacff3a92251bd","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAALkAAAAIAAAAPgAAACqgsAEBFwD/kglSc3JjL21haW4vamF2YS9vcmcvYXBhY2hlL2NvbW1vbnMvbWF0aDMvc3RhdC9kZXNjcmlwdGl2ZS9EZXNjcmlwdGl2ZVN0YXRpc3RpY3MuamF2YaCwAQInAP+SCVJzcmMvbWFpbi9qYXZhL29yZy9hcGFjaGUvY29tbW9ucy9tYXRoMy9zdGF0L2Rlc2NyaXB0aXZlL0Rlc2NyaXB0aXZlU3RhdGlzdGljcy5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `double DescriptiveStatistics.getMax()` reads without synchronization from `this.maxImpl`. Potentially races with write in method `DescriptiveStatistics.setMaxImpl(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":287,"column":-1,"procedure":"org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.getMax():double","procedure_start_line":0,"file":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":287,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":287,"column_number":-1,"description":"access to `this.maxImpl`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":572,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":572,"column_number":-1,"description":"access to `this.maxImpl`"}],"key":"DescriptiveStatistics.java|getMax|THREAD_SAFETY_VIOLATION","hash":"6b41a1feb90fd44f71cf14e2588478f4","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAALkAAAAIAAAAPgAAACqgsAEBHwD/kglSc3JjL21haW4vamF2YS9vcmcvYXBhY2hlL2NvbW1vbnMvbWF0aDMvc3RhdC9kZXNjcmlwdGl2ZS9EZXNjcmlwdGl2ZVN0YXRpc3RpY3MuamF2YaCwAQI8AP+SCVJzcmMvbWFpbi9qYXZhL29yZy9hcGFjaGUvY29tbW9ucy9tYXRoMy9zdGF0L2Rlc2NyaXB0aXZlL0Rlc2NyaXB0aXZlU3RhdGlzdGljcy5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `double DescriptiveStatistics.getMean()` reads without synchronization from `this.meanImpl`. Potentially races with write in method `DescriptiveStatistics.setMeanImpl(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":207,"column":-1,"procedure":"org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.getMean():double","procedure_start_line":0,"file":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":207,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":207,"column_number":-1,"description":"access to `this.meanImpl`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":508,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":508,"column_number":-1,"description":"access to `this.meanImpl`"}],"key":"DescriptiveStatistics.java|getMean|THREAD_SAFETY_VIOLATION","hash":"4d1e58f17ed752830123c7885118ddcd","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAALkAAAAIAAAAPgAAACqgsAEAzwD/kglSc3JjL21haW4vamF2YS9vcmcvYXBhY2hlL2NvbW1vbnMvbWF0aDMvc3RhdC9kZXNjcmlwdGl2ZS9EZXNjcmlwdGl2ZVN0YXRpc3RpY3MuamF2YaCwAQH8AP+SCVJzcmMvbWFpbi9qYXZhL29yZy9hcGFjaGUvY29tbW9ucy9tYXRoMy9zdGF0L2Rlc2NyaXB0aXZlL0Rlc2NyaXB0aXZlU3RhdGlzdGljcy5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `double DescriptiveStatistics.getMin()` reads without synchronization from `this.minImpl`. Potentially races with write in method `DescriptiveStatistics.setMinImpl(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":295,"column":-1,"procedure":"org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.getMin():double","procedure_start_line":0,"file":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":295,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":295,"column_number":-1,"description":"access to `this.minImpl`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":593,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":593,"column_number":-1,"description":"access to `this.minImpl`"}],"key":"DescriptiveStatistics.java|getMin|THREAD_SAFETY_VIOLATION","hash":"10b860ed73c39d789f2bcd6b1e33b887","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAALkAAAAIAAAAPgAAACqgsAEBJwD/kglSc3JjL21haW4vamF2YS9vcmcvYXBhY2hlL2NvbW1vbnMvbWF0aDMvc3RhdC9kZXNjcmlwdGl2ZS9EZXNjcmlwdGl2ZVN0YXRpc3RpY3MuamF2YaCwAQJRAP+SCVJzcmMvbWFpbi9qYXZhL29yZy9hcGFjaGUvY29tbW9ucy9tYXRoMy9zdGF0L2Rlc2NyaXB0aXZlL0Rlc2NyaXB0aXZlU3RhdGlzdGljcy5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `double DescriptiveStatistics.getPercentile(double)` reads without synchronization from `this.percentileImpl`. Potentially races with write in method `DescriptiveStatistics.setPercentileImpl(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":427,"column":-1,"procedure":"org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.getPercentile(double):double","procedure_start_line":0,"file":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":427,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":427,"column_number":-1,"description":"access to `this.percentileImpl`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":634,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":634,"column_number":-1,"description":"access to `this.percentileImpl`"}],"key":"DescriptiveStatistics.java|getPercentile|THREAD_SAFETY_VIOLATION","hash":"fa1e6d9d44f11d7055d4fb3f53f036da","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAALkAAAAIAAAAPgAAACqgsAEBqwD/kglSc3JjL21haW4vamF2YS9vcmcvYXBhY2hlL2NvbW1vbnMvbWF0aDMvc3RhdC9kZXNjcmlwdGl2ZS9EZXNjcmlwdGl2ZVN0YXRpc3RpY3MuamF2YaCwAQJ6AP+SCVJzcmMvbWFpbi9qYXZhL29yZy9hcGFjaGUvY29tbW9ucy9tYXRoMy9zdGF0L2Rlc2NyaXB0aXZlL0Rlc2NyaXB0aXZlU3RhdGlzdGljcy5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `double DescriptiveStatistics.getSkewness()` reads without synchronization from `this.skewnessImpl`. Potentially races with write in method `DescriptiveStatistics.setSkewnessImpl(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":269,"column":-1,"procedure":"org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.getSkewness():double","procedure_start_line":0,"file":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":269,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":269,"column_number":-1,"description":"access to `this.skewnessImpl`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":656,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":656,"column_number":-1,"description":"access to `this.skewnessImpl`"}],"key":"DescriptiveStatistics.java|getSkewness|THREAD_SAFETY_VIOLATION","hash":"a5a8a374fad66d4ce2ae42b9f8dbf5d5","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAALkAAAAIAAAAPgAAACqgsAEBDQD/kglSc3JjL21haW4vamF2YS9vcmcvYXBhY2hlL2NvbW1vbnMvbWF0aDMvc3RhdC9kZXNjcmlwdGl2ZS9EZXNjcmlwdGl2ZVN0YXRpc3RpY3MuamF2YaCwAQKQAP+SCVJzcmMvbWFpbi9qYXZhL29yZy9hcGFjaGUvY29tbW9ucy9tYXRoMy9zdGF0L2Rlc2NyaXB0aXZlL0Rlc2NyaXB0aXZlU3RhdGlzdGljcy5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `double DescriptiveStatistics.getStandardDeviation()` indirectly reads without synchronization from `this.varianceImpl`. Potentially races with write in method `DescriptiveStatistics.setVarianceImpl(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":254,"column":-1,"procedure":"org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.getStandardDeviation():double","procedure_start_line":0,"file":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":254,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":254,"column_number":-1,"description":"call to double DescriptiveStatistics.getVariance()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":231,"column_number":-1,"description":"access to `this.varianceImpl`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":678,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":678,"column_number":-1,"description":"access to `this.varianceImpl`"}],"key":"DescriptiveStatistics.java|getStandardDeviation|THREAD_SAFETY_VIOLATION","hash":"66f0c91b732b3d609ade084c2de3c00e","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAALkAAAAIAAAAPgAAACqgsAEA5wD/kglSc3JjL21haW4vamF2YS9vcmcvYXBhY2hlL2NvbW1vbnMvbWF0aDMvc3RhdC9kZXNjcmlwdGl2ZS9EZXNjcmlwdGl2ZVN0YXRpc3RpY3MuamF2YaCwAQKmAP+SCVJzcmMvbWFpbi9qYXZhL29yZy9hcGFjaGUvY29tbW9ucy9tYXRoMy9zdGF0L2Rlc2NyaXB0aXZlL0Rlc2NyaXB0aXZlU3RhdGlzdGljcy5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `int ResizableDoubleArray.getStartIndex()` reads without synchronization from `this.startIndex`. Potentially races with write in method `ResizableDoubleArray.addElementRolling(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":912,"column":-1,"procedure":"org.apache.commons.math3.util.ResizableDoubleArray.getStartIndex():int","procedure_start_line":0,"file":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":912,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":912,"column_number":-1,"description":"access to `this.startIndex`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":486,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":486,"column_number":-1,"description":"access to `this.startIndex`"}],"key":"ResizableDoubleArray.java|getStartIndex|THREAD_SAFETY_VIOLATION","hash":"ba5956129488cf8428de4ecb0b952d68","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAJ8AAAAIAAAAOAAAACagsAEDkAD/kglFc3JjL21haW4vamF2YS9vcmcvYXBhY2hlL2NvbW1vbnMvbWF0aDMvdXRpbC9SZXNpemFibGVEb3VibGVBcnJheS5qYXZhoLABAeYA/5IJRXNyYy9tYWluL2phdmEvb3JnL2FwYWNoZS9jb21tb25zL21hdGgzL3V0aWwvUmVzaXphYmxlRG91YmxlQXJyYXkuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `double DescriptiveStatistics.getSum()` reads without synchronization from `this.sumImpl`. Potentially races with write in method `DescriptiveStatistics.setSumImpl(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":311,"column":-1,"procedure":"org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.getSum():double","procedure_start_line":0,"file":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":311,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":311,"column_number":-1,"description":"access to `this.sumImpl`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":720,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":720,"column_number":-1,"description":"access to `this.sumImpl`"}],"key":"DescriptiveStatistics.java|getSum|THREAD_SAFETY_VIOLATION","hash":"a090b329c2f2d5ca79f9e261e8c4f026","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAALkAAAAIAAAAPgAAACqgsAEBNwD/kglSc3JjL21haW4vamF2YS9vcmcvYXBhY2hlL2NvbW1vbnMvbWF0aDMvc3RhdC9kZXNjcmlwdGl2ZS9EZXNjcmlwdGl2ZVN0YXRpc3RpY3MuamF2YaCwAQLQAP+SCVJzcmMvbWFpbi9qYXZhL29yZy9hcGFjaGUvY29tbW9ucy9tYXRoMy9zdGF0L2Rlc2NyaXB0aXZlL0Rlc2NyaXB0aXZlU3RhdGlzdGljcy5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `double DescriptiveStatistics.getSumsq()` reads without synchronization from `this.sumsqImpl`. Potentially races with write in method `DescriptiveStatistics.setSumsqImpl(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":320,"column":-1,"procedure":"org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.getSumsq():double","procedure_start_line":0,"file":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":320,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":320,"column_number":-1,"description":"access to `this.sumsqImpl`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":699,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":699,"column_number":-1,"description":"access to `this.sumsqImpl`"}],"key":"DescriptiveStatistics.java|getSumsq|THREAD_SAFETY_VIOLATION","hash":"69f22e536021216f3e3a86f7af092334","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAALkAAAAIAAAAPgAAACqgsAEBQAD/kglSc3JjL21haW4vamF2YS9vcmcvYXBhY2hlL2NvbW1vbnMvbWF0aDMvc3RhdC9kZXNjcmlwdGl2ZS9EZXNjcmlwdGl2ZVN0YXRpc3RpY3MuamF2YaCwAQK7AP+SCVJzcmMvbWFpbi9qYXZhL29yZy9hcGFjaGUvY29tbW9ucy9tYXRoMy9zdGF0L2Rlc2NyaXB0aXZlL0Rlc2NyaXB0aXZlU3RhdGlzdGljcy5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `double DescriptiveStatistics.getVariance()` reads without synchronization from `this.varianceImpl`. Potentially races with write in method `DescriptiveStatistics.setVarianceImpl(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":231,"column":-1,"procedure":"org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.getVariance():double","procedure_start_line":0,"file":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":231,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":231,"column_number":-1,"description":"access to `this.varianceImpl`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":678,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":678,"column_number":-1,"description":"access to `this.varianceImpl`"}],"key":"DescriptiveStatistics.java|getVariance|THREAD_SAFETY_VIOLATION","hash":"2c2c290fe8ecffae8150a1a512bd6910","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAALkAAAAIAAAAPgAAACqgsAEA5wD/kglSc3JjL21haW4vamF2YS9vcmcvYXBhY2hlL2NvbW1vbnMvbWF0aDMvc3RhdC9kZXNjcmlwdGl2ZS9EZXNjcmlwdGl2ZVN0YXRpc3RpY3MuamF2YaCwAQKmAP+SCVJzcmMvbWFpbi9qYXZhL29yZy9hcGFjaGUvY29tbW9ucy9tYXRoMy9zdGF0L2Rlc2NyaXB0aXZlL0Rlc2NyaXB0aXZlU3RhdGlzdGljcy5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `int AggregateSummaryStatistics$AggregatingSummaryStatistics.hashCode()` indirectly reads without synchronization from `this.aggregateStatistics.n`. Potentially races with write in method `AggregateSummaryStatistics$AggregatingSummaryStatistics.addValue(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":418,"column":-1,"procedure":"org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics$AggregatingSummaryStatistics.hashCode():int","procedure_start_line":0,"file":"src/main/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatistics.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatistics.java","line_number":418,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatistics.java","line_number":418,"column_number":-1,"description":"call to int SummaryStatistics.hashCode()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/SummaryStatistics.java","line_number":399,"column_number":-1,"description":"call to long SummaryStatistics.getN()"},{"level":2,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/SummaryStatistics.java","line_number":176,"column_number":-1,"description":"access to `this.aggregateStatistics.n`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatistics.java","line_number":388,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatistics.java","line_number":388,"column_number":-1,"description":"call to void SummaryStatistics.addValue(double)"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/SummaryStatistics.java","line_number":168,"column_number":-1,"description":"access to `this.aggregateStatistics.n`"}],"key":"AggregateSummaryStatistics.java|hashCode|THREAD_SAFETY_VIOLATION","hash":"67837aecc16a74c36ce112053d0b5e02","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAALEAAAAIAAAAPAAAACigsAEAsAD/kglOc3JjL21haW4vamF2YS9vcmcvYXBhY2hlL2NvbW1vbnMvbWF0aDMvc3RhdC9kZXNjcmlwdGl2ZS9TdW1tYXJ5U3RhdGlzdGljcy5qYXZhoLABAKgA/5IJTnNyYy9tYWluL2phdmEvb3JnL2FwYWNoZS9jb21tb25zL21hdGgzL3N0YXQvZGVzY3JpcHRpdmUvU3VtbWFyeVN0YXRpc3RpY3MuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void ResizableDoubleArray.setContractionCriteria(float)` indirectly reads without synchronization from `this.expansionFactor`. Potentially races with write in method `ResizableDoubleArray.setExpansionFactor(...)`.\n Reporting because this access may occur on a background thread.","severity":"WARNING","line":926,"column":-1,"procedure":"org.apache.commons.math3.util.ResizableDoubleArray.setContractionCriteria(float):void","procedure_start_line":0,"file":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":926,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":926,"column_number":-1,"description":"call to float ResizableDoubleArray.getExpansionFactor()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":799,"column_number":-1,"description":"access to `this.expansionFactor`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":992,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":992,"column_number":-1,"description":"access to `this.expansionFactor`"}],"key":"ResizableDoubleArray.java|setContractionCriteria|THREAD_SAFETY_VIOLATION","hash":"afe4b9416f433b52029d704306c7f4f0","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAJ8AAAAIAAAAOAAAACagsAEDHwD/kglFc3JjL21haW4vamF2YS9vcmcvYXBhY2hlL2NvbW1vbnMvbWF0aDMvdXRpbC9SZXNpemFibGVEb3VibGVBcnJheS5qYXZhoLABA+AA/5IJRXNyYy9tYWluL2phdmEvb3JnL2FwYWNoZS9jb21tb25zL21hdGgzL3V0aWwvUmVzaXphYmxlRG91YmxlQXJyYXkuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `void ResizableDoubleArray.setExpansionFactor(float)` indirectly reads without synchronization from `this.contractionCriterion`. Potentially races with write in method `ResizableDoubleArray.setContractionCriteria(...)`.\n Reporting because this access may occur on a background thread.","severity":"WARNING","line":989,"column":-1,"procedure":"org.apache.commons.math3.util.ResizableDoubleArray.setExpansionFactor(float):void","procedure_start_line":0,"file":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":989,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":989,"column_number":-1,"description":"call to double ResizableDoubleArray.getContractionCriterion()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":750,"column_number":-1,"description":"access to `this.contractionCriterion`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":928,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":928,"column_number":-1,"description":"access to `this.contractionCriterion`"}],"key":"ResizableDoubleArray.java|setExpansionFactor|THREAD_SAFETY_VIOLATION","hash":"75d02f43ace489cbdca3f46d7110233f","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAJ8AAAAIAAAAOAAAACagsAEC7gD/kglFc3JjL21haW4vamF2YS9vcmcvYXBhY2hlL2NvbW1vbnMvbWF0aDMvdXRpbC9SZXNpemFibGVEb3VibGVBcnJheS5qYXZhoLABA6AA/5IJRXNyYy9tYWluL2phdmEvb3JnL2FwYWNoZS9jb21tb25zL21hdGgzL3V0aWwvUmVzaXphYmxlRG91YmxlQXJyYXkuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `void ResizableDoubleArray.setExpansionMode(ResizableDoubleArray$ExpansionMode)` writes to field `this.expansionMode` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":1030,"column":-1,"procedure":"org.apache.commons.math3.util.ResizableDoubleArray.setExpansionMode(org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode):void","procedure_start_line":0,"file":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":1030,"column_number":-1,"description":"<Write on unknown thread>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":1030,"column_number":-1,"description":"access to `this.expansionMode`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":1015,"column_number":-1,"description":"<Write on background thread>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":1015,"column_number":-1,"description":"call to void ResizableDoubleArray.setExpansionMode(ResizableDoubleArray$ExpansionMode)"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java","line_number":1030,"column_number":-1,"description":"access to `this.expansionMode`"}],"key":"ResizableDoubleArray.java|setExpansionMode|THREAD_SAFETY_VIOLATION","hash":"2a9f324280491b0dc03e4096342ca4fe","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFMAAAAFAAAAHwAAABagsAEEBgD/kglFc3JjL21haW4vamF2YS9vcmcvYXBhY2hlL2NvbW1vbnMvbWF0aDMvdXRpbC9SZXNpemFibGVEb3VibGVBcnJheS5qYXZhoAQEQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `String DescriptiveStatistics.toString()` indirectly reads without synchronization from `this.percentileImpl`. Potentially races with write in method `DescriptiveStatistics.setPercentileImpl(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":469,"column":-1,"procedure":"org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.toString():java.lang.String","procedure_start_line":0,"file":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":469,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":469,"column_number":-1,"description":"call to double DescriptiveStatistics.getPercentile(double)"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":427,"column_number":-1,"description":"access to `this.percentileImpl`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":634,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":634,"column_number":-1,"description":"access to `this.percentileImpl`"}],"key":"DescriptiveStatistics.java|toString|THREAD_SAFETY_VIOLATION","hash":"3f8ba895fb9de806f3e508e26a107316","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAALkAAAAIAAAAPgAAACqgsAEBqwD/kglSc3JjL21haW4vamF2YS9vcmcvYXBhY2hlL2NvbW1vbnMvbWF0aDMvc3RhdC9kZXNjcmlwdGl2ZS9EZXNjcmlwdGl2ZVN0YXRpc3RpY3MuamF2YaCwAQJ6AP+SCVJzcmMvbWFpbi9qYXZhL29yZy9hcGFjaGUvY29tbW9ucy9tYXRoMy9zdGF0L2Rlc2NyaXB0aXZlL0Rlc2NyaXB0aXZlU3RhdGlzdGljcy5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `String DescriptiveStatistics.toString()` indirectly reads without synchronization from `this.minImpl`. Potentially races with write in method `DescriptiveStatistics.setMinImpl(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":462,"column":-1,"procedure":"org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.toString():java.lang.String","procedure_start_line":0,"file":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":462,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":462,"column_number":-1,"description":"call to double DescriptiveStatistics.getMin()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":295,"column_number":-1,"description":"access to `this.minImpl`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":593,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":593,"column_number":-1,"description":"access to `this.minImpl`"}],"key":"DescriptiveStatistics.java|toString|THREAD_SAFETY_VIOLATION","hash":"0c6e7eea8b22a0e5883e282cf1d54385","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAALkAAAAIAAAAPgAAACqgsAEBJwD/kglSc3JjL21haW4vamF2YS9vcmcvYXBhY2hlL2NvbW1vbnMvbWF0aDMvc3RhdC9kZXNjcmlwdGl2ZS9EZXNjcmlwdGl2ZVN0YXRpc3RpY3MuamF2YaCwAQJRAP+SCVJzcmMvbWFpbi9qYXZhL29yZy9hcGFjaGUvY29tbW9ucy9tYXRoMy9zdGF0L2Rlc2NyaXB0aXZlL0Rlc2NyaXB0aXZlU3RhdGlzdGljcy5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `String DescriptiveStatistics.toString()` indirectly reads without synchronization from `this.maxImpl`. Potentially races with write in method `DescriptiveStatistics.setMaxImpl(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":463,"column":-1,"procedure":"org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.toString():java.lang.String","procedure_start_line":0,"file":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":463,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":463,"column_number":-1,"description":"call to double DescriptiveStatistics.getMax()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":287,"column_number":-1,"description":"access to `this.maxImpl`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":572,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":572,"column_number":-1,"description":"access to `this.maxImpl`"}],"key":"DescriptiveStatistics.java|toString|THREAD_SAFETY_VIOLATION","hash":"7104d92d7b2b7a5b9ab3f73f0d3414cc","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAALkAAAAIAAAAPgAAACqgsAEBHwD/kglSc3JjL21haW4vamF2YS9vcmcvYXBhY2hlL2NvbW1vbnMvbWF0aDMvc3RhdC9kZXNjcmlwdGl2ZS9EZXNjcmlwdGl2ZVN0YXRpc3RpY3MuamF2YaCwAQI8AP+SCVJzcmMvbWFpbi9qYXZhL29yZy9hcGFjaGUvY29tbW9ucy9tYXRoMy9zdGF0L2Rlc2NyaXB0aXZlL0Rlc2NyaXB0aXZlU3RhdGlzdGljcy5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `String DescriptiveStatistics.toString()` indirectly reads without synchronization from `this.meanImpl`. Potentially races with write in method `DescriptiveStatistics.setMeanImpl(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":464,"column":-1,"procedure":"org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.toString():java.lang.String","procedure_start_line":0,"file":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":464,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":464,"column_number":-1,"description":"call to double DescriptiveStatistics.getMean()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":207,"column_number":-1,"description":"access to `this.meanImpl`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":508,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":508,"column_number":-1,"description":"access to `this.meanImpl`"}],"key":"DescriptiveStatistics.java|toString|THREAD_SAFETY_VIOLATION","hash":"f5c6110d19ea3f11dde9a4239a50940c","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAALkAAAAIAAAAPgAAACqgsAEAzwD/kglSc3JjL21haW4vamF2YS9vcmcvYXBhY2hlL2NvbW1vbnMvbWF0aDMvc3RhdC9kZXNjcmlwdGl2ZS9EZXNjcmlwdGl2ZVN0YXRpc3RpY3MuamF2YaCwAQH8AP+SCVJzcmMvbWFpbi9qYXZhL29yZy9hcGFjaGUvY29tbW9ucy9tYXRoMy9zdGF0L2Rlc2NyaXB0aXZlL0Rlc2NyaXB0aXZlU3RhdGlzdGljcy5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `String DescriptiveStatistics.toString()` indirectly reads without synchronization from `this.varianceImpl`. Potentially races with write in method `DescriptiveStatistics.setVarianceImpl(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":465,"column":-1,"procedure":"org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.toString():java.lang.String","procedure_start_line":0,"file":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":465,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":465,"column_number":-1,"description":"call to double DescriptiveStatistics.getStandardDeviation()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":254,"column_number":-1,"description":"call to double DescriptiveStatistics.getVariance()"},{"level":2,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":231,"column_number":-1,"description":"access to `this.varianceImpl`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":678,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":678,"column_number":-1,"description":"access to `this.varianceImpl`"}],"key":"DescriptiveStatistics.java|toString|THREAD_SAFETY_VIOLATION","hash":"d10d21e74031ec5cc90fe0b4214b43f0","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAALkAAAAIAAAAPgAAACqgsAEA5wD/kglSc3JjL21haW4vamF2YS9vcmcvYXBhY2hlL2NvbW1vbnMvbWF0aDMvc3RhdC9kZXNjcmlwdGl2ZS9EZXNjcmlwdGl2ZVN0YXRpc3RpY3MuamF2YaCwAQKmAP+SCVJzcmMvbWFpbi9qYXZhL29yZy9hcGFjaGUvY29tbW9ucy9tYXRoMy9zdGF0L2Rlc2NyaXB0aXZlL0Rlc2NyaXB0aXZlU3RhdGlzdGljcy5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `String DescriptiveStatistics.toString()` indirectly reads without synchronization from `this.kurtosisImpl`. Potentially races with write in method `DescriptiveStatistics.setKurtosisImpl(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":474,"column":-1,"procedure":"org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.toString():java.lang.String","procedure_start_line":0,"file":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":474,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":474,"column_number":-1,"description":"call to double DescriptiveStatistics.getKurtosis()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":279,"column_number":-1,"description":"access to `this.kurtosisImpl`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":551,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":551,"column_number":-1,"description":"access to `this.kurtosisImpl`"}],"key":"DescriptiveStatistics.java|toString|THREAD_SAFETY_VIOLATION","hash":"b3066f0bcf5db73a70aef7277f5e0af8","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAALkAAAAIAAAAPgAAACqgsAEBFwD/kglSc3JjL21haW4vamF2YS9vcmcvYXBhY2hlL2NvbW1vbnMvbWF0aDMvc3RhdC9kZXNjcmlwdGl2ZS9EZXNjcmlwdGl2ZVN0YXRpc3RpY3MuamF2YaCwAQInAP+SCVJzcmMvbWFpbi9qYXZhL29yZy9hcGFjaGUvY29tbW9ucy9tYXRoMy9zdGF0L2Rlc2NyaXB0aXZlL0Rlc2NyaXB0aXZlU3RhdGlzdGljcy5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `String DescriptiveStatistics.toString()` indirectly reads without synchronization from `this.skewnessImpl`. Potentially races with write in method `DescriptiveStatistics.setSkewnessImpl(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":473,"column":-1,"procedure":"org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.toString():java.lang.String","procedure_start_line":0,"file":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","bug_trace":[{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":473,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":473,"column_number":-1,"description":"call to double DescriptiveStatistics.getSkewness()"},{"level":1,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":269,"column_number":-1,"description":"access to `this.skewnessImpl`"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":656,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java","line_number":656,"column_number":-1,"description":"access to `this.skewnessImpl`"}],"key":"DescriptiveStatistics.java|toString|THREAD_SAFETY_VIOLATION","hash":"79d41fefbe429d6135b4338243d1bba2","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAALkAAAAIAAAAPgAAACqgsAEBDQD/kglSc3JjL21haW4vamF2YS9vcmcvYXBhY2hlL2NvbW1vbnMvbWF0aDMvc3RhdC9kZXNjcmlwdGl2ZS9EZXNjcmlwdGl2ZVN0YXRpc3RpY3MuamF2YaCwAQKQAP+SCVJzcmMvbWFpbi9qYXZhL29yZy9hcGFjaGUvY29tbW9ucy9tYXRoMy9zdGF0L2Rlc2NyaXB0aXZlL0Rlc2NyaXB0aXZlU3RhdGlzdGljcy5qYXZhQA=="}]
