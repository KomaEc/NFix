Found 71 issues

src/main/java/org/apache/commons/math3/geometry/enclosing/WelzlEncloser.java:92: error: NULL_DEREFERENCE
  object `farthest` last assigned on line 90 could be null and is dereferenced by call to `contains(...)` at line 92.
  90.               final P farthest = selectFarthest(points, ball);
  91.   
  92. >             if (ball.contains(farthest, tolerance)) {
  93.                   // we have found a ball containing all points
  94.                   return ball;

src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java:160: error: NULL_DEREFERENCE
  object `previous` last assigned on line 153 could be null and is dereferenced at line 160.
  158.                   boolean converged = true;
  159.                   for (int i = 0; i < simplex.getSize(); i++) {
  160. >                     PointValuePair prev = previous[i];
  161.                       converged = converged &&
  162.                           checker.converged(iteration, prev, simplex.getPoint(i));

src/main/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizer.java:153: error: NULL_DEREFERENCE
  object `NonLinearConjugateGradientOptimizer.point` last assigned on line 151 could be null and is dereferenced at line 153.
  151.           point = getStartPoint();
  152.           final GoalType goal = getGoalType();
  153. >         final int n = point.length;
  154.           double[] r = computeObjectiveGradient(point);
  155.           if (goal == GoalType.MINIMIZE) {

src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java:166: error: NULL_DEREFERENCE
  object `guess` last assigned on line 165 could be null and is dereferenced at line 166.
  164.           final GoalType goal = getGoalType();
  165.           final double[] guess = getStartPoint();
  166. >         final int n = guess.length;
  167.   
  168.           final double[][] direc = new double[n][n];

src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer.java:172: error: NULL_DEREFERENCE
  object `guess` last assigned on line 171 could be null and is dereferenced at line 172.
  170.           final GoalType goal = getGoalType();
  171.           final double[] guess = getStartPoint();
  172. >         final int n = guess.length;
  173.   
  174.           final double[][] direc = new double[n][n];

src/main/java/org/apache/commons/math3/ml/neuralnet/sofm/KohonenUpdateAction.java:182: error: NULL_DEREFERENCE
  object `best` last assigned on line 180 could be null and is dereferenced at line 182.
  180.               final Neuron best = MapUtils.findBest(features, net, distance);
  181.   
  182. >             final double[] expect = best.getFeatures();
  183.               final double[] update = computeFeatures(expect,
  184.                                                       features,

src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java:253: error: NULL_DEREFERENCE
  object `nanPositions` last assigned on line 200 could be null and is dereferenced by call to `restoreNaNs(...)` at line 253.
  251.           }
  252.           if (nanStrategy == NaNStrategy.FIXED) {
  253. >             restoreNaNs(out, nanPositions);
  254.           }
  255.           return out;

src/main/java/org/apache/commons/math3/ml/neuralnet/MapUtils.java:205: error: NULL_DEREFERENCE
  object returned by `findBest(f,neurons,distance)` could be null and is dereferenced at line 205.
  203.           for (double[] f : data) {
  204.               ++count;
  205. >             d += distance.compute(f, findBest(f, neurons, distance).getFeatures());
  206.           }
  207.   

src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java:239: error: NULL_DEREFERENCE
  object returned by `getStartPoint()` could be null and is dereferenced by call to `ArrayRealVector(...)` at line 239.
  237.   
  238.           isMinimize = (getGoalType() == GoalType.MINIMIZE);
  239. >         currentBest = new ArrayRealVector(getStartPoint());
  240.   
  241.           final double value = bobyqa(lowerBound, upperBound);

src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java:244: error: NULL_DEREFERENCE
  object returned by `getStartPoint()` could be null and is dereferenced by call to `ArrayRealVector(...)` at line 244.
  242.   
  243.           isMinimize = (getGoalType() == GoalType.MINIMIZE);
  244. >         currentBest = new ArrayRealVector(getStartPoint());
  245.   
  246.           final double value = bobyqa(lowerBound, upperBound);

src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java:253: error: NULL_DEREFERENCE
  object `point` last assigned on line 251 could be null and is dereferenced at line 253.
  251.           final double[] point = getStartPoint();
  252.           final GoalType goal = getGoalType();
  253. >         final int n = point.length;
  254.           double[] r = computeObjectiveGradient(point);
  255.           if (goal == GoalType.MINIMIZE) {

src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java:266: error: RESOURCE_LEAK
  resource of type `java.io.InputStreamReader` acquired to `in` by call to `new()` at line 258 is not released after line 266.
  264.               }
  265.               // new adapter for the second pass
  266. >             in = new BufferedReader(new InputStreamReader(url.openStream(), charset));
  267.               fillBinStats(new StreamDataAdapter(in));
  268.               loaded = true;

src/main/java/org/apache/commons/math3/analysis/differentiation/FiniteDifferencesDifferentiator.java:316: error: NULL_DEREFERENCE
  object `y` last assigned on line 304 could be null and is dereferenced at line 316.
  314.   
  315.                   // evaluate derivatives
  316. >                 final DerivativeStructure[] value = new DerivativeStructure[y.length];
  317.                   for (int j = 0; j < value.length; ++j) {
  318.                       value[j] = evaluate(t, t0, y[j]);

src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java:302: error: NULL_DEREFERENCE
  object `projector.leaf` last assigned on line 300 could be null and is dereferenced by call to `getProjection()` at line 302.
  300.           final BoundaryProjector<S, T> projector = new BoundaryProjector<S, T>(point);
  301.           getTree(true).visit(projector);
  302. >         return projector.getProjection();
  303.       }
  304.   

src/main/java/org/apache/commons/math3/optim/linear/SimplexSolver.java:323: error: NULL_DEREFERENCE
  object `pivotCol` last assigned on line 322 could be null and is dereferenced at line 323.
  321.   
  322.           Integer pivotCol = getPivotColumn(tableau);
  323. >         Integer pivotRow = getPivotRow(tableau, pivotCol);
  324.           if (pivotRow == null) {
  325.               throw new UnboundedSolutionException();

src/main/java/org/apache/commons/math3/analysis/differentiation/FiniteDifferencesDifferentiator.java:369: error: NULL_DEREFERENCE
  object `y` last assigned on line 355 could be null and is dereferenced at line 369.
  367.   
  368.                   // evaluate derivatives
  369. >                 final DerivativeStructure[][] value = new DerivativeStructure[y.length][y[0].length];
  370.                   for (int j = 0; j < value.length; ++j) {
  371.                       for (int k = 0; k < y[j].length; ++k) {

src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:376: error: NULL_DEREFERENCE
  object `guess` last assigned on line 374 could be null and is dereferenced at line 376.
  374.           final double[] guess = getStartPoint();
  375.           // number of objective variables/problem dimension
  376. >         dimension = guess.length;
  377.           initializeCMA(guess);
  378.           iterations = 0;

src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java:504: error: NULL_DEREFERENCE
  object `guess` last assigned on line 502 could be null and is dereferenced at line 504.
  502.           final double[] guess = getStartPoint();
  503.           // number of objective variables/problem dimension
  504. >         dimension = guess.length;
  505.           initializeCMA(guess);
  506.           iterations = 0;

src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:564: error: NULL_DEREFERENCE
  object `init` last assigned on line 559 could be null and is dereferenced at line 564.
  562.   
  563.           if (inputSigma != null) {
  564. >             if (inputSigma.length != init.length) {
  565.                   throw new DimensionMismatchException(inputSigma.length, init.length);
  566.               }

src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java:675: error: NULL_DEREFERENCE
  object `init` last assigned on line 670 could be null and is dereferenced at line 675.
  673.   
  674.           if (inputSigma != null) {
  675. >             if (inputSigma.length != init.length) {
  676.                   throw new DimensionMismatchException(inputSigma.length, init.length);
  677.               }

src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:966: error: NULL_DEREFERENCE
  object `lB` last assigned on line 962 could be null and is dereferenced at line 966.
  964.   
  965.               for (int i = 0; i < x.length; i++) {
  966. >                 if (x[i] < lB[i]) {
  967.                       return false;
  968.                   }

src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:986: error: NULL_DEREFERENCE
  object `lB` last assigned on line 981 could be null and is dereferenced at line 986.
  984.               final double[] repaired = new double[x.length];
  985.               for (int i = 0; i < x.length; i++) {
  986. >                 if (x[i] < lB[i]) {
  987.                       repaired[i] = lB[i];
  988.                   } else if (x[i] > uB[i]) {

src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java:1046: error: NULL_DEREFERENCE
  object `lB` last assigned on line 1042 could be null and is dereferenced at line 1046.
  1044.   
  1045.               for (int i = 0; i < x.length; i++) {
  1046. >                 if (x[i] < lB[i]) {
  1047.                       return false;
  1048.                   }

src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java:1073: error: NULL_DEREFERENCE
  object `lB` last assigned on line 1068 could be null and is dereferenced at line 1073.
  1071.               final double[] repaired = new double[x.length];
  1072.               for (int i = 0; i < x.length; i++) {
  1073. >                 if (x[i] < lB[i]) {
  1074.                       repaired[i] = lB[i];
  1075.                   } else if (x[i] > uB[i]) {

src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java:2379: error: NULL_DEREFERENCE
  object `init` last assigned on line 2378 could be null and is dereferenced at line 2379.
  2377.   
  2378.           double[] init = getStartPoint();
  2379. >         final int dimension = init.length;
  2380.   
  2381.           // Check problem dimension.

src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java:2384: error: NULL_DEREFERENCE
  object `init` last assigned on line 2383 could be null and is dereferenced at line 2384.
  2382.   
  2383.           double[] init = getStartPoint();
  2384. >         final int dimension = init.length;
  2385.   
  2386.           // Check problem dimension.

src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java:152: error: DEADLOCK
  Potential deadlock. `DescriptiveStatistics.<init>(DescriptiveStatistics)` (Trace 1) and `void ResizableDoubleArray.copy(ResizableDoubleArray,ResizableDoubleArray)` (Trace 2) acquire locks `source` in `class org.apache.commons.math3.util.ResizableDoubleArray` and `dest` in `class org.apache.commons.math3.util.ResizableDoubleArray` in reverse orders. Additional report(s) on the same line were suppressed.
  150.        */
  151.       public DescriptiveStatistics(DescriptiveStatistics original) throws NullArgumentException {
  152. >         copy(original, this);
  153.       }
  154.   

src/main/java/org/apache/commons/math3/stat/descriptive/SynchronizedDescriptiveStatistics.java:66: error: DEADLOCK
  Potential deadlock. `SynchronizedDescriptiveStatistics.<init>(SynchronizedDescriptiveStatistics)` (Trace 1) and `void ResizableDoubleArray.copy(ResizableDoubleArray,ResizableDoubleArray)` (Trace 2) acquire locks `source` in `class org.apache.commons.math3.util.ResizableDoubleArray` and `dest` in `class org.apache.commons.math3.util.ResizableDoubleArray` in reverse orders. Additional report(s) on the same line were suppressed.
  64.       public SynchronizedDescriptiveStatistics(SynchronizedDescriptiveStatistics original)
  65.       throws NullArgumentException {
  66. >         copy(original, this);
  67.       }
  68.   

src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java:730: error: DEADLOCK
  Potential deadlock. `DescriptiveStatistics DescriptiveStatistics.copy()` (Trace 1) and `void ResizableDoubleArray.copy(ResizableDoubleArray,ResizableDoubleArray)` (Trace 2) acquire locks `source` in `class org.apache.commons.math3.util.ResizableDoubleArray` and `dest` in `class org.apache.commons.math3.util.ResizableDoubleArray` in reverse orders. Additional report(s) on the same line were suppressed.
  728.           DescriptiveStatistics result = new DescriptiveStatistics();
  729.           // No try-catch or advertised exception because parms are guaranteed valid
  730. >         copy(this, result);
  731.           return result;
  732.       }

src/main/java/org/apache/commons/math3/stat/descriptive/SynchronizedDescriptiveStatistics.java:35: error: DEADLOCK
  Potential deadlock. `DescriptiveStatistics SynchronizedDescriptiveStatistics.copy()` (Trace 1) and `void SynchronizedDescriptiveStatistics.copy(SynchronizedDescriptiveStatistics,SynchronizedDescriptiveStatistics)` (Trace 2) acquire locks `source` in `class org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics` and `dest` in `class org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics` in reverse orders. Additional report(s) on the same line were suppressed.
  33.    * @since 1.2
  34.    */
  35. > public class SynchronizedDescriptiveStatistics extends DescriptiveStatistics {
  36.   
  37.       /** Serialization UID */

src/main/java/org/apache/commons/math3/stat/descriptive/SynchronizedDescriptiveStatistics.java:156: error: DEADLOCK
  Potential deadlock. `SynchronizedDescriptiveStatistics SynchronizedDescriptiveStatistics.copy()` (Trace 1) and `void SynchronizedDescriptiveStatistics.copy(SynchronizedDescriptiveStatistics,SynchronizedDescriptiveStatistics)` (Trace 2) acquire locks `source` in `class org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics` and `dest` in `class org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics` in reverse orders. Additional report(s) on the same line were suppressed.
  154.        */
  155.       @Override
  156. >     public synchronized SynchronizedDescriptiveStatistics copy() {
  157.           SynchronizedDescriptiveStatistics result =
  158.               new SynchronizedDescriptiveStatistics();

src/main/java/org/apache/commons/math3/stat/descriptive/SynchronizedDescriptiveStatistics.java:160: error: DEADLOCK
  Potential deadlock. `SynchronizedDescriptiveStatistics SynchronizedDescriptiveStatistics.copy()` (Trace 1) and `void ResizableDoubleArray.copy(ResizableDoubleArray,ResizableDoubleArray)` (Trace 2) acquire locks `source` in `class org.apache.commons.math3.util.ResizableDoubleArray` and `dest` in `class org.apache.commons.math3.util.ResizableDoubleArray` in reverse orders. Additional report(s) on the same line were suppressed.
  158.               new SynchronizedDescriptiveStatistics();
  159.           // No try-catch or advertised exception because arguments are guaranteed non-null
  160. >         copy(this, result);
  161.           return result;
  162.       }

src/main/java/org/apache/commons/math3/stat/descriptive/SynchronizedSummaryStatistics.java:35: error: DEADLOCK
  Potential deadlock. `SummaryStatistics SynchronizedSummaryStatistics.copy()` (Trace 1) and `void SynchronizedSummaryStatistics.copy(SynchronizedSummaryStatistics,SynchronizedSummaryStatistics)` (Trace 2) acquire locks `source` in `class org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics` and `dest` in `class org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics` in reverse orders. Additional report(s) on the same line were suppressed.
  33.    * @since 1.2
  34.    */
  35. > public class SynchronizedSummaryStatistics extends SummaryStatistics {
  36.   
  37.       /** Serialization UID */

src/main/java/org/apache/commons/math3/stat/descriptive/SynchronizedSummaryStatistics.java:329: error: DEADLOCK
  Potential deadlock. `SynchronizedSummaryStatistics SynchronizedSummaryStatistics.copy()` (Trace 1) and `void SynchronizedSummaryStatistics.copy(SynchronizedSummaryStatistics,SynchronizedSummaryStatistics)` (Trace 2) acquire locks `source` in `class org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics` and `dest` in `class org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics` in reverse orders. Additional report(s) on the same line were suppressed.
  327.        */
  328.       @Override
  329. >     public synchronized SynchronizedSummaryStatistics copy() {
  330.           SynchronizedSummaryStatistics result =
  331.               new SynchronizedSummaryStatistics();

src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java:1147: error: DEADLOCK
  Potential deadlock. `ResizableDoubleArray ResizableDoubleArray.copy()` (Trace 1) and `void ResizableDoubleArray.copy(ResizableDoubleArray,ResizableDoubleArray)` (Trace 2) acquire locks `source` in `class org.apache.commons.math3.util.ResizableDoubleArray` and `dest` in `class org.apache.commons.math3.util.ResizableDoubleArray` in reverse orders. Additional report(s) on the same line were suppressed.
  1145.        * @since 2.0
  1146.        */
  1147. >     public synchronized ResizableDoubleArray copy() {
  1148.           final ResizableDoubleArray result = new ResizableDoubleArray();
  1149.           copy(this, result);

src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java:747: error: DEADLOCK
  Potential deadlock. `void DescriptiveStatistics.copy(DescriptiveStatistics,DescriptiveStatistics)` (Trace 1) and `void ResizableDoubleArray.copy(ResizableDoubleArray,ResizableDoubleArray)` (Trace 2) acquire locks `source` in `class org.apache.commons.math3.util.ResizableDoubleArray` and `dest` in `class org.apache.commons.math3.util.ResizableDoubleArray` in reverse orders. Additional report(s) on the same line were suppressed.
  745.           MathUtils.checkNotNull(dest);
  746.           // Copy data and window size
  747. >         dest.eDA = source.eDA.copy();
  748.           dest.windowSize = source.windowSize;
  749.   

src/main/java/org/apache/commons/math3/stat/descriptive/SynchronizedDescriptiveStatistics.java:180: error: DEADLOCK
  Potential deadlock. `void SynchronizedDescriptiveStatistics.copy(SynchronizedDescriptiveStatistics,SynchronizedDescriptiveStatistics)` (Trace 1) and `void ResizableDoubleArray.copy(ResizableDoubleArray,ResizableDoubleArray)` (Trace 2) acquire locks `source` in `class org.apache.commons.math3.util.ResizableDoubleArray` and `dest` in `class org.apache.commons.math3.util.ResizableDoubleArray` in reverse orders. Additional report(s) on the same line were suppressed.
  178.           synchronized (source) {
  179.               synchronized (dest) {
  180. >                 DescriptiveStatistics.copy(source, dest);
  181.               }
  182.           }

src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java:116: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `void BaseRuleFactory.addRule(Pair)` mutates container `this.pointsAndWeights` via call to `put` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  114.           }
  115.   
  116. >         pointsAndWeights.put(rule.getFirst().length, rule);
  117.       }
  118.   

src/main/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatistics.java:385: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `void AggregateSummaryStatistics$AggregatingSummaryStatistics.addValue(double)` indirectly writes to field `this.n` outside of synchronization.
 Reporting because this access may occur on a background thread.
  383.           @Override
  384.           public void addValue(double value) {
  385. >             super.addValue(value);
  386.               synchronized (aggregateStatistics) {
  387.                   aggregateStatistics.addValue(value);

src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java:730: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `DescriptiveStatistics DescriptiveStatistics.copy()` indirectly reads without synchronization from `this.geometricMeanImpl`. Potentially races with write in method `DescriptiveStatistics.setGeometricMeanImpl(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  728.           DescriptiveStatistics result = new DescriptiveStatistics();
  729.           // No try-catch or advertised exception because parms are guaranteed valid
  730. >         copy(this, result);
  731.           return result;
  732.       }

src/main/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatistics.java:408: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `boolean AggregateSummaryStatistics$AggregatingSummaryStatistics.equals(Object)` indirectly reads without synchronization from `this.aggregateStatistics.n`. Potentially races with write in method `AggregateSummaryStatistics$AggregatingSummaryStatistics.addValue(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  406.               AggregatingSummaryStatistics stat = (AggregatingSummaryStatistics)object;
  407.               return super.equals(stat) &&
  408. >                    aggregateStatistics.equals(stat.aggregateStatistics);
  409.           }
  410.   

src/main/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatistics.java:407: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `boolean AggregateSummaryStatistics$AggregatingSummaryStatistics.equals(Object)` indirectly reads without synchronization from `this.n`. Potentially races with write in method `AggregateSummaryStatistics$AggregatingSummaryStatistics.addValue(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  405.               }
  406.               AggregatingSummaryStatistics stat = (AggregatingSummaryStatistics)object;
  407. >             return super.equals(stat) &&
  408.                      aggregateStatistics.equals(stat.aggregateStatistics);
  409.           }

src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java:896: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `double[] ResizableDoubleArray.getArrayRef()` reads without synchronization from `this.internalArray`. Potentially races with write in method `ResizableDoubleArray.addElementRolling(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  894.        */
  895.       protected double[] getArrayRef() {
  896. >         return internalArray;
  897.       }
  898.   

src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java:845: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int ResizableDoubleArray.getCapacity()` reads without synchronization from `this.internalArray`. Potentially races with write in method `ResizableDoubleArray.addElementRolling(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  843.        */
  844.       public int getCapacity() {
  845. >         return internalArray.length;
  846.       }
  847.   

src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java:732: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `float ResizableDoubleArray.getContractionCriteria()` indirectly reads without synchronization from `this.contractionCriterion`. Potentially races with write in method `ResizableDoubleArray.setContractionCriteria(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  730.       @Deprecated
  731.       public float getContractionCriteria() {
  732. >         return (float) getContractionCriterion();
  733.       }
  734.   

src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java:749: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `double ResizableDoubleArray.getContractionCriterion()` reads without synchronization from `this.contractionCriterion`. Potentially races with write in method `ResizableDoubleArray.setContractionCriteria(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  747.        */
  748.       public double getContractionCriterion() {
  749. >         return contractionCriterion;
  750.       }
  751.   

src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java:798: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `float ResizableDoubleArray.getExpansionFactor()` reads without synchronization from `this.expansionFactor`. Potentially races with write in method `ResizableDoubleArray.setExpansionFactor(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  796.       @Deprecated
  797.       public float getExpansionFactor() {
  798. >         return (float) expansionFactor;
  799.       }
  800.   

src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java:811: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int ResizableDoubleArray.getExpansionMode()` reads without synchronization from `this.expansionMode`. Potentially races with write in method `ResizableDoubleArray.setExpansionMode(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  809.       @Deprecated
  810.       public int getExpansionMode() {
  811. >         switch (expansionMode) {
  812.           case MULTIPLICATIVE:
  813.               return MULTIPLICATIVE_MODE;

src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java:216: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `double DescriptiveStatistics.getGeometricMean()` reads without synchronization from `this.geometricMeanImpl`. Potentially races with write in method `DescriptiveStatistics.setGeometricMeanImpl(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  214.        */
  215.       public double getGeometricMean() {
  216. >         return apply(geometricMeanImpl);
  217.       }
  218.   

src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java:278: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `double DescriptiveStatistics.getKurtosis()` reads without synchronization from `this.kurtosisImpl`. Potentially races with write in method `DescriptiveStatistics.setKurtosisImpl(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  276.        */
  277.       public double getKurtosis() {
  278. >         return apply(kurtosisImpl);
  279.       }
  280.   

src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java:286: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `double DescriptiveStatistics.getMax()` reads without synchronization from `this.maxImpl`. Potentially races with write in method `DescriptiveStatistics.setMaxImpl(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  284.        */
  285.       public double getMax() {
  286. >         return apply(maxImpl);
  287.       }
  288.   

src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java:206: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `double DescriptiveStatistics.getMean()` reads without synchronization from `this.meanImpl`. Potentially races with write in method `DescriptiveStatistics.setMeanImpl(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  204.        */
  205.       public double getMean() {
  206. >         return apply(meanImpl);
  207.       }
  208.   

src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java:294: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `double DescriptiveStatistics.getMin()` reads without synchronization from `this.minImpl`. Potentially races with write in method `DescriptiveStatistics.setMinImpl(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  292.       */
  293.       public double getMin() {
  294. >         return apply(minImpl);
  295.       }
  296.   

src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java:426: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `double DescriptiveStatistics.getPercentile(double)` reads without synchronization from `this.percentileImpl`. Potentially races with write in method `DescriptiveStatistics.setPercentileImpl(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  424.        */
  425.       public double getPercentile(double p) throws MathIllegalStateException, MathIllegalArgumentException {
  426. >         if (percentileImpl instanceof Percentile) {
  427.               ((Percentile) percentileImpl).setQuantile(p);
  428.           } else {

src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java:268: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `double DescriptiveStatistics.getSkewness()` reads without synchronization from `this.skewnessImpl`. Potentially races with write in method `DescriptiveStatistics.setSkewnessImpl(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  266.        */
  267.       public double getSkewness() {
  268. >         return apply(skewnessImpl);
  269.       }
  270.   

src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java:253: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `double DescriptiveStatistics.getStandardDeviation()` indirectly reads without synchronization from `this.varianceImpl`. Potentially races with write in method `DescriptiveStatistics.setVarianceImpl(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  251.           if (getN() > 0) {
  252.               if (getN() > 1) {
  253. >                 stdDev = FastMath.sqrt(getVariance());
  254.               } else {
  255.                   stdDev = 0.0;

src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java:911: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int ResizableDoubleArray.getStartIndex()` reads without synchronization from `this.startIndex`. Potentially races with write in method `ResizableDoubleArray.addElementRolling(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  909.        */
  910.       protected int getStartIndex() {
  911. >         return startIndex;
  912.       }
  913.   

src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java:310: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `double DescriptiveStatistics.getSum()` reads without synchronization from `this.sumImpl`. Potentially races with write in method `DescriptiveStatistics.setSumImpl(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  308.        */
  309.       public double getSum() {
  310. >         return apply(sumImpl);
  311.       }
  312.   

src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java:319: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `double DescriptiveStatistics.getSumsq()` reads without synchronization from `this.sumsqImpl`. Potentially races with write in method `DescriptiveStatistics.setSumsqImpl(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  317.        */
  318.       public double getSumsq() {
  319. >         return apply(sumsqImpl);
  320.       }
  321.   

src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java:230: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `double DescriptiveStatistics.getVariance()` reads without synchronization from `this.varianceImpl`. Potentially races with write in method `DescriptiveStatistics.setVarianceImpl(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  228.        */
  229.       public double getVariance() {
  230. >         return apply(varianceImpl);
  231.       }
  232.   

src/main/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatistics.java:417: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int AggregateSummaryStatistics$AggregatingSummaryStatistics.hashCode()` indirectly reads without synchronization from `this.aggregateStatistics.n`. Potentially races with write in method `AggregateSummaryStatistics$AggregatingSummaryStatistics.addValue(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  415.           @Override
  416.           public int hashCode() {
  417. >             return 123 + super.hashCode() + aggregateStatistics.hashCode();
  418.           }
  419.       }

src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java:925: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void ResizableDoubleArray.setContractionCriteria(float)` indirectly reads without synchronization from `this.expansionFactor`. Potentially races with write in method `ResizableDoubleArray.setExpansionFactor(...)`.
 Reporting because this access may occur on a background thread.
  923.       public void setContractionCriteria(float contractionCriteria)
  924.           throws MathIllegalArgumentException {
  925. >         checkContractExpand(contractionCriteria, getExpansionFactor());
  926.           synchronized(this) {
  927.               this.contractionCriterion = contractionCriteria;

src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java:988: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void ResizableDoubleArray.setExpansionFactor(float)` indirectly reads without synchronization from `this.contractionCriterion`. Potentially races with write in method `ResizableDoubleArray.setContractionCriteria(...)`.
 Reporting because this access may occur on a background thread.
  986.       @Deprecated
  987.       public void setExpansionFactor(float expansionFactor) throws MathIllegalArgumentException {
  988. >         checkContractExpand(getContractionCriterion(), expansionFactor);
  989.           // The check above verifies that the expansion factor is > 1.0;
  990.           synchronized(this) {

src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java:1029: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `void ResizableDoubleArray.setExpansionMode(ResizableDoubleArray$ExpansionMode)` writes to field `this.expansionMode` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  1027.       @Deprecated
  1028.       public void setExpansionMode(ExpansionMode expansionMode) {
  1029. >         this.expansionMode = expansionMode;
  1030.       }
  1031.   

src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java:468: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `String DescriptiveStatistics.toString()` indirectly reads without synchronization from `this.percentileImpl`. Potentially races with write in method `DescriptiveStatistics.setPercentileImpl(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  466.           try {
  467.               // No catch for MIAE because actual parameter is valid below
  468. >             outBuffer.append("median: ").append(getPercentile(50)).append(endl);
  469.           } catch (MathIllegalStateException ex) {
  470.               outBuffer.append("median: unavailable").append(endl);

src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java:461: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `String DescriptiveStatistics.toString()` indirectly reads without synchronization from `this.minImpl`. Potentially races with write in method `DescriptiveStatistics.setMinImpl(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  459.           outBuffer.append("DescriptiveStatistics:").append(endl);
  460.           outBuffer.append("n: ").append(getN()).append(endl);
  461. >         outBuffer.append("min: ").append(getMin()).append(endl);
  462.           outBuffer.append("max: ").append(getMax()).append(endl);
  463.           outBuffer.append("mean: ").append(getMean()).append(endl);

src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java:462: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `String DescriptiveStatistics.toString()` indirectly reads without synchronization from `this.maxImpl`. Potentially races with write in method `DescriptiveStatistics.setMaxImpl(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  460.           outBuffer.append("n: ").append(getN()).append(endl);
  461.           outBuffer.append("min: ").append(getMin()).append(endl);
  462. >         outBuffer.append("max: ").append(getMax()).append(endl);
  463.           outBuffer.append("mean: ").append(getMean()).append(endl);
  464.           outBuffer.append("std dev: ").append(getStandardDeviation())

src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java:463: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `String DescriptiveStatistics.toString()` indirectly reads without synchronization from `this.meanImpl`. Potentially races with write in method `DescriptiveStatistics.setMeanImpl(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  461.           outBuffer.append("min: ").append(getMin()).append(endl);
  462.           outBuffer.append("max: ").append(getMax()).append(endl);
  463. >         outBuffer.append("mean: ").append(getMean()).append(endl);
  464.           outBuffer.append("std dev: ").append(getStandardDeviation())
  465.               .append(endl);

src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java:464: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `String DescriptiveStatistics.toString()` indirectly reads without synchronization from `this.varianceImpl`. Potentially races with write in method `DescriptiveStatistics.setVarianceImpl(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  462.           outBuffer.append("max: ").append(getMax()).append(endl);
  463.           outBuffer.append("mean: ").append(getMean()).append(endl);
  464. >         outBuffer.append("std dev: ").append(getStandardDeviation())
  465.               .append(endl);
  466.           try {

src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java:473: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `String DescriptiveStatistics.toString()` indirectly reads without synchronization from `this.kurtosisImpl`. Potentially races with write in method `DescriptiveStatistics.setKurtosisImpl(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  471.           }
  472.           outBuffer.append("skewness: ").append(getSkewness()).append(endl);
  473. >         outBuffer.append("kurtosis: ").append(getKurtosis()).append(endl);
  474.           return outBuffer.toString();
  475.       }

src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java:472: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `String DescriptiveStatistics.toString()` indirectly reads without synchronization from `this.skewnessImpl`. Potentially races with write in method `DescriptiveStatistics.setSkewnessImpl(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  470.               outBuffer.append("median: unavailable").append(endl);
  471.           }
  472. >         outBuffer.append("skewness: ").append(getSkewness()).append(endl);
  473.           outBuffer.append("kurtosis: ").append(getKurtosis()).append(endl);
  474.           return outBuffer.toString();

Summary of the reports

  THREAD_SAFETY_VIOLATION: 34
         NULL_DEREFERENCE: 25
                 DEADLOCK: 11
            RESOURCE_LEAK: 1