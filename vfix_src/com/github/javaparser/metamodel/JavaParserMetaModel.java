package com.github.javaparser.metamodel;

import com.github.javaparser.ast.ArrayCreationLevel;
import com.github.javaparser.ast.ImportDeclaration;
import com.github.javaparser.ast.Modifier;
import com.github.javaparser.ast.PackageDeclaration;
import com.github.javaparser.ast.body.BodyDeclaration;
import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;
import com.github.javaparser.ast.body.EnumConstantDeclaration;
import com.github.javaparser.ast.body.Parameter;
import com.github.javaparser.ast.body.ReceiverParameter;
import com.github.javaparser.ast.body.TypeDeclaration;
import com.github.javaparser.ast.body.VariableDeclarator;
import com.github.javaparser.ast.comments.Comment;
import com.github.javaparser.ast.expr.AnnotationExpr;
import com.github.javaparser.ast.expr.ArrayInitializerExpr;
import com.github.javaparser.ast.expr.AssignExpr;
import com.github.javaparser.ast.expr.BinaryExpr;
import com.github.javaparser.ast.expr.Expression;
import com.github.javaparser.ast.expr.MemberValuePair;
import com.github.javaparser.ast.expr.Name;
import com.github.javaparser.ast.expr.SimpleName;
import com.github.javaparser.ast.expr.UnaryExpr;
import com.github.javaparser.ast.expr.VariableDeclarationExpr;
import com.github.javaparser.ast.modules.ModuleDeclaration;
import com.github.javaparser.ast.modules.ModuleStmt;
import com.github.javaparser.ast.stmt.BlockStmt;
import com.github.javaparser.ast.stmt.CatchClause;
import com.github.javaparser.ast.stmt.Statement;
import com.github.javaparser.ast.stmt.SwitchEntryStmt;
import com.github.javaparser.ast.type.ArrayType;
import com.github.javaparser.ast.type.ClassOrInterfaceType;
import com.github.javaparser.ast.type.PrimitiveType;
import com.github.javaparser.ast.type.ReferenceType;
import com.github.javaparser.ast.type.Type;
import com.github.javaparser.ast.type.TypeParameter;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Optional;

public final class JavaParserMetaModel {
   private static final List<BaseNodeMetaModel> nodeMetaModels = new ArrayList();
   public static final NodeMetaModel nodeMetaModel = new NodeMetaModel(Optional.empty());
   public static final BodyDeclarationMetaModel bodyDeclarationMetaModel;
   public static final CallableDeclarationMetaModel callableDeclarationMetaModel;
   public static final StatementMetaModel statementMetaModel;
   public static final ExpressionMetaModel expressionMetaModel;
   public static final TypeMetaModel typeMetaModel;
   public static final AnnotationExprMetaModel annotationExprMetaModel;
   public static final TypeDeclarationMetaModel typeDeclarationMetaModel;
   public static final ReferenceTypeMetaModel referenceTypeMetaModel;
   public static final LiteralExprMetaModel literalExprMetaModel;
   public static final LiteralStringValueExprMetaModel literalStringValueExprMetaModel;
   public static final StringLiteralExprMetaModel stringLiteralExprMetaModel;
   public static final ModuleDeclarationMetaModel moduleDeclarationMetaModel;
   public static final ModuleStmtMetaModel moduleStmtMetaModel;
   public static final ArrayCreationLevelMetaModel arrayCreationLevelMetaModel;
   public static final CompilationUnitMetaModel compilationUnitMetaModel;
   public static final PackageDeclarationMetaModel packageDeclarationMetaModel;
   public static final AnnotationDeclarationMetaModel annotationDeclarationMetaModel;
   public static final AnnotationMemberDeclarationMetaModel annotationMemberDeclarationMetaModel;
   public static final ClassOrInterfaceDeclarationMetaModel classOrInterfaceDeclarationMetaModel;
   public static final ConstructorDeclarationMetaModel constructorDeclarationMetaModel;
   public static final EnumConstantDeclarationMetaModel enumConstantDeclarationMetaModel;
   public static final EnumDeclarationMetaModel enumDeclarationMetaModel;
   public static final FieldDeclarationMetaModel fieldDeclarationMetaModel;
   public static final InitializerDeclarationMetaModel initializerDeclarationMetaModel;
   public static final MethodDeclarationMetaModel methodDeclarationMetaModel;
   public static final ParameterMetaModel parameterMetaModel;
   public static final ReceiverParameterMetaModel receiverParameterMetaModel;
   public static final VariableDeclaratorMetaModel variableDeclaratorMetaModel;
   public static final CommentMetaModel commentMetaModel;
   public static final BlockCommentMetaModel blockCommentMetaModel;
   public static final JavadocCommentMetaModel javadocCommentMetaModel;
   public static final LineCommentMetaModel lineCommentMetaModel;
   public static final ArrayAccessExprMetaModel arrayAccessExprMetaModel;
   public static final ArrayCreationExprMetaModel arrayCreationExprMetaModel;
   public static final ArrayInitializerExprMetaModel arrayInitializerExprMetaModel;
   public static final AssignExprMetaModel assignExprMetaModel;
   public static final BinaryExprMetaModel binaryExprMetaModel;
   public static final BooleanLiteralExprMetaModel booleanLiteralExprMetaModel;
   public static final CastExprMetaModel castExprMetaModel;
   public static final CharLiteralExprMetaModel charLiteralExprMetaModel;
   public static final ClassExprMetaModel classExprMetaModel;
   public static final ConditionalExprMetaModel conditionalExprMetaModel;
   public static final DoubleLiteralExprMetaModel doubleLiteralExprMetaModel;
   public static final EnclosedExprMetaModel enclosedExprMetaModel;
   public static final FieldAccessExprMetaModel fieldAccessExprMetaModel;
   public static final InstanceOfExprMetaModel instanceOfExprMetaModel;
   public static final IntegerLiteralExprMetaModel integerLiteralExprMetaModel;
   public static final LambdaExprMetaModel lambdaExprMetaModel;
   public static final LongLiteralExprMetaModel longLiteralExprMetaModel;
   public static final MarkerAnnotationExprMetaModel markerAnnotationExprMetaModel;
   public static final MemberValuePairMetaModel memberValuePairMetaModel;
   public static final MethodCallExprMetaModel methodCallExprMetaModel;
   public static final MethodReferenceExprMetaModel methodReferenceExprMetaModel;
   public static final NameExprMetaModel nameExprMetaModel;
   public static final NameMetaModel nameMetaModel;
   public static final NormalAnnotationExprMetaModel normalAnnotationExprMetaModel;
   public static final NullLiteralExprMetaModel nullLiteralExprMetaModel;
   public static final ObjectCreationExprMetaModel objectCreationExprMetaModel;
   public static final SimpleNameMetaModel simpleNameMetaModel;
   public static final SingleMemberAnnotationExprMetaModel singleMemberAnnotationExprMetaModel;
   public static final SuperExprMetaModel superExprMetaModel;
   public static final ThisExprMetaModel thisExprMetaModel;
   public static final TypeExprMetaModel typeExprMetaModel;
   public static final UnaryExprMetaModel unaryExprMetaModel;
   public static final VariableDeclarationExprMetaModel variableDeclarationExprMetaModel;
   public static final ImportDeclarationMetaModel importDeclarationMetaModel;
   public static final AssertStmtMetaModel assertStmtMetaModel;
   public static final BlockStmtMetaModel blockStmtMetaModel;
   public static final BreakStmtMetaModel breakStmtMetaModel;
   public static final CatchClauseMetaModel catchClauseMetaModel;
   public static final ContinueStmtMetaModel continueStmtMetaModel;
   public static final DoStmtMetaModel doStmtMetaModel;
   public static final EmptyStmtMetaModel emptyStmtMetaModel;
   public static final ExplicitConstructorInvocationStmtMetaModel explicitConstructorInvocationStmtMetaModel;
   public static final ExpressionStmtMetaModel expressionStmtMetaModel;
   public static final ForeachStmtMetaModel foreachStmtMetaModel;
   public static final ForStmtMetaModel forStmtMetaModel;
   public static final IfStmtMetaModel ifStmtMetaModel;
   public static final LabeledStmtMetaModel labeledStmtMetaModel;
   public static final ReturnStmtMetaModel returnStmtMetaModel;
   public static final SwitchEntryStmtMetaModel switchEntryStmtMetaModel;
   public static final SwitchStmtMetaModel switchStmtMetaModel;
   public static final SynchronizedStmtMetaModel synchronizedStmtMetaModel;
   public static final ThrowStmtMetaModel throwStmtMetaModel;
   public static final TryStmtMetaModel tryStmtMetaModel;
   public static final LocalClassDeclarationStmtMetaModel localClassDeclarationStmtMetaModel;
   public static final WhileStmtMetaModel whileStmtMetaModel;
   public static final UnparsableStmtMetaModel unparsableStmtMetaModel;
   public static final ArrayTypeMetaModel arrayTypeMetaModel;
   public static final ClassOrInterfaceTypeMetaModel classOrInterfaceTypeMetaModel;
   public static final IntersectionTypeMetaModel intersectionTypeMetaModel;
   public static final PrimitiveTypeMetaModel primitiveTypeMetaModel;
   public static final TypeParameterMetaModel typeParameterMetaModel;
   public static final UnionTypeMetaModel unionTypeMetaModel;
   public static final UnknownTypeMetaModel unknownTypeMetaModel;
   public static final VoidTypeMetaModel voidTypeMetaModel;
   public static final WildcardTypeMetaModel wildcardTypeMetaModel;
   public static final VarTypeMetaModel varTypeMetaModel;
   public static final ModuleRequiresStmtMetaModel moduleRequiresStmtMetaModel;
   public static final ModuleExportsStmtMetaModel moduleExportsStmtMetaModel;
   public static final ModuleProvidesStmtMetaModel moduleProvidesStmtMetaModel;
   public static final ModuleUsesStmtMetaModel moduleUsesStmtMetaModel;
   public static final ModuleOpensStmtMetaModel moduleOpensStmtMetaModel;

   private JavaParserMetaModel() {
   }

   private static void initializeConstructorParameters() {
      bodyDeclarationMetaModel.getConstructorParameters().add(bodyDeclarationMetaModel.annotationsPropertyMetaModel);
      callableDeclarationMetaModel.getConstructorParameters().add(callableDeclarationMetaModel.modifiersPropertyMetaModel);
      callableDeclarationMetaModel.getConstructorParameters().add(bodyDeclarationMetaModel.annotationsPropertyMetaModel);
      callableDeclarationMetaModel.getConstructorParameters().add(callableDeclarationMetaModel.typeParametersPropertyMetaModel);
      callableDeclarationMetaModel.getConstructorParameters().add(callableDeclarationMetaModel.namePropertyMetaModel);
      callableDeclarationMetaModel.getConstructorParameters().add(callableDeclarationMetaModel.parametersPropertyMetaModel);
      callableDeclarationMetaModel.getConstructorParameters().add(callableDeclarationMetaModel.thrownExceptionsPropertyMetaModel);
      callableDeclarationMetaModel.getConstructorParameters().add(callableDeclarationMetaModel.receiverParameterPropertyMetaModel);
      typeMetaModel.getConstructorParameters().add(typeMetaModel.annotationsPropertyMetaModel);
      annotationExprMetaModel.getConstructorParameters().add(annotationExprMetaModel.namePropertyMetaModel);
      typeDeclarationMetaModel.getConstructorParameters().add(typeDeclarationMetaModel.modifiersPropertyMetaModel);
      typeDeclarationMetaModel.getConstructorParameters().add(bodyDeclarationMetaModel.annotationsPropertyMetaModel);
      typeDeclarationMetaModel.getConstructorParameters().add(typeDeclarationMetaModel.namePropertyMetaModel);
      typeDeclarationMetaModel.getConstructorParameters().add(typeDeclarationMetaModel.membersPropertyMetaModel);
      referenceTypeMetaModel.getConstructorParameters().add(typeMetaModel.annotationsPropertyMetaModel);
      literalStringValueExprMetaModel.getConstructorParameters().add(literalStringValueExprMetaModel.valuePropertyMetaModel);
      stringLiteralExprMetaModel.getConstructorParameters().add(literalStringValueExprMetaModel.valuePropertyMetaModel);
      moduleDeclarationMetaModel.getConstructorParameters().add(moduleDeclarationMetaModel.annotationsPropertyMetaModel);
      moduleDeclarationMetaModel.getConstructorParameters().add(moduleDeclarationMetaModel.namePropertyMetaModel);
      moduleDeclarationMetaModel.getConstructorParameters().add(moduleDeclarationMetaModel.isOpenPropertyMetaModel);
      moduleDeclarationMetaModel.getConstructorParameters().add(moduleDeclarationMetaModel.moduleStmtsPropertyMetaModel);
      arrayCreationLevelMetaModel.getConstructorParameters().add(arrayCreationLevelMetaModel.dimensionPropertyMetaModel);
      arrayCreationLevelMetaModel.getConstructorParameters().add(arrayCreationLevelMetaModel.annotationsPropertyMetaModel);
      compilationUnitMetaModel.getConstructorParameters().add(compilationUnitMetaModel.packageDeclarationPropertyMetaModel);
      compilationUnitMetaModel.getConstructorParameters().add(compilationUnitMetaModel.importsPropertyMetaModel);
      compilationUnitMetaModel.getConstructorParameters().add(compilationUnitMetaModel.typesPropertyMetaModel);
      compilationUnitMetaModel.getConstructorParameters().add(compilationUnitMetaModel.modulePropertyMetaModel);
      packageDeclarationMetaModel.getConstructorParameters().add(packageDeclarationMetaModel.annotationsPropertyMetaModel);
      packageDeclarationMetaModel.getConstructorParameters().add(packageDeclarationMetaModel.namePropertyMetaModel);
      annotationDeclarationMetaModel.getConstructorParameters().add(typeDeclarationMetaModel.modifiersPropertyMetaModel);
      annotationDeclarationMetaModel.getConstructorParameters().add(bodyDeclarationMetaModel.annotationsPropertyMetaModel);
      annotationDeclarationMetaModel.getConstructorParameters().add(typeDeclarationMetaModel.namePropertyMetaModel);
      annotationDeclarationMetaModel.getConstructorParameters().add(typeDeclarationMetaModel.membersPropertyMetaModel);
      annotationMemberDeclarationMetaModel.getConstructorParameters().add(annotationMemberDeclarationMetaModel.modifiersPropertyMetaModel);
      annotationMemberDeclarationMetaModel.getConstructorParameters().add(bodyDeclarationMetaModel.annotationsPropertyMetaModel);
      annotationMemberDeclarationMetaModel.getConstructorParameters().add(annotationMemberDeclarationMetaModel.typePropertyMetaModel);
      annotationMemberDeclarationMetaModel.getConstructorParameters().add(annotationMemberDeclarationMetaModel.namePropertyMetaModel);
      annotationMemberDeclarationMetaModel.getConstructorParameters().add(annotationMemberDeclarationMetaModel.defaultValuePropertyMetaModel);
      classOrInterfaceDeclarationMetaModel.getConstructorParameters().add(typeDeclarationMetaModel.modifiersPropertyMetaModel);
      classOrInterfaceDeclarationMetaModel.getConstructorParameters().add(bodyDeclarationMetaModel.annotationsPropertyMetaModel);
      classOrInterfaceDeclarationMetaModel.getConstructorParameters().add(classOrInterfaceDeclarationMetaModel.isInterfacePropertyMetaModel);
      classOrInterfaceDeclarationMetaModel.getConstructorParameters().add(typeDeclarationMetaModel.namePropertyMetaModel);
      classOrInterfaceDeclarationMetaModel.getConstructorParameters().add(classOrInterfaceDeclarationMetaModel.typeParametersPropertyMetaModel);
      classOrInterfaceDeclarationMetaModel.getConstructorParameters().add(classOrInterfaceDeclarationMetaModel.extendedTypesPropertyMetaModel);
      classOrInterfaceDeclarationMetaModel.getConstructorParameters().add(classOrInterfaceDeclarationMetaModel.implementedTypesPropertyMetaModel);
      classOrInterfaceDeclarationMetaModel.getConstructorParameters().add(typeDeclarationMetaModel.membersPropertyMetaModel);
      constructorDeclarationMetaModel.getConstructorParameters().add(callableDeclarationMetaModel.modifiersPropertyMetaModel);
      constructorDeclarationMetaModel.getConstructorParameters().add(bodyDeclarationMetaModel.annotationsPropertyMetaModel);
      constructorDeclarationMetaModel.getConstructorParameters().add(callableDeclarationMetaModel.typeParametersPropertyMetaModel);
      constructorDeclarationMetaModel.getConstructorParameters().add(callableDeclarationMetaModel.namePropertyMetaModel);
      constructorDeclarationMetaModel.getConstructorParameters().add(callableDeclarationMetaModel.parametersPropertyMetaModel);
      constructorDeclarationMetaModel.getConstructorParameters().add(callableDeclarationMetaModel.thrownExceptionsPropertyMetaModel);
      constructorDeclarationMetaModel.getConstructorParameters().add(constructorDeclarationMetaModel.bodyPropertyMetaModel);
      constructorDeclarationMetaModel.getConstructorParameters().add(callableDeclarationMetaModel.receiverParameterPropertyMetaModel);
      enumConstantDeclarationMetaModel.getConstructorParameters().add(bodyDeclarationMetaModel.annotationsPropertyMetaModel);
      enumConstantDeclarationMetaModel.getConstructorParameters().add(enumConstantDeclarationMetaModel.namePropertyMetaModel);
      enumConstantDeclarationMetaModel.getConstructorParameters().add(enumConstantDeclarationMetaModel.argumentsPropertyMetaModel);
      enumConstantDeclarationMetaModel.getConstructorParameters().add(enumConstantDeclarationMetaModel.classBodyPropertyMetaModel);
      enumDeclarationMetaModel.getConstructorParameters().add(typeDeclarationMetaModel.modifiersPropertyMetaModel);
      enumDeclarationMetaModel.getConstructorParameters().add(bodyDeclarationMetaModel.annotationsPropertyMetaModel);
      enumDeclarationMetaModel.getConstructorParameters().add(typeDeclarationMetaModel.namePropertyMetaModel);
      enumDeclarationMetaModel.getConstructorParameters().add(enumDeclarationMetaModel.implementedTypesPropertyMetaModel);
      enumDeclarationMetaModel.getConstructorParameters().add(enumDeclarationMetaModel.entriesPropertyMetaModel);
      enumDeclarationMetaModel.getConstructorParameters().add(typeDeclarationMetaModel.membersPropertyMetaModel);
      fieldDeclarationMetaModel.getConstructorParameters().add(fieldDeclarationMetaModel.modifiersPropertyMetaModel);
      fieldDeclarationMetaModel.getConstructorParameters().add(bodyDeclarationMetaModel.annotationsPropertyMetaModel);
      fieldDeclarationMetaModel.getConstructorParameters().add(fieldDeclarationMetaModel.variablesPropertyMetaModel);
      initializerDeclarationMetaModel.getConstructorParameters().add(initializerDeclarationMetaModel.isStaticPropertyMetaModel);
      initializerDeclarationMetaModel.getConstructorParameters().add(initializerDeclarationMetaModel.bodyPropertyMetaModel);
      methodDeclarationMetaModel.getConstructorParameters().add(callableDeclarationMetaModel.modifiersPropertyMetaModel);
      methodDeclarationMetaModel.getConstructorParameters().add(bodyDeclarationMetaModel.annotationsPropertyMetaModel);
      methodDeclarationMetaModel.getConstructorParameters().add(callableDeclarationMetaModel.typeParametersPropertyMetaModel);
      methodDeclarationMetaModel.getConstructorParameters().add(methodDeclarationMetaModel.typePropertyMetaModel);
      methodDeclarationMetaModel.getConstructorParameters().add(callableDeclarationMetaModel.namePropertyMetaModel);
      methodDeclarationMetaModel.getConstructorParameters().add(callableDeclarationMetaModel.parametersPropertyMetaModel);
      methodDeclarationMetaModel.getConstructorParameters().add(callableDeclarationMetaModel.thrownExceptionsPropertyMetaModel);
      methodDeclarationMetaModel.getConstructorParameters().add(methodDeclarationMetaModel.bodyPropertyMetaModel);
      methodDeclarationMetaModel.getConstructorParameters().add(callableDeclarationMetaModel.receiverParameterPropertyMetaModel);
      parameterMetaModel.getConstructorParameters().add(parameterMetaModel.modifiersPropertyMetaModel);
      parameterMetaModel.getConstructorParameters().add(parameterMetaModel.annotationsPropertyMetaModel);
      parameterMetaModel.getConstructorParameters().add(parameterMetaModel.typePropertyMetaModel);
      parameterMetaModel.getConstructorParameters().add(parameterMetaModel.isVarArgsPropertyMetaModel);
      parameterMetaModel.getConstructorParameters().add(parameterMetaModel.varArgsAnnotationsPropertyMetaModel);
      parameterMetaModel.getConstructorParameters().add(parameterMetaModel.namePropertyMetaModel);
      receiverParameterMetaModel.getConstructorParameters().add(receiverParameterMetaModel.annotationsPropertyMetaModel);
      receiverParameterMetaModel.getConstructorParameters().add(receiverParameterMetaModel.typePropertyMetaModel);
      receiverParameterMetaModel.getConstructorParameters().add(receiverParameterMetaModel.namePropertyMetaModel);
      variableDeclaratorMetaModel.getConstructorParameters().add(variableDeclaratorMetaModel.typePropertyMetaModel);
      variableDeclaratorMetaModel.getConstructorParameters().add(variableDeclaratorMetaModel.namePropertyMetaModel);
      variableDeclaratorMetaModel.getConstructorParameters().add(variableDeclaratorMetaModel.initializerPropertyMetaModel);
      commentMetaModel.getConstructorParameters().add(commentMetaModel.contentPropertyMetaModel);
      blockCommentMetaModel.getConstructorParameters().add(commentMetaModel.contentPropertyMetaModel);
      javadocCommentMetaModel.getConstructorParameters().add(commentMetaModel.contentPropertyMetaModel);
      lineCommentMetaModel.getConstructorParameters().add(commentMetaModel.contentPropertyMetaModel);
      arrayAccessExprMetaModel.getConstructorParameters().add(arrayAccessExprMetaModel.namePropertyMetaModel);
      arrayAccessExprMetaModel.getConstructorParameters().add(arrayAccessExprMetaModel.indexPropertyMetaModel);
      arrayCreationExprMetaModel.getConstructorParameters().add(arrayCreationExprMetaModel.elementTypePropertyMetaModel);
      arrayCreationExprMetaModel.getConstructorParameters().add(arrayCreationExprMetaModel.levelsPropertyMetaModel);
      arrayCreationExprMetaModel.getConstructorParameters().add(arrayCreationExprMetaModel.initializerPropertyMetaModel);
      arrayInitializerExprMetaModel.getConstructorParameters().add(arrayInitializerExprMetaModel.valuesPropertyMetaModel);
      assignExprMetaModel.getConstructorParameters().add(assignExprMetaModel.targetPropertyMetaModel);
      assignExprMetaModel.getConstructorParameters().add(assignExprMetaModel.valuePropertyMetaModel);
      assignExprMetaModel.getConstructorParameters().add(assignExprMetaModel.operatorPropertyMetaModel);
      binaryExprMetaModel.getConstructorParameters().add(binaryExprMetaModel.leftPropertyMetaModel);
      binaryExprMetaModel.getConstructorParameters().add(binaryExprMetaModel.rightPropertyMetaModel);
      binaryExprMetaModel.getConstructorParameters().add(binaryExprMetaModel.operatorPropertyMetaModel);
      booleanLiteralExprMetaModel.getConstructorParameters().add(booleanLiteralExprMetaModel.valuePropertyMetaModel);
      castExprMetaModel.getConstructorParameters().add(castExprMetaModel.typePropertyMetaModel);
      castExprMetaModel.getConstructorParameters().add(castExprMetaModel.expressionPropertyMetaModel);
      charLiteralExprMetaModel.getConstructorParameters().add(literalStringValueExprMetaModel.valuePropertyMetaModel);
      classExprMetaModel.getConstructorParameters().add(classExprMetaModel.typePropertyMetaModel);
      conditionalExprMetaModel.getConstructorParameters().add(conditionalExprMetaModel.conditionPropertyMetaModel);
      conditionalExprMetaModel.getConstructorParameters().add(conditionalExprMetaModel.thenExprPropertyMetaModel);
      conditionalExprMetaModel.getConstructorParameters().add(conditionalExprMetaModel.elseExprPropertyMetaModel);
      doubleLiteralExprMetaModel.getConstructorParameters().add(literalStringValueExprMetaModel.valuePropertyMetaModel);
      enclosedExprMetaModel.getConstructorParameters().add(enclosedExprMetaModel.innerPropertyMetaModel);
      fieldAccessExprMetaModel.getConstructorParameters().add(fieldAccessExprMetaModel.scopePropertyMetaModel);
      fieldAccessExprMetaModel.getConstructorParameters().add(fieldAccessExprMetaModel.typeArgumentsPropertyMetaModel);
      fieldAccessExprMetaModel.getConstructorParameters().add(fieldAccessExprMetaModel.namePropertyMetaModel);
      instanceOfExprMetaModel.getConstructorParameters().add(instanceOfExprMetaModel.expressionPropertyMetaModel);
      instanceOfExprMetaModel.getConstructorParameters().add(instanceOfExprMetaModel.typePropertyMetaModel);
      integerLiteralExprMetaModel.getConstructorParameters().add(literalStringValueExprMetaModel.valuePropertyMetaModel);
      lambdaExprMetaModel.getConstructorParameters().add(lambdaExprMetaModel.parametersPropertyMetaModel);
      lambdaExprMetaModel.getConstructorParameters().add(lambdaExprMetaModel.bodyPropertyMetaModel);
      lambdaExprMetaModel.getConstructorParameters().add(lambdaExprMetaModel.isEnclosingParametersPropertyMetaModel);
      longLiteralExprMetaModel.getConstructorParameters().add(literalStringValueExprMetaModel.valuePropertyMetaModel);
      markerAnnotationExprMetaModel.getConstructorParameters().add(annotationExprMetaModel.namePropertyMetaModel);
      memberValuePairMetaModel.getConstructorParameters().add(memberValuePairMetaModel.namePropertyMetaModel);
      memberValuePairMetaModel.getConstructorParameters().add(memberValuePairMetaModel.valuePropertyMetaModel);
      methodCallExprMetaModel.getConstructorParameters().add(methodCallExprMetaModel.scopePropertyMetaModel);
      methodCallExprMetaModel.getConstructorParameters().add(methodCallExprMetaModel.typeArgumentsPropertyMetaModel);
      methodCallExprMetaModel.getConstructorParameters().add(methodCallExprMetaModel.namePropertyMetaModel);
      methodCallExprMetaModel.getConstructorParameters().add(methodCallExprMetaModel.argumentsPropertyMetaModel);
      methodReferenceExprMetaModel.getConstructorParameters().add(methodReferenceExprMetaModel.scopePropertyMetaModel);
      methodReferenceExprMetaModel.getConstructorParameters().add(methodReferenceExprMetaModel.typeArgumentsPropertyMetaModel);
      methodReferenceExprMetaModel.getConstructorParameters().add(methodReferenceExprMetaModel.identifierPropertyMetaModel);
      nameExprMetaModel.getConstructorParameters().add(nameExprMetaModel.namePropertyMetaModel);
      nameMetaModel.getConstructorParameters().add(nameMetaModel.qualifierPropertyMetaModel);
      nameMetaModel.getConstructorParameters().add(nameMetaModel.identifierPropertyMetaModel);
      nameMetaModel.getConstructorParameters().add(nameMetaModel.annotationsPropertyMetaModel);
      normalAnnotationExprMetaModel.getConstructorParameters().add(annotationExprMetaModel.namePropertyMetaModel);
      normalAnnotationExprMetaModel.getConstructorParameters().add(normalAnnotationExprMetaModel.pairsPropertyMetaModel);
      objectCreationExprMetaModel.getConstructorParameters().add(objectCreationExprMetaModel.scopePropertyMetaModel);
      objectCreationExprMetaModel.getConstructorParameters().add(objectCreationExprMetaModel.typePropertyMetaModel);
      objectCreationExprMetaModel.getConstructorParameters().add(objectCreationExprMetaModel.typeArgumentsPropertyMetaModel);
      objectCreationExprMetaModel.getConstructorParameters().add(objectCreationExprMetaModel.argumentsPropertyMetaModel);
      objectCreationExprMetaModel.getConstructorParameters().add(objectCreationExprMetaModel.anonymousClassBodyPropertyMetaModel);
      simpleNameMetaModel.getConstructorParameters().add(simpleNameMetaModel.identifierPropertyMetaModel);
      singleMemberAnnotationExprMetaModel.getConstructorParameters().add(annotationExprMetaModel.namePropertyMetaModel);
      singleMemberAnnotationExprMetaModel.getConstructorParameters().add(singleMemberAnnotationExprMetaModel.memberValuePropertyMetaModel);
      superExprMetaModel.getConstructorParameters().add(superExprMetaModel.classExprPropertyMetaModel);
      thisExprMetaModel.getConstructorParameters().add(thisExprMetaModel.classExprPropertyMetaModel);
      typeExprMetaModel.getConstructorParameters().add(typeExprMetaModel.typePropertyMetaModel);
      unaryExprMetaModel.getConstructorParameters().add(unaryExprMetaModel.expressionPropertyMetaModel);
      unaryExprMetaModel.getConstructorParameters().add(unaryExprMetaModel.operatorPropertyMetaModel);
      variableDeclarationExprMetaModel.getConstructorParameters().add(variableDeclarationExprMetaModel.modifiersPropertyMetaModel);
      variableDeclarationExprMetaModel.getConstructorParameters().add(variableDeclarationExprMetaModel.annotationsPropertyMetaModel);
      variableDeclarationExprMetaModel.getConstructorParameters().add(variableDeclarationExprMetaModel.variablesPropertyMetaModel);
      importDeclarationMetaModel.getConstructorParameters().add(importDeclarationMetaModel.namePropertyMetaModel);
      importDeclarationMetaModel.getConstructorParameters().add(importDeclarationMetaModel.isStaticPropertyMetaModel);
      importDeclarationMetaModel.getConstructorParameters().add(importDeclarationMetaModel.isAsteriskPropertyMetaModel);
      assertStmtMetaModel.getConstructorParameters().add(assertStmtMetaModel.checkPropertyMetaModel);
      assertStmtMetaModel.getConstructorParameters().add(assertStmtMetaModel.messagePropertyMetaModel);
      blockStmtMetaModel.getConstructorParameters().add(blockStmtMetaModel.statementsPropertyMetaModel);
      breakStmtMetaModel.getConstructorParameters().add(breakStmtMetaModel.labelPropertyMetaModel);
      catchClauseMetaModel.getConstructorParameters().add(catchClauseMetaModel.parameterPropertyMetaModel);
      catchClauseMetaModel.getConstructorParameters().add(catchClauseMetaModel.bodyPropertyMetaModel);
      continueStmtMetaModel.getConstructorParameters().add(continueStmtMetaModel.labelPropertyMetaModel);
      doStmtMetaModel.getConstructorParameters().add(doStmtMetaModel.bodyPropertyMetaModel);
      doStmtMetaModel.getConstructorParameters().add(doStmtMetaModel.conditionPropertyMetaModel);
      explicitConstructorInvocationStmtMetaModel.getConstructorParameters().add(explicitConstructorInvocationStmtMetaModel.typeArgumentsPropertyMetaModel);
      explicitConstructorInvocationStmtMetaModel.getConstructorParameters().add(explicitConstructorInvocationStmtMetaModel.isThisPropertyMetaModel);
      explicitConstructorInvocationStmtMetaModel.getConstructorParameters().add(explicitConstructorInvocationStmtMetaModel.expressionPropertyMetaModel);
      explicitConstructorInvocationStmtMetaModel.getConstructorParameters().add(explicitConstructorInvocationStmtMetaModel.argumentsPropertyMetaModel);
      expressionStmtMetaModel.getConstructorParameters().add(expressionStmtMetaModel.expressionPropertyMetaModel);
      foreachStmtMetaModel.getConstructorParameters().add(foreachStmtMetaModel.variablePropertyMetaModel);
      foreachStmtMetaModel.getConstructorParameters().add(foreachStmtMetaModel.iterablePropertyMetaModel);
      foreachStmtMetaModel.getConstructorParameters().add(foreachStmtMetaModel.bodyPropertyMetaModel);
      forStmtMetaModel.getConstructorParameters().add(forStmtMetaModel.initializationPropertyMetaModel);
      forStmtMetaModel.getConstructorParameters().add(forStmtMetaModel.comparePropertyMetaModel);
      forStmtMetaModel.getConstructorParameters().add(forStmtMetaModel.updatePropertyMetaModel);
      forStmtMetaModel.getConstructorParameters().add(forStmtMetaModel.bodyPropertyMetaModel);
      ifStmtMetaModel.getConstructorParameters().add(ifStmtMetaModel.conditionPropertyMetaModel);
      ifStmtMetaModel.getConstructorParameters().add(ifStmtMetaModel.thenStmtPropertyMetaModel);
      ifStmtMetaModel.getConstructorParameters().add(ifStmtMetaModel.elseStmtPropertyMetaModel);
      labeledStmtMetaModel.getConstructorParameters().add(labeledStmtMetaModel.labelPropertyMetaModel);
      labeledStmtMetaModel.getConstructorParameters().add(labeledStmtMetaModel.statementPropertyMetaModel);
      returnStmtMetaModel.getConstructorParameters().add(returnStmtMetaModel.expressionPropertyMetaModel);
      switchEntryStmtMetaModel.getConstructorParameters().add(switchEntryStmtMetaModel.labelPropertyMetaModel);
      switchEntryStmtMetaModel.getConstructorParameters().add(switchEntryStmtMetaModel.statementsPropertyMetaModel);
      switchStmtMetaModel.getConstructorParameters().add(switchStmtMetaModel.selectorPropertyMetaModel);
      switchStmtMetaModel.getConstructorParameters().add(switchStmtMetaModel.entriesPropertyMetaModel);
      synchronizedStmtMetaModel.getConstructorParameters().add(synchronizedStmtMetaModel.expressionPropertyMetaModel);
      synchronizedStmtMetaModel.getConstructorParameters().add(synchronizedStmtMetaModel.bodyPropertyMetaModel);
      throwStmtMetaModel.getConstructorParameters().add(throwStmtMetaModel.expressionPropertyMetaModel);
      tryStmtMetaModel.getConstructorParameters().add(tryStmtMetaModel.resourcesPropertyMetaModel);
      tryStmtMetaModel.getConstructorParameters().add(tryStmtMetaModel.tryBlockPropertyMetaModel);
      tryStmtMetaModel.getConstructorParameters().add(tryStmtMetaModel.catchClausesPropertyMetaModel);
      tryStmtMetaModel.getConstructorParameters().add(tryStmtMetaModel.finallyBlockPropertyMetaModel);
      localClassDeclarationStmtMetaModel.getConstructorParameters().add(localClassDeclarationStmtMetaModel.classDeclarationPropertyMetaModel);
      whileStmtMetaModel.getConstructorParameters().add(whileStmtMetaModel.conditionPropertyMetaModel);
      whileStmtMetaModel.getConstructorParameters().add(whileStmtMetaModel.bodyPropertyMetaModel);
      arrayTypeMetaModel.getConstructorParameters().add(arrayTypeMetaModel.componentTypePropertyMetaModel);
      arrayTypeMetaModel.getConstructorParameters().add(arrayTypeMetaModel.originPropertyMetaModel);
      arrayTypeMetaModel.getConstructorParameters().add(typeMetaModel.annotationsPropertyMetaModel);
      classOrInterfaceTypeMetaModel.getConstructorParameters().add(classOrInterfaceTypeMetaModel.scopePropertyMetaModel);
      classOrInterfaceTypeMetaModel.getConstructorParameters().add(classOrInterfaceTypeMetaModel.namePropertyMetaModel);
      classOrInterfaceTypeMetaModel.getConstructorParameters().add(classOrInterfaceTypeMetaModel.typeArgumentsPropertyMetaModel);
      classOrInterfaceTypeMetaModel.getConstructorParameters().add(typeMetaModel.annotationsPropertyMetaModel);
      intersectionTypeMetaModel.getConstructorParameters().add(intersectionTypeMetaModel.elementsPropertyMetaModel);
      primitiveTypeMetaModel.getConstructorParameters().add(primitiveTypeMetaModel.typePropertyMetaModel);
      primitiveTypeMetaModel.getConstructorParameters().add(typeMetaModel.annotationsPropertyMetaModel);
      typeParameterMetaModel.getConstructorParameters().add(typeParameterMetaModel.namePropertyMetaModel);
      typeParameterMetaModel.getConstructorParameters().add(typeParameterMetaModel.typeBoundPropertyMetaModel);
      typeParameterMetaModel.getConstructorParameters().add(typeMetaModel.annotationsPropertyMetaModel);
      unionTypeMetaModel.getConstructorParameters().add(unionTypeMetaModel.elementsPropertyMetaModel);
      wildcardTypeMetaModel.getConstructorParameters().add(wildcardTypeMetaModel.extendedTypePropertyMetaModel);
      wildcardTypeMetaModel.getConstructorParameters().add(wildcardTypeMetaModel.superTypePropertyMetaModel);
      wildcardTypeMetaModel.getConstructorParameters().add(typeMetaModel.annotationsPropertyMetaModel);
      moduleRequiresStmtMetaModel.getConstructorParameters().add(moduleRequiresStmtMetaModel.modifiersPropertyMetaModel);
      moduleRequiresStmtMetaModel.getConstructorParameters().add(moduleRequiresStmtMetaModel.namePropertyMetaModel);
      moduleExportsStmtMetaModel.getConstructorParameters().add(moduleExportsStmtMetaModel.namePropertyMetaModel);
      moduleExportsStmtMetaModel.getConstructorParameters().add(moduleExportsStmtMetaModel.moduleNamesPropertyMetaModel);
      moduleProvidesStmtMetaModel.getConstructorParameters().add(moduleProvidesStmtMetaModel.namePropertyMetaModel);
      moduleProvidesStmtMetaModel.getConstructorParameters().add(moduleProvidesStmtMetaModel.withPropertyMetaModel);
      moduleUsesStmtMetaModel.getConstructorParameters().add(moduleUsesStmtMetaModel.namePropertyMetaModel);
      moduleOpensStmtMetaModel.getConstructorParameters().add(moduleOpensStmtMetaModel.namePropertyMetaModel);
      moduleOpensStmtMetaModel.getConstructorParameters().add(moduleOpensStmtMetaModel.moduleNamesPropertyMetaModel);
   }

   public static List<BaseNodeMetaModel> getNodeMetaModels() {
      return nodeMetaModels;
   }

   private static void initializeNodeMetaModels() {
      nodeMetaModels.add(annotationDeclarationMetaModel);
      nodeMetaModels.add(annotationExprMetaModel);
      nodeMetaModels.add(annotationMemberDeclarationMetaModel);
      nodeMetaModels.add(arrayAccessExprMetaModel);
      nodeMetaModels.add(arrayCreationExprMetaModel);
      nodeMetaModels.add(arrayCreationLevelMetaModel);
      nodeMetaModels.add(arrayInitializerExprMetaModel);
      nodeMetaModels.add(arrayTypeMetaModel);
      nodeMetaModels.add(assertStmtMetaModel);
      nodeMetaModels.add(assignExprMetaModel);
      nodeMetaModels.add(binaryExprMetaModel);
      nodeMetaModels.add(blockCommentMetaModel);
      nodeMetaModels.add(blockStmtMetaModel);
      nodeMetaModels.add(bodyDeclarationMetaModel);
      nodeMetaModels.add(booleanLiteralExprMetaModel);
      nodeMetaModels.add(breakStmtMetaModel);
      nodeMetaModels.add(callableDeclarationMetaModel);
      nodeMetaModels.add(castExprMetaModel);
      nodeMetaModels.add(catchClauseMetaModel);
      nodeMetaModels.add(charLiteralExprMetaModel);
      nodeMetaModels.add(classExprMetaModel);
      nodeMetaModels.add(classOrInterfaceDeclarationMetaModel);
      nodeMetaModels.add(classOrInterfaceTypeMetaModel);
      nodeMetaModels.add(commentMetaModel);
      nodeMetaModels.add(compilationUnitMetaModel);
      nodeMetaModels.add(conditionalExprMetaModel);
      nodeMetaModels.add(constructorDeclarationMetaModel);
      nodeMetaModels.add(continueStmtMetaModel);
      nodeMetaModels.add(doStmtMetaModel);
      nodeMetaModels.add(doubleLiteralExprMetaModel);
      nodeMetaModels.add(emptyStmtMetaModel);
      nodeMetaModels.add(enclosedExprMetaModel);
      nodeMetaModels.add(enumConstantDeclarationMetaModel);
      nodeMetaModels.add(enumDeclarationMetaModel);
      nodeMetaModels.add(explicitConstructorInvocationStmtMetaModel);
      nodeMetaModels.add(expressionMetaModel);
      nodeMetaModels.add(expressionStmtMetaModel);
      nodeMetaModels.add(fieldAccessExprMetaModel);
      nodeMetaModels.add(fieldDeclarationMetaModel);
      nodeMetaModels.add(forStmtMetaModel);
      nodeMetaModels.add(foreachStmtMetaModel);
      nodeMetaModels.add(ifStmtMetaModel);
      nodeMetaModels.add(importDeclarationMetaModel);
      nodeMetaModels.add(initializerDeclarationMetaModel);
      nodeMetaModels.add(instanceOfExprMetaModel);
      nodeMetaModels.add(integerLiteralExprMetaModel);
      nodeMetaModels.add(intersectionTypeMetaModel);
      nodeMetaModels.add(javadocCommentMetaModel);
      nodeMetaModels.add(labeledStmtMetaModel);
      nodeMetaModels.add(lambdaExprMetaModel);
      nodeMetaModels.add(lineCommentMetaModel);
      nodeMetaModels.add(literalExprMetaModel);
      nodeMetaModels.add(literalStringValueExprMetaModel);
      nodeMetaModels.add(localClassDeclarationStmtMetaModel);
      nodeMetaModels.add(longLiteralExprMetaModel);
      nodeMetaModels.add(markerAnnotationExprMetaModel);
      nodeMetaModels.add(memberValuePairMetaModel);
      nodeMetaModels.add(methodCallExprMetaModel);
      nodeMetaModels.add(methodDeclarationMetaModel);
      nodeMetaModels.add(methodReferenceExprMetaModel);
      nodeMetaModels.add(moduleDeclarationMetaModel);
      nodeMetaModels.add(moduleExportsStmtMetaModel);
      nodeMetaModels.add(moduleOpensStmtMetaModel);
      nodeMetaModels.add(moduleProvidesStmtMetaModel);
      nodeMetaModels.add(moduleRequiresStmtMetaModel);
      nodeMetaModels.add(moduleStmtMetaModel);
      nodeMetaModels.add(moduleUsesStmtMetaModel);
      nodeMetaModels.add(nameExprMetaModel);
      nodeMetaModels.add(nameMetaModel);
      nodeMetaModels.add(nodeMetaModel);
      nodeMetaModels.add(normalAnnotationExprMetaModel);
      nodeMetaModels.add(nullLiteralExprMetaModel);
      nodeMetaModels.add(objectCreationExprMetaModel);
      nodeMetaModels.add(packageDeclarationMetaModel);
      nodeMetaModels.add(parameterMetaModel);
      nodeMetaModels.add(primitiveTypeMetaModel);
      nodeMetaModels.add(receiverParameterMetaModel);
      nodeMetaModels.add(referenceTypeMetaModel);
      nodeMetaModels.add(returnStmtMetaModel);
      nodeMetaModels.add(simpleNameMetaModel);
      nodeMetaModels.add(singleMemberAnnotationExprMetaModel);
      nodeMetaModels.add(statementMetaModel);
      nodeMetaModels.add(stringLiteralExprMetaModel);
      nodeMetaModels.add(superExprMetaModel);
      nodeMetaModels.add(switchEntryStmtMetaModel);
      nodeMetaModels.add(switchStmtMetaModel);
      nodeMetaModels.add(synchronizedStmtMetaModel);
      nodeMetaModels.add(thisExprMetaModel);
      nodeMetaModels.add(throwStmtMetaModel);
      nodeMetaModels.add(tryStmtMetaModel);
      nodeMetaModels.add(typeDeclarationMetaModel);
      nodeMetaModels.add(typeExprMetaModel);
      nodeMetaModels.add(typeMetaModel);
      nodeMetaModels.add(typeParameterMetaModel);
      nodeMetaModels.add(unaryExprMetaModel);
      nodeMetaModels.add(unionTypeMetaModel);
      nodeMetaModels.add(unknownTypeMetaModel);
      nodeMetaModels.add(unparsableStmtMetaModel);
      nodeMetaModels.add(varTypeMetaModel);
      nodeMetaModels.add(variableDeclarationExprMetaModel);
      nodeMetaModels.add(variableDeclaratorMetaModel);
      nodeMetaModels.add(voidTypeMetaModel);
      nodeMetaModels.add(whileStmtMetaModel);
      nodeMetaModels.add(wildcardTypeMetaModel);
   }

   private static void initializePropertyMetaModels() {
      nodeMetaModel.commentPropertyMetaModel = new PropertyMetaModel(nodeMetaModel, "comment", Comment.class, Optional.of(commentMetaModel), true, false, false, false, false);
      nodeMetaModel.getDeclaredPropertyMetaModels().add(nodeMetaModel.commentPropertyMetaModel);
      bodyDeclarationMetaModel.annotationsPropertyMetaModel = new PropertyMetaModel(bodyDeclarationMetaModel, "annotations", AnnotationExpr.class, Optional.of(annotationExprMetaModel), false, false, true, false, false);
      bodyDeclarationMetaModel.getDeclaredPropertyMetaModels().add(bodyDeclarationMetaModel.annotationsPropertyMetaModel);
      callableDeclarationMetaModel.modifiersPropertyMetaModel = new PropertyMetaModel(callableDeclarationMetaModel, "modifiers", Modifier.class, Optional.empty(), false, false, false, true, false);
      callableDeclarationMetaModel.getDeclaredPropertyMetaModels().add(callableDeclarationMetaModel.modifiersPropertyMetaModel);
      callableDeclarationMetaModel.namePropertyMetaModel = new PropertyMetaModel(callableDeclarationMetaModel, "name", SimpleName.class, Optional.of(simpleNameMetaModel), false, false, false, false, false);
      callableDeclarationMetaModel.getDeclaredPropertyMetaModels().add(callableDeclarationMetaModel.namePropertyMetaModel);
      callableDeclarationMetaModel.parametersPropertyMetaModel = new PropertyMetaModel(callableDeclarationMetaModel, "parameters", Parameter.class, Optional.of(parameterMetaModel), false, false, true, false, false);
      callableDeclarationMetaModel.getDeclaredPropertyMetaModels().add(callableDeclarationMetaModel.parametersPropertyMetaModel);
      callableDeclarationMetaModel.receiverParameterPropertyMetaModel = new PropertyMetaModel(callableDeclarationMetaModel, "receiverParameter", ReceiverParameter.class, Optional.of(receiverParameterMetaModel), true, false, false, false, false);
      callableDeclarationMetaModel.getDeclaredPropertyMetaModels().add(callableDeclarationMetaModel.receiverParameterPropertyMetaModel);
      callableDeclarationMetaModel.thrownExceptionsPropertyMetaModel = new PropertyMetaModel(callableDeclarationMetaModel, "thrownExceptions", ReferenceType.class, Optional.of(referenceTypeMetaModel), false, false, true, false, false);
      callableDeclarationMetaModel.getDeclaredPropertyMetaModels().add(callableDeclarationMetaModel.thrownExceptionsPropertyMetaModel);
      callableDeclarationMetaModel.typeParametersPropertyMetaModel = new PropertyMetaModel(callableDeclarationMetaModel, "typeParameters", TypeParameter.class, Optional.of(typeParameterMetaModel), false, false, true, false, false);
      callableDeclarationMetaModel.getDeclaredPropertyMetaModels().add(callableDeclarationMetaModel.typeParametersPropertyMetaModel);
      typeMetaModel.annotationsPropertyMetaModel = new PropertyMetaModel(typeMetaModel, "annotations", AnnotationExpr.class, Optional.of(annotationExprMetaModel), false, false, true, false, false);
      typeMetaModel.getDeclaredPropertyMetaModels().add(typeMetaModel.annotationsPropertyMetaModel);
      annotationExprMetaModel.namePropertyMetaModel = new PropertyMetaModel(annotationExprMetaModel, "name", Name.class, Optional.of(nameMetaModel), false, false, false, false, false);
      annotationExprMetaModel.getDeclaredPropertyMetaModels().add(annotationExprMetaModel.namePropertyMetaModel);
      typeDeclarationMetaModel.membersPropertyMetaModel = new PropertyMetaModel(typeDeclarationMetaModel, "members", BodyDeclaration.class, Optional.of(bodyDeclarationMetaModel), false, false, true, false, true);
      typeDeclarationMetaModel.getDeclaredPropertyMetaModels().add(typeDeclarationMetaModel.membersPropertyMetaModel);
      typeDeclarationMetaModel.modifiersPropertyMetaModel = new PropertyMetaModel(typeDeclarationMetaModel, "modifiers", Modifier.class, Optional.empty(), false, false, false, true, false);
      typeDeclarationMetaModel.getDeclaredPropertyMetaModels().add(typeDeclarationMetaModel.modifiersPropertyMetaModel);
      typeDeclarationMetaModel.namePropertyMetaModel = new PropertyMetaModel(typeDeclarationMetaModel, "name", SimpleName.class, Optional.of(simpleNameMetaModel), false, false, false, false, false);
      typeDeclarationMetaModel.getDeclaredPropertyMetaModels().add(typeDeclarationMetaModel.namePropertyMetaModel);
      literalStringValueExprMetaModel.valuePropertyMetaModel = new PropertyMetaModel(literalStringValueExprMetaModel, "value", String.class, Optional.empty(), false, false, false, false, false);
      literalStringValueExprMetaModel.getDeclaredPropertyMetaModels().add(literalStringValueExprMetaModel.valuePropertyMetaModel);
      moduleDeclarationMetaModel.annotationsPropertyMetaModel = new PropertyMetaModel(moduleDeclarationMetaModel, "annotations", AnnotationExpr.class, Optional.of(annotationExprMetaModel), false, false, true, false, false);
      moduleDeclarationMetaModel.getDeclaredPropertyMetaModels().add(moduleDeclarationMetaModel.annotationsPropertyMetaModel);
      moduleDeclarationMetaModel.isOpenPropertyMetaModel = new PropertyMetaModel(moduleDeclarationMetaModel, "isOpen", Boolean.TYPE, Optional.empty(), false, false, false, false, false);
      moduleDeclarationMetaModel.getDeclaredPropertyMetaModels().add(moduleDeclarationMetaModel.isOpenPropertyMetaModel);
      moduleDeclarationMetaModel.moduleStmtsPropertyMetaModel = new PropertyMetaModel(moduleDeclarationMetaModel, "moduleStmts", ModuleStmt.class, Optional.of(moduleStmtMetaModel), false, false, true, false, false);
      moduleDeclarationMetaModel.getDeclaredPropertyMetaModels().add(moduleDeclarationMetaModel.moduleStmtsPropertyMetaModel);
      moduleDeclarationMetaModel.namePropertyMetaModel = new PropertyMetaModel(moduleDeclarationMetaModel, "name", Name.class, Optional.of(nameMetaModel), false, false, false, false, false);
      moduleDeclarationMetaModel.getDeclaredPropertyMetaModels().add(moduleDeclarationMetaModel.namePropertyMetaModel);
      arrayCreationLevelMetaModel.annotationsPropertyMetaModel = new PropertyMetaModel(arrayCreationLevelMetaModel, "annotations", AnnotationExpr.class, Optional.of(annotationExprMetaModel), false, false, true, false, false);
      arrayCreationLevelMetaModel.getDeclaredPropertyMetaModels().add(arrayCreationLevelMetaModel.annotationsPropertyMetaModel);
      arrayCreationLevelMetaModel.dimensionPropertyMetaModel = new PropertyMetaModel(arrayCreationLevelMetaModel, "dimension", Expression.class, Optional.of(expressionMetaModel), true, false, false, false, false);
      arrayCreationLevelMetaModel.getDeclaredPropertyMetaModels().add(arrayCreationLevelMetaModel.dimensionPropertyMetaModel);
      compilationUnitMetaModel.importsPropertyMetaModel = new PropertyMetaModel(compilationUnitMetaModel, "imports", ImportDeclaration.class, Optional.of(importDeclarationMetaModel), false, false, true, false, false);
      compilationUnitMetaModel.getDeclaredPropertyMetaModels().add(compilationUnitMetaModel.importsPropertyMetaModel);
      compilationUnitMetaModel.modulePropertyMetaModel = new PropertyMetaModel(compilationUnitMetaModel, "module", ModuleDeclaration.class, Optional.of(moduleDeclarationMetaModel), true, false, false, false, false);
      compilationUnitMetaModel.getDeclaredPropertyMetaModels().add(compilationUnitMetaModel.modulePropertyMetaModel);
      compilationUnitMetaModel.packageDeclarationPropertyMetaModel = new PropertyMetaModel(compilationUnitMetaModel, "packageDeclaration", PackageDeclaration.class, Optional.of(packageDeclarationMetaModel), true, false, false, false, false);
      compilationUnitMetaModel.getDeclaredPropertyMetaModels().add(compilationUnitMetaModel.packageDeclarationPropertyMetaModel);
      compilationUnitMetaModel.typesPropertyMetaModel = new PropertyMetaModel(compilationUnitMetaModel, "types", TypeDeclaration.class, Optional.of(typeDeclarationMetaModel), false, false, true, false, true);
      compilationUnitMetaModel.getDeclaredPropertyMetaModels().add(compilationUnitMetaModel.typesPropertyMetaModel);
      packageDeclarationMetaModel.annotationsPropertyMetaModel = new PropertyMetaModel(packageDeclarationMetaModel, "annotations", AnnotationExpr.class, Optional.of(annotationExprMetaModel), false, false, true, false, false);
      packageDeclarationMetaModel.getDeclaredPropertyMetaModels().add(packageDeclarationMetaModel.annotationsPropertyMetaModel);
      packageDeclarationMetaModel.namePropertyMetaModel = new PropertyMetaModel(packageDeclarationMetaModel, "name", Name.class, Optional.of(nameMetaModel), false, false, false, false, false);
      packageDeclarationMetaModel.getDeclaredPropertyMetaModels().add(packageDeclarationMetaModel.namePropertyMetaModel);
      annotationMemberDeclarationMetaModel.defaultValuePropertyMetaModel = new PropertyMetaModel(annotationMemberDeclarationMetaModel, "defaultValue", Expression.class, Optional.of(expressionMetaModel), true, false, false, false, false);
      annotationMemberDeclarationMetaModel.getDeclaredPropertyMetaModels().add(annotationMemberDeclarationMetaModel.defaultValuePropertyMetaModel);
      annotationMemberDeclarationMetaModel.modifiersPropertyMetaModel = new PropertyMetaModel(annotationMemberDeclarationMetaModel, "modifiers", Modifier.class, Optional.empty(), false, false, false, true, false);
      annotationMemberDeclarationMetaModel.getDeclaredPropertyMetaModels().add(annotationMemberDeclarationMetaModel.modifiersPropertyMetaModel);
      annotationMemberDeclarationMetaModel.namePropertyMetaModel = new PropertyMetaModel(annotationMemberDeclarationMetaModel, "name", SimpleName.class, Optional.of(simpleNameMetaModel), false, false, false, false, false);
      annotationMemberDeclarationMetaModel.getDeclaredPropertyMetaModels().add(annotationMemberDeclarationMetaModel.namePropertyMetaModel);
      annotationMemberDeclarationMetaModel.typePropertyMetaModel = new PropertyMetaModel(annotationMemberDeclarationMetaModel, "type", Type.class, Optional.of(typeMetaModel), false, false, false, false, false);
      annotationMemberDeclarationMetaModel.getDeclaredPropertyMetaModels().add(annotationMemberDeclarationMetaModel.typePropertyMetaModel);
      classOrInterfaceDeclarationMetaModel.extendedTypesPropertyMetaModel = new PropertyMetaModel(classOrInterfaceDeclarationMetaModel, "extendedTypes", ClassOrInterfaceType.class, Optional.of(classOrInterfaceTypeMetaModel), false, false, true, false, false);
      classOrInterfaceDeclarationMetaModel.getDeclaredPropertyMetaModels().add(classOrInterfaceDeclarationMetaModel.extendedTypesPropertyMetaModel);
      classOrInterfaceDeclarationMetaModel.implementedTypesPropertyMetaModel = new PropertyMetaModel(classOrInterfaceDeclarationMetaModel, "implementedTypes", ClassOrInterfaceType.class, Optional.of(classOrInterfaceTypeMetaModel), false, false, true, false, false);
      classOrInterfaceDeclarationMetaModel.getDeclaredPropertyMetaModels().add(classOrInterfaceDeclarationMetaModel.implementedTypesPropertyMetaModel);
      classOrInterfaceDeclarationMetaModel.isInterfacePropertyMetaModel = new PropertyMetaModel(classOrInterfaceDeclarationMetaModel, "isInterface", Boolean.TYPE, Optional.empty(), false, false, false, false, false);
      classOrInterfaceDeclarationMetaModel.getDeclaredPropertyMetaModels().add(classOrInterfaceDeclarationMetaModel.isInterfacePropertyMetaModel);
      classOrInterfaceDeclarationMetaModel.typeParametersPropertyMetaModel = new PropertyMetaModel(classOrInterfaceDeclarationMetaModel, "typeParameters", TypeParameter.class, Optional.of(typeParameterMetaModel), false, false, true, false, false);
      classOrInterfaceDeclarationMetaModel.getDeclaredPropertyMetaModels().add(classOrInterfaceDeclarationMetaModel.typeParametersPropertyMetaModel);
      constructorDeclarationMetaModel.bodyPropertyMetaModel = new PropertyMetaModel(constructorDeclarationMetaModel, "body", BlockStmt.class, Optional.of(blockStmtMetaModel), false, false, false, false, false);
      constructorDeclarationMetaModel.getDeclaredPropertyMetaModels().add(constructorDeclarationMetaModel.bodyPropertyMetaModel);
      enumConstantDeclarationMetaModel.argumentsPropertyMetaModel = new PropertyMetaModel(enumConstantDeclarationMetaModel, "arguments", Expression.class, Optional.of(expressionMetaModel), false, false, true, false, false);
      enumConstantDeclarationMetaModel.getDeclaredPropertyMetaModels().add(enumConstantDeclarationMetaModel.argumentsPropertyMetaModel);
      enumConstantDeclarationMetaModel.classBodyPropertyMetaModel = new PropertyMetaModel(enumConstantDeclarationMetaModel, "classBody", BodyDeclaration.class, Optional.of(bodyDeclarationMetaModel), false, false, true, false, true);
      enumConstantDeclarationMetaModel.getDeclaredPropertyMetaModels().add(enumConstantDeclarationMetaModel.classBodyPropertyMetaModel);
      enumConstantDeclarationMetaModel.namePropertyMetaModel = new PropertyMetaModel(enumConstantDeclarationMetaModel, "name", SimpleName.class, Optional.of(simpleNameMetaModel), false, false, false, false, false);
      enumConstantDeclarationMetaModel.getDeclaredPropertyMetaModels().add(enumConstantDeclarationMetaModel.namePropertyMetaModel);
      enumDeclarationMetaModel.entriesPropertyMetaModel = new PropertyMetaModel(enumDeclarationMetaModel, "entries", EnumConstantDeclaration.class, Optional.of(enumConstantDeclarationMetaModel), false, false, true, false, false);
      enumDeclarationMetaModel.getDeclaredPropertyMetaModels().add(enumDeclarationMetaModel.entriesPropertyMetaModel);
      enumDeclarationMetaModel.implementedTypesPropertyMetaModel = new PropertyMetaModel(enumDeclarationMetaModel, "implementedTypes", ClassOrInterfaceType.class, Optional.of(classOrInterfaceTypeMetaModel), false, false, true, false, false);
      enumDeclarationMetaModel.getDeclaredPropertyMetaModels().add(enumDeclarationMetaModel.implementedTypesPropertyMetaModel);
      fieldDeclarationMetaModel.modifiersPropertyMetaModel = new PropertyMetaModel(fieldDeclarationMetaModel, "modifiers", Modifier.class, Optional.empty(), false, false, false, true, false);
      fieldDeclarationMetaModel.getDeclaredPropertyMetaModels().add(fieldDeclarationMetaModel.modifiersPropertyMetaModel);
      fieldDeclarationMetaModel.variablesPropertyMetaModel = new PropertyMetaModel(fieldDeclarationMetaModel, "variables", VariableDeclarator.class, Optional.of(variableDeclaratorMetaModel), false, true, true, false, false);
      fieldDeclarationMetaModel.getDeclaredPropertyMetaModels().add(fieldDeclarationMetaModel.variablesPropertyMetaModel);
      fieldDeclarationMetaModel.maximumCommonTypePropertyMetaModel = new PropertyMetaModel(fieldDeclarationMetaModel, "maximumCommonType", Type.class, Optional.of(typeMetaModel), true, false, false, false, false);
      fieldDeclarationMetaModel.getDerivedPropertyMetaModels().add(fieldDeclarationMetaModel.maximumCommonTypePropertyMetaModel);
      initializerDeclarationMetaModel.bodyPropertyMetaModel = new PropertyMetaModel(initializerDeclarationMetaModel, "body", BlockStmt.class, Optional.of(blockStmtMetaModel), false, false, false, false, false);
      initializerDeclarationMetaModel.getDeclaredPropertyMetaModels().add(initializerDeclarationMetaModel.bodyPropertyMetaModel);
      initializerDeclarationMetaModel.isStaticPropertyMetaModel = new PropertyMetaModel(initializerDeclarationMetaModel, "isStatic", Boolean.TYPE, Optional.empty(), false, false, false, false, false);
      initializerDeclarationMetaModel.getDeclaredPropertyMetaModels().add(initializerDeclarationMetaModel.isStaticPropertyMetaModel);
      methodDeclarationMetaModel.bodyPropertyMetaModel = new PropertyMetaModel(methodDeclarationMetaModel, "body", BlockStmt.class, Optional.of(blockStmtMetaModel), true, false, false, false, false);
      methodDeclarationMetaModel.getDeclaredPropertyMetaModels().add(methodDeclarationMetaModel.bodyPropertyMetaModel);
      methodDeclarationMetaModel.typePropertyMetaModel = new PropertyMetaModel(methodDeclarationMetaModel, "type", Type.class, Optional.of(typeMetaModel), false, false, false, false, false);
      methodDeclarationMetaModel.getDeclaredPropertyMetaModels().add(methodDeclarationMetaModel.typePropertyMetaModel);
      parameterMetaModel.annotationsPropertyMetaModel = new PropertyMetaModel(parameterMetaModel, "annotations", AnnotationExpr.class, Optional.of(annotationExprMetaModel), false, false, true, false, false);
      parameterMetaModel.getDeclaredPropertyMetaModels().add(parameterMetaModel.annotationsPropertyMetaModel);
      parameterMetaModel.isVarArgsPropertyMetaModel = new PropertyMetaModel(parameterMetaModel, "isVarArgs", Boolean.TYPE, Optional.empty(), false, false, false, false, false);
      parameterMetaModel.getDeclaredPropertyMetaModels().add(parameterMetaModel.isVarArgsPropertyMetaModel);
      parameterMetaModel.modifiersPropertyMetaModel = new PropertyMetaModel(parameterMetaModel, "modifiers", Modifier.class, Optional.empty(), false, false, false, true, false);
      parameterMetaModel.getDeclaredPropertyMetaModels().add(parameterMetaModel.modifiersPropertyMetaModel);
      parameterMetaModel.namePropertyMetaModel = new PropertyMetaModel(parameterMetaModel, "name", SimpleName.class, Optional.of(simpleNameMetaModel), false, false, false, false, false);
      parameterMetaModel.getDeclaredPropertyMetaModels().add(parameterMetaModel.namePropertyMetaModel);
      parameterMetaModel.typePropertyMetaModel = new PropertyMetaModel(parameterMetaModel, "type", Type.class, Optional.of(typeMetaModel), false, false, false, false, false);
      parameterMetaModel.getDeclaredPropertyMetaModels().add(parameterMetaModel.typePropertyMetaModel);
      parameterMetaModel.varArgsAnnotationsPropertyMetaModel = new PropertyMetaModel(parameterMetaModel, "varArgsAnnotations", AnnotationExpr.class, Optional.of(annotationExprMetaModel), false, false, true, false, false);
      parameterMetaModel.getDeclaredPropertyMetaModels().add(parameterMetaModel.varArgsAnnotationsPropertyMetaModel);
      receiverParameterMetaModel.annotationsPropertyMetaModel = new PropertyMetaModel(receiverParameterMetaModel, "annotations", AnnotationExpr.class, Optional.of(annotationExprMetaModel), false, false, true, false, false);
      receiverParameterMetaModel.getDeclaredPropertyMetaModels().add(receiverParameterMetaModel.annotationsPropertyMetaModel);
      receiverParameterMetaModel.namePropertyMetaModel = new PropertyMetaModel(receiverParameterMetaModel, "name", Name.class, Optional.of(nameMetaModel), false, false, false, false, false);
      receiverParameterMetaModel.getDeclaredPropertyMetaModels().add(receiverParameterMetaModel.namePropertyMetaModel);
      receiverParameterMetaModel.typePropertyMetaModel = new PropertyMetaModel(receiverParameterMetaModel, "type", Type.class, Optional.of(typeMetaModel), false, false, false, false, false);
      receiverParameterMetaModel.getDeclaredPropertyMetaModels().add(receiverParameterMetaModel.typePropertyMetaModel);
      variableDeclaratorMetaModel.initializerPropertyMetaModel = new PropertyMetaModel(variableDeclaratorMetaModel, "initializer", Expression.class, Optional.of(expressionMetaModel), true, true, false, false, false);
      variableDeclaratorMetaModel.getDeclaredPropertyMetaModels().add(variableDeclaratorMetaModel.initializerPropertyMetaModel);
      variableDeclaratorMetaModel.namePropertyMetaModel = new PropertyMetaModel(variableDeclaratorMetaModel, "name", SimpleName.class, Optional.of(simpleNameMetaModel), false, false, false, false, false);
      variableDeclaratorMetaModel.getDeclaredPropertyMetaModels().add(variableDeclaratorMetaModel.namePropertyMetaModel);
      variableDeclaratorMetaModel.typePropertyMetaModel = new PropertyMetaModel(variableDeclaratorMetaModel, "type", Type.class, Optional.of(typeMetaModel), false, false, false, false, false);
      variableDeclaratorMetaModel.getDeclaredPropertyMetaModels().add(variableDeclaratorMetaModel.typePropertyMetaModel);
      commentMetaModel.contentPropertyMetaModel = new PropertyMetaModel(commentMetaModel, "content", String.class, Optional.empty(), false, false, false, false, false);
      commentMetaModel.getDeclaredPropertyMetaModels().add(commentMetaModel.contentPropertyMetaModel);
      arrayAccessExprMetaModel.indexPropertyMetaModel = new PropertyMetaModel(arrayAccessExprMetaModel, "index", Expression.class, Optional.of(expressionMetaModel), false, false, false, false, false);
      arrayAccessExprMetaModel.getDeclaredPropertyMetaModels().add(arrayAccessExprMetaModel.indexPropertyMetaModel);
      arrayAccessExprMetaModel.namePropertyMetaModel = new PropertyMetaModel(arrayAccessExprMetaModel, "name", Expression.class, Optional.of(expressionMetaModel), false, false, false, false, false);
      arrayAccessExprMetaModel.getDeclaredPropertyMetaModels().add(arrayAccessExprMetaModel.namePropertyMetaModel);
      arrayCreationExprMetaModel.elementTypePropertyMetaModel = new PropertyMetaModel(arrayCreationExprMetaModel, "elementType", Type.class, Optional.of(typeMetaModel), false, false, false, false, false);
      arrayCreationExprMetaModel.getDeclaredPropertyMetaModels().add(arrayCreationExprMetaModel.elementTypePropertyMetaModel);
      arrayCreationExprMetaModel.initializerPropertyMetaModel = new PropertyMetaModel(arrayCreationExprMetaModel, "initializer", ArrayInitializerExpr.class, Optional.of(arrayInitializerExprMetaModel), true, false, false, false, false);
      arrayCreationExprMetaModel.getDeclaredPropertyMetaModels().add(arrayCreationExprMetaModel.initializerPropertyMetaModel);
      arrayCreationExprMetaModel.levelsPropertyMetaModel = new PropertyMetaModel(arrayCreationExprMetaModel, "levels", ArrayCreationLevel.class, Optional.of(arrayCreationLevelMetaModel), false, true, true, false, false);
      arrayCreationExprMetaModel.getDeclaredPropertyMetaModels().add(arrayCreationExprMetaModel.levelsPropertyMetaModel);
      arrayInitializerExprMetaModel.valuesPropertyMetaModel = new PropertyMetaModel(arrayInitializerExprMetaModel, "values", Expression.class, Optional.of(expressionMetaModel), false, false, true, false, false);
      arrayInitializerExprMetaModel.getDeclaredPropertyMetaModels().add(arrayInitializerExprMetaModel.valuesPropertyMetaModel);
      assignExprMetaModel.operatorPropertyMetaModel = new PropertyMetaModel(assignExprMetaModel, "operator", AssignExpr.Operator.class, Optional.empty(), false, false, false, false, false);
      assignExprMetaModel.getDeclaredPropertyMetaModels().add(assignExprMetaModel.operatorPropertyMetaModel);
      assignExprMetaModel.targetPropertyMetaModel = new PropertyMetaModel(assignExprMetaModel, "target", Expression.class, Optional.of(expressionMetaModel), false, false, false, false, false);
      assignExprMetaModel.getDeclaredPropertyMetaModels().add(assignExprMetaModel.targetPropertyMetaModel);
      assignExprMetaModel.valuePropertyMetaModel = new PropertyMetaModel(assignExprMetaModel, "value", Expression.class, Optional.of(expressionMetaModel), false, false, false, false, false);
      assignExprMetaModel.getDeclaredPropertyMetaModels().add(assignExprMetaModel.valuePropertyMetaModel);
      binaryExprMetaModel.leftPropertyMetaModel = new PropertyMetaModel(binaryExprMetaModel, "left", Expression.class, Optional.of(expressionMetaModel), false, false, false, false, false);
      binaryExprMetaModel.getDeclaredPropertyMetaModels().add(binaryExprMetaModel.leftPropertyMetaModel);
      binaryExprMetaModel.operatorPropertyMetaModel = new PropertyMetaModel(binaryExprMetaModel, "operator", BinaryExpr.Operator.class, Optional.empty(), false, false, false, false, false);
      binaryExprMetaModel.getDeclaredPropertyMetaModels().add(binaryExprMetaModel.operatorPropertyMetaModel);
      binaryExprMetaModel.rightPropertyMetaModel = new PropertyMetaModel(binaryExprMetaModel, "right", Expression.class, Optional.of(expressionMetaModel), false, false, false, false, false);
      binaryExprMetaModel.getDeclaredPropertyMetaModels().add(binaryExprMetaModel.rightPropertyMetaModel);
      booleanLiteralExprMetaModel.valuePropertyMetaModel = new PropertyMetaModel(booleanLiteralExprMetaModel, "value", Boolean.TYPE, Optional.empty(), false, false, false, false, false);
      booleanLiteralExprMetaModel.getDeclaredPropertyMetaModels().add(booleanLiteralExprMetaModel.valuePropertyMetaModel);
      castExprMetaModel.expressionPropertyMetaModel = new PropertyMetaModel(castExprMetaModel, "expression", Expression.class, Optional.of(expressionMetaModel), false, false, false, false, false);
      castExprMetaModel.getDeclaredPropertyMetaModels().add(castExprMetaModel.expressionPropertyMetaModel);
      castExprMetaModel.typePropertyMetaModel = new PropertyMetaModel(castExprMetaModel, "type", Type.class, Optional.of(typeMetaModel), false, false, false, false, false);
      castExprMetaModel.getDeclaredPropertyMetaModels().add(castExprMetaModel.typePropertyMetaModel);
      classExprMetaModel.typePropertyMetaModel = new PropertyMetaModel(classExprMetaModel, "type", Type.class, Optional.of(typeMetaModel), false, false, false, false, false);
      classExprMetaModel.getDeclaredPropertyMetaModels().add(classExprMetaModel.typePropertyMetaModel);
      conditionalExprMetaModel.conditionPropertyMetaModel = new PropertyMetaModel(conditionalExprMetaModel, "condition", Expression.class, Optional.of(expressionMetaModel), false, false, false, false, false);
      conditionalExprMetaModel.getDeclaredPropertyMetaModels().add(conditionalExprMetaModel.conditionPropertyMetaModel);
      conditionalExprMetaModel.elseExprPropertyMetaModel = new PropertyMetaModel(conditionalExprMetaModel, "elseExpr", Expression.class, Optional.of(expressionMetaModel), false, false, false, false, false);
      conditionalExprMetaModel.getDeclaredPropertyMetaModels().add(conditionalExprMetaModel.elseExprPropertyMetaModel);
      conditionalExprMetaModel.thenExprPropertyMetaModel = new PropertyMetaModel(conditionalExprMetaModel, "thenExpr", Expression.class, Optional.of(expressionMetaModel), false, false, false, false, false);
      conditionalExprMetaModel.getDeclaredPropertyMetaModels().add(conditionalExprMetaModel.thenExprPropertyMetaModel);
      enclosedExprMetaModel.innerPropertyMetaModel = new PropertyMetaModel(enclosedExprMetaModel, "inner", Expression.class, Optional.of(expressionMetaModel), false, false, false, false, false);
      enclosedExprMetaModel.getDeclaredPropertyMetaModels().add(enclosedExprMetaModel.innerPropertyMetaModel);
      fieldAccessExprMetaModel.namePropertyMetaModel = new PropertyMetaModel(fieldAccessExprMetaModel, "name", SimpleName.class, Optional.of(simpleNameMetaModel), false, false, false, false, false);
      fieldAccessExprMetaModel.getDeclaredPropertyMetaModels().add(fieldAccessExprMetaModel.namePropertyMetaModel);
      fieldAccessExprMetaModel.scopePropertyMetaModel = new PropertyMetaModel(fieldAccessExprMetaModel, "scope", Expression.class, Optional.of(expressionMetaModel), false, false, false, false, false);
      fieldAccessExprMetaModel.getDeclaredPropertyMetaModels().add(fieldAccessExprMetaModel.scopePropertyMetaModel);
      fieldAccessExprMetaModel.typeArgumentsPropertyMetaModel = new PropertyMetaModel(fieldAccessExprMetaModel, "typeArguments", Type.class, Optional.of(typeMetaModel), true, false, true, false, false);
      fieldAccessExprMetaModel.getDeclaredPropertyMetaModels().add(fieldAccessExprMetaModel.typeArgumentsPropertyMetaModel);
      fieldAccessExprMetaModel.usingDiamondOperatorPropertyMetaModel = new PropertyMetaModel(fieldAccessExprMetaModel, "usingDiamondOperator", Boolean.TYPE, Optional.empty(), false, false, false, false, false);
      fieldAccessExprMetaModel.getDerivedPropertyMetaModels().add(fieldAccessExprMetaModel.usingDiamondOperatorPropertyMetaModel);
      instanceOfExprMetaModel.expressionPropertyMetaModel = new PropertyMetaModel(instanceOfExprMetaModel, "expression", Expression.class, Optional.of(expressionMetaModel), false, false, false, false, false);
      instanceOfExprMetaModel.getDeclaredPropertyMetaModels().add(instanceOfExprMetaModel.expressionPropertyMetaModel);
      instanceOfExprMetaModel.typePropertyMetaModel = new PropertyMetaModel(instanceOfExprMetaModel, "type", ReferenceType.class, Optional.of(referenceTypeMetaModel), false, false, false, false, false);
      instanceOfExprMetaModel.getDeclaredPropertyMetaModels().add(instanceOfExprMetaModel.typePropertyMetaModel);
      lambdaExprMetaModel.bodyPropertyMetaModel = new PropertyMetaModel(lambdaExprMetaModel, "body", Statement.class, Optional.of(statementMetaModel), false, false, false, false, false);
      lambdaExprMetaModel.getDeclaredPropertyMetaModels().add(lambdaExprMetaModel.bodyPropertyMetaModel);
      lambdaExprMetaModel.isEnclosingParametersPropertyMetaModel = new PropertyMetaModel(lambdaExprMetaModel, "isEnclosingParameters", Boolean.TYPE, Optional.empty(), false, false, false, false, false);
      lambdaExprMetaModel.getDeclaredPropertyMetaModels().add(lambdaExprMetaModel.isEnclosingParametersPropertyMetaModel);
      lambdaExprMetaModel.parametersPropertyMetaModel = new PropertyMetaModel(lambdaExprMetaModel, "parameters", Parameter.class, Optional.of(parameterMetaModel), false, false, true, false, false);
      lambdaExprMetaModel.getDeclaredPropertyMetaModels().add(lambdaExprMetaModel.parametersPropertyMetaModel);
      lambdaExprMetaModel.expressionBodyPropertyMetaModel = new PropertyMetaModel(lambdaExprMetaModel, "expressionBody", Expression.class, Optional.of(expressionMetaModel), true, false, false, false, false);
      lambdaExprMetaModel.getDerivedPropertyMetaModels().add(lambdaExprMetaModel.expressionBodyPropertyMetaModel);
      memberValuePairMetaModel.namePropertyMetaModel = new PropertyMetaModel(memberValuePairMetaModel, "name", SimpleName.class, Optional.of(simpleNameMetaModel), false, false, false, false, false);
      memberValuePairMetaModel.getDeclaredPropertyMetaModels().add(memberValuePairMetaModel.namePropertyMetaModel);
      memberValuePairMetaModel.valuePropertyMetaModel = new PropertyMetaModel(memberValuePairMetaModel, "value", Expression.class, Optional.of(expressionMetaModel), false, false, false, false, false);
      memberValuePairMetaModel.getDeclaredPropertyMetaModels().add(memberValuePairMetaModel.valuePropertyMetaModel);
      methodCallExprMetaModel.argumentsPropertyMetaModel = new PropertyMetaModel(methodCallExprMetaModel, "arguments", Expression.class, Optional.of(expressionMetaModel), false, false, true, false, false);
      methodCallExprMetaModel.getDeclaredPropertyMetaModels().add(methodCallExprMetaModel.argumentsPropertyMetaModel);
      methodCallExprMetaModel.namePropertyMetaModel = new PropertyMetaModel(methodCallExprMetaModel, "name", SimpleName.class, Optional.of(simpleNameMetaModel), false, false, false, false, false);
      methodCallExprMetaModel.getDeclaredPropertyMetaModels().add(methodCallExprMetaModel.namePropertyMetaModel);
      methodCallExprMetaModel.scopePropertyMetaModel = new PropertyMetaModel(methodCallExprMetaModel, "scope", Expression.class, Optional.of(expressionMetaModel), true, false, false, false, false);
      methodCallExprMetaModel.getDeclaredPropertyMetaModels().add(methodCallExprMetaModel.scopePropertyMetaModel);
      methodCallExprMetaModel.typeArgumentsPropertyMetaModel = new PropertyMetaModel(methodCallExprMetaModel, "typeArguments", Type.class, Optional.of(typeMetaModel), true, false, true, false, false);
      methodCallExprMetaModel.getDeclaredPropertyMetaModels().add(methodCallExprMetaModel.typeArgumentsPropertyMetaModel);
      methodCallExprMetaModel.usingDiamondOperatorPropertyMetaModel = new PropertyMetaModel(methodCallExprMetaModel, "usingDiamondOperator", Boolean.TYPE, Optional.empty(), false, false, false, false, false);
      methodCallExprMetaModel.getDerivedPropertyMetaModels().add(methodCallExprMetaModel.usingDiamondOperatorPropertyMetaModel);
      methodReferenceExprMetaModel.identifierPropertyMetaModel = new PropertyMetaModel(methodReferenceExprMetaModel, "identifier", String.class, Optional.empty(), false, true, false, false, false);
      methodReferenceExprMetaModel.getDeclaredPropertyMetaModels().add(methodReferenceExprMetaModel.identifierPropertyMetaModel);
      methodReferenceExprMetaModel.scopePropertyMetaModel = new PropertyMetaModel(methodReferenceExprMetaModel, "scope", Expression.class, Optional.of(expressionMetaModel), false, false, false, false, false);
      methodReferenceExprMetaModel.getDeclaredPropertyMetaModels().add(methodReferenceExprMetaModel.scopePropertyMetaModel);
      methodReferenceExprMetaModel.typeArgumentsPropertyMetaModel = new PropertyMetaModel(methodReferenceExprMetaModel, "typeArguments", Type.class, Optional.of(typeMetaModel), true, false, true, false, false);
      methodReferenceExprMetaModel.getDeclaredPropertyMetaModels().add(methodReferenceExprMetaModel.typeArgumentsPropertyMetaModel);
      methodReferenceExprMetaModel.usingDiamondOperatorPropertyMetaModel = new PropertyMetaModel(methodReferenceExprMetaModel, "usingDiamondOperator", Boolean.TYPE, Optional.empty(), false, false, false, false, false);
      methodReferenceExprMetaModel.getDerivedPropertyMetaModels().add(methodReferenceExprMetaModel.usingDiamondOperatorPropertyMetaModel);
      nameExprMetaModel.namePropertyMetaModel = new PropertyMetaModel(nameExprMetaModel, "name", SimpleName.class, Optional.of(simpleNameMetaModel), false, false, false, false, false);
      nameExprMetaModel.getDeclaredPropertyMetaModels().add(nameExprMetaModel.namePropertyMetaModel);
      nameMetaModel.annotationsPropertyMetaModel = new PropertyMetaModel(nameMetaModel, "annotations", AnnotationExpr.class, Optional.of(annotationExprMetaModel), false, false, true, false, false);
      nameMetaModel.getDeclaredPropertyMetaModels().add(nameMetaModel.annotationsPropertyMetaModel);
      nameMetaModel.identifierPropertyMetaModel = new PropertyMetaModel(nameMetaModel, "identifier", String.class, Optional.empty(), false, true, false, false, false);
      nameMetaModel.getDeclaredPropertyMetaModels().add(nameMetaModel.identifierPropertyMetaModel);
      nameMetaModel.qualifierPropertyMetaModel = new PropertyMetaModel(nameMetaModel, "qualifier", Name.class, Optional.of(nameMetaModel), true, false, false, false, false);
      nameMetaModel.getDeclaredPropertyMetaModels().add(nameMetaModel.qualifierPropertyMetaModel);
      normalAnnotationExprMetaModel.pairsPropertyMetaModel = new PropertyMetaModel(normalAnnotationExprMetaModel, "pairs", MemberValuePair.class, Optional.of(memberValuePairMetaModel), false, false, true, false, false);
      normalAnnotationExprMetaModel.getDeclaredPropertyMetaModels().add(normalAnnotationExprMetaModel.pairsPropertyMetaModel);
      objectCreationExprMetaModel.anonymousClassBodyPropertyMetaModel = new PropertyMetaModel(objectCreationExprMetaModel, "anonymousClassBody", BodyDeclaration.class, Optional.of(bodyDeclarationMetaModel), true, false, true, false, true);
      objectCreationExprMetaModel.getDeclaredPropertyMetaModels().add(objectCreationExprMetaModel.anonymousClassBodyPropertyMetaModel);
      objectCreationExprMetaModel.argumentsPropertyMetaModel = new PropertyMetaModel(objectCreationExprMetaModel, "arguments", Expression.class, Optional.of(expressionMetaModel), false, false, true, false, false);
      objectCreationExprMetaModel.getDeclaredPropertyMetaModels().add(objectCreationExprMetaModel.argumentsPropertyMetaModel);
      objectCreationExprMetaModel.scopePropertyMetaModel = new PropertyMetaModel(objectCreationExprMetaModel, "scope", Expression.class, Optional.of(expressionMetaModel), true, false, false, false, false);
      objectCreationExprMetaModel.getDeclaredPropertyMetaModels().add(objectCreationExprMetaModel.scopePropertyMetaModel);
      objectCreationExprMetaModel.typePropertyMetaModel = new PropertyMetaModel(objectCreationExprMetaModel, "type", ClassOrInterfaceType.class, Optional.of(classOrInterfaceTypeMetaModel), false, false, false, false, false);
      objectCreationExprMetaModel.getDeclaredPropertyMetaModels().add(objectCreationExprMetaModel.typePropertyMetaModel);
      objectCreationExprMetaModel.typeArgumentsPropertyMetaModel = new PropertyMetaModel(objectCreationExprMetaModel, "typeArguments", Type.class, Optional.of(typeMetaModel), true, false, true, false, false);
      objectCreationExprMetaModel.getDeclaredPropertyMetaModels().add(objectCreationExprMetaModel.typeArgumentsPropertyMetaModel);
      objectCreationExprMetaModel.usingDiamondOperatorPropertyMetaModel = new PropertyMetaModel(objectCreationExprMetaModel, "usingDiamondOperator", Boolean.TYPE, Optional.empty(), false, false, false, false, false);
      objectCreationExprMetaModel.getDerivedPropertyMetaModels().add(objectCreationExprMetaModel.usingDiamondOperatorPropertyMetaModel);
      simpleNameMetaModel.identifierPropertyMetaModel = new PropertyMetaModel(simpleNameMetaModel, "identifier", String.class, Optional.empty(), false, true, false, false, false);
      simpleNameMetaModel.getDeclaredPropertyMetaModels().add(simpleNameMetaModel.identifierPropertyMetaModel);
      singleMemberAnnotationExprMetaModel.memberValuePropertyMetaModel = new PropertyMetaModel(singleMemberAnnotationExprMetaModel, "memberValue", Expression.class, Optional.of(expressionMetaModel), false, false, false, false, false);
      singleMemberAnnotationExprMetaModel.getDeclaredPropertyMetaModels().add(singleMemberAnnotationExprMetaModel.memberValuePropertyMetaModel);
      superExprMetaModel.classExprPropertyMetaModel = new PropertyMetaModel(superExprMetaModel, "classExpr", Expression.class, Optional.of(expressionMetaModel), true, false, false, false, false);
      superExprMetaModel.getDeclaredPropertyMetaModels().add(superExprMetaModel.classExprPropertyMetaModel);
      thisExprMetaModel.classExprPropertyMetaModel = new PropertyMetaModel(thisExprMetaModel, "classExpr", Expression.class, Optional.of(expressionMetaModel), true, false, false, false, false);
      thisExprMetaModel.getDeclaredPropertyMetaModels().add(thisExprMetaModel.classExprPropertyMetaModel);
      typeExprMetaModel.typePropertyMetaModel = new PropertyMetaModel(typeExprMetaModel, "type", Type.class, Optional.of(typeMetaModel), false, false, false, false, false);
      typeExprMetaModel.getDeclaredPropertyMetaModels().add(typeExprMetaModel.typePropertyMetaModel);
      unaryExprMetaModel.expressionPropertyMetaModel = new PropertyMetaModel(unaryExprMetaModel, "expression", Expression.class, Optional.of(expressionMetaModel), false, false, false, false, false);
      unaryExprMetaModel.getDeclaredPropertyMetaModels().add(unaryExprMetaModel.expressionPropertyMetaModel);
      unaryExprMetaModel.operatorPropertyMetaModel = new PropertyMetaModel(unaryExprMetaModel, "operator", UnaryExpr.Operator.class, Optional.empty(), false, false, false, false, false);
      unaryExprMetaModel.getDeclaredPropertyMetaModels().add(unaryExprMetaModel.operatorPropertyMetaModel);
      unaryExprMetaModel.postfixPropertyMetaModel = new PropertyMetaModel(unaryExprMetaModel, "postfix", Boolean.TYPE, Optional.empty(), false, false, false, false, false);
      unaryExprMetaModel.getDerivedPropertyMetaModels().add(unaryExprMetaModel.postfixPropertyMetaModel);
      unaryExprMetaModel.prefixPropertyMetaModel = new PropertyMetaModel(unaryExprMetaModel, "prefix", Boolean.TYPE, Optional.empty(), false, false, false, false, false);
      unaryExprMetaModel.getDerivedPropertyMetaModels().add(unaryExprMetaModel.prefixPropertyMetaModel);
      variableDeclarationExprMetaModel.annotationsPropertyMetaModel = new PropertyMetaModel(variableDeclarationExprMetaModel, "annotations", AnnotationExpr.class, Optional.of(annotationExprMetaModel), false, false, true, false, false);
      variableDeclarationExprMetaModel.getDeclaredPropertyMetaModels().add(variableDeclarationExprMetaModel.annotationsPropertyMetaModel);
      variableDeclarationExprMetaModel.modifiersPropertyMetaModel = new PropertyMetaModel(variableDeclarationExprMetaModel, "modifiers", Modifier.class, Optional.empty(), false, false, false, true, false);
      variableDeclarationExprMetaModel.getDeclaredPropertyMetaModels().add(variableDeclarationExprMetaModel.modifiersPropertyMetaModel);
      variableDeclarationExprMetaModel.variablesPropertyMetaModel = new PropertyMetaModel(variableDeclarationExprMetaModel, "variables", VariableDeclarator.class, Optional.of(variableDeclaratorMetaModel), false, true, true, false, false);
      variableDeclarationExprMetaModel.getDeclaredPropertyMetaModels().add(variableDeclarationExprMetaModel.variablesPropertyMetaModel);
      variableDeclarationExprMetaModel.maximumCommonTypePropertyMetaModel = new PropertyMetaModel(variableDeclarationExprMetaModel, "maximumCommonType", Type.class, Optional.of(typeMetaModel), true, false, false, false, false);
      variableDeclarationExprMetaModel.getDerivedPropertyMetaModels().add(variableDeclarationExprMetaModel.maximumCommonTypePropertyMetaModel);
      importDeclarationMetaModel.isAsteriskPropertyMetaModel = new PropertyMetaModel(importDeclarationMetaModel, "isAsterisk", Boolean.TYPE, Optional.empty(), false, false, false, false, false);
      importDeclarationMetaModel.getDeclaredPropertyMetaModels().add(importDeclarationMetaModel.isAsteriskPropertyMetaModel);
      importDeclarationMetaModel.isStaticPropertyMetaModel = new PropertyMetaModel(importDeclarationMetaModel, "isStatic", Boolean.TYPE, Optional.empty(), false, false, false, false, false);
      importDeclarationMetaModel.getDeclaredPropertyMetaModels().add(importDeclarationMetaModel.isStaticPropertyMetaModel);
      importDeclarationMetaModel.namePropertyMetaModel = new PropertyMetaModel(importDeclarationMetaModel, "name", Name.class, Optional.of(nameMetaModel), false, false, false, false, false);
      importDeclarationMetaModel.getDeclaredPropertyMetaModels().add(importDeclarationMetaModel.namePropertyMetaModel);
      assertStmtMetaModel.checkPropertyMetaModel = new PropertyMetaModel(assertStmtMetaModel, "check", Expression.class, Optional.of(expressionMetaModel), false, false, false, false, false);
      assertStmtMetaModel.getDeclaredPropertyMetaModels().add(assertStmtMetaModel.checkPropertyMetaModel);
      assertStmtMetaModel.messagePropertyMetaModel = new PropertyMetaModel(assertStmtMetaModel, "message", Expression.class, Optional.of(expressionMetaModel), true, false, false, false, false);
      assertStmtMetaModel.getDeclaredPropertyMetaModels().add(assertStmtMetaModel.messagePropertyMetaModel);
      blockStmtMetaModel.statementsPropertyMetaModel = new PropertyMetaModel(blockStmtMetaModel, "statements", Statement.class, Optional.of(statementMetaModel), false, false, true, false, false);
      blockStmtMetaModel.getDeclaredPropertyMetaModels().add(blockStmtMetaModel.statementsPropertyMetaModel);
      breakStmtMetaModel.labelPropertyMetaModel = new PropertyMetaModel(breakStmtMetaModel, "label", SimpleName.class, Optional.of(simpleNameMetaModel), true, false, false, false, false);
      breakStmtMetaModel.getDeclaredPropertyMetaModels().add(breakStmtMetaModel.labelPropertyMetaModel);
      catchClauseMetaModel.bodyPropertyMetaModel = new PropertyMetaModel(catchClauseMetaModel, "body", BlockStmt.class, Optional.of(blockStmtMetaModel), false, false, false, false, false);
      catchClauseMetaModel.getDeclaredPropertyMetaModels().add(catchClauseMetaModel.bodyPropertyMetaModel);
      catchClauseMetaModel.parameterPropertyMetaModel = new PropertyMetaModel(catchClauseMetaModel, "parameter", Parameter.class, Optional.of(parameterMetaModel), false, false, false, false, false);
      catchClauseMetaModel.getDeclaredPropertyMetaModels().add(catchClauseMetaModel.parameterPropertyMetaModel);
      continueStmtMetaModel.labelPropertyMetaModel = new PropertyMetaModel(continueStmtMetaModel, "label", SimpleName.class, Optional.of(simpleNameMetaModel), true, false, false, false, false);
      continueStmtMetaModel.getDeclaredPropertyMetaModels().add(continueStmtMetaModel.labelPropertyMetaModel);
      doStmtMetaModel.bodyPropertyMetaModel = new PropertyMetaModel(doStmtMetaModel, "body", Statement.class, Optional.of(statementMetaModel), false, false, false, false, false);
      doStmtMetaModel.getDeclaredPropertyMetaModels().add(doStmtMetaModel.bodyPropertyMetaModel);
      doStmtMetaModel.conditionPropertyMetaModel = new PropertyMetaModel(doStmtMetaModel, "condition", Expression.class, Optional.of(expressionMetaModel), false, false, false, false, false);
      doStmtMetaModel.getDeclaredPropertyMetaModels().add(doStmtMetaModel.conditionPropertyMetaModel);
      explicitConstructorInvocationStmtMetaModel.argumentsPropertyMetaModel = new PropertyMetaModel(explicitConstructorInvocationStmtMetaModel, "arguments", Expression.class, Optional.of(expressionMetaModel), false, false, true, false, false);
      explicitConstructorInvocationStmtMetaModel.getDeclaredPropertyMetaModels().add(explicitConstructorInvocationStmtMetaModel.argumentsPropertyMetaModel);
      explicitConstructorInvocationStmtMetaModel.expressionPropertyMetaModel = new PropertyMetaModel(explicitConstructorInvocationStmtMetaModel, "expression", Expression.class, Optional.of(expressionMetaModel), true, false, false, false, false);
      explicitConstructorInvocationStmtMetaModel.getDeclaredPropertyMetaModels().add(explicitConstructorInvocationStmtMetaModel.expressionPropertyMetaModel);
      explicitConstructorInvocationStmtMetaModel.isThisPropertyMetaModel = new PropertyMetaModel(explicitConstructorInvocationStmtMetaModel, "isThis", Boolean.TYPE, Optional.empty(), false, false, false, false, false);
      explicitConstructorInvocationStmtMetaModel.getDeclaredPropertyMetaModels().add(explicitConstructorInvocationStmtMetaModel.isThisPropertyMetaModel);
      explicitConstructorInvocationStmtMetaModel.typeArgumentsPropertyMetaModel = new PropertyMetaModel(explicitConstructorInvocationStmtMetaModel, "typeArguments", Type.class, Optional.of(typeMetaModel), true, false, true, false, false);
      explicitConstructorInvocationStmtMetaModel.getDeclaredPropertyMetaModels().add(explicitConstructorInvocationStmtMetaModel.typeArgumentsPropertyMetaModel);
      explicitConstructorInvocationStmtMetaModel.usingDiamondOperatorPropertyMetaModel = new PropertyMetaModel(explicitConstructorInvocationStmtMetaModel, "usingDiamondOperator", Boolean.TYPE, Optional.empty(), false, false, false, false, false);
      explicitConstructorInvocationStmtMetaModel.getDerivedPropertyMetaModels().add(explicitConstructorInvocationStmtMetaModel.usingDiamondOperatorPropertyMetaModel);
      expressionStmtMetaModel.expressionPropertyMetaModel = new PropertyMetaModel(expressionStmtMetaModel, "expression", Expression.class, Optional.of(expressionMetaModel), false, false, false, false, false);
      expressionStmtMetaModel.getDeclaredPropertyMetaModels().add(expressionStmtMetaModel.expressionPropertyMetaModel);
      foreachStmtMetaModel.bodyPropertyMetaModel = new PropertyMetaModel(foreachStmtMetaModel, "body", Statement.class, Optional.of(statementMetaModel), false, false, false, false, false);
      foreachStmtMetaModel.getDeclaredPropertyMetaModels().add(foreachStmtMetaModel.bodyPropertyMetaModel);
      foreachStmtMetaModel.iterablePropertyMetaModel = new PropertyMetaModel(foreachStmtMetaModel, "iterable", Expression.class, Optional.of(expressionMetaModel), false, false, false, false, false);
      foreachStmtMetaModel.getDeclaredPropertyMetaModels().add(foreachStmtMetaModel.iterablePropertyMetaModel);
      foreachStmtMetaModel.variablePropertyMetaModel = new PropertyMetaModel(foreachStmtMetaModel, "variable", VariableDeclarationExpr.class, Optional.of(variableDeclarationExprMetaModel), false, false, false, false, false);
      foreachStmtMetaModel.getDeclaredPropertyMetaModels().add(foreachStmtMetaModel.variablePropertyMetaModel);
      forStmtMetaModel.bodyPropertyMetaModel = new PropertyMetaModel(forStmtMetaModel, "body", Statement.class, Optional.of(statementMetaModel), false, false, false, false, false);
      forStmtMetaModel.getDeclaredPropertyMetaModels().add(forStmtMetaModel.bodyPropertyMetaModel);
      forStmtMetaModel.comparePropertyMetaModel = new PropertyMetaModel(forStmtMetaModel, "compare", Expression.class, Optional.of(expressionMetaModel), true, false, false, false, false);
      forStmtMetaModel.getDeclaredPropertyMetaModels().add(forStmtMetaModel.comparePropertyMetaModel);
      forStmtMetaModel.initializationPropertyMetaModel = new PropertyMetaModel(forStmtMetaModel, "initialization", Expression.class, Optional.of(expressionMetaModel), false, false, true, false, false);
      forStmtMetaModel.getDeclaredPropertyMetaModels().add(forStmtMetaModel.initializationPropertyMetaModel);
      forStmtMetaModel.updatePropertyMetaModel = new PropertyMetaModel(forStmtMetaModel, "update", Expression.class, Optional.of(expressionMetaModel), false, false, true, false, false);
      forStmtMetaModel.getDeclaredPropertyMetaModels().add(forStmtMetaModel.updatePropertyMetaModel);
      ifStmtMetaModel.conditionPropertyMetaModel = new PropertyMetaModel(ifStmtMetaModel, "condition", Expression.class, Optional.of(expressionMetaModel), false, false, false, false, false);
      ifStmtMetaModel.getDeclaredPropertyMetaModels().add(ifStmtMetaModel.conditionPropertyMetaModel);
      ifStmtMetaModel.elseStmtPropertyMetaModel = new PropertyMetaModel(ifStmtMetaModel, "elseStmt", Statement.class, Optional.of(statementMetaModel), true, false, false, false, false);
      ifStmtMetaModel.getDeclaredPropertyMetaModels().add(ifStmtMetaModel.elseStmtPropertyMetaModel);
      ifStmtMetaModel.thenStmtPropertyMetaModel = new PropertyMetaModel(ifStmtMetaModel, "thenStmt", Statement.class, Optional.of(statementMetaModel), false, false, false, false, false);
      ifStmtMetaModel.getDeclaredPropertyMetaModels().add(ifStmtMetaModel.thenStmtPropertyMetaModel);
      ifStmtMetaModel.cascadingIfStmtPropertyMetaModel = new PropertyMetaModel(ifStmtMetaModel, "cascadingIfStmt", Boolean.TYPE, Optional.empty(), false, false, false, false, false);
      ifStmtMetaModel.getDerivedPropertyMetaModels().add(ifStmtMetaModel.cascadingIfStmtPropertyMetaModel);
      ifStmtMetaModel.elseBlockPropertyMetaModel = new PropertyMetaModel(ifStmtMetaModel, "elseBlock", Boolean.TYPE, Optional.empty(), false, false, false, false, false);
      ifStmtMetaModel.getDerivedPropertyMetaModels().add(ifStmtMetaModel.elseBlockPropertyMetaModel);
      ifStmtMetaModel.elseBranchPropertyMetaModel = new PropertyMetaModel(ifStmtMetaModel, "elseBranch", Boolean.TYPE, Optional.empty(), false, false, false, false, false);
      ifStmtMetaModel.getDerivedPropertyMetaModels().add(ifStmtMetaModel.elseBranchPropertyMetaModel);
      ifStmtMetaModel.thenBlockPropertyMetaModel = new PropertyMetaModel(ifStmtMetaModel, "thenBlock", Boolean.TYPE, Optional.empty(), false, false, false, false, false);
      ifStmtMetaModel.getDerivedPropertyMetaModels().add(ifStmtMetaModel.thenBlockPropertyMetaModel);
      labeledStmtMetaModel.labelPropertyMetaModel = new PropertyMetaModel(labeledStmtMetaModel, "label", SimpleName.class, Optional.of(simpleNameMetaModel), false, false, false, false, false);
      labeledStmtMetaModel.getDeclaredPropertyMetaModels().add(labeledStmtMetaModel.labelPropertyMetaModel);
      labeledStmtMetaModel.statementPropertyMetaModel = new PropertyMetaModel(labeledStmtMetaModel, "statement", Statement.class, Optional.of(statementMetaModel), false, false, false, false, false);
      labeledStmtMetaModel.getDeclaredPropertyMetaModels().add(labeledStmtMetaModel.statementPropertyMetaModel);
      returnStmtMetaModel.expressionPropertyMetaModel = new PropertyMetaModel(returnStmtMetaModel, "expression", Expression.class, Optional.of(expressionMetaModel), true, false, false, false, false);
      returnStmtMetaModel.getDeclaredPropertyMetaModels().add(returnStmtMetaModel.expressionPropertyMetaModel);
      switchEntryStmtMetaModel.labelPropertyMetaModel = new PropertyMetaModel(switchEntryStmtMetaModel, "label", Expression.class, Optional.of(expressionMetaModel), true, false, false, false, false);
      switchEntryStmtMetaModel.getDeclaredPropertyMetaModels().add(switchEntryStmtMetaModel.labelPropertyMetaModel);
      switchEntryStmtMetaModel.statementsPropertyMetaModel = new PropertyMetaModel(switchEntryStmtMetaModel, "statements", Statement.class, Optional.of(statementMetaModel), false, false, true, false, false);
      switchEntryStmtMetaModel.getDeclaredPropertyMetaModels().add(switchEntryStmtMetaModel.statementsPropertyMetaModel);
      switchStmtMetaModel.entriesPropertyMetaModel = new PropertyMetaModel(switchStmtMetaModel, "entries", SwitchEntryStmt.class, Optional.of(switchEntryStmtMetaModel), false, false, true, false, false);
      switchStmtMetaModel.getDeclaredPropertyMetaModels().add(switchStmtMetaModel.entriesPropertyMetaModel);
      switchStmtMetaModel.selectorPropertyMetaModel = new PropertyMetaModel(switchStmtMetaModel, "selector", Expression.class, Optional.of(expressionMetaModel), false, false, false, false, false);
      switchStmtMetaModel.getDeclaredPropertyMetaModels().add(switchStmtMetaModel.selectorPropertyMetaModel);
      synchronizedStmtMetaModel.bodyPropertyMetaModel = new PropertyMetaModel(synchronizedStmtMetaModel, "body", BlockStmt.class, Optional.of(blockStmtMetaModel), false, false, false, false, false);
      synchronizedStmtMetaModel.getDeclaredPropertyMetaModels().add(synchronizedStmtMetaModel.bodyPropertyMetaModel);
      synchronizedStmtMetaModel.expressionPropertyMetaModel = new PropertyMetaModel(synchronizedStmtMetaModel, "expression", Expression.class, Optional.of(expressionMetaModel), false, false, false, false, false);
      synchronizedStmtMetaModel.getDeclaredPropertyMetaModels().add(synchronizedStmtMetaModel.expressionPropertyMetaModel);
      throwStmtMetaModel.expressionPropertyMetaModel = new PropertyMetaModel(throwStmtMetaModel, "expression", Expression.class, Optional.of(expressionMetaModel), false, false, false, false, false);
      throwStmtMetaModel.getDeclaredPropertyMetaModels().add(throwStmtMetaModel.expressionPropertyMetaModel);
      tryStmtMetaModel.catchClausesPropertyMetaModel = new PropertyMetaModel(tryStmtMetaModel, "catchClauses", CatchClause.class, Optional.of(catchClauseMetaModel), false, false, true, false, false);
      tryStmtMetaModel.getDeclaredPropertyMetaModels().add(tryStmtMetaModel.catchClausesPropertyMetaModel);
      tryStmtMetaModel.finallyBlockPropertyMetaModel = new PropertyMetaModel(tryStmtMetaModel, "finallyBlock", BlockStmt.class, Optional.of(blockStmtMetaModel), true, false, false, false, false);
      tryStmtMetaModel.getDeclaredPropertyMetaModels().add(tryStmtMetaModel.finallyBlockPropertyMetaModel);
      tryStmtMetaModel.resourcesPropertyMetaModel = new PropertyMetaModel(tryStmtMetaModel, "resources", Expression.class, Optional.of(expressionMetaModel), false, false, true, false, false);
      tryStmtMetaModel.getDeclaredPropertyMetaModels().add(tryStmtMetaModel.resourcesPropertyMetaModel);
      tryStmtMetaModel.tryBlockPropertyMetaModel = new PropertyMetaModel(tryStmtMetaModel, "tryBlock", BlockStmt.class, Optional.of(blockStmtMetaModel), false, false, false, false, false);
      tryStmtMetaModel.getDeclaredPropertyMetaModels().add(tryStmtMetaModel.tryBlockPropertyMetaModel);
      localClassDeclarationStmtMetaModel.classDeclarationPropertyMetaModel = new PropertyMetaModel(localClassDeclarationStmtMetaModel, "classDeclaration", ClassOrInterfaceDeclaration.class, Optional.of(classOrInterfaceDeclarationMetaModel), false, false, false, false, false);
      localClassDeclarationStmtMetaModel.getDeclaredPropertyMetaModels().add(localClassDeclarationStmtMetaModel.classDeclarationPropertyMetaModel);
      whileStmtMetaModel.bodyPropertyMetaModel = new PropertyMetaModel(whileStmtMetaModel, "body", Statement.class, Optional.of(statementMetaModel), false, false, false, false, false);
      whileStmtMetaModel.getDeclaredPropertyMetaModels().add(whileStmtMetaModel.bodyPropertyMetaModel);
      whileStmtMetaModel.conditionPropertyMetaModel = new PropertyMetaModel(whileStmtMetaModel, "condition", Expression.class, Optional.of(expressionMetaModel), false, false, false, false, false);
      whileStmtMetaModel.getDeclaredPropertyMetaModels().add(whileStmtMetaModel.conditionPropertyMetaModel);
      arrayTypeMetaModel.componentTypePropertyMetaModel = new PropertyMetaModel(arrayTypeMetaModel, "componentType", Type.class, Optional.of(typeMetaModel), false, false, false, false, false);
      arrayTypeMetaModel.getDeclaredPropertyMetaModels().add(arrayTypeMetaModel.componentTypePropertyMetaModel);
      arrayTypeMetaModel.originPropertyMetaModel = new PropertyMetaModel(arrayTypeMetaModel, "origin", ArrayType.Origin.class, Optional.empty(), false, false, false, false, false);
      arrayTypeMetaModel.getDeclaredPropertyMetaModels().add(arrayTypeMetaModel.originPropertyMetaModel);
      classOrInterfaceTypeMetaModel.namePropertyMetaModel = new PropertyMetaModel(classOrInterfaceTypeMetaModel, "name", SimpleName.class, Optional.of(simpleNameMetaModel), false, false, false, false, false);
      classOrInterfaceTypeMetaModel.getDeclaredPropertyMetaModels().add(classOrInterfaceTypeMetaModel.namePropertyMetaModel);
      classOrInterfaceTypeMetaModel.scopePropertyMetaModel = new PropertyMetaModel(classOrInterfaceTypeMetaModel, "scope", ClassOrInterfaceType.class, Optional.of(classOrInterfaceTypeMetaModel), true, false, false, false, false);
      classOrInterfaceTypeMetaModel.getDeclaredPropertyMetaModels().add(classOrInterfaceTypeMetaModel.scopePropertyMetaModel);
      classOrInterfaceTypeMetaModel.typeArgumentsPropertyMetaModel = new PropertyMetaModel(classOrInterfaceTypeMetaModel, "typeArguments", Type.class, Optional.of(typeMetaModel), true, false, true, false, false);
      classOrInterfaceTypeMetaModel.getDeclaredPropertyMetaModels().add(classOrInterfaceTypeMetaModel.typeArgumentsPropertyMetaModel);
      classOrInterfaceTypeMetaModel.usingDiamondOperatorPropertyMetaModel = new PropertyMetaModel(classOrInterfaceTypeMetaModel, "usingDiamondOperator", Boolean.TYPE, Optional.empty(), false, false, false, false, false);
      classOrInterfaceTypeMetaModel.getDerivedPropertyMetaModels().add(classOrInterfaceTypeMetaModel.usingDiamondOperatorPropertyMetaModel);
      intersectionTypeMetaModel.elementsPropertyMetaModel = new PropertyMetaModel(intersectionTypeMetaModel, "elements", ReferenceType.class, Optional.of(referenceTypeMetaModel), false, true, true, false, false);
      intersectionTypeMetaModel.getDeclaredPropertyMetaModels().add(intersectionTypeMetaModel.elementsPropertyMetaModel);
      primitiveTypeMetaModel.typePropertyMetaModel = new PropertyMetaModel(primitiveTypeMetaModel, "type", PrimitiveType.Primitive.class, Optional.empty(), false, false, false, false, false);
      primitiveTypeMetaModel.getDeclaredPropertyMetaModels().add(primitiveTypeMetaModel.typePropertyMetaModel);
      typeParameterMetaModel.namePropertyMetaModel = new PropertyMetaModel(typeParameterMetaModel, "name", SimpleName.class, Optional.of(simpleNameMetaModel), false, false, false, false, false);
      typeParameterMetaModel.getDeclaredPropertyMetaModels().add(typeParameterMetaModel.namePropertyMetaModel);
      typeParameterMetaModel.typeBoundPropertyMetaModel = new PropertyMetaModel(typeParameterMetaModel, "typeBound", ClassOrInterfaceType.class, Optional.of(classOrInterfaceTypeMetaModel), false, false, true, false, false);
      typeParameterMetaModel.getDeclaredPropertyMetaModels().add(typeParameterMetaModel.typeBoundPropertyMetaModel);
      unionTypeMetaModel.elementsPropertyMetaModel = new PropertyMetaModel(unionTypeMetaModel, "elements", ReferenceType.class, Optional.of(referenceTypeMetaModel), false, true, true, false, false);
      unionTypeMetaModel.getDeclaredPropertyMetaModels().add(unionTypeMetaModel.elementsPropertyMetaModel);
      wildcardTypeMetaModel.extendedTypePropertyMetaModel = new PropertyMetaModel(wildcardTypeMetaModel, "extendedType", ReferenceType.class, Optional.of(referenceTypeMetaModel), true, false, false, false, false);
      wildcardTypeMetaModel.getDeclaredPropertyMetaModels().add(wildcardTypeMetaModel.extendedTypePropertyMetaModel);
      wildcardTypeMetaModel.superTypePropertyMetaModel = new PropertyMetaModel(wildcardTypeMetaModel, "superType", ReferenceType.class, Optional.of(referenceTypeMetaModel), true, false, false, false, false);
      wildcardTypeMetaModel.getDeclaredPropertyMetaModels().add(wildcardTypeMetaModel.superTypePropertyMetaModel);
      moduleRequiresStmtMetaModel.modifiersPropertyMetaModel = new PropertyMetaModel(moduleRequiresStmtMetaModel, "modifiers", Modifier.class, Optional.empty(), false, false, false, true, false);
      moduleRequiresStmtMetaModel.getDeclaredPropertyMetaModels().add(moduleRequiresStmtMetaModel.modifiersPropertyMetaModel);
      moduleRequiresStmtMetaModel.namePropertyMetaModel = new PropertyMetaModel(moduleRequiresStmtMetaModel, "name", Name.class, Optional.of(nameMetaModel), false, false, false, false, false);
      moduleRequiresStmtMetaModel.getDeclaredPropertyMetaModels().add(moduleRequiresStmtMetaModel.namePropertyMetaModel);
      moduleExportsStmtMetaModel.moduleNamesPropertyMetaModel = new PropertyMetaModel(moduleExportsStmtMetaModel, "moduleNames", Name.class, Optional.of(nameMetaModel), false, false, true, false, false);
      moduleExportsStmtMetaModel.getDeclaredPropertyMetaModels().add(moduleExportsStmtMetaModel.moduleNamesPropertyMetaModel);
      moduleExportsStmtMetaModel.namePropertyMetaModel = new PropertyMetaModel(moduleExportsStmtMetaModel, "name", Name.class, Optional.of(nameMetaModel), false, false, false, false, false);
      moduleExportsStmtMetaModel.getDeclaredPropertyMetaModels().add(moduleExportsStmtMetaModel.namePropertyMetaModel);
      moduleProvidesStmtMetaModel.namePropertyMetaModel = new PropertyMetaModel(moduleProvidesStmtMetaModel, "name", Name.class, Optional.of(nameMetaModel), false, false, false, false, false);
      moduleProvidesStmtMetaModel.getDeclaredPropertyMetaModels().add(moduleProvidesStmtMetaModel.namePropertyMetaModel);
      moduleProvidesStmtMetaModel.withPropertyMetaModel = new PropertyMetaModel(moduleProvidesStmtMetaModel, "with", Name.class, Optional.of(nameMetaModel), false, false, true, false, false);
      moduleProvidesStmtMetaModel.getDeclaredPropertyMetaModels().add(moduleProvidesStmtMetaModel.withPropertyMetaModel);
      moduleUsesStmtMetaModel.namePropertyMetaModel = new PropertyMetaModel(moduleUsesStmtMetaModel, "name", Name.class, Optional.of(nameMetaModel), false, false, false, false, false);
      moduleUsesStmtMetaModel.getDeclaredPropertyMetaModels().add(moduleUsesStmtMetaModel.namePropertyMetaModel);
      moduleOpensStmtMetaModel.moduleNamesPropertyMetaModel = new PropertyMetaModel(moduleOpensStmtMetaModel, "moduleNames", Name.class, Optional.of(nameMetaModel), false, false, true, false, false);
      moduleOpensStmtMetaModel.getDeclaredPropertyMetaModels().add(moduleOpensStmtMetaModel.moduleNamesPropertyMetaModel);
      moduleOpensStmtMetaModel.namePropertyMetaModel = new PropertyMetaModel(moduleOpensStmtMetaModel, "name", Name.class, Optional.of(nameMetaModel), false, false, false, false, false);
      moduleOpensStmtMetaModel.getDeclaredPropertyMetaModels().add(moduleOpensStmtMetaModel.namePropertyMetaModel);
   }

   public static Optional<BaseNodeMetaModel> getNodeMetaModel(Class<?> c) {
      Iterator var1 = nodeMetaModels.iterator();

      BaseNodeMetaModel nodeMetaModel;
      do {
         if (!var1.hasNext()) {
            return Optional.empty();
         }

         nodeMetaModel = (BaseNodeMetaModel)var1.next();
      } while(!nodeMetaModel.getTypeName().equals(c.getSimpleName()));

      return Optional.of(nodeMetaModel);
   }

   static {
      bodyDeclarationMetaModel = new BodyDeclarationMetaModel(Optional.of(nodeMetaModel));
      callableDeclarationMetaModel = new CallableDeclarationMetaModel(Optional.of(bodyDeclarationMetaModel));
      statementMetaModel = new StatementMetaModel(Optional.of(nodeMetaModel));
      expressionMetaModel = new ExpressionMetaModel(Optional.of(nodeMetaModel));
      typeMetaModel = new TypeMetaModel(Optional.of(nodeMetaModel));
      annotationExprMetaModel = new AnnotationExprMetaModel(Optional.of(expressionMetaModel));
      typeDeclarationMetaModel = new TypeDeclarationMetaModel(Optional.of(bodyDeclarationMetaModel));
      referenceTypeMetaModel = new ReferenceTypeMetaModel(Optional.of(typeMetaModel));
      literalExprMetaModel = new LiteralExprMetaModel(Optional.of(expressionMetaModel));
      literalStringValueExprMetaModel = new LiteralStringValueExprMetaModel(Optional.of(literalExprMetaModel));
      stringLiteralExprMetaModel = new StringLiteralExprMetaModel(Optional.of(literalStringValueExprMetaModel));
      moduleDeclarationMetaModel = new ModuleDeclarationMetaModel(Optional.of(nodeMetaModel));
      moduleStmtMetaModel = new ModuleStmtMetaModel(Optional.of(nodeMetaModel));
      arrayCreationLevelMetaModel = new ArrayCreationLevelMetaModel(Optional.of(nodeMetaModel));
      compilationUnitMetaModel = new CompilationUnitMetaModel(Optional.of(nodeMetaModel));
      packageDeclarationMetaModel = new PackageDeclarationMetaModel(Optional.of(nodeMetaModel));
      annotationDeclarationMetaModel = new AnnotationDeclarationMetaModel(Optional.of(typeDeclarationMetaModel));
      annotationMemberDeclarationMetaModel = new AnnotationMemberDeclarationMetaModel(Optional.of(bodyDeclarationMetaModel));
      classOrInterfaceDeclarationMetaModel = new ClassOrInterfaceDeclarationMetaModel(Optional.of(typeDeclarationMetaModel));
      constructorDeclarationMetaModel = new ConstructorDeclarationMetaModel(Optional.of(callableDeclarationMetaModel));
      enumConstantDeclarationMetaModel = new EnumConstantDeclarationMetaModel(Optional.of(bodyDeclarationMetaModel));
      enumDeclarationMetaModel = new EnumDeclarationMetaModel(Optional.of(typeDeclarationMetaModel));
      fieldDeclarationMetaModel = new FieldDeclarationMetaModel(Optional.of(bodyDeclarationMetaModel));
      initializerDeclarationMetaModel = new InitializerDeclarationMetaModel(Optional.of(bodyDeclarationMetaModel));
      methodDeclarationMetaModel = new MethodDeclarationMetaModel(Optional.of(callableDeclarationMetaModel));
      parameterMetaModel = new ParameterMetaModel(Optional.of(nodeMetaModel));
      receiverParameterMetaModel = new ReceiverParameterMetaModel(Optional.of(nodeMetaModel));
      variableDeclaratorMetaModel = new VariableDeclaratorMetaModel(Optional.of(nodeMetaModel));
      commentMetaModel = new CommentMetaModel(Optional.of(nodeMetaModel));
      blockCommentMetaModel = new BlockCommentMetaModel(Optional.of(commentMetaModel));
      javadocCommentMetaModel = new JavadocCommentMetaModel(Optional.of(commentMetaModel));
      lineCommentMetaModel = new LineCommentMetaModel(Optional.of(commentMetaModel));
      arrayAccessExprMetaModel = new ArrayAccessExprMetaModel(Optional.of(expressionMetaModel));
      arrayCreationExprMetaModel = new ArrayCreationExprMetaModel(Optional.of(expressionMetaModel));
      arrayInitializerExprMetaModel = new ArrayInitializerExprMetaModel(Optional.of(expressionMetaModel));
      assignExprMetaModel = new AssignExprMetaModel(Optional.of(expressionMetaModel));
      binaryExprMetaModel = new BinaryExprMetaModel(Optional.of(expressionMetaModel));
      booleanLiteralExprMetaModel = new BooleanLiteralExprMetaModel(Optional.of(literalExprMetaModel));
      castExprMetaModel = new CastExprMetaModel(Optional.of(expressionMetaModel));
      charLiteralExprMetaModel = new CharLiteralExprMetaModel(Optional.of(literalStringValueExprMetaModel));
      classExprMetaModel = new ClassExprMetaModel(Optional.of(expressionMetaModel));
      conditionalExprMetaModel = new ConditionalExprMetaModel(Optional.of(expressionMetaModel));
      doubleLiteralExprMetaModel = new DoubleLiteralExprMetaModel(Optional.of(literalStringValueExprMetaModel));
      enclosedExprMetaModel = new EnclosedExprMetaModel(Optional.of(expressionMetaModel));
      fieldAccessExprMetaModel = new FieldAccessExprMetaModel(Optional.of(expressionMetaModel));
      instanceOfExprMetaModel = new InstanceOfExprMetaModel(Optional.of(expressionMetaModel));
      integerLiteralExprMetaModel = new IntegerLiteralExprMetaModel(Optional.of(literalStringValueExprMetaModel));
      lambdaExprMetaModel = new LambdaExprMetaModel(Optional.of(expressionMetaModel));
      longLiteralExprMetaModel = new LongLiteralExprMetaModel(Optional.of(literalStringValueExprMetaModel));
      markerAnnotationExprMetaModel = new MarkerAnnotationExprMetaModel(Optional.of(annotationExprMetaModel));
      memberValuePairMetaModel = new MemberValuePairMetaModel(Optional.of(nodeMetaModel));
      methodCallExprMetaModel = new MethodCallExprMetaModel(Optional.of(expressionMetaModel));
      methodReferenceExprMetaModel = new MethodReferenceExprMetaModel(Optional.of(expressionMetaModel));
      nameExprMetaModel = new NameExprMetaModel(Optional.of(expressionMetaModel));
      nameMetaModel = new NameMetaModel(Optional.of(nodeMetaModel));
      normalAnnotationExprMetaModel = new NormalAnnotationExprMetaModel(Optional.of(annotationExprMetaModel));
      nullLiteralExprMetaModel = new NullLiteralExprMetaModel(Optional.of(literalExprMetaModel));
      objectCreationExprMetaModel = new ObjectCreationExprMetaModel(Optional.of(expressionMetaModel));
      simpleNameMetaModel = new SimpleNameMetaModel(Optional.of(nodeMetaModel));
      singleMemberAnnotationExprMetaModel = new SingleMemberAnnotationExprMetaModel(Optional.of(annotationExprMetaModel));
      superExprMetaModel = new SuperExprMetaModel(Optional.of(expressionMetaModel));
      thisExprMetaModel = new ThisExprMetaModel(Optional.of(expressionMetaModel));
      typeExprMetaModel = new TypeExprMetaModel(Optional.of(expressionMetaModel));
      unaryExprMetaModel = new UnaryExprMetaModel(Optional.of(expressionMetaModel));
      variableDeclarationExprMetaModel = new VariableDeclarationExprMetaModel(Optional.of(expressionMetaModel));
      importDeclarationMetaModel = new ImportDeclarationMetaModel(Optional.of(nodeMetaModel));
      assertStmtMetaModel = new AssertStmtMetaModel(Optional.of(statementMetaModel));
      blockStmtMetaModel = new BlockStmtMetaModel(Optional.of(statementMetaModel));
      breakStmtMetaModel = new BreakStmtMetaModel(Optional.of(statementMetaModel));
      catchClauseMetaModel = new CatchClauseMetaModel(Optional.of(nodeMetaModel));
      continueStmtMetaModel = new ContinueStmtMetaModel(Optional.of(statementMetaModel));
      doStmtMetaModel = new DoStmtMetaModel(Optional.of(statementMetaModel));
      emptyStmtMetaModel = new EmptyStmtMetaModel(Optional.of(statementMetaModel));
      explicitConstructorInvocationStmtMetaModel = new ExplicitConstructorInvocationStmtMetaModel(Optional.of(statementMetaModel));
      expressionStmtMetaModel = new ExpressionStmtMetaModel(Optional.of(statementMetaModel));
      foreachStmtMetaModel = new ForeachStmtMetaModel(Optional.of(statementMetaModel));
      forStmtMetaModel = new ForStmtMetaModel(Optional.of(statementMetaModel));
      ifStmtMetaModel = new IfStmtMetaModel(Optional.of(statementMetaModel));
      labeledStmtMetaModel = new LabeledStmtMetaModel(Optional.of(statementMetaModel));
      returnStmtMetaModel = new ReturnStmtMetaModel(Optional.of(statementMetaModel));
      switchEntryStmtMetaModel = new SwitchEntryStmtMetaModel(Optional.of(statementMetaModel));
      switchStmtMetaModel = new SwitchStmtMetaModel(Optional.of(statementMetaModel));
      synchronizedStmtMetaModel = new SynchronizedStmtMetaModel(Optional.of(statementMetaModel));
      throwStmtMetaModel = new ThrowStmtMetaModel(Optional.of(statementMetaModel));
      tryStmtMetaModel = new TryStmtMetaModel(Optional.of(statementMetaModel));
      localClassDeclarationStmtMetaModel = new LocalClassDeclarationStmtMetaModel(Optional.of(statementMetaModel));
      whileStmtMetaModel = new WhileStmtMetaModel(Optional.of(statementMetaModel));
      unparsableStmtMetaModel = new UnparsableStmtMetaModel(Optional.of(statementMetaModel));
      arrayTypeMetaModel = new ArrayTypeMetaModel(Optional.of(referenceTypeMetaModel));
      classOrInterfaceTypeMetaModel = new ClassOrInterfaceTypeMetaModel(Optional.of(referenceTypeMetaModel));
      intersectionTypeMetaModel = new IntersectionTypeMetaModel(Optional.of(typeMetaModel));
      primitiveTypeMetaModel = new PrimitiveTypeMetaModel(Optional.of(typeMetaModel));
      typeParameterMetaModel = new TypeParameterMetaModel(Optional.of(referenceTypeMetaModel));
      unionTypeMetaModel = new UnionTypeMetaModel(Optional.of(typeMetaModel));
      unknownTypeMetaModel = new UnknownTypeMetaModel(Optional.of(typeMetaModel));
      voidTypeMetaModel = new VoidTypeMetaModel(Optional.of(typeMetaModel));
      wildcardTypeMetaModel = new WildcardTypeMetaModel(Optional.of(typeMetaModel));
      varTypeMetaModel = new VarTypeMetaModel(Optional.of(typeMetaModel));
      moduleRequiresStmtMetaModel = new ModuleRequiresStmtMetaModel(Optional.of(moduleStmtMetaModel));
      moduleExportsStmtMetaModel = new ModuleExportsStmtMetaModel(Optional.of(moduleStmtMetaModel));
      moduleProvidesStmtMetaModel = new ModuleProvidesStmtMetaModel(Optional.of(moduleStmtMetaModel));
      moduleUsesStmtMetaModel = new ModuleUsesStmtMetaModel(Optional.of(moduleStmtMetaModel));
      moduleOpensStmtMetaModel = new ModuleOpensStmtMetaModel(Optional.of(moduleStmtMetaModel));
      initializeNodeMetaModels();
      initializePropertyMetaModels();
      initializeConstructorParameters();
   }
}
