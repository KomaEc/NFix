package scm.autogen;

import java.io.PrintStream;
import java.util.Date;

class typeinfo {
   String scm_name;
   String java_name;
   String[] java_inp_type;

   typeinfo(String sname, String jname, String[] jit) {
      this.scm_name = sname;
      this.java_name = jname;
      this.java_inp_type = jit;
   }

   void write(PrintStream out) {
      out.println("//Autogenerated by typeinfo on " + new Date());
      out.println("class scm" + this.java_name + " extends Procedure implements Obj");
      out.println("{");
      out.println("  Obj apply(Cell args, Env f)\n  throws Exception\n  {");
      out.println("    Cell t = args;");
      out.println("    Obj  tmp;");

      int i;
      for(i = 0; i < this.java_inp_type.length; ++i) {
         out.println("    if (t == null) { throw new SchemeError(\"" + this.scm_name + " expects " + this.java_inp_type.length + " arguments\"); }");
         out.println("    tmp = (t.car!=null)?t.car.eval(f):null; t = t.cdr;");
         byte mode;
         if (this.java_inp_type[i].equals("String")) {
            mode = 0;
         } else if (!this.java_inp_type[i].equals("short") && !this.java_inp_type[i].equals("int") && !this.java_inp_type[i].equals("long")) {
            if (!this.java_inp_type[i].equals("float") && !this.java_inp_type[i].equals("double")) {
               mode = 2;
            } else {
               mode = 3;
            }
         } else {
            mode = 1;
         }

         switch(mode) {
         case 0:
            out.println("    if ((tmp != null) && !(tmp instanceof Selfrep)) { throw new SchemeError(\"" + this.scm_name + " expects a String for arg #" + (i + 1) + "\"); }");
            out.println("    String arg" + i + " = (tmp!=null)?((Selfrep)tmp).val:null;");
            break;
         case 1:
         case 3:
            out.println("    if (!(tmp instanceof Selfrep)) { throw new SchemeError(\"" + this.scm_name + " expects a number for arg #" + (i + 1) + "\"); }");
            if (mode == 1) {
               out.println("    " + this.java_inp_type[i] + " arg" + i + " = (" + this.java_inp_type[i] + ")(Math.round(((Selfrep)tmp).num));");
            } else {
               out.println("    " + this.java_inp_type[i] + " arg" + i + " = (" + this.java_inp_type[i] + ")(((Selfrep)tmp).num);");
            }
            break;
         case 2:
         default:
            out.println("    if ((tmp != null) && !(tmp instanceof primnode)) { throw new SchemeError(\"" + this.scm_name + " expects a " + this.java_inp_type[i] + " for arg #" + (i + 1) + "\"); }");
            out.println("    if ((tmp != null) && !((((primnode)tmp).val) instanceof " + this.java_inp_type[i] + ")) { throw new SchemeError(\"" + this.scm_name + " expects a " + this.java_inp_type[i] + " for arg #" + (i + 1) + "\"); }");
            out.println("    " + this.java_inp_type[i] + " arg" + i + " = (tmp != null)?(" + this.java_inp_type[i] + ")(((primnode)tmp).val):null;");
         }
      }

      out.print("    return new primnode(new " + this.java_name + "(");
      if (this.java_inp_type.length != 0) {
         out.print("arg0");
      }

      for(i = 1; i < this.java_inp_type.length; ++i) {
         out.print(", arg" + i);
      }

      out.println("));\n  }");
      out.println("  public String toString()");
      out.println("  { return (\"<#" + this.scm_name + "#>\"); }");
      out.println("}");
   }
}
